// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.
// Copyright (c) Topicus Security B.V.
// SPDX-License-Identifier: APSL-2.0

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"golang.org/x/exp/maps"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tkhToTFObjectRSROAuditInfoRO(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditInfoAttrTypesRSRORecurse
	} else {
		attrs = auditInfoAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesRSRecurse
	} else {
		attrs = generatedSecretAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGeneratedSecretRO(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesRSRORecurse
	} else {
		attrs = generatedSecretAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesRSRecurse
	} else {
		attrs = linkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROLinkableRO(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesRSRORecurse
	} else {
		attrs = linkableAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesRSRecurse
	} else {
		attrs = nonLinkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRONonLinkableRO(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesRSRORecurse
	} else {
		attrs = nonLinkableAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesRSRecurse
	} else {
		attrs = restLinkAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRORestLinkRO(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesRSRORecurse
	} else {
		attrs = restLinkAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuditGroupAuditRO(recurse bool, tkh keyhubmodel.AuditGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditGroupAuditAttrTypesRSRORecurse
	} else {
		attrs = auditGroupAuditAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROAuditGroupAudit_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.AuditGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuditGroupAuditAccountRO(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	{
		elemType := attrs["nested_groups"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetNestedGroups(), func(tkh keyhubmodel.AuditNestedGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuditNestedGroupAuditRO(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuditGroupAuditAccountRO(recurse bool, tkh keyhubmodel.AuditGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditGroupAuditAccountAttrTypesRSRORecurse
	} else {
		attrs = auditGroupAuditAccountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuditGroupAuditLinkableWrapperRO(recurse bool, tkh keyhubmodel.AuditGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditGroupAuditLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = auditGroupAuditLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuditGroupAuditRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuditGroupAudit_additionalObjectsRO(recurse bool, tkh keyhubmodel.AuditGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditGroupAudit_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = auditGroupAudit_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuditNestedGroupAuditRO(recurse bool, tkh keyhubmodel.AuditNestedGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditNestedGroupAuditAttrTypesRSRORecurse
	} else {
		attrs = auditNestedGroupAuditAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["group_uuid"] = types.StringPointerValue(tkh.GetGroupUuid())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = authAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuthAccountPrimerRO(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesRSRORecurse
	} else {
		attrs = authAccountPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesRSRecurse
	} else {
		attrs = authPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROAuthPermissionRO(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesRSRORecurse
	} else {
		attrs = authPermissionAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesRSRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	obj["certificate_data"] = byteArrayToTfBase64(tkh.GetCertificateData())
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesRSRORecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	obj["certificate_data"] = byteArrayToTfBase64(tkh.GetCertificateData())
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientApplicationVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientApplicationVaultVaultRecordAttrTypesRSRecurse
	} else {
		attrs = clientApplicationVaultVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["client_application_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientLdapClientable)
		val, d := tkhToTFObjectRSClientLdapClient(false, tkhCast)
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientOAuth2Clientable)
		val, d := tkhToTFObjectRSClientOAuth2Client(false, tkhCast)
		diags.Append(d...)
		obj["oauth2_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientSaml2Clientable)
		val, d := tkhToTFObjectRSClientSaml2Client(false, tkhCast)
		diags.Append(d...)
		obj["saml2_client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientClientApplicationRO(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesRSRORecurse
	} else {
		attrs = clientClientApplicationAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROClientClientApplication_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientLdapClientable)
		val, d := tkhToTFObjectRSROClientLdapClientRO(false, tkhCast)
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientOAuth2Clientable)
		val, d := tkhToTFObjectRSROClientOAuth2ClientRO(false, tkhCast)
		diags.Append(d...)
		obj["oauth2_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientSaml2Clientable)
		val, d := tkhToTFObjectRSROClientSaml2ClientRO(false, tkhCast)
		diags.Append(d...)
		obj["saml2_client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientClientApplicationLinkableWrapperRO(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROClientClientApplicationRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientClientApplicationPrimerRO(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesRSRORecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSProfileAccessProfileClientLinkableWrapperWithCount(recurse, tkh.GetAccessprofileclients())
		diags.Append(d...)
		obj["accessprofileclients"] = getItemsAttr(val, attrs["accessprofileclients"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSGroupGroupClientLinkableWrapperWithCount(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = getItemsAttr(val, attrs["groupclients"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupLinkableWrapperRO(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = getItemsAttr(val, attrs["groups"])
	}
	{
		val, d := tkhToTFObjectRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(recurse, tkh.GetOrganizationalUnits())
		diags.Append(d...)
		obj["organizational_units"] = getItemsAttr(val, attrs["organizational_units"])
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientClientApplication_additionalObjectsRO(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileClientLinkableWrapperWithCountRO(recurse, tkh.GetAccessprofileclients())
		diags.Append(d...)
		obj["accessprofileclients"] = getItemsAttr(val, attrs["accessprofileclients"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSROGroupGroupClientLinkableWrapperWithCountRO(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = getItemsAttr(val, attrs["groupclients"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupLinkableWrapperRO(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = getItemsAttr(val, attrs["groups"])
	}
	{
		val, d := tkhToTFObjectRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(recurse, tkh.GetOrganizationalUnits())
		diags.Append(d...)
		obj["organizational_units"] = getItemsAttr(val, attrs["organizational_units"])
	}
	{
		val, d := tkhToTFObjectRSROGeneratedSecretRO(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSROLaunchpadSsoApplicationLaunchpadTileRO(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesRSRecurse
	} else {
		attrs = clientLdapClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientLdapClientRO(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesRSRORecurse
	} else {
		attrs = clientLdapClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		elemType := attrs["attributes"].(types.MapType).ElemType
		val, d := mapToTF(elemType, tkh.GetAttributes().GetAdditionalData(), func(tkh any, diags *diag.Diagnostics) attr.Value {
			return types.StringPointerValue(tkh.(*string))
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_uri"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["for_identity_source"] = types.BoolPointerValue(tkh.GetForIdentitySource())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_uri"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["profile"] = stringerToTF(tkh.GetProfile())
	obj["resource_uris"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientOAuth2ClientRO(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesRSRORecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		elemType := attrs["attributes"].(types.MapType).ElemType
		val, d := mapToTF(elemType, tkh.GetAttributes().GetAdditionalData(), func(tkh any, diags *diag.Diagnostics) attr.Value {
			return types.StringPointerValue(tkh.(*string))
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_uri"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["for_identity_source"] = types.BoolPointerValue(tkh.GetForIdentitySource())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_uri"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["profile"] = stringerToTF(tkh.GetProfile())
	obj["resource_uris"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientOAuth2ClientPermissionRO(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesRSRORecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROClientOAuth2ClientPermission_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())
	obj["client_uuid"] = withUuidToTF(tkh.GetClient())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientOAuth2ClientPermissionWithClientRO(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRSRORecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROClientOAuth2ClientPermission_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectRSROClientOAuth2ClientRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROClientOAuth2ClientPermissionWithClientRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientOAuth2ClientPermission_additionalObjectsRO(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesRSRecurse
	} else {
		attrs = clientSaml2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.MapType).ElemType
		val, d := mapToTF(elemType, tkh.GetAttributes().GetAdditionalData(), func(tkh any, diags *diag.Diagnostics) attr.Value {
			return types.StringPointerValue(tkh.(*string))
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROClientSaml2ClientRO(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesRSRORecurse
	} else {
		attrs = clientSaml2ClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.MapType).ElemType
		val, d := mapToTF(elemType, tkh.GetAttributes().GetAdditionalData(), func(tkh any, diags *diag.Diagnostics) attr.Value {
			return types.StringPointerValue(tkh.(*string))
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSRODirectoryAccountDirectory_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryInternalDirectoryable)
		val, d := tkhToTFObjectRSRODirectoryInternalDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["internal_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryLDAPDirectoryable)
		val, d := tkhToTFObjectRSRODirectoryLDAPDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["ldap_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryMaintenanceDirectoryable)
		val, d := tkhToTFObjectRSRODirectoryMaintenanceDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["maintenance_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryOIDCDirectoryable)
		val, d := tkhToTFObjectRSRODirectoryOIDCDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["oidc_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryPendingAccountsDirectoryable)
		val, d := tkhToTFObjectRSRODirectoryPendingAccountsDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["pending_accounts_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectoryLinkableWrapperRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRODirectoryAccountDirectoryRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectoryStatusReportRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectorySummaryRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["type"] = stringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryStatusReportRO(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRODirectoryAccountDirectorySummaryRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryAccountDirectory_additionalObjectsRO(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROMarkItemMarkersRO(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryStatusReportRO(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryInternalDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryLDAPDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["dialect"] = stringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = stringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["search_bind_dn"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryMaintenanceDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryOIDCDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRODirectoryPendingAccountsDirectoryRO(recurse bool, tkh keyhubmodel.DirectoryPendingAccountsDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryPendingAccountsDirectoryAttrTypesRSRORecurse
	} else {
		attrs = directoryPendingAccountsDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesRSRecurse
	} else {
		attrs = groupGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectRSGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["authorizing_group_auditing_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupAuditing())
	obj["authorizing_group_delegation_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupDelegation())
	obj["authorizing_group_membership_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupMembership())
	obj["authorizing_group_provisioning_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupProvisioning())
	{
		elemType := attrs["authorizing_group_types"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	obj["classification_uuid"] = withUuidToTF(tkh.GetClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	obj["nested_under_uuid"] = withUuidToTF(tkh.GetNestedUnder())
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["profile_administration"] = types.BoolPointerValue(tkh.GetProfileAdministration())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupRO(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROGroupGroup_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectRSROGroupGroupAuditConfigRO(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetAuthorizingGroupAuditing())
		diags.Append(d...)
		obj["authorizing_group_auditing"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetAuthorizingGroupDelegation())
		diags.Append(d...)
		obj["authorizing_group_delegation"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetAuthorizingGroupMembership())
		diags.Append(d...)
		obj["authorizing_group_membership"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetAuthorizingGroupProvisioning())
		diags.Append(d...)
		obj["authorizing_group_provisioning"] = val
	}
	{
		elemType := attrs["authorizing_group_types"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupClassificationPrimerRO(false, tkh.GetClassification())
		diags.Append(d...)
		obj["classification"] = val
	}
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetNestedUnder())
		diags.Append(d...)
		obj["nested_under"] = val
	}
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["profile_administration"] = types.BoolPointerValue(tkh.GetProfileAdministration())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAccessInfoRO(recurse bool, tkh keyhubmodel.GroupGroupAccessInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccessInfoAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAccessInfoAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["business_accounts"] = types.BoolPointerValue(tkh.GetBusinessAccounts())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAccountRO(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAccountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROGroupGroupAccount_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAccountLinkableWrapperRO(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupAccountRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAccount_additionalObjectsRO(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAuditConfigRO(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupAuditingInfoRO(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesRSRORecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = stringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = stringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupClassificationPrimerRO(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesRSRORecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSROClientClientApplicationPrimerRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupClientRO(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesRSRORecurse
	} else {
		attrs = groupGroupClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROGroupGroupClient_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSROClientClientApplicationPrimerRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupClientLinkableWrapperRO(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupClientRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClientLinkableWrapperWithCount(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperWithCountAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperWithCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupClientLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = groupGroupClientLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupClientRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupClient_additionalObjectsRO(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupGlobalRoleInfoRO(recurse bool, tkh keyhubmodel.GroupGroupGlobalRoleInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupGlobalRoleInfoAttrTypesRSRORecurse
	} else {
		attrs = groupGroupGlobalRoleInfoAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["auditor_group_for"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAuditorGroupFor(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["auditor_group_for"] = val
	}
	{
		elemType := attrs["create_group_approve_group_for"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetCreateGroupApproveGroupFor(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["create_group_approve_group_for"] = val
	}
	{
		elemType := attrs["enable_tech_admin_approve_group_for"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetEnableTechAdminApproveGroupFor(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["enable_tech_admin_approve_group_for"] = val
	}
	{
		elemType := attrs["recovery_fallback_group_for"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetRecoveryFallbackGroupFor(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["recovery_fallback_group_for"] = val
	}
	{
		elemType := attrs["remove_group_approve_group_for"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetRemoveGroupApproveGroupFor(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["remove_group_approve_group_for"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupInfoRO(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesRSRORecurse
	} else {
		attrs = groupGroupInfoAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupLinkableWrapperRO(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = groupGroupLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupPrimerRO(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesRSRORecurse
	} else {
		attrs = groupGroupPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroupPrimerLinkableWrapperRO(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = getItemsAttr(val, attrs["accounts"])
	}
	{
		val, d := tkhToTFObjectRSROClientClientApplicationLinkableWrapperRO(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = getItemsAttr(val, attrs["administered_clients"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = getItemsAttr(val, attrs["administered_systems"])
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = getItemsAttr(val, attrs["admins"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupLinkableWrapperWithCountRO(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = getItemsAttr(val, attrs["authorized_groups"])
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = getItemsAttr(val, attrs["client_permissions"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupClientLinkableWrapperRO(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = getItemsAttr(val, attrs["clients"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = getItemsAttr(val, attrs["content_administered_systems"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupGlobalRoleInfoRO(recurse, tkh.GetGlobalRoles())
		diags.Append(d...)
		obj["global_roles"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccessInfoRO(recurse, tkh.GetGroupAccessInfo())
		diags.Append(d...)
		obj["group_access_info"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAuditingInfoRO(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupInfoRO(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = getItemsAttr(val, attrs["helpdesk"])
	}
	{
		val, d := tkhToTFObjectRSROMarkItemMarkersRO(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountRO(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountRO(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerLinkableWrapperRO(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = getItemsAttr(val, attrs["nested_groups"])
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileLinkableWrapperRO(recurse, tkh.GetOwnedAccessProfiles())
		diags.Append(d...)
		obj["owned_access_profiles"] = getItemsAttr(val, attrs["owned_access_profiles"])
	}
	{
		val, d := tkhToTFObjectRSROClientClientApplicationLinkableWrapperRO(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = getItemsAttr(val, attrs["owned_clients"])
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryLinkableWrapperRO(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = getItemsAttr(val, attrs["owned_directories"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningOwnedGroupOnSystemsWrapperRO(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitLinkableWrapperRO(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = getItemsAttr(val, attrs["owned_organizational_units"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = getItemsAttr(val, attrs["owned_systems"])
	}
	{
		val, d := tkhToTFObjectRSROAuditGroupAuditLinkableWrapperRO(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = getItemsAttr(val, attrs["recent_audits"])
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountLinkableWrapperRO(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = getItemsAttr(val, attrs["service_accounts"])
	}
	{
		val, d := tkhToTFObjectRSROGroupProvisioningGroupLinkableWrapperRO(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = getItemsAttr(val, attrs["systems"])
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRO(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectRSROWebhookWebhookLinkableWrapperRO(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = getItemsAttr(val, attrs["webhooks"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupGroup_additionalObjectsRO(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountLinkableWrapperRO(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = getItemsAttr(val, attrs["accounts"])
	}
	{
		val, d := tkhToTFObjectRSROClientClientApplicationLinkableWrapperRO(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = getItemsAttr(val, attrs["administered_clients"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = getItemsAttr(val, attrs["administered_systems"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountLinkableWrapperRO(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = getItemsAttr(val, attrs["admins"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupLinkableWrapperWithCountRO(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = getItemsAttr(val, attrs["authorized_groups"])
	}
	{
		val, d := tkhToTFObjectRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = getItemsAttr(val, attrs["client_permissions"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupClientLinkableWrapperRO(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = getItemsAttr(val, attrs["clients"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = getItemsAttr(val, attrs["content_administered_systems"])
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupGlobalRoleInfoRO(recurse, tkh.GetGlobalRoles())
		diags.Append(d...)
		obj["global_roles"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccessInfoRO(recurse, tkh.GetGroupAccessInfo())
		diags.Append(d...)
		obj["group_access_info"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAuditingInfoRO(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupInfoRO(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = getItemsAttr(val, attrs["helpdesk"])
	}
	{
		val, d := tkhToTFObjectRSROMarkItemMarkersRO(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountRO(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupAccountRO(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerLinkableWrapperRO(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = getItemsAttr(val, attrs["nested_groups"])
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileLinkableWrapperRO(recurse, tkh.GetOwnedAccessProfiles())
		diags.Append(d...)
		obj["owned_access_profiles"] = getItemsAttr(val, attrs["owned_access_profiles"])
	}
	{
		val, d := tkhToTFObjectRSROClientClientApplicationLinkableWrapperRO(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = getItemsAttr(val, attrs["owned_clients"])
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryLinkableWrapperRO(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = getItemsAttr(val, attrs["owned_directories"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningOwnedGroupOnSystemsWrapperRO(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitLinkableWrapperRO(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = getItemsAttr(val, attrs["owned_organizational_units"])
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = getItemsAttr(val, attrs["owned_systems"])
	}
	{
		val, d := tkhToTFObjectRSROAuditGroupAuditLinkableWrapperRO(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = getItemsAttr(val, attrs["recent_audits"])
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountLinkableWrapperRO(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = getItemsAttr(val, attrs["service_accounts"])
	}
	{
		val, d := tkhToTFObjectRSROGroupProvisioningGroupLinkableWrapperRO(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = getItemsAttr(val, attrs["systems"])
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRO(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectRSROWebhookWebhookLinkableWrapperRO(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = getItemsAttr(val, attrs["webhooks"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupProvisioningGroupRO(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesRSRORecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROGroupProvisioningGroup_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupProvisioningGroupLinkableWrapperRO(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupProvisioningGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroupLinkableWrapperWithCount(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperWithCountAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperWithCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupProvisioningGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupProvisioningGroupLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROGroupProvisioningGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROGroupProvisioningGroup_additionalObjectsRO(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupVaultVaultRecordAttrTypesRSRecurse
	} else {
		attrs = groupVaultVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["group_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeDefinitionRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeDefinitionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeDefinitionAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeDefinitionAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROIdentityAccountAttributeDefinition_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["format"] = stringerToTF(tkh.GetFormat())
	obj["list"] = types.BoolPointerValue(tkh.GetList())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["required"] = types.BoolPointerValue(tkh.GetRequired())
	obj["system_definition"] = stringerToTF(tkh.GetSystemDefinition())
	obj["unique"] = types.BoolPointerValue(tkh.GetUnique())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeDefinition_additionalObjectsRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeDefinition_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeDefinition_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeDefinition_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeRuleRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeRuleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeRuleAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeRuleAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROIdentityAccountAttributeRule_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["allow_override"] = types.BoolPointerValue(tkh.GetAllowOverride())
	obj["allow_self_service"] = types.BoolPointerValue(tkh.GetAllowSelfService())
	{
		val, d := tkhToTFObjectRSROIdentityAccountAttributeDefinitionRO(false, tkh.GetAttribute())
		diags.Append(d...)
		obj["attribute"] = val
	}
	obj["default_value"] = types.StringPointerValue(tkh.GetDefaultValue())
	obj["priority_directory"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPriorityDirectory()))
	obj["priority_external_source"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPriorityExternalSource()))
	obj["priority_formula"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPriorityFormula()))
	obj["priority_scim"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPrioritySCIM()))
	obj["script"] = types.StringPointerValue(tkh.GetScript())
	obj["update_automatically"] = types.BoolPointerValue(tkh.GetUpdateAutomatically())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeRuleLinkableWrapperRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeRuleLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeRuleLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeRuleLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.IdentityAccountAttributeRuleable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROIdentityAccountAttributeRuleRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeRule_additionalObjectsRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeRule_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeRule_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeRule_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROIdentityAccountAttributeValueSummaryRO(recurse bool, tkh keyhubmodel.IdentityAccountAttributeValueSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = identityAccountAttributeValueSummaryAttrTypesRSRORecurse
	} else {
		attrs = identityAccountAttributeValueSummaryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROIdentityAccountAttributeDefinitionRO(recurse, tkh.GetAttribute())
		diags.Append(d...)
		obj["attribute"] = val
	}
	obj["context"] = types.StringPointerValue(tkh.GetContext())
	obj["current_value"] = types.StringPointerValue(tkh.GetCurrentValue())
	obj["date"] = timePointerToTF(tkh.GetDate())
	obj["expected_value"] = types.StringPointerValue(tkh.GetExpectedValue())
	obj["source"] = stringerToTF(tkh.GetSource())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROLaunchpadSsoApplicationLaunchpadTileRO(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRSRORecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROLaunchpadVaultRecordLaunchpadTileRO(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRSRORecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROMarkItemMarkerRO(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesRSRORecurse
	} else {
		attrs = markItemMarkerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = stringerToTF(tkh.GetLevel())
	obj["type"] = stringerToTF(tkh.GetMarkItemMarkerType())
	{
		elemType := attrs["parameters"].(types.MapType).ElemType
		val, d := mapToTF(elemType, tkh.GetParameters().GetAdditionalData(), func(tkh any, diags *diag.Diagnostics) attr.Value {
			return types.StringPointerValue(tkh.(*string))
		})
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROMarkItemMarkersRO(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesRSRORecurse
	} else {
		attrs = markItemMarkersAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROMarkItemMarkerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROMiscAttributeCustomizationRO(recurse bool, tkh keyhubmodel.MiscAttributeCustomizationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = miscAttributeCustomizationAttrTypesRSRORecurse
	} else {
		attrs = miscAttributeCustomizationAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROIdentityAccountAttributeDefinitionRO(recurse, tkh.GetAttributeDefinition())
		diags.Append(d...)
		obj["attribute_definition"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["script"] = types.StringPointerValue(tkh.GetScript())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNestedProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedProvisioningGroupOnSystemAttrTypesRSRecurse
	} else {
		attrs = nestedProvisioningGroupOnSystemAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["provisioned_system_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["provisioning_enabled"] = types.BoolPointerValue(tkh.GetProvisioningEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationClientApplicationOrganizationalUnitRO(recurse bool, tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationClientApplicationOrganizationalUnitAttrTypesRSRORecurse
	} else {
		attrs = organizationClientApplicationOrganizationalUnitAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uuid"] = withUuidToTF(tkh)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(recurse bool, tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationClientApplicationOrganizationalUnitLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = organizationClientApplicationOrganizationalUnitLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationClientApplicationOrganizationalUnitRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnitRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnit_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetAuditorGroup())
		diags.Append(d...)
		obj["auditor_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetCreateGroupApproveGroup())
		diags.Append(d...)
		obj["create_group_approve_group"] = val
	}
	obj["create_group_placeholder"] = types.StringPointerValue(tkh.GetCreateGroupPlaceholder())
	obj["depth"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetEnableTechAdminApproveGroup())
		diags.Append(d...)
		obj["enable_tech_admin_approve_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(false, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetRecoveryFallbackGroup())
		diags.Append(d...)
		obj["recovery_fallback_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetRemoveGroupApproveGroup())
		diags.Append(d...)
		obj["remove_group_approve_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnitLinkableWrapperRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerLinkableWrapperRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnitSettingsRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitSettingsAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnitSettingsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh.GetCreateGroupApproveGroup())
		diags.Append(d...)
		obj["create_group_approve_group"] = val
	}
	obj["create_group_placeholder"] = types.StringPointerValue(tkh.GetCreateGroupPlaceholder())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh.GetEnableTechAdminApproveGroup())
		diags.Append(d...)
		obj["enable_tech_admin_approve_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh.GetRecoveryFallbackGroup())
		diags.Append(d...)
		obj["recovery_fallback_group"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(recurse, tkh.GetRemoveGroupApproveGroup())
		diags.Append(d...)
		obj["remove_group_approve_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROOrganizationOrganizationalUnit_additionalObjectsRO(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerLinkableWrapperRO(recurse, tkh.GetCreateAsParentOf())
		diags.Append(d...)
		obj["create_as_parent_of"] = getItemsAttr(val, attrs["create_as_parent_of"])
	}
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitSettingsRO(recurse, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfile_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["activate_rule_script"] = types.StringPointerValue(tkh.GetActivateRuleScript())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["match_rule_script"] = types.StringPointerValue(tkh.GetMatchRuleScript())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileAccountRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileAccountAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileAccountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfileAccount_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["activation"] = stringerToTF(tkh.GetActivation())
	obj["manual"] = types.BoolPointerValue(tkh.GetManual())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileAccountWithAttributesRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileAccountWithAttributesAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileAccountWithAttributesAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfileAccount_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["activation"] = stringerToTF(tkh.GetActivation())
	obj["manual"] = types.BoolPointerValue(tkh.GetManual())
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.IdentityAccountAttributeValueSummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROIdentityAccountAttributeValueSummaryRO(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileAccountWithAttributesLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileAccountWithAttributesLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileAccountWithAttributesLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileAccountWithAttributesRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileAccount_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileAccount_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileAccount_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileClient(recurse bool, tkh keyhubmodel.ProfileAccessProfileClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClientAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSProfileAccessProfileClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_profile_uuid"] = withUuidToTF(tkh.GetAccessProfile())
	{
		val, d := tkhToTFObjectRSROClientClientApplicationPrimerRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileClientRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClientAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileClientAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfileClient_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfilePrimerRO(false, tkh.GetAccessProfile())
		diags.Append(d...)
		obj["access_profile"] = val
	}
	{
		val, d := tkhToTFObjectRSROClientClientApplicationPrimerRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileClientLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClientLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileClientLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileClientRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileClientLinkableWrapperWithCount(recurse bool, tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClientLinkableWrapperWithCountAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileClientLinkableWrapperWithCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProfileAccessProfileClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileClientLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClientLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileClientLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileClientRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileClient_additionalObjects(recurse bool, tkh keyhubmodel.ProfileAccessProfileClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClient_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileClient_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileClient_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileClient_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileClient_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileGroupRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileGroupAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileGroupAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfileGroup_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfilePrimerRO(false, tkh.GetAccessProfile())
		diags.Append(d...)
		obj["access_profile"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileGroupLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileGroupLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileGroupLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileGroup_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileGroup_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileGroup_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfilePrimer(recurse bool, tkh keyhubmodel.ProfileAccessProfilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfilePrimerAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfilePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfilePrimerRO(recurse bool, tkh keyhubmodel.ProfileAccessProfilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfilePrimerAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfilePrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileProvisioning(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioningable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioningAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileProvisioningAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSProfileAccessProfileProvisioning_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfilePrimerRO(false, tkh.GetAccessProfile())
		diags.Append(d...)
		obj["access_profile"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileProvisioningRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioningable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioningAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileProvisioningAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProfileAccessProfileProvisioning_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfilePrimerRO(false, tkh.GetAccessProfile())
		diags.Append(d...)
		obj["access_profile"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileProvisioningLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioningLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileProvisioningLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileProvisioningable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileProvisioningRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileProvisioningLinkableWrapperWithCount(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioningLinkableWrapperWithCountAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileProvisioningLinkableWrapperWithCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileProvisioningable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProfileAccessProfileProvisioning(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileProvisioningLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioningLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileProvisioningLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProfileAccessProfileProvisioningable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProfileAccessProfileProvisioningRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProfileAccessProfileProvisioning_additionalObjects(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioning_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = profileAccessProfileProvisioning_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfileProvisioning_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfileProvisioning_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfileProvisioning_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProfileAccessProfile_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProfileAccessProfile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = profileAccessProfile_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = profileAccessProfile_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileAccountWithAttributesLinkableWrapperRO(recurse, tkh.GetAccountsWithAttributes())
		diags.Append(d...)
		obj["accounts_with_attributes"] = getItemsAttr(val, attrs["accounts_with_attributes"])
	}
	{
		val, d := tkhToTFObjectRSROIdentityAccountAttributeRuleLinkableWrapperRO(recurse, tkh.GetAttributeRules())
		diags.Append(d...)
		obj["attribute_rules"] = getItemsAttr(val, attrs["attribute_rules"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileClientLinkableWrapperRO(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = getItemsAttr(val, attrs["clients"])
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileGroupLinkableWrapperRO(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = getItemsAttr(val, attrs["groups"])
	}
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileProvisioningLinkableWrapperRO(recurse, tkh.GetProvisioning())
		diags.Append(d...)
		obj["provisioning"] = getItemsAttr(val, attrs["provisioning"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningAbstractProvisionedLDAPRO(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRSRORecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.MiscAttributeCustomizationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROMiscAttributeCustomizationRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_support"] = stringerToTF(tkh.GetSshPublicKeySupport())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(recurse, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	obj["user_dn"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningCircuitBreakerStatisticsRO(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRSRORecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = stringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningGroupOnSystemRO(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesRSRORecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProvisioningGroupOnSystem_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["provisioning_enabled"] = types.BoolPointerValue(tkh.GetProvisioningEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningGroupOnSystemLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningGroupOnSystemPrimerRO(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRSRORecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningGroupOnSystemTypesRO(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesRSRORecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSProfileAccessProfileProvisioningLinkableWrapperWithCount(recurse, tkh.GetAccessProfileProvisioning())
		diags.Append(d...)
		obj["access_profile_provisioning"] = getItemsAttr(val, attrs["access_profile_provisioning"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroupLinkableWrapperWithCount(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = getItemsAttr(val, attrs["provgroups"])
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts_uuid"] = getItemsAttr(val, attrs["service_accounts_uuid"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningGroupOnSystem_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROProfileAccessProfileProvisioningLinkableWrapperWithCountRO(recurse, tkh.GetAccessProfileProvisioning())
		diags.Append(d...)
		obj["access_profile_provisioning"] = getItemsAttr(val, attrs["access_profile_provisioning"])
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupProvisioningGroupLinkableWrapperWithCountRO(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = getItemsAttr(val, attrs["provgroups"])
	}
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountPrimerLinkableWrapperWithCountRO(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = getItemsAttr(val, attrs["service_accounts"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningOwnedGroupOnSystemsWrapperRO(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRSRORecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProvisioningGroupOnSystemRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionNumberSequenceRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProvisioningProvisionNumberSequence_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_id"] = types.Int64PointerValue(tkh.GetNextID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionNumberSequence_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerLinkableWrapperRO(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = getItemsAttr(val, attrs["systems"])
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedADRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedADAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedAccountRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProvisioningProvisionedAccount_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedAccount_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedAzureOIDCDirectoryRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts_writable"] = types.BoolPointerValue(tkh.GetAccountsWritable())
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedAzureSyncLDAPDirectoryRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedAzureTenantRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedInternalLDAPRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROClientLdapClientRO(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedLDAPRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionNumberSequenceRO(recurse, tkh.GetGidNumbering())
		diags.Append(d...)
		obj["gid_numbering"] = val
	}
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionNumberSequenceRO(recurse, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedLDAPDirectoryRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts_writable"] = types.BoolPointerValue(tkh.GetAccountsWritable())
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.MiscAttributeCustomizationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROMiscAttributeCustomizationRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionNumberSequenceRO(recurse, tkh.GetGidNumbering())
		diags.Append(d...)
		obj["gid_numbering"] = val
	}
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionNumberSequenceRO(recurse, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())
	obj["ssh_public_key_support"] = stringerToTF(tkh.GetSshPublicKeySupport())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedNamespaceRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedNamespaceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedNamespaceAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedNamespaceAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(recurse, tkh.GetBaseSystem())
		diags.Append(d...)
		obj["base_system"] = val
	}
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSCIMRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSCIMable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSCIMAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSCIMAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.MiscAttributeCustomizationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROMiscAttributeCustomizationRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystemRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROProvisioningProvisionedSystem_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["admin_permissions"] = types.BoolPointerValue(tkh.GetAdminPermissions())
	obj["can_write_accounts"] = types.BoolPointerValue(tkh.GetCanWriteAccounts())
	obj["content_admin_permissions"] = types.BoolPointerValue(tkh.GetContentAdminPermissions())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["owner_permissions"] = types.BoolPointerValue(tkh.GetOwnerPermissions())
	obj["type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystem_cleanupPeriodRO(false, tkh.GetCleanupPeriod())
		diags.Append(d...)
		obj["cleanup_period"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["group_on_system_provisioning"] = stringerToTF(tkh.GetGroupOnSystemProvisioning())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_new_namespaces"] = types.BoolPointerValue(tkh.GetSelfServiceNewNamespaces())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningAbstractProvisionedLDAPable)
		val, d := tkhToTFObjectRSROProvisioningAbstractProvisionedLDAPRO(false, tkhCast)
		diags.Append(d...)
		obj["abstract_provisioned_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedADable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedADRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_a_d"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedAzureOIDCDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_oidc_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedAzureSyncLDAPDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_sync_ldap_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureTenantable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedAzureTenantRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_tenant"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedInternalLDAPable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedInternalLDAPRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_internal_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedLDAPable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedLDAPRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedLDAPDirectoryable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedLDAPDirectoryRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_ldap_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedNamespaceable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedNamespaceRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_namespace"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedSCIMable)
		val, d := tkhToTFObjectRSROProvisioningProvisionedSCIMRO(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_scim"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystemLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProvisioningProvisionedSystemRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["admin_permissions"] = types.BoolPointerValue(tkh.GetAdminPermissions())
	obj["can_write_accounts"] = types.BoolPointerValue(tkh.GetCanWriteAccounts())
	obj["content_admin_permissions"] = types.BoolPointerValue(tkh.GetContentAdminPermissions())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_permissions"] = types.BoolPointerValue(tkh.GetOwnerPermissions())
	obj["type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["admin_permissions"] = types.BoolPointerValue(tkh.GetAdminPermissions())
	obj["content_admin_permissions"] = types.BoolPointerValue(tkh.GetContentAdminPermissions())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROOrganizationOrganizationalUnitPrimerRO(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["owner_permissions"] = types.BoolPointerValue(tkh.GetOwnerPermissions())
	obj["type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystemPrimerLinkableWrapperRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystem_additionalObjectsRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedAccountRO(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(recurse, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = getItemsAttr(val, attrs["issued_permissions"])
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisioningManagementPermissionsRO(recurse, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROMarkItemMarkersRO(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningCircuitBreakerStatisticsRO(recurse, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectRSROProvisioningGroupOnSystemTypesRO(recurse, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisionedSystem_cleanupPeriodRO(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_cleanupPeriodable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_cleanupPeriodAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisionedSystem_cleanupPeriodAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["days"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDays()))
	obj["months"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMonths()))
	obj["years"] = types.Int64PointerValue(int32PToInt64P(tkh.GetYears()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROProvisioningProvisioningManagementPermissionsRO(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRSRORecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(false, tkh.GetPassword())
		diags.Append(d...)
		obj["password"] = val
	}
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROServiceaccountServiceAccount_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(false, tkh.GetPassword())
		diags.Append(d...)
		obj["password"] = val
	}
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountGroupRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROServiceaccountServiceAccountGroup_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountGroupLinkableWrapperRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROServiceaccountServiceAccountGroupRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountGroup_additionalObjectsRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountLinkableWrapperRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROServiceaccountServiceAccountRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountPrimerRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperWithCountAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperWithCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountPrimerLinkableWrapperWithCountRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperWithCountAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperWithCountAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROServiceaccountServiceAccountPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccountSupportedFeaturesRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountSupportedFeaturesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountSupportedFeaturesAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccountSupportedFeaturesAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["ssh_public_key"] = types.BoolPointerValue(tkh.GetSshPublicKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountGroupLinkableWrapperRO(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = getItemsAttr(val, attrs["groups"])
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountSupportedFeaturesRO(recurse, tkh.GetSupportedFeatures())
		diags.Append(d...)
		obj["supported_features"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROServiceaccountServiceAccount_additionalObjectsRO(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountGroupLinkableWrapperRO(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = getItemsAttr(val, attrs["groups"])
	}
	{
		val, d := tkhToTFObjectRSROGeneratedSecretRO(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSROServiceaccountServiceAccountSupportedFeaturesRO(recurse, tkh.GetSupportedFeatures())
		diags.Append(d...)
		obj["supported_features"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultPasswordMetadataRO(recurse bool, tkh keyhubmodel.VaultPasswordMetadataable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultPasswordMetadataAttrTypesRSRORecurse
	} else {
		attrs = vaultPasswordMetadataAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["dictionary"] = types.BoolPointerValue(tkh.GetDictionary())
	obj["duplicate"] = types.BoolPointerValue(tkh.GetDuplicate())
	obj["hash"] = types.StringPointerValue(tkh.GetHash())
	obj["length"] = types.Int64PointerValue(int32PToInt64P(tkh.GetLength()))
	obj["lower_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetLowerCount()))
	obj["number_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNumberCount()))
	obj["special_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetSpecialCount()))
	obj["strength"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStrength()))
	obj["upper_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUpperCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRO(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROVaultVaultRecordRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultActivationStatusRO(recurse bool, tkh keyhubmodel.VaultVaultActivationStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultActivationStatusAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultActivationStatusAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["activated"] = types.BoolPointerValue(tkh.GetActivated())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordRO(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROVaultVaultRecord_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.SetType).ElemType
		val, d := sliceToTFSet(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordPrimerLinkableWrapperRO(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())
	obj["totp_key"] = types.StringPointerValue(tkh.GetTotpKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordSecretsRO(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())
	obj["totp_key"] = types.StringPointerValue(tkh.GetTotpKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordShareRO(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["type"] = stringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecordShareSummaryRO(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROVaultVaultRecordShareRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordShareRO(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROVaultVaultActivationStatusRO(recurse, tkh.GetActivationStatus())
		diags.Append(d...)
		obj["activation_status"] = val
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultPasswordMetadataRO(recurse, tkh.GetPasswordMetadata())
		diags.Append(d...)
		obj["password_metadata"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordSecrets(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordShareSummaryRO(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerLinkableWrapperRO(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = getItemsAttr(val, attrs["shares"])
	}
	{
		val, d := tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectRSROLinkableRO(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROVaultVaultRecord_additionalObjectsRO(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROVaultVaultActivationStatusRO(recurse, tkh.GetActivationStatus())
		diags.Append(d...)
		obj["activation_status"] = val
	}
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerRO(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultPasswordMetadataRO(recurse, tkh.GetPasswordMetadata())
		diags.Append(d...)
		obj["password_metadata"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordSecretsRO(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordShareSummaryRO(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectRSROVaultVaultRecordPrimerLinkableWrapperRO(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = getItemsAttr(val, attrs["shares"])
	}
	{
		val, d := tkhToTFObjectRSROLaunchpadVaultRecordLaunchpadTileRO(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectRSROLinkableRO(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROWebhookWebhookRO(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesRSRORecurse
	} else {
		attrs = webhookWebhookAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		obj["additional"] = types.ListNull(types.StringType)
	}
	if recurse {
		{
			val, d := tkhToTFObjectRSROWebhookWebhook_additionalObjectsRO(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			maps.Copy(obj, val.Attributes())
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRORestLinkRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROAuthPermissionRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSROAuthAccountPrimerRO(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	{
		val, d := tkhToTFObjectRSROClientClientApplicationPrimerRO(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	{
		val, d := tkhToTFObjectRSRODirectoryAccountDirectoryPrimerRO(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectRSROGroupGroupPrimerRO(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSROProvisioningProvisionedSystemPrimerRO(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectRSROCertificateCertificatePrimerRO(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROWebhookWebhookLinkableWrapperRO(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesRSRORecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTFList(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSROWebhookWebhookRO(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSROWebhookWebhook_additionalObjectsRO(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesRSRORecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypesRSRO
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSROAuditInfoRO(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}
