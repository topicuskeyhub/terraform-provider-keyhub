// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tkhToTFObjectRSAuditInfo(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditInfoAttrTypesRSRecurse
	} else {
		attrs = auditInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSErrorReport(recurse bool, tkh keyhubmodel.ErrorReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReportAttrTypesRSRecurse
	} else {
		attrs = errorReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["application_error"] = types.StringPointerValue(tkh.GetApplicationError())
	{
		val, d := tkhToTFObjectRSErrorReport_applicationErrorParameters(recurse, tkh.GetApplicationErrorParameters())
		diags.Append(d...)
		obj["application_error_parameters"] = val
	}
	obj["code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetCode()))
	{
		elemType := attrs["error_details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetErrorDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["error_details"] = val
	}
	obj["exception"] = types.StringPointerValue(tkh.GetException())
	obj["message"] = types.StringPointerValue(tkh.GetMessage())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	{
		elemType := attrs["stacktrace"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStacktrace(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["stacktrace"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSErrorReport_applicationErrorParameters(recurse bool, tkh keyhubmodel.ErrorReport_applicationErrorParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReport_applicationErrorParametersAttrTypesRSRecurse
	} else {
		attrs = errorReport_applicationErrorParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesRSRecurse
	} else {
		attrs = generatedSecretAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesRSRecurse
	} else {
		attrs = linkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesRSRecurse
	} else {
		attrs = nonLinkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesRSRecurse
	} else {
		attrs = restLinkAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSegmentCount(recurse bool, tkh keyhubmodel.SegmentCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = segmentCountAttrTypesRSRecurse
	} else {
		attrs = segmentCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecord(recurse bool, tkh keyhubmodel.AuditAuditRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSAuditAuditRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["audit_audit_record_type"] = stringerToTF(tkh.GetAuditAuditRecordType())
	obj["date_time"] = timePointerToTF(tkh.GetDateTime())
	obj["on_account"] = types.StringPointerValue(tkh.GetOnAccount())
	obj["on_certificate"] = types.StringPointerValue(tkh.GetOnCertificate())
	obj["on_client"] = types.StringPointerValue(tkh.GetOnClient())
	obj["on_directory"] = types.StringPointerValue(tkh.GetOnDirectory())
	obj["on_group"] = types.StringPointerValue(tkh.GetOnGroup())
	obj["on_group2"] = types.StringPointerValue(tkh.GetOnGroup2())
	obj["on_group_classification"] = types.StringPointerValue(tkh.GetOnGroupClassification())
	obj["on_organizational_unit"] = types.StringPointerValue(tkh.GetOnOrganizationalUnit())
	obj["on_service_account"] = types.StringPointerValue(tkh.GetOnServiceAccount())
	obj["on_system"] = types.StringPointerValue(tkh.GetOnSystem())
	obj["on_vault_record"] = types.StringPointerValue(tkh.GetOnVaultRecord())
	obj["on_webhook"] = types.StringPointerValue(tkh.GetOnWebhook())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["performed_by"] = types.StringPointerValue(tkh.GetPerformedBy())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecordLinkableWrapper(recurse bool, tkh keyhubmodel.AuditAuditRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecordLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditAuditRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuditAuditRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecord_additionalObjects(recurse bool, tkh keyhubmodel.AuditAuditRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecord_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecord_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccount(recurse bool, tkh keyhubmodel.AuthAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountAttrTypesRSRecurse
	} else {
		attrs = authAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountBulkUpdate(recurse bool, tkh keyhubmodel.AuthAccountBulkUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountBulkUpdateAttrTypesRSRecurse
	} else {
		attrs = authAccountBulkUpdateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["exclusive_selection"] = types.BoolPointerValue(tkh.GetExclusiveSelection())
	{
		elemType := attrs["selected_accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSelectedAccounts(), func(tkh int64, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(tkh)
		})
		diags.Append(d...)
		obj["selected_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountChangeLocale(recurse bool, tkh keyhubmodel.AuthAccountChangeLocaleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountChangeLocaleAttrTypesRSRecurse
	} else {
		attrs = authAccountChangeLocaleAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = authAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = authAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountRecoveryStatus(recurse bool, tkh keyhubmodel.AuthAccountRecoveryStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountRecoveryStatusAttrTypesRSRecurse
	} else {
		attrs = authAccountRecoveryStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["pending2fa_recovery_request"] = types.BoolPointerValue(tkh.GetPending2FARecoveryRequest())
	obj["pending_password_recovery_request"] = types.BoolPointerValue(tkh.GetPendingPasswordRecoveryRequest())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountSettings(recurse bool, tkh keyhubmodel.AuthAccountSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountSettingsAttrTypesRSRecurse
	} else {
		attrs = authAccountSettingsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["default_organizational_unit_uuid"] = withUuidToTF(tkh.GetDefaultOrganizationalUnit())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["in_groups"] = types.BoolPointerValue(tkh.GetInGroups())
	obj["in_multiple_organizational_units"] = types.BoolPointerValue(tkh.GetInMultipleOrganizationalUnits())
	obj["key_hub_admin"] = types.BoolPointerValue(tkh.GetKeyHubAdmin())
	obj["multiple_organizational_units_exist"] = types.BoolPointerValue(tkh.GetMultipleOrganizationalUnitsExist())
	obj["password_mode"] = stringerToTF(tkh.GetPasswordMode())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["two_factor_authentication"] = stringerToTF(tkh.GetTwoFactorAuthentication())
	obj["use_token_password"] = types.BoolPointerValue(tkh.GetUseTokenPassword())
	obj["vault_status"] = stringerToTF(tkh.GetVaultStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountStatus(recurse bool, tkh keyhubmodel.AuthAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountStatusAttrTypesRSRecurse
	} else {
		attrs = authAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["decline_recovery_requests"] = types.BoolPointerValue(tkh.GetDeclineRecoveryRequests())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["two_factor_authentication_enabled"] = types.BoolPointerValue(tkh.GetTwoFactorAuthenticationEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = authAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_login"] = types.BoolPointerValue(tkh.GetActiveLogin())
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountRecoveryStatus(recurse, tkh.GetPendingRecoveryRequests())
		diags.Append(d...)
		obj["pending_recovery_requests"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountSettings(recurse, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthStoredAccountAttributes(recurse, tkh.GetStoredAttributes())
		diags.Append(d...)
		obj["stored_attributes"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_directoryStats(recurse, tkh.GetDirectoryStats())
		diags.Append(d...)
		obj["directory_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_twoFAStats(recurse, tkh.GetTwoFAStats())
		diags.Append(d...)
		obj["two_fa_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_validityStats(recurse, tkh.GetValidityStats())
		diags.Append(d...)
		obj["validity_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_directoryStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_twoFAStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_validityStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_validityStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_validityStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uuid"] = withUuidToTF(tkh)
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = timePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthInternalAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthInternalAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthInternalAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccountStatusObject(recurse bool, tkh keyhubmodel.AuthInternalAccountStatusObjectable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountStatusObjectAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountStatusObjectAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthMoveInternalAccount(recurse bool, tkh keyhubmodel.AuthMoveInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authMoveInternalAccountAttrTypesRSRecurse
	} else {
		attrs = authMoveInternalAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSDirectoryInternalDirectory(recurse, tkh.GetInternalDirectory())
		diags.Append(d...)
		obj["internal_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesRSRecurse
	} else {
		attrs = authPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthStoredAccountAttribute(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributeable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributeAttrTypesRSRecurse
	} else {
		attrs = authStoredAccountAttributeAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthStoredAccountAttributes(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributesAttrTypesRSRecurse
	} else {
		attrs = authStoredAccountAttributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.AuthStoredAccountAttributeable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthStoredAccountAttribute(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificate(recurse bool, tkh keyhubmodel.CertificateCertificateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateAttrTypesRSRecurse
	} else {
		attrs = certificateCertificateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSCertificateCertificate_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		elemType := attrs["key_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetKeyData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["key_data"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificateLinkableWrapper(recurse bool, tkh keyhubmodel.CertificateCertificateLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = certificateCertificateLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.CertificateCertificateable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSCertificateCertificate(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesRSRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificate_additionalObjects(recurse bool, tkh keyhubmodel.CertificateCertificate_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificate_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = certificateCertificate_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientClientApplication(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesRSRecurse
	} else {
		attrs = clientLdapClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = withUuidToTF(tkh.GetSharedSecret())
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_uri"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["confidential"] = types.BoolPointerValue(tkh.GetConfidential())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_uri"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["resource_uris"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = withUuidToTF(tkh.GetSharedSecret())
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectRSClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2Client_attributes(recurse bool, tkh keyhubmodel.ClientOAuth2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2Client_attributesAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2Client_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesRSRecurse
	} else {
		attrs = clientSaml2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	{
		val, d := tkhToTFObjectRSClientSaml2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientSaml2Client_attributes(recurse bool, tkh keyhubmodel.ClientSaml2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2Client_attributesAttrTypesRSRecurse
	} else {
		attrs = clientSaml2Client_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectory(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSDirectoryAccountDirectory(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryPrimer(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectorySummary(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["directory_account_directory_summary_type"] = stringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSDirectoryAccountDirectorySummary(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryInternalDirectory(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryLDAPDirectory(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["dialect"] = stringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = stringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["search_bind_dn"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryMaintenanceDirectory(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryOIDCDirectory(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAuthorizedGroupsWrapper(recurse bool, tkh keyhubmodel.GroupAuthorizedGroupsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAuthorizedGroupsWrapperAttrTypesRSRecurse
	} else {
		attrs = groupAuthorizedGroupsWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["group_count"] = types.Int64PointerValue(tkh.GetGroupCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesRSRecurse
	} else {
		attrs = groupGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectRSGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["auditor"] = types.BoolPointerValue(tkh.GetAuditor())
	obj["authorizing_group_auditing_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupAuditing())
	obj["authorizing_group_delegation_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupDelegation())
	obj["authorizing_group_membership_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupMembership())
	obj["authorizing_group_provisioning_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupProvisioning())
	{
		elemType := attrs["authorizing_group_types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	obj["classification_uuid"] = withUuidToTF(tkh.GetClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	obj["nested_under_uuid"] = withUuidToTF(tkh.GetNestedUnder())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountNesting(recurse bool, tkh keyhubmodel.GroupGroupAccountNestingable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountNestingAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountNestingAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["connected"] = types.BoolPointerValue(tkh.GetConnected())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountStatus(recurse bool, tkh keyhubmodel.GroupGroupAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountStatusAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAdminMail(recurse bool, tkh keyhubmodel.GroupGroupAdminMailable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAdminMailAttrTypesRSRecurse
	} else {
		attrs = groupGroupAdminMailAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["body"] = types.StringPointerValue(tkh.GetBody())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditAccount(recurse bool, tkh keyhubmodel.GroupGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAccountAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAudit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAudit_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAudit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupAudit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditingInfo(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = stringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = stringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassification(recurse bool, tkh keyhubmodel.GroupGroupClassificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupClassification_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["authorizing_group_auditing_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupAuditingRequired())
	obj["authorizing_group_delegation_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupDelegationRequired())
	obj["authorizing_group_membership_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupMembershipRequired())
	obj["authorizing_group_provisioning_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupProvisioningRequired())
	obj["default_classification"] = types.BoolPointerValue(tkh.GetDefaultClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["maximum_audit_interval"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMaximumAuditInterval()))
	obj["minimum_nr_managers"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMinimumNrManagers()))
	obj["record_trail_required"] = types.BoolPointerValue(tkh.GetRecordTrailRequired())
	{
		elemType := attrs["required_months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRequiredMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["required_months"] = val
	}
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationInfo(recurse bool, tkh keyhubmodel.GroupGroupClassificationInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_groups"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrGroups()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationUpdate(recurse bool, tkh keyhubmodel.GroupGroupClassificationUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationUpdateAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationUpdateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["classificaton_uuid"] = withUuidToTF(tkh.GetClassificaton())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassification_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClassification_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassification_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassification_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupClassificationInfo(recurse, tkh.GetInfo())
		diags.Append(d...)
		obj["info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["client_uuid"] = withUuidToTF(tkh.GetClient())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolder(recurse bool, tkh keyhubmodel.GroupGroupFolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupFolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolderLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupFolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolderLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupFolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolder_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupFolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolder_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolder_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupInfo(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupSegmentedLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	{
		elemType := attrs["segments"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSegments(), func(tkh keyhubmodel.SegmentCountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSSegmentCount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["segments"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = val
	}
	{
		val, d := tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupAuthorizedGroupsWrapper(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAuditingInfo(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupInfo(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupPrimerLinkableWrapper(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	{
		val, d := tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryLinkableWrapper(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningOwnedGroupOnSystemsWrapper(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectRSOrganizationOrganizationalUnitLinkableWrapper(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAuditLinkableWrapper(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = val
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookLinkableWrapper(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupsAuditStats(recurse bool, tkh keyhubmodel.GroupGroupsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = groupGroupsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audited_groups"] = types.Int64PointerValue(tkh.GetAuditedGroups())
	{
		elemType := attrs["classifications"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetClassifications(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["classifications"] = val
	}
	obj["overdue_audit_groups"] = types.Int64PointerValue(tkh.GetOverdueAuditGroups())
	obj["overdue_vault_policies"] = types.Int64PointerValue(tkh.GetOverdueVaultPolicies())
	obj["unaudited_groups"] = types.Int64PointerValue(tkh.GetUnauditedGroups())
	obj["valid_vault_policies"] = types.Int64PointerValue(tkh.GetValidVaultPolicies())
	obj["vaults_without_policies"] = types.Int64PointerValue(tkh.GetVaultsWithoutPolicies())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupProvisioningGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadDisplayedLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadLaunchpadTilePrimer(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadDisplayedLaunchpadTiles(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesRSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSLaunchpadDisplayedLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTileLinkableWrapper(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTilePrimer(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTilePrimerAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTilePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadManualLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadManualLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadManualLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadManualLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLicenseKeyHubLicenseInfo(recurse bool, tkh keyhubmodel.LicenseKeyHubLicenseInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = licenseKeyHubLicenseInfoAttrTypesRSRecurse
	} else {
		attrs = licenseKeyHubLicenseInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["current_license_status"] = stringerToTF(tkh.GetCurrentLicenseStatus())
	obj["customer_company"] = types.StringPointerValue(tkh.GetCustomerCompany())
	obj["customer_contact"] = types.StringPointerValue(tkh.GetCustomerContact())
	{
		elemType := attrs["customer_domains"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCustomerDomains(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["customer_domains"] = val
	}
	{
		elemType := attrs["details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["details"] = val
	}
	obj["expiration_time"] = timePointerToTF(tkh.GetExpirationTime())
	{
		elemType := attrs["features"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetFeatures(), func(tkh keyhubmodel.LicenseLicenseFeature, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["features"] = val
	}
	obj["issue_time"] = timePointerToTF(tkh.GetIssueTime())
	obj["key_hub_domain"] = types.StringPointerValue(tkh.GetKeyHubDomain())
	obj["license_key"] = types.StringPointerValue(tkh.GetLicenseKey())
	obj["not_before_time"] = timePointerToTF(tkh.GetNotBeforeTime())
	obj["users_hard_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersHardLimit()))
	obj["users_pro_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersProLimit()))
	obj["users_soft_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersSoftLimit()))
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVersion()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarker(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesRSRecurse
	} else {
		attrs = markItemMarkerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = stringerToTF(tkh.GetLevel())
	obj["mark_item_marker_type"] = stringerToTF(tkh.GetMarkItemMarkerType())
	{
		val, d := tkhToTFObjectRSMarkItemMarker_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarker_parameters(recurse bool, tkh keyhubmodel.MarkItemMarker_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarker_parametersAttrTypesRSRecurse
	} else {
		attrs = markItemMarker_parametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarkers(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesRSRecurse
	} else {
		attrs = markItemMarkersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSMarkItemMarker(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationCertificateExpiredNotification(recurse bool, tkh keyhubmodel.NotificationCertificateExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationCertificateExpiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationCertificateExpiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSCertificateCertificate(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryLDAPDirectory(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	{
		val, d := tkhToTFObjectRSClientLdapClient(recurse, tkh.GetLdapClient())
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystem(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["usage"] = stringerToTF(tkh.GetUsage())
	{
		val, d := tkhToTFObjectRSWebhookWebhook(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupAuditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["due_date"] = timePointerToTF(tkh.GetDueDate())
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["notification_group_audit_required_notification_type"] = stringerToTF(tkh.GetNotificationGroupAuditRequiredNotificationType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupEditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSNotificationGroupEditRequiredNotification_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}
	obj["reason"] = stringerToTF(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupEditRequiredNotification_parameters(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesRSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationInvalidSignaturesDetectedNotification(recurse bool, tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationLicenseStatusNotification(recurse bool, tkh keyhubmodel.NotificationLicenseStatusNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationLicenseStatusNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationLicenseStatusNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetActiveAccounts()))
	{
		val, d := tkhToTFObjectRSLicenseKeyHubLicenseInfo(recurse, tkh.GetLicenseInfo())
		diags.Append(d...)
		obj["license_info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationModificationRequestNotification(recurse bool, tkh keyhubmodel.NotificationModificationRequestNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationModificationRequestNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationModificationRequestNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["admins"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAdmins(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSRequestModificationRequest(recurse, tkh.GetRequest())
		diags.Append(d...)
		obj["request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationNotification(recurse bool, tkh keyhubmodel.NotificationNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationNotifications(recurse bool, tkh keyhubmodel.NotificationNotificationsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationsAttrTypesRSRecurse
	} else {
		attrs = notificationNotificationsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.NotificationNotificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSNotificationNotification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationOldApiVersionUsageNotification(recurse bool, tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["api_version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetApiVersion()))
	{
		val, d := tkhToTFObjectRSClientOAuth2Client(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationProvisionConfigRequiredNotification(recurse bool, tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["systems"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSystems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationRotatingPasswordRequiredNotification(recurse bool, tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationUpdateAvailableNotification(recurse bool, tkh keyhubmodel.NotificationUpdateAvailableNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationUpdateAvailableNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationUpdateAvailableNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["released_at"] = stringerToTF(tkh.GetReleasedAt())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationVaultRecordExpiredNotification(recurse bool, tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh.GetRecord())
		diags.Append(d...)
		obj["record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationAccountOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationAccountOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["depth"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["parent_uuid"] = withUuidToTF(tkh.GetParent())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnitAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse, tkh.GetCreateAsParentOf())
		diags.Append(d...)
		obj["create_as_parent_of"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAbstractProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_dn"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesRSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAccountProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["result"] = stringerToTF(tkh.GetResult())
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroup(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAccountProvisioningStatusReport(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesRSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["status"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStatus(), func(tkh keyhubmodel.ProvisioningAccountProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningAccountProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningCircuitBreakerStatistics(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRSRecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = stringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemTypes(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse, tkh.GetProvisioningDuration())
		diags.Append(d...)
		obj["provisioning_duration"] = val
	}
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	{
		val, d := tkhToTFObjectRSProvisioningAccountProvisioningStatusReport(recurse, tkh.GetStatusReport())
		diags.Append(d...)
		obj["status_report"] = val
	}
	obj["visible_on_dashboard"] = types.BoolPointerValue(tkh.GetVisibleOnDashboard())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningOwnedGroupOnSystemsWrapper(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequence(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_uid"] = types.Int64PointerValue(tkh.GetNextUID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionNumberSequenceable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequence_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAD(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedADAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_dn"] = types.StringPointerValue(tkh.GetUserDN())
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccount_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureOIDCDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureTenant(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedInternalLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSClientLdapClient(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_dn"] = types.StringPointerValue(tkh.GetUserDN())
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence(false, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystem(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedSystemSyncLog(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedAccount(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = val
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectRSProvisioningProvisioningManagementPermissions(recurse, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningCircuitBreakerStatistics(recurse, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystemTypes(recurse, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisioningManagementPermissions(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.ProvisioningGroupProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	obj["ignore_errors"] = types.BoolPointerValue(tkh.GetIgnoreErrors())
	obj["restricted_by_license"] = types.BoolPointerValue(tkh.GetRestrictedByLicense())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningTokenPassword(recurse bool, tkh keyhubmodel.ProvisioningTokenPasswordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningTokenPasswordAttrTypesRSRecurse
	} else {
		attrs = provisioningTokenPasswordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractApplicationModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractApplicationModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractApplicationModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractApplicationModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractOrganizationalUnitModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractProvisionedSystemModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse, tkh.GetAccessDuration())
		diags.Append(d...)
		obj["access_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptJoinGroupRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["make_manager"] = types.BoolPointerValue(tkh.GetMakeManager())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptModificationRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptModificationRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptModificationRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptModificationRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAddGroupAdminRequest(recurse bool, tkh keyhubmodel.RequestAddGroupAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAddGroupAdminRequestAttrTypesRSRecurse
	} else {
		attrs = requestAddGroupAdminRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["new_admin_uuid"] = withUuidToTF(tkh.GetNewAdmin())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupOnSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateGroupOnSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_on_system_type"] = stringerToTF(tkh.GetGroupOnSystemType())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateGroupRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateServiceAccountRequest(recurse bool, tkh keyhubmodel.RequestCreateServiceAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateServiceAccountRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateServiceAccountRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestDisable2FARequest(recurse bool, tkh keyhubmodel.RequestDisable2FARequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestDisable2FARequestAttrTypesRSRecurse
	} else {
		attrs = requestDisable2FARequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["subject"] = types.StringPointerValue(tkh.GetSubject())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestEnableTechnicalAdministrationRequest(recurse bool, tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestExtendAccessRequest(recurse bool, tkh keyhubmodel.RequestExtendAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestExtendAccessRequestAttrTypesRSRecurse
	} else {
		attrs = requestExtendAccessRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["extend_until"] = timePointerToTF(tkh.GetExtendUntil())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantAccessRequest(recurse bool, tkh keyhubmodel.RequestGrantAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantAccessRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantAccessRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantApplicationRequest(recurse bool, tkh keyhubmodel.RequestGrantApplicationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantApplicationRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantApplicationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantClientPermissionRequest(recurse bool, tkh keyhubmodel.RequestGrantClientPermissionRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantClientPermissionRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantClientPermissionRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["permission_type"] = stringerToTF(tkh.GetPermissionType())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantGroupOnSystemRequestRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantServiceAccountGroupRequest(recurse bool, tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}
	obj["service_account_uuid"] = withUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestJoinGroupRequest(recurse bool, tkh keyhubmodel.RequestJoinGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestJoinGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestJoinVaultRequest(recurse bool, tkh keyhubmodel.RequestJoinVaultRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinVaultRequestAttrTypesRSRecurse
	} else {
		attrs = requestJoinVaultRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequest(recurse bool, tkh keyhubmodel.RequestModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequestLinkableWrapper(recurse bool, tkh keyhubmodel.RequestModificationRequestLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequestLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.RequestModificationRequestable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRequestModificationRequest(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequest_additionalObjects(recurse bool, tkh keyhubmodel.RequestModificationRequest_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequest_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequest_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSRequestAcceptModificationRequestParameters(recurse, tkh.GetAcceptParams())
		diags.Append(d...)
		obj["accept_params"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSRequestPasswordResetRequestStatus(recurse, tkh.GetResetStatus())
		diags.Append(d...)
		obj["reset_status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestPasswordResetRequest(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestAttrTypesRSRecurse
	} else {
		attrs = requestPasswordResetRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["new_vault_and_directory_password"] = types.StringPointerValue(tkh.GetNewVaultAndDirectoryPassword())
	obj["new_vault_password"] = types.StringPointerValue(tkh.GetNewVaultPassword())
	obj["unsynced_password"] = types.BoolPointerValue(tkh.GetUnsyncedPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestPasswordResetRequestStatus(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestStatusAttrTypesRSRecurse
	} else {
		attrs = requestPasswordResetRequestStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["cooldown_end"] = timePointerToTF(tkh.GetCooldownEnd())
	{
		elemType := attrs["managers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetManagers(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["managers"] = val
	}
	obj["nr_accepted"] = types.Int64PointerValue(tkh.GetNrAccepted())
	obj["reset_via_mail"] = stringerToTF(tkh.GetResetViaMail())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveGroupRequest(recurse bool, tkh keyhubmodel.RequestRemoveGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveOrganizationalUnitRequest(recurse bool, tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["organizational_unit_name"] = types.StringPointerValue(tkh.GetOrganizationalUnitName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveProvisionedSystemRequest(recurse bool, tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["system_name"] = types.StringPointerValue(tkh.GetSystemName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestReviewAuditRequest(recurse bool, tkh keyhubmodel.RequestReviewAuditRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestReviewAuditRequestAttrTypesRSRecurse
	} else {
		attrs = requestReviewAuditRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRevokeAdminRequest(recurse bool, tkh keyhubmodel.RequestRevokeAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRevokeAdminRequestAttrTypesRSRecurse
	} else {
		attrs = requestRevokeAdminRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["admin_uuid"] = withUuidToTF(tkh.GetAdmin())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestSetupAuthorizingGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["authorizing_group_type"] = stringerToTF(tkh.GetAuthorizingGroupType())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = withUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestSetupNestedGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupNestedGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupNestedGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestSetupNestedGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["account_action"] = stringerToTF(tkh.GetAccountAction())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = withUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferApplicationAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferApplicationOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferAuditorGroupRequest(recurse bool, tkh keyhubmodel.RequestTransferAuditorGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferAuditorGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferAuditorGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferGroupOnSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferServiceAccountAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["service_account_uuid"] = withUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestUpdateGroupMembershipRequest(recurse bool, tkh keyhubmodel.RequestUpdateGroupMembershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestUpdateGroupMembershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestUpdateGroupMembershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["account_to_update_uuid"] = withUuidToTF(tkh.GetAccountToUpdate())
	obj["current_end_date"] = stringerToTF(tkh.GetCurrentEndDate())
	obj["current_rights"] = stringerToTF(tkh.GetCurrentRights())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["update_group_membership_type"] = stringerToTF(tkh.GetUpdateGroupMembershipType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestVerifyInternalAccountRequest(recurse bool, tkh keyhubmodel.RequestVerifyInternalAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestVerifyInternalAccountRequestAttrTypesRSRecurse
	} else {
		attrs = requestVerifyInternalAccountRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["internal_account_name"] = types.StringPointerValue(tkh.GetInternalAccountName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["password_uuid"] = withUuidToTF(tkh.GetPassword())
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSServiceaccountServiceAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSServiceaccountServiceAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountStatus(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountStatusAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["disabled_count"] = types.Int64PointerValue(tkh.GetDisabledCount())
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse, tkh.GetPasswordSchemeEnabledStats())
		diags.Append(d...)
		obj["password_scheme_enabled_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_systemStats(recurse, tkh.GetSystemStats())
		diags.Append(d...)
		obj["system_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSimpleStringValue(recurse bool, tkh keyhubmodel.SimpleStringValueable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleStringValueAttrTypesRSRecurse
	} else {
		attrs = simpleStringValueAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSimpleVersionInfo(recurse bool, tkh keyhubmodel.SimpleVersionInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleVersionInfoAttrTypesRSRecurse
	} else {
		attrs = simpleVersionInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["contract_versions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetContractVersions(), func(tkh int32, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(int64(tkh))
		})
		diags.Append(d...)
		obj["contract_versions"] = val
	}
	obj["key_hub_version"] = types.StringPointerValue(tkh.GetKeyHubVersion())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolder(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultDeletedVaultHolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetRecordCount()))
	obj["vault_deleted_vault_holder_type"] = stringerToTF(tkh.GetVaultDeletedVaultHolderType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolderLinkableWrapper(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultDeletedVaultHolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultDeletedVaultHolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolder_additionalObjects(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultRecovery(recurse bool, tkh keyhubmodel.VaultDeletedVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultRecoveryAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultRecoveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["prefix"] = types.StringPointerValue(tkh.GetPrefix())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())
	obj["target_group_uuid"] = withUuidToTF(tkh.GetTargetGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultMoveVaultRecord(recurse bool, tkh keyhubmodel.VaultMoveVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecordAttrTypesRSRecurse
	} else {
		attrs = vaultMoveVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectRSVaultMoveVaultRecord_shareDuration(recurse, tkh.GetShareDuration())
		diags.Append(d...)
		obj["share_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultMoveVaultRecord_shareDuration(recurse bool, tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesRSRecurse
	} else {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVault(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesRSRecurse
	} else {
		attrs = vaultVaultAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultHolder(recurse bool, tkh keyhubmodel.VaultVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultHolderAttrTypesRSRecurse
	} else {
		attrs = vaultVaultHolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())
	obj["write_totp"] = types.BoolPointerValue(tkh.GetWriteTotp())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordShare(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["vault_vault_record_share_type"] = stringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordShareSummary(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecordShare(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordShare(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	obj["parent_uuid"] = withUuidToTF(tkh.GetParent())
	{
		val, d := tkhToTFObjectRSVaultVaultRecordSecrets(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordShareSummary(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordPrimerLinkableWrapper(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultHolder(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecovery(recurse bool, tkh keyhubmodel.VaultVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecoveryAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecoveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultUnlock(recurse bool, tkh keyhubmodel.VaultVaultUnlockable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockAttrTypesRSRecurse
	} else {
		attrs = vaultVaultUnlockAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultUnlockResponse(recurse bool, tkh keyhubmodel.VaultVaultUnlockResponseable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockResponseAttrTypesRSRecurse
	} else {
		attrs = vaultVaultUnlockResponseAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["expires_at"] = timePointerToTF(tkh.GetExpiresAt())
	obj["session_password"] = types.StringPointerValue(tkh.GetSessionPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhook(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSWebhookWebhook_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	obj["client_uuid"] = withUuidToTF(tkh.GetClient())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDeliveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = timePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDeliveryLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookDeliveryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSWebhookWebhookDelivery(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDelivery_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSWebhookWebhook(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookNameUuid(recurse bool, tkh keyhubmodel.WebhookWebhookNameUuidable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookNameUuidAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookNameUuidAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSLinkable(recurse, tkh.GetObject())
		diags.Append(d...)
		obj["object"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookPush(recurse bool, tkh keyhubmodel.WebhookWebhookPushable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookPushAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookPushAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetByParty())
		diags.Append(d...)
		obj["by_party"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroup2())
		diags.Append(d...)
		obj["group2"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroupClassification())
		diags.Append(d...)
		obj["group_classification"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetModificationRequest())
		diags.Append(d...)
		obj["modification_request"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())
	obj["seq"] = types.Int64PointerValue(tkh.GetSeq())
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["timestamp"] = timePointerToTF(tkh.GetTimestamp())
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}
	obj["webhook_webhook_push_type"] = stringerToTF(tkh.GetWebhookWebhookPushType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhook_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}
