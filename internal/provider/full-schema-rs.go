// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func resourceSchemaAttrsAuditInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["created_by"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_modified_by"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsErrorReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["application_error"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_error_parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsErrorReport_applicationErrorParameters(recurse),
		Optional:   true,
	}
	schemaAttrs["code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["error_details"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["exception"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["message"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["stacktrace"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsErrorReport_applicationErrorParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsGeneratedSecret(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["generated_secret"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["old_secret"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["regenerate"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLinkable(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNonLinkable(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsRestLink(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["href"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["id"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["rel"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["type_escaped"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsSegmentCount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsAuditAuditRecord_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["audit_audit_record_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["date_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_account"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_certificate"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_client"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_directory"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group2"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group_classification"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_organizational_unit"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_service_account"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_system"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_vault_record"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_webhook"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["performed_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecordLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuditAuditRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecord_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsAuthAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["validity"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["email"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["locale"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["valid_in_directory"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountBulkUpdate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["action"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["exclusive_selection"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["selected_accounts"] = rsschema.ListAttribute{
		ElementType: types.Int64Type,
		Required:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountChangeLocale(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["locale"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["validity"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountRecoveryStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["pending2_f_a_recovery_request"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["pending_password_recovery_request"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountSettings(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["default_organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["in_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["in_multiple_organizational_units"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["key_hub_admin"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["multiple_organizational_units_exist"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["password_mode"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["two_factor_authentication"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["use_token_password"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["can_request_groups"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["decline_recovery_requests"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["license_role"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["reregistration_required"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["two_factor_authentication_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["active_login"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["pending_recovery_requests"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountRecoveryStatus(recurse),
		Computed:   true,
	}
	schemaAttrs["settings"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountSettings(recurse),
		Computed:   true,
	}
	schemaAttrs["stored_attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthStoredAccountAttributes(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["directory_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse),
		Optional:   true,
	}
	schemaAttrs["two_f_a_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse),
		Optional:   true,
	}
	schemaAttrs["validity_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["activation_code"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["first_name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["last_name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["telephone"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthInternalAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccountStatusObject(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["status"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthMoveInternalAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["internal_directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryInternalDirectory(recurse),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthPermission(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["full"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["instances"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["operations"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["type_escaped"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthStoredAccountAttribute(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthStoredAccountAttributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["attributes"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthStoredAccountAttribute(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsCertificateCertificate_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["alias"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["subject_d_n"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificateLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsCertificateCertificate(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificatePrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["alias"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["subject_d_n"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificate_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplication(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientClientApplication(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplicationPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplication_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["groupclients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGeneratedSecret(recurse),
		Optional:   true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse),
		Optional:   true,
	}
	schemaAttrs["vault_record_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientLdapClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_dn"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_secret_in_vault"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["shared_secret_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["used_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2Client(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client_attributes(false),
		Optional:   true,
	}
	schemaAttrs["callback_u_r_i"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["confidential"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["debug_mode"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["id_token_claims"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["initiate_login_u_r_i"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["resource_u_r_is"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_secret_in_vault"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["shared_secret_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["show_landing_page"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["use_client_credentials"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermission(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["for_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["for_system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["for_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["for_system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client(false),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2Client_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsClientSaml2Client(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientSaml2Client_attributes(false),
		Optional:   true,
	}
	schemaAttrs["metadata"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["metadata_url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["subject_format"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientSaml2Client_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectorySummary(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["directory_account_directory_summary_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["domain_restriction"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["fully_resolved_issuer"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Optional:   true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectorySummary(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryInternalDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["attributes_to_store"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["dialect"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("ACTIVE_DIRECTORY"),
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["password_recovery"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["search_bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["search_bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["search_filter"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryMaintenanceDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryOIDCDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["acr_values"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes_to_store"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["domain_restriction"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["enforces2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["fully_resolved_issuer"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["issuer"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["logout_url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["send_login_hint"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vendor_escaped"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(false),
		Optional:   true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupAccountGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	schemaAttrs["group_count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["admin"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["application_administration"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["audit_config"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditConfig(false),
		Optional:   true,
	}
	schemaAttrs["audit_requested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["auditor"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_auditing_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_delegation_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_membership_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_provisioning_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["classification_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["extended_access"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NOT_ALLOWED"),
	}
	schemaAttrs["hide_audit_trail"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["nested_under_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_group"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["record_trail"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["single_managed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_recovery"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("FULL"),
	}
	schemaAttrs["vault_requires_activation"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["disconnected_nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["two_factor_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountNesting(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["connected"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		Optional:   true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAdminMail(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["body"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAudit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["accounts"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAuditAccount(false),
		},
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["submitted_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_valid"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["disconnected_nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditConfig(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["months"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAudit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAudit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditingInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit_due_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_audit_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["nr_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_disabled_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_disabled_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_expired_vault_records"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_vault_records_with_end_date"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupClassification_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["authorizing_group_auditing_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_delegation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_membership_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_provisioning_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["default_classification"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["maximum_audit_interval"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["minimum_nr_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(1),
	}
	schemaAttrs["record_trail_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["required_months"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["rotating_password_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_requires_activation"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nr_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationUpdate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["classificaton_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassification_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["info"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClassificationInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupClient_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["client_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClient(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClient_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupFolder_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolderLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolder_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nr_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_accounts_with_vault"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_audits"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_clients"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_provisioned_systems"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_vault_records"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["admin"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	schemaAttrs["segments"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsSegmentCount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["administered_clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["admins"] = rsschema.SingleNestedAttribute{
		Attributes:         resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Optional:           true,
		DeprecationMessage: "This property will be removed in a future version.",
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["authorized_groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["client_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["content_administered_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groupauditinginfo"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditingInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupinfo"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["helpdesk"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["myaccount"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["mydelegatedaccount"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["nested_groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_directories"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_groups_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_organizational_units"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["recent_audits"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["requeststatus"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	schemaAttrs["webhooks"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audited_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["classifications"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Optional: true,
	}
	schemaAttrs["overdue_audit_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["overdue_vault_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["unaudited_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["valid_vault_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["vaults_without_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupProvisioningGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes:    resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:      true,
		PlanModifiers: []planmodifier.Object{objectplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupProvisioningGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse),
		Optional:   true,
	}
	schemaAttrs["title"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadManualLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["title"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["current_license_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_company"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_contact"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_domains"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["details"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["features"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["issue_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["key_hub_domain"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["license_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["not_before_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["users_hard_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["users_pro_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["users_soft_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["version"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarker(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["level"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mark_item_marker_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarker_parameters(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarker_parameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarkers(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["markers"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsMarkItemMarker(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationCertificateExpiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["certificate"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsCertificateCertificate(recurse),
		Optional:   true,
	}
	schemaAttrs["directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryLDAPDirectory(recurse),
		Optional:   true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ldap_client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientLdapClient(recurse),
		Optional:   true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		Optional:   true,
	}
	schemaAttrs["usage"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["webhook"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhook(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupAuditRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["due_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["notification_group_audit_required_notification_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupEditRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse),
		Optional:   true,
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationLicenseStatusNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["active_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["license_info"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationModificationRequestNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["admins"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["groups"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["request"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestModificationRequest(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationNotifications(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsNotificationNotification(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationOldApiVersionUsageNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["api_version"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationProvisionConfigRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["systems"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["groups"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationUpdateAvailableNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["released_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationVaultRecordExpiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["record"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["depth"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["parent_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["create_as_parent_of"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAbstractProvisionedLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["result"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroup(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["status"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["number_of_failed_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["number_of_not_permitted_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["number_of_successful_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["state"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystem(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["provgroups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["service_accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		Optional:   true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["provisioning_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse),
		Optional:   true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_permission_end_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status_report"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse),
		Optional:   true,
	}
	schemaAttrs["visible_on_dashboard"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Optional: true,
	}
	schemaAttrs["unlinked_count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequence(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["next_u_i_d"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(2000),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAD(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["sam_account_name_scheme"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uid"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureTenant(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["idp_domain"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedInternalLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientLdapClient(false),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["gid"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["hashing_scheme"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["numbering"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystem(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["issued_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["login_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["management_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["statistics"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse),
		Computed:   true,
	}
	schemaAttrs["supported_group_types"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["create_new_groups_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["create_service_accounts_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["reuse_existing_groups_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["groups"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse),
		},
		Optional: true,
	}
	schemaAttrs["ignore_errors"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["restricted_by_license"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningTokenPassword(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractApplicationModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["access_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["make_manager"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsRequestAddGroupAdminRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_admin_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateGroupOnSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateServiceAccountRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestDisable2FARequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["subject"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestExtendAccessRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["extend_until"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantAccessRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantApplicationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantClientPermissionRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["permission_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantGroupOnSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantServiceAccountGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	schemaAttrs["service_account_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestJoinGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestJoinVaultRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequestLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRequestModificationRequest(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequest_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accept_params"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse),
		Optional:   true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reset_status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestPasswordResetRequestStatus(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestPasswordResetRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_vault_and_directory_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_vault_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["unsynced_password"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestPasswordResetRequestStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["cooldown_end"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["managers"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["nr_accepted"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["reset_via_mail"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveProvisionedSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestReviewAuditRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRevokeAdminRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["admin_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestSetupAuthorizingGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["connect"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["requesting_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestSetupNestedGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_action"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["connect"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["requesting_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferApplicationAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferApplicationOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferAuditorGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["service_account_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestUpdateGroupMembershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_to_update_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["current_end_date"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_rights"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["update_group_membership_type"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestVerifyInternalAccountRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["internal_account_name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password_rotation"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGeneratedSecret(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["disabled_count"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["password_scheme_enabled_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse),
		Optional:   true,
	}
	schemaAttrs["system_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsSimpleStringValue(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["value"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsSimpleVersionInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["contract_versions"] = rsschema.ListAttribute{
		ElementType: types.Int64Type,
		Optional:    true,
	}
	schemaAttrs["key_hub_version"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["record_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vault_deleted_vault_holder_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultDeletedVaultHolder(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultRecovery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["target_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultMoveVaultRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["action"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MOVE"),
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVault(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["access_available"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["records"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultHolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["color"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["share_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["derived"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["filename"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["warning_period"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["color"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["share_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordSecrets(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["file"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["totp"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["write_totp"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordShare(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["vault_vault_record_share_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordShareSummary(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["children"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecordShare(recurse),
		},
		Optional: true,
	}
	schemaAttrs["parent"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordShare(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecord_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["parent_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordSecrets(recurse),
		Optional:   true,
	}
	schemaAttrs["share_summary"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordShareSummary(recurse),
		Computed:   true,
	}
	schemaAttrs["shares"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse),
		Optional:   true,
	}
	schemaAttrs["vaultholder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultHolder(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecovery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultUnlock(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultUnlockResponse(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["expires_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["session_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhook(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsWebhookWebhook_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["all_types"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authentication_scheme"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["basic_auth_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["basic_auth_username"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bearer_token"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["custom_header_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["custom_header_value"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("SECURE"),
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["url"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["verbose_payloads"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDelivery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["payload"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookPush(false),
		Optional:   true,
	}
	schemaAttrs["reponse_headers"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["request_headers"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["response"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["time"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["trigger_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsWebhookWebhookDelivery(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsWebhookWebhook(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookNameUuid(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["object"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLinkable(recurse),
		Optional:   true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookPush(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["by_party"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["certificate"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group2"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group_classification"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["modification_request"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["organizational_unit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["parameter1"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameter2"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameter3"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["security_level"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["seq"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["timestamp"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["vault_record"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["webhook"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["webhook_webhook_push_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhook_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
