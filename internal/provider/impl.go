// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/microsoft/kiota-abstractions-go/serialization"
	keyhub "github.com/topicuskeyhub/sdk-go"
	keyhubaccount "github.com/topicuskeyhub/sdk-go/account"
	keyhubcertificate "github.com/topicuskeyhub/sdk-go/certificate"
	keyhubclient "github.com/topicuskeyhub/sdk-go/client"
	keyhubdirectory "github.com/topicuskeyhub/sdk-go/directory"
	keyhubgroup "github.com/topicuskeyhub/sdk-go/group"
	keyhubgroupclassification "github.com/topicuskeyhub/sdk-go/groupclassification"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
	keyhuborganizationalunit "github.com/topicuskeyhub/sdk-go/organizationalunit"
	keyhubserviceaccount "github.com/topicuskeyhub/sdk-go/serviceaccount"
	keyhubsystem "github.com/topicuskeyhub/sdk-go/system"
	keyhubvaultrecord "github.com/topicuskeyhub/sdk-go/vaultrecord"
)

var auditInfoAttrTypesRS = objectAttrsTypeRSAuditInfo(false)
var auditInfoAttrTypesRSRecurse = objectAttrsTypeRSAuditInfo(true)

type auditInfoDataRS struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	CreatedBy      types.String `tfsdk:"created_by"`
	LastModifiedAt types.String `tfsdk:"last_modified_at"`
	LastModifiedBy types.String `tfsdk:"last_modified_by"`
}

var auditInfoAttrTypesDS = objectAttrsTypeDSAuditInfo(false)
var auditInfoAttrTypesDSRecurse = objectAttrsTypeDSAuditInfo(true)

type auditInfoDataDS struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	CreatedBy      types.String `tfsdk:"created_by"`
	LastModifiedAt types.String `tfsdk:"last_modified_at"`
	LastModifiedBy types.String `tfsdk:"last_modified_by"`
}

var errorReportAttrTypesRS = objectAttrsTypeRSErrorReport(false)
var errorReportAttrTypesRSRecurse = objectAttrsTypeRSErrorReport(true)

type errorReportDataRS struct {
	ApplicationError           types.String `tfsdk:"application_error"`
	ApplicationErrorParameters types.Object `tfsdk:"application_error_parameters"`
	Code                       types.Int64  `tfsdk:"code"`
	ErrorDetails               types.List   `tfsdk:"error_details"`
	Exception                  types.String `tfsdk:"exception"`
	Message                    types.String `tfsdk:"message"`
	Reason                     types.String `tfsdk:"reason"`
	Stacktrace                 types.List   `tfsdk:"stacktrace"`
}

var errorReportAttrTypesDS = objectAttrsTypeDSErrorReport(false)
var errorReportAttrTypesDSRecurse = objectAttrsTypeDSErrorReport(true)

type errorReportDataDS struct {
	ApplicationError           types.String `tfsdk:"application_error"`
	ApplicationErrorParameters types.Object `tfsdk:"application_error_parameters"`
	Code                       types.Int64  `tfsdk:"code"`
	ErrorDetails               types.List   `tfsdk:"error_details"`
	Exception                  types.String `tfsdk:"exception"`
	Message                    types.String `tfsdk:"message"`
	Reason                     types.String `tfsdk:"reason"`
	Stacktrace                 types.List   `tfsdk:"stacktrace"`
}

var errorReport_applicationErrorParametersAttrTypesRS = objectAttrsTypeRSErrorReport_applicationErrorParameters(false)
var errorReport_applicationErrorParametersAttrTypesRSRecurse = objectAttrsTypeRSErrorReport_applicationErrorParameters(true)

type errorReport_applicationErrorParametersDataRS struct {
}

var errorReport_applicationErrorParametersAttrTypesDS = objectAttrsTypeDSErrorReport_applicationErrorParameters(false)
var errorReport_applicationErrorParametersAttrTypesDSRecurse = objectAttrsTypeDSErrorReport_applicationErrorParameters(true)

type errorReport_applicationErrorParametersDataDS struct {
}

var generatedSecretAttrTypesRS = objectAttrsTypeRSGeneratedSecret(false)
var generatedSecretAttrTypesRSRecurse = objectAttrsTypeRSGeneratedSecret(true)

type generatedSecretDataRS struct {
	GeneratedSecret types.String `tfsdk:"generated_secret"`
	OldSecret       types.String `tfsdk:"old_secret"`
	Regenerate      types.Bool   `tfsdk:"regenerate"`
}

var generatedSecretAttrTypesDS = objectAttrsTypeDSGeneratedSecret(false)
var generatedSecretAttrTypesDSRecurse = objectAttrsTypeDSGeneratedSecret(true)

type generatedSecretDataDS struct {
	GeneratedSecret types.String `tfsdk:"generated_secret"`
	OldSecret       types.String `tfsdk:"old_secret"`
	Regenerate      types.Bool   `tfsdk:"regenerate"`
}

var linkableAttrTypesRS = objectAttrsTypeRSLinkable(false)
var linkableAttrTypesRSRecurse = objectAttrsTypeRSLinkable(true)

type linkableDataRS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var linkableAttrTypesDS = objectAttrsTypeDSLinkable(false)
var linkableAttrTypesDSRecurse = objectAttrsTypeDSLinkable(true)

type linkableDataDS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var nonLinkableAttrTypesRS = objectAttrsTypeRSNonLinkable(false)
var nonLinkableAttrTypesRSRecurse = objectAttrsTypeRSNonLinkable(true)

type nonLinkableDataRS struct {
}

var nonLinkableAttrTypesDS = objectAttrsTypeDSNonLinkable(false)
var nonLinkableAttrTypesDSRecurse = objectAttrsTypeDSNonLinkable(true)

type nonLinkableDataDS struct {
}

var restLinkAttrTypesRS = objectAttrsTypeRSRestLink(false)
var restLinkAttrTypesRSRecurse = objectAttrsTypeRSRestLink(true)

type restLinkDataRS struct {
	Href        types.String `tfsdk:"href"`
	ID          types.Int64  `tfsdk:"id"`
	Rel         types.String `tfsdk:"rel"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var restLinkAttrTypesDS = objectAttrsTypeDSRestLink(false)
var restLinkAttrTypesDSRecurse = objectAttrsTypeDSRestLink(true)

type restLinkDataDS struct {
	Href        types.String `tfsdk:"href"`
	ID          types.Int64  `tfsdk:"id"`
	Rel         types.String `tfsdk:"rel"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var segmentCountAttrTypesRS = objectAttrsTypeRSSegmentCount(false)
var segmentCountAttrTypesRSRecurse = objectAttrsTypeRSSegmentCount(true)

type segmentCountDataRS struct {
	Count types.Int64  `tfsdk:"count"`
	Name  types.String `tfsdk:"name"`
}

var segmentCountAttrTypesDS = objectAttrsTypeDSSegmentCount(false)
var segmentCountAttrTypesDSRecurse = objectAttrsTypeDSSegmentCount(true)

type segmentCountDataDS struct {
	Count types.Int64  `tfsdk:"count"`
	Name  types.String `tfsdk:"name"`
}

var auditAuditRecordAttrTypesRS = objectAttrsTypeRSAuditAuditRecord(false)
var auditAuditRecordAttrTypesRSRecurse = objectAttrsTypeRSAuditAuditRecord(true)

type auditAuditRecordDataRS struct {
	Links                 types.List   `tfsdk:"links"`
	Permissions           types.List   `tfsdk:"permissions"`
	AdditionalObjects     types.Object `tfsdk:"additional_objects"`
	AuditAuditRecordType  types.String `tfsdk:"audit_audit_record_type"`
	DateTime              types.String `tfsdk:"date_time"`
	OnAccount             types.String `tfsdk:"on_account"`
	OnCertificate         types.String `tfsdk:"on_certificate"`
	OnClient              types.String `tfsdk:"on_client"`
	OnDirectory           types.String `tfsdk:"on_directory"`
	OnGroup               types.String `tfsdk:"on_group"`
	OnGroup2              types.String `tfsdk:"on_group2"`
	OnGroupClassification types.String `tfsdk:"on_group_classification"`
	OnOrganizationalUnit  types.String `tfsdk:"on_organizational_unit"`
	OnServiceAccount      types.String `tfsdk:"on_service_account"`
	OnSystem              types.String `tfsdk:"on_system"`
	OnVaultRecord         types.String `tfsdk:"on_vault_record"`
	OnWebhook             types.String `tfsdk:"on_webhook"`
	Parameter1            types.String `tfsdk:"parameter1"`
	Parameter2            types.String `tfsdk:"parameter2"`
	Parameter3            types.String `tfsdk:"parameter3"`
	PerformedBy           types.String `tfsdk:"performed_by"`
	SecurityLevel         types.String `tfsdk:"security_level"`
}

var auditAuditRecordAttrTypesDS = objectAttrsTypeDSAuditAuditRecord(false)
var auditAuditRecordAttrTypesDSRecurse = objectAttrsTypeDSAuditAuditRecord(true)

type auditAuditRecordDataDS struct {
	Links                 types.List   `tfsdk:"links"`
	Permissions           types.List   `tfsdk:"permissions"`
	AdditionalObjects     types.Object `tfsdk:"additional_objects"`
	AuditAuditRecordType  types.String `tfsdk:"audit_audit_record_type"`
	DateTime              types.String `tfsdk:"date_time"`
	OnAccount             types.String `tfsdk:"on_account"`
	OnCertificate         types.String `tfsdk:"on_certificate"`
	OnClient              types.String `tfsdk:"on_client"`
	OnDirectory           types.String `tfsdk:"on_directory"`
	OnGroup               types.String `tfsdk:"on_group"`
	OnGroup2              types.String `tfsdk:"on_group2"`
	OnGroupClassification types.String `tfsdk:"on_group_classification"`
	OnOrganizationalUnit  types.String `tfsdk:"on_organizational_unit"`
	OnServiceAccount      types.String `tfsdk:"on_service_account"`
	OnSystem              types.String `tfsdk:"on_system"`
	OnVaultRecord         types.String `tfsdk:"on_vault_record"`
	OnWebhook             types.String `tfsdk:"on_webhook"`
	Parameter1            types.String `tfsdk:"parameter1"`
	Parameter2            types.String `tfsdk:"parameter2"`
	Parameter3            types.String `tfsdk:"parameter3"`
	PerformedBy           types.String `tfsdk:"performed_by"`
	SecurityLevel         types.String `tfsdk:"security_level"`
}

var auditAuditRecordLinkableWrapperAttrTypesRS = objectAttrsTypeRSAuditAuditRecordLinkableWrapper(false)
var auditAuditRecordLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSAuditAuditRecordLinkableWrapper(true)

type auditAuditRecordLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var auditAuditRecordLinkableWrapperAttrTypesDS = objectAttrsTypeDSAuditAuditRecordLinkableWrapper(false)
var auditAuditRecordLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSAuditAuditRecordLinkableWrapper(true)

type auditAuditRecordLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var auditAuditRecord_additionalObjectsAttrTypesRS = objectAttrsTypeRSAuditAuditRecord_additionalObjects(false)
var auditAuditRecord_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSAuditAuditRecord_additionalObjects(true)

type auditAuditRecord_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var auditAuditRecord_additionalObjectsAttrTypesDS = objectAttrsTypeDSAuditAuditRecord_additionalObjects(false)
var auditAuditRecord_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSAuditAuditRecord_additionalObjects(true)

type auditAuditRecord_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var authAccountAttrTypesRS = objectAttrsTypeRSAuthAccount(false)
var authAccountAttrTypesRSRecurse = objectAttrsTypeRSAuthAccount(true)

type authAccountDataRS struct {
	Links                           types.List   `tfsdk:"links"`
	Permissions                     types.List   `tfsdk:"permissions"`
	DisplayName                     types.String `tfsdk:"display_name"`
	LastActive                      types.String `tfsdk:"last_active"`
	Username                        types.String `tfsdk:"username"`
	UUID                            types.String `tfsdk:"uuid"`
	Validity                        types.String `tfsdk:"validity"`
	AccountPermissions              types.List   `tfsdk:"account_permissions"`
	Active                          types.Bool   `tfsdk:"active"`
	AdditionalObjects               types.Object `tfsdk:"additional_objects"`
	CanRequestGroups                types.Bool   `tfsdk:"can_request_groups"`
	DirectoryUUID                   types.String `tfsdk:"directory_uuid"`
	DirectoryName                   types.String `tfsdk:"directory_name"`
	DirectoryPasswordChangeRequired types.Bool   `tfsdk:"directory_password_change_required"`
	DirectoryRotatingPassword       types.String `tfsdk:"directory_rotating_password"`
	DirectoryType                   types.String `tfsdk:"directory_type"`
	Email                           types.String `tfsdk:"email"`
	IDInDirectory                   types.String `tfsdk:"id_in_directory"`
	KeyHubPasswordChangeRequired    types.Bool   `tfsdk:"key_hub_password_change_required"`
	LastModifiedAt                  types.String `tfsdk:"last_modified_at"`
	LicenseRole                     types.String `tfsdk:"license_role"`
	Locale                          types.String `tfsdk:"locale"`
	ReregistrationRequired          types.Bool   `tfsdk:"reregistration_required"`
	TokenPasswordEnabled            types.Bool   `tfsdk:"token_password_enabled"`
	TwoFactorStatus                 types.String `tfsdk:"two_factor_status"`
	ValidInDirectory                types.Bool   `tfsdk:"valid_in_directory"`
}

var authAccountAttrTypesDS = objectAttrsTypeDSAuthAccount(false)
var authAccountAttrTypesDSRecurse = objectAttrsTypeDSAuthAccount(true)

type authAccountDataDS struct {
	Links                           types.List   `tfsdk:"links"`
	Permissions                     types.List   `tfsdk:"permissions"`
	DisplayName                     types.String `tfsdk:"display_name"`
	LastActive                      types.String `tfsdk:"last_active"`
	Username                        types.String `tfsdk:"username"`
	UUID                            types.String `tfsdk:"uuid"`
	Validity                        types.String `tfsdk:"validity"`
	AccountPermissions              types.List   `tfsdk:"account_permissions"`
	Active                          types.Bool   `tfsdk:"active"`
	AdditionalObjects               types.Object `tfsdk:"additional_objects"`
	CanRequestGroups                types.Bool   `tfsdk:"can_request_groups"`
	Directory                       types.Object `tfsdk:"directory"`
	DirectoryName                   types.String `tfsdk:"directory_name"`
	DirectoryPasswordChangeRequired types.Bool   `tfsdk:"directory_password_change_required"`
	DirectoryRotatingPassword       types.String `tfsdk:"directory_rotating_password"`
	DirectoryType                   types.String `tfsdk:"directory_type"`
	Email                           types.String `tfsdk:"email"`
	IDInDirectory                   types.String `tfsdk:"id_in_directory"`
	KeyHubPasswordChangeRequired    types.Bool   `tfsdk:"key_hub_password_change_required"`
	LastModifiedAt                  types.String `tfsdk:"last_modified_at"`
	LicenseRole                     types.String `tfsdk:"license_role"`
	Locale                          types.String `tfsdk:"locale"`
	ReregistrationRequired          types.Bool   `tfsdk:"reregistration_required"`
	TokenPasswordEnabled            types.Bool   `tfsdk:"token_password_enabled"`
	TwoFactorStatus                 types.String `tfsdk:"two_factor_status"`
	ValidInDirectory                types.Bool   `tfsdk:"valid_in_directory"`
}

var authAccountBulkUpdateAttrTypesRS = objectAttrsTypeRSAuthAccountBulkUpdate(false)
var authAccountBulkUpdateAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountBulkUpdate(true)

type authAccountBulkUpdateDataRS struct {
	Action             types.String `tfsdk:"action"`
	ExclusiveSelection types.Bool   `tfsdk:"exclusive_selection"`
	SelectedAccounts   types.List   `tfsdk:"selected_accounts"`
}

var authAccountBulkUpdateAttrTypesDS = objectAttrsTypeDSAuthAccountBulkUpdate(false)
var authAccountBulkUpdateAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountBulkUpdate(true)

type authAccountBulkUpdateDataDS struct {
	Action             types.String `tfsdk:"action"`
	ExclusiveSelection types.Bool   `tfsdk:"exclusive_selection"`
	SelectedAccounts   types.List   `tfsdk:"selected_accounts"`
}

var authAccountChangeLocaleAttrTypesRS = objectAttrsTypeRSAuthAccountChangeLocale(false)
var authAccountChangeLocaleAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountChangeLocale(true)

type authAccountChangeLocaleDataRS struct {
	Locale types.String `tfsdk:"locale"`
}

var authAccountChangeLocaleAttrTypesDS = objectAttrsTypeDSAuthAccountChangeLocale(false)
var authAccountChangeLocaleAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountChangeLocale(true)

type authAccountChangeLocaleDataDS struct {
	Locale types.String `tfsdk:"locale"`
}

var authAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSAuthAccountLinkableWrapper(false)
var authAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountLinkableWrapper(true)

type authAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var authAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSAuthAccountLinkableWrapper(false)
var authAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountLinkableWrapper(true)

type authAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var authAccountPrimerAttrTypesRS = objectAttrsTypeRSAuthAccountPrimer(false)
var authAccountPrimerAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountPrimer(true)

type authAccountPrimerDataRS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	DisplayName types.String `tfsdk:"display_name"`
	LastActive  types.String `tfsdk:"last_active"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
	Validity    types.String `tfsdk:"validity"`
}

var authAccountPrimerAttrTypesDS = objectAttrsTypeDSAuthAccountPrimer(false)
var authAccountPrimerAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountPrimer(true)

type authAccountPrimerDataDS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	DisplayName types.String `tfsdk:"display_name"`
	LastActive  types.String `tfsdk:"last_active"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
	Validity    types.String `tfsdk:"validity"`
}

var authAccountRecoveryStatusAttrTypesRS = objectAttrsTypeRSAuthAccountRecoveryStatus(false)
var authAccountRecoveryStatusAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountRecoveryStatus(true)

type authAccountRecoveryStatusDataRS struct {
	Pending2FARecoveryRequest      types.Bool `tfsdk:"pending2_f_a_recovery_request"`
	PendingPasswordRecoveryRequest types.Bool `tfsdk:"pending_password_recovery_request"`
}

var authAccountRecoveryStatusAttrTypesDS = objectAttrsTypeDSAuthAccountRecoveryStatus(false)
var authAccountRecoveryStatusAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountRecoveryStatus(true)

type authAccountRecoveryStatusDataDS struct {
	Pending2FARecoveryRequest      types.Bool `tfsdk:"pending2_f_a_recovery_request"`
	PendingPasswordRecoveryRequest types.Bool `tfsdk:"pending_password_recovery_request"`
}

var authAccountSettingsAttrTypesRS = objectAttrsTypeRSAuthAccountSettings(false)
var authAccountSettingsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountSettings(true)

type authAccountSettingsDataRS struct {
	DefaultOrganizationalUnitUUID    types.String `tfsdk:"default_organizational_unit_uuid"`
	DirectoryName                    types.String `tfsdk:"directory_name"`
	DirectoryType                    types.String `tfsdk:"directory_type"`
	InGroups                         types.Bool   `tfsdk:"in_groups"`
	InMultipleOrganizationalUnits    types.Bool   `tfsdk:"in_multiple_organizational_units"`
	KeyHubAdmin                      types.Bool   `tfsdk:"key_hub_admin"`
	MultipleOrganizationalUnitsExist types.Bool   `tfsdk:"multiple_organizational_units_exist"`
	PasswordMode                     types.String `tfsdk:"password_mode"`
	SshPublicKey                     types.String `tfsdk:"ssh_public_key"`
	TwoFactorAuthentication          types.String `tfsdk:"two_factor_authentication"`
	UseTokenPassword                 types.Bool   `tfsdk:"use_token_password"`
	VaultStatus                      types.String `tfsdk:"vault_status"`
}

var authAccountSettingsAttrTypesDS = objectAttrsTypeDSAuthAccountSettings(false)
var authAccountSettingsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountSettings(true)

type authAccountSettingsDataDS struct {
	DefaultOrganizationalUnit        types.Object `tfsdk:"default_organizational_unit"`
	DirectoryName                    types.String `tfsdk:"directory_name"`
	DirectoryType                    types.String `tfsdk:"directory_type"`
	InGroups                         types.Bool   `tfsdk:"in_groups"`
	InMultipleOrganizationalUnits    types.Bool   `tfsdk:"in_multiple_organizational_units"`
	KeyHubAdmin                      types.Bool   `tfsdk:"key_hub_admin"`
	MultipleOrganizationalUnitsExist types.Bool   `tfsdk:"multiple_organizational_units_exist"`
	PasswordMode                     types.String `tfsdk:"password_mode"`
	SshPublicKey                     types.String `tfsdk:"ssh_public_key"`
	TwoFactorAuthentication          types.String `tfsdk:"two_factor_authentication"`
	UseTokenPassword                 types.Bool   `tfsdk:"use_token_password"`
	VaultStatus                      types.String `tfsdk:"vault_status"`
}

var authAccountStatusAttrTypesRS = objectAttrsTypeRSAuthAccountStatus(false)
var authAccountStatusAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountStatus(true)

type authAccountStatusDataRS struct {
	AccountEnabled                 types.Bool   `tfsdk:"account_enabled"`
	CanRequestGroups               types.Bool   `tfsdk:"can_request_groups"`
	DeclineRecoveryRequests        types.Bool   `tfsdk:"decline_recovery_requests"`
	LicenseRole                    types.String `tfsdk:"license_role"`
	ReregistrationRequired         types.Bool   `tfsdk:"reregistration_required"`
	TwoFactorAuthenticationEnabled types.Bool   `tfsdk:"two_factor_authentication_enabled"`
}

var authAccountStatusAttrTypesDS = objectAttrsTypeDSAuthAccountStatus(false)
var authAccountStatusAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountStatus(true)

type authAccountStatusDataDS struct {
	AccountEnabled                 types.Bool   `tfsdk:"account_enabled"`
	CanRequestGroups               types.Bool   `tfsdk:"can_request_groups"`
	DeclineRecoveryRequests        types.Bool   `tfsdk:"decline_recovery_requests"`
	LicenseRole                    types.String `tfsdk:"license_role"`
	ReregistrationRequired         types.Bool   `tfsdk:"reregistration_required"`
	TwoFactorAuthenticationEnabled types.Bool   `tfsdk:"two_factor_authentication_enabled"`
}

var authAccount_additionalObjectsAttrTypesRS = objectAttrsTypeRSAuthAccount_additionalObjects(false)
var authAccount_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccount_additionalObjects(true)

type authAccount_additionalObjectsDataRS struct {
	ActiveLogin             types.Bool   `tfsdk:"active_login"`
	Audit                   types.Object `tfsdk:"audit"`
	Groups                  types.Object `tfsdk:"groups"`
	PendingRecoveryRequests types.Object `tfsdk:"pending_recovery_requests"`
	Settings                types.Object `tfsdk:"settings"`
	StoredAttributes        types.Object `tfsdk:"stored_attributes"`
	Vault                   types.Object `tfsdk:"vault"`
}

var authAccount_additionalObjectsAttrTypesDS = objectAttrsTypeDSAuthAccount_additionalObjects(false)
var authAccount_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccount_additionalObjects(true)

type authAccount_additionalObjectsDataDS struct {
	ActiveLogin             types.Bool   `tfsdk:"active_login"`
	Audit                   types.Object `tfsdk:"audit"`
	Groups                  types.Object `tfsdk:"groups"`
	PendingRecoveryRequests types.Object `tfsdk:"pending_recovery_requests"`
	Settings                types.Object `tfsdk:"settings"`
	StoredAttributes        types.Object `tfsdk:"stored_attributes"`
	Vault                   types.Object `tfsdk:"vault"`
}

var authAccountsAuditStatsAttrTypesRS = objectAttrsTypeRSAuthAccountsAuditStats(false)
var authAccountsAuditStatsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountsAuditStats(true)

type authAccountsAuditStatsDataRS struct {
	DirectoryStats types.Object `tfsdk:"directory_stats"`
	TwoFAStats     types.Object `tfsdk:"two_f_a_stats"`
	ValidityStats  types.Object `tfsdk:"validity_stats"`
}

var authAccountsAuditStatsAttrTypesDS = objectAttrsTypeDSAuthAccountsAuditStats(false)
var authAccountsAuditStatsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountsAuditStats(true)

type authAccountsAuditStatsDataDS struct {
	DirectoryStats types.Object `tfsdk:"directory_stats"`
	TwoFAStats     types.Object `tfsdk:"two_f_a_stats"`
	ValidityStats  types.Object `tfsdk:"validity_stats"`
}

var authAccountsAuditStats_directoryStatsAttrTypesRS = objectAttrsTypeRSAuthAccountsAuditStats_directoryStats(false)
var authAccountsAuditStats_directoryStatsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountsAuditStats_directoryStats(true)

type authAccountsAuditStats_directoryStatsDataRS struct {
}

var authAccountsAuditStats_directoryStatsAttrTypesDS = objectAttrsTypeDSAuthAccountsAuditStats_directoryStats(false)
var authAccountsAuditStats_directoryStatsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountsAuditStats_directoryStats(true)

type authAccountsAuditStats_directoryStatsDataDS struct {
}

var authAccountsAuditStats_twoFAStatsAttrTypesRS = objectAttrsTypeRSAuthAccountsAuditStats_twoFAStats(false)
var authAccountsAuditStats_twoFAStatsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountsAuditStats_twoFAStats(true)

type authAccountsAuditStats_twoFAStatsDataRS struct {
}

var authAccountsAuditStats_twoFAStatsAttrTypesDS = objectAttrsTypeDSAuthAccountsAuditStats_twoFAStats(false)
var authAccountsAuditStats_twoFAStatsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountsAuditStats_twoFAStats(true)

type authAccountsAuditStats_twoFAStatsDataDS struct {
}

var authAccountsAuditStats_validityStatsAttrTypesRS = objectAttrsTypeRSAuthAccountsAuditStats_validityStats(false)
var authAccountsAuditStats_validityStatsAttrTypesRSRecurse = objectAttrsTypeRSAuthAccountsAuditStats_validityStats(true)

type authAccountsAuditStats_validityStatsDataRS struct {
}

var authAccountsAuditStats_validityStatsAttrTypesDS = objectAttrsTypeDSAuthAccountsAuditStats_validityStats(false)
var authAccountsAuditStats_validityStatsAttrTypesDSRecurse = objectAttrsTypeDSAuthAccountsAuditStats_validityStats(true)

type authAccountsAuditStats_validityStatsDataDS struct {
}

var authInternalAccountAttrTypesRS = objectAttrsTypeRSAuthInternalAccount(false)
var authInternalAccountAttrTypesRSRecurse = objectAttrsTypeRSAuthInternalAccount(true)

type authInternalAccountDataRS struct {
	UUID               types.String `tfsdk:"uuid"`
	ActivationCode     types.String `tfsdk:"activation_code"`
	ActivationDeadline types.String `tfsdk:"activation_deadline"`
	Company            types.String `tfsdk:"company"`
	FirstName          types.String `tfsdk:"first_name"`
	LastName           types.String `tfsdk:"last_name"`
	Status             types.String `tfsdk:"status"`
	Telephone          types.String `tfsdk:"telephone"`
}

var authInternalAccountAttrTypesDS = objectAttrsTypeDSAuthInternalAccount(false)
var authInternalAccountAttrTypesDSRecurse = objectAttrsTypeDSAuthInternalAccount(true)

type authInternalAccountDataDS struct {
	Links                           types.List   `tfsdk:"links"`
	Permissions                     types.List   `tfsdk:"permissions"`
	DisplayName                     types.String `tfsdk:"display_name"`
	LastActive                      types.String `tfsdk:"last_active"`
	Username                        types.String `tfsdk:"username"`
	UUID                            types.String `tfsdk:"uuid"`
	Validity                        types.String `tfsdk:"validity"`
	AccountPermissions              types.List   `tfsdk:"account_permissions"`
	Active                          types.Bool   `tfsdk:"active"`
	AdditionalObjects               types.Object `tfsdk:"additional_objects"`
	CanRequestGroups                types.Bool   `tfsdk:"can_request_groups"`
	Directory                       types.Object `tfsdk:"directory"`
	DirectoryName                   types.String `tfsdk:"directory_name"`
	DirectoryPasswordChangeRequired types.Bool   `tfsdk:"directory_password_change_required"`
	DirectoryRotatingPassword       types.String `tfsdk:"directory_rotating_password"`
	DirectoryType                   types.String `tfsdk:"directory_type"`
	Email                           types.String `tfsdk:"email"`
	IDInDirectory                   types.String `tfsdk:"id_in_directory"`
	KeyHubPasswordChangeRequired    types.Bool   `tfsdk:"key_hub_password_change_required"`
	LastModifiedAt                  types.String `tfsdk:"last_modified_at"`
	LicenseRole                     types.String `tfsdk:"license_role"`
	Locale                          types.String `tfsdk:"locale"`
	ReregistrationRequired          types.Bool   `tfsdk:"reregistration_required"`
	TokenPasswordEnabled            types.Bool   `tfsdk:"token_password_enabled"`
	TwoFactorStatus                 types.String `tfsdk:"two_factor_status"`
	ValidInDirectory                types.Bool   `tfsdk:"valid_in_directory"`
	ActivationCode                  types.String `tfsdk:"activation_code"`
	ActivationDeadline              types.String `tfsdk:"activation_deadline"`
	Company                         types.String `tfsdk:"company"`
	FirstName                       types.String `tfsdk:"first_name"`
	LastName                        types.String `tfsdk:"last_name"`
	Status                          types.String `tfsdk:"status"`
	Telephone                       types.String `tfsdk:"telephone"`
}

var authInternalAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSAuthInternalAccountLinkableWrapper(false)
var authInternalAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSAuthInternalAccountLinkableWrapper(true)

type authInternalAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var authInternalAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSAuthInternalAccountLinkableWrapper(false)
var authInternalAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSAuthInternalAccountLinkableWrapper(true)

type authInternalAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var authInternalAccountStatusObjectAttrTypesRS = objectAttrsTypeRSAuthInternalAccountStatusObject(false)
var authInternalAccountStatusObjectAttrTypesRSRecurse = objectAttrsTypeRSAuthInternalAccountStatusObject(true)

type authInternalAccountStatusObjectDataRS struct {
	Status types.String `tfsdk:"status"`
}

var authInternalAccountStatusObjectAttrTypesDS = objectAttrsTypeDSAuthInternalAccountStatusObject(false)
var authInternalAccountStatusObjectAttrTypesDSRecurse = objectAttrsTypeDSAuthInternalAccountStatusObject(true)

type authInternalAccountStatusObjectDataDS struct {
	Status types.String `tfsdk:"status"`
}

var authMoveInternalAccountAttrTypesRS = objectAttrsTypeRSAuthMoveInternalAccount(false)
var authMoveInternalAccountAttrTypesRSRecurse = objectAttrsTypeRSAuthMoveInternalAccount(true)

type authMoveInternalAccountDataRS struct {
	InternalDirectory types.Object `tfsdk:"internal_directory"`
}

var authMoveInternalAccountAttrTypesDS = objectAttrsTypeDSAuthMoveInternalAccount(false)
var authMoveInternalAccountAttrTypesDSRecurse = objectAttrsTypeDSAuthMoveInternalAccount(true)

type authMoveInternalAccountDataDS struct {
	InternalDirectory types.Object `tfsdk:"internal_directory"`
}

var authPermissionAttrTypesRS = objectAttrsTypeRSAuthPermission(false)
var authPermissionAttrTypesRSRecurse = objectAttrsTypeRSAuthPermission(true)

type authPermissionDataRS struct {
	Full        types.String `tfsdk:"full"`
	Instances   types.List   `tfsdk:"instances"`
	Operations  types.List   `tfsdk:"operations"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var authPermissionAttrTypesDS = objectAttrsTypeDSAuthPermission(false)
var authPermissionAttrTypesDSRecurse = objectAttrsTypeDSAuthPermission(true)

type authPermissionDataDS struct {
	Full        types.String `tfsdk:"full"`
	Instances   types.List   `tfsdk:"instances"`
	Operations  types.List   `tfsdk:"operations"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var authStoredAccountAttributeAttrTypesRS = objectAttrsTypeRSAuthStoredAccountAttribute(false)
var authStoredAccountAttributeAttrTypesRSRecurse = objectAttrsTypeRSAuthStoredAccountAttribute(true)

type authStoredAccountAttributeDataRS struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

var authStoredAccountAttributeAttrTypesDS = objectAttrsTypeDSAuthStoredAccountAttribute(false)
var authStoredAccountAttributeAttrTypesDSRecurse = objectAttrsTypeDSAuthStoredAccountAttribute(true)

type authStoredAccountAttributeDataDS struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

var authStoredAccountAttributesAttrTypesRS = objectAttrsTypeRSAuthStoredAccountAttributes(false)
var authStoredAccountAttributesAttrTypesRSRecurse = objectAttrsTypeRSAuthStoredAccountAttributes(true)

type authStoredAccountAttributesDataRS struct {
	Attributes types.List `tfsdk:"attributes"`
}

var authStoredAccountAttributesAttrTypesDS = objectAttrsTypeDSAuthStoredAccountAttributes(false)
var authStoredAccountAttributesAttrTypesDSRecurse = objectAttrsTypeDSAuthStoredAccountAttributes(true)

type authStoredAccountAttributesDataDS struct {
	Attributes types.List `tfsdk:"attributes"`
}

var certificateCertificateAttrTypesRS = objectAttrsTypeRSCertificateCertificate(false)
var certificateCertificateAttrTypesRSRecurse = objectAttrsTypeRSCertificateCertificate(true)

type certificateCertificateDataRS struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
	AdditionalObjects                types.Object `tfsdk:"additional_objects"`
	KeyData                          types.List   `tfsdk:"key_data"`
}

var certificateCertificateAttrTypesDS = objectAttrsTypeDSCertificateCertificate(false)
var certificateCertificateAttrTypesDSRecurse = objectAttrsTypeDSCertificateCertificate(true)

type certificateCertificateDataDS struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
	AdditionalObjects                types.Object `tfsdk:"additional_objects"`
	KeyData                          types.List   `tfsdk:"key_data"`
}

var certificateCertificateLinkableWrapperAttrTypesRS = objectAttrsTypeRSCertificateCertificateLinkableWrapper(false)
var certificateCertificateLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSCertificateCertificateLinkableWrapper(true)

type certificateCertificateLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var certificateCertificateLinkableWrapperAttrTypesDS = objectAttrsTypeDSCertificateCertificateLinkableWrapper(false)
var certificateCertificateLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSCertificateCertificateLinkableWrapper(true)

type certificateCertificateLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var certificateCertificatePrimerAttrTypesRS = objectAttrsTypeRSCertificateCertificatePrimer(false)
var certificateCertificatePrimerAttrTypesRSRecurse = objectAttrsTypeRSCertificateCertificatePrimer(true)

type certificateCertificatePrimerDataRS struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
}

var certificateCertificatePrimerAttrTypesDS = objectAttrsTypeDSCertificateCertificatePrimer(false)
var certificateCertificatePrimerAttrTypesDSRecurse = objectAttrsTypeDSCertificateCertificatePrimer(true)

type certificateCertificatePrimerDataDS struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
}

var certificateCertificate_additionalObjectsAttrTypesRS = objectAttrsTypeRSCertificateCertificate_additionalObjects(false)
var certificateCertificate_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSCertificateCertificate_additionalObjects(true)

type certificateCertificate_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var certificateCertificate_additionalObjectsAttrTypesDS = objectAttrsTypeDSCertificateCertificate_additionalObjects(false)
var certificateCertificate_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSCertificateCertificate_additionalObjects(true)

type certificateCertificate_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var clientClientApplicationAttrTypesRS = objectAttrsTypeRSClientClientApplication(false)
var clientClientApplicationAttrTypesRSRecurse = objectAttrsTypeRSClientClientApplication(true)

type clientClientApplicationDataRS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
}

var clientClientApplicationAttrTypesDS = objectAttrsTypeDSClientClientApplication(false)
var clientClientApplicationAttrTypesDSRecurse = objectAttrsTypeDSClientClientApplication(true)

type clientClientApplicationDataDS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	Owner                             types.Object `tfsdk:"owner"`
	TechnicalAdministrator            types.Object `tfsdk:"technical_administrator"`
}

var clientClientApplicationLinkableWrapperAttrTypesRS = objectAttrsTypeRSClientClientApplicationLinkableWrapper(false)
var clientClientApplicationLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSClientClientApplicationLinkableWrapper(true)

type clientClientApplicationLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var clientClientApplicationLinkableWrapperAttrTypesDS = objectAttrsTypeDSClientClientApplicationLinkableWrapper(false)
var clientClientApplicationLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSClientClientApplicationLinkableWrapper(true)

type clientClientApplicationLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var clientClientApplicationPrimerAttrTypesRS = objectAttrsTypeRSClientClientApplicationPrimer(false)
var clientClientApplicationPrimerAttrTypesRSRecurse = objectAttrsTypeRSClientClientApplicationPrimer(true)

type clientClientApplicationPrimerDataRS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
}

var clientClientApplicationPrimerAttrTypesDS = objectAttrsTypeDSClientClientApplicationPrimer(false)
var clientClientApplicationPrimerAttrTypesDSRecurse = objectAttrsTypeDSClientClientApplicationPrimer(true)

type clientClientApplicationPrimerDataDS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
}

var clientClientApplication_additionalObjectsAttrTypesRS = objectAttrsTypeRSClientClientApplication_additionalObjects(false)
var clientClientApplication_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSClientClientApplication_additionalObjects(true)

type clientClientApplication_additionalObjectsDataRS struct {
	Audit            types.Object `tfsdk:"audit"`
	DeleteTile       types.Bool   `tfsdk:"delete_tile"`
	Groupclients     types.Object `tfsdk:"groupclients"`
	Groups           types.Object `tfsdk:"groups"`
	Secret           types.Object `tfsdk:"secret"`
	Tile             types.Object `tfsdk:"tile"`
	VaultRecordCount types.Int64  `tfsdk:"vault_record_count"`
}

var clientClientApplication_additionalObjectsAttrTypesDS = objectAttrsTypeDSClientClientApplication_additionalObjects(false)
var clientClientApplication_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSClientClientApplication_additionalObjects(true)

type clientClientApplication_additionalObjectsDataDS struct {
	Audit            types.Object `tfsdk:"audit"`
	Groupclients     types.Object `tfsdk:"groupclients"`
	Groups           types.Object `tfsdk:"groups"`
	Tile             types.Object `tfsdk:"tile"`
	VaultRecordCount types.Int64  `tfsdk:"vault_record_count"`
}

var clientLdapClientAttrTypesRS = objectAttrsTypeRSClientLdapClient(false)
var clientLdapClientAttrTypesRSRecurse = objectAttrsTypeRSClientLdapClient(true)

type clientLdapClientDataRS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	BindDn                            types.String `tfsdk:"bind_dn"`
	ClientCertificateUUID             types.String `tfsdk:"client_certificate_uuid"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecretUUID                  types.String `tfsdk:"shared_secret_uuid"`
	UsedForProvisioning               types.Bool   `tfsdk:"used_for_provisioning"`
}

var clientLdapClientAttrTypesDS = objectAttrsTypeDSClientLdapClient(false)
var clientLdapClientAttrTypesDSRecurse = objectAttrsTypeDSClientLdapClient(true)

type clientLdapClientDataDS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	Owner                             types.Object `tfsdk:"owner"`
	TechnicalAdministrator            types.Object `tfsdk:"technical_administrator"`
	BindDn                            types.String `tfsdk:"bind_dn"`
	ClientCertificate                 types.Object `tfsdk:"client_certificate"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecret                      types.Object `tfsdk:"shared_secret"`
	UsedForProvisioning               types.Bool   `tfsdk:"used_for_provisioning"`
}

var clientOAuth2ClientAttrTypesRS = objectAttrsTypeRSClientOAuth2Client(false)
var clientOAuth2ClientAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2Client(true)

type clientOAuth2ClientDataRS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	AccountPermissions                types.List   `tfsdk:"account_permissions"`
	Attributes                        types.Object `tfsdk:"attributes"`
	CallbackURI                       types.String `tfsdk:"callback_u_r_i"`
	Confidential                      types.Bool   `tfsdk:"confidential"`
	DebugMode                         types.Bool   `tfsdk:"debug_mode"`
	IDTokenClaims                     types.String `tfsdk:"id_token_claims"`
	InitiateLoginURI                  types.String `tfsdk:"initiate_login_u_r_i"`
	ResourceURIs                      types.String `tfsdk:"resource_u_r_is"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecretUUID                  types.String `tfsdk:"shared_secret_uuid"`
	ShowLandingPage                   types.Bool   `tfsdk:"show_landing_page"`
	UseClientCredentials              types.Bool   `tfsdk:"use_client_credentials"`
}

var clientOAuth2ClientAttrTypesDS = objectAttrsTypeDSClientOAuth2Client(false)
var clientOAuth2ClientAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2Client(true)

type clientOAuth2ClientDataDS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	Owner                             types.Object `tfsdk:"owner"`
	TechnicalAdministrator            types.Object `tfsdk:"technical_administrator"`
	AccountPermissions                types.List   `tfsdk:"account_permissions"`
	Attributes                        types.Object `tfsdk:"attributes"`
	CallbackURI                       types.String `tfsdk:"callback_u_r_i"`
	Confidential                      types.Bool   `tfsdk:"confidential"`
	DebugMode                         types.Bool   `tfsdk:"debug_mode"`
	IDTokenClaims                     types.String `tfsdk:"id_token_claims"`
	InitiateLoginURI                  types.String `tfsdk:"initiate_login_u_r_i"`
	ResourceURIs                      types.String `tfsdk:"resource_u_r_is"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecret                      types.Object `tfsdk:"shared_secret"`
	ShowLandingPage                   types.Bool   `tfsdk:"show_landing_page"`
	UseClientCredentials              types.Bool   `tfsdk:"use_client_credentials"`
}

var clientOAuth2ClientPermissionAttrTypesRS = objectAttrsTypeRSClientOAuth2ClientPermission(false)
var clientOAuth2ClientPermissionAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2ClientPermission(true)

type clientOAuth2ClientPermissionDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroupUUID      types.String `tfsdk:"for_group_uuid"`
	ForSystemUUID     types.String `tfsdk:"for_system_uuid"`
	Value             types.String `tfsdk:"value"`
}

var clientOAuth2ClientPermissionAttrTypesDS = objectAttrsTypeDSClientOAuth2ClientPermission(false)
var clientOAuth2ClientPermissionAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2ClientPermission(true)

type clientOAuth2ClientPermissionDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroup          types.Object `tfsdk:"for_group"`
	ForSystem         types.Object `tfsdk:"for_system"`
	Value             types.String `tfsdk:"value"`
}

var clientOAuth2ClientPermissionLinkableWrapperAttrTypesRS = objectAttrsTypeRSClientOAuth2ClientPermissionLinkableWrapper(false)
var clientOAuth2ClientPermissionLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2ClientPermissionLinkableWrapper(true)

type clientOAuth2ClientPermissionLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermissionLinkableWrapperAttrTypesDS = objectAttrsTypeDSClientOAuth2ClientPermissionLinkableWrapper(false)
var clientOAuth2ClientPermissionLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2ClientPermissionLinkableWrapper(true)

type clientOAuth2ClientPermissionLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermissionWithClientAttrTypesRS = objectAttrsTypeRSClientOAuth2ClientPermissionWithClient(false)
var clientOAuth2ClientPermissionWithClientAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2ClientPermissionWithClient(true)

type clientOAuth2ClientPermissionWithClientDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroupUUID      types.String `tfsdk:"for_group_uuid"`
	ForSystemUUID     types.String `tfsdk:"for_system_uuid"`
	Value             types.String `tfsdk:"value"`
	Client            types.Object `tfsdk:"client"`
}

var clientOAuth2ClientPermissionWithClientAttrTypesDS = objectAttrsTypeDSClientOAuth2ClientPermissionWithClient(false)
var clientOAuth2ClientPermissionWithClientAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2ClientPermissionWithClient(true)

type clientOAuth2ClientPermissionWithClientDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroup          types.Object `tfsdk:"for_group"`
	ForSystem         types.Object `tfsdk:"for_system"`
	Value             types.String `tfsdk:"value"`
	Client            types.Object `tfsdk:"client"`
}

var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRS = objectAttrsTypeRSClientOAuth2ClientPermissionWithClientLinkableWrapper(false)
var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2ClientPermissionWithClientLinkableWrapper(true)

type clientOAuth2ClientPermissionWithClientLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDS = objectAttrsTypeDSClientOAuth2ClientPermissionWithClientLinkableWrapper(false)
var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2ClientPermissionWithClientLinkableWrapper(true)

type clientOAuth2ClientPermissionWithClientLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermission_additionalObjectsAttrTypesRS = objectAttrsTypeRSClientOAuth2ClientPermission_additionalObjects(false)
var clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2ClientPermission_additionalObjects(true)

type clientOAuth2ClientPermission_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var clientOAuth2ClientPermission_additionalObjectsAttrTypesDS = objectAttrsTypeDSClientOAuth2ClientPermission_additionalObjects(false)
var clientOAuth2ClientPermission_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2ClientPermission_additionalObjects(true)

type clientOAuth2ClientPermission_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var clientOAuth2Client_attributesAttrTypesRS = objectAttrsTypeRSClientOAuth2Client_attributes(false)
var clientOAuth2Client_attributesAttrTypesRSRecurse = objectAttrsTypeRSClientOAuth2Client_attributes(true)

type clientOAuth2Client_attributesDataRS struct {
}

var clientOAuth2Client_attributesAttrTypesDS = objectAttrsTypeDSClientOAuth2Client_attributes(false)
var clientOAuth2Client_attributesAttrTypesDSRecurse = objectAttrsTypeDSClientOAuth2Client_attributes(true)

type clientOAuth2Client_attributesDataDS struct {
}

var clientSaml2ClientAttrTypesRS = objectAttrsTypeRSClientSaml2Client(false)
var clientSaml2ClientAttrTypesRSRecurse = objectAttrsTypeRSClientSaml2Client(true)

type clientSaml2ClientDataRS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	Attributes                        types.Object `tfsdk:"attributes"`
	Metadata                          types.String `tfsdk:"metadata"`
	MetadataURL                       types.String `tfsdk:"metadata_url"`
	SubjectFormat                     types.String `tfsdk:"subject_format"`
}

var clientSaml2ClientAttrTypesDS = objectAttrsTypeDSClientSaml2Client(false)
var clientSaml2ClientAttrTypesDSRecurse = objectAttrsTypeDSClientSaml2Client(true)

type clientSaml2ClientDataDS struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	Owner                             types.Object `tfsdk:"owner"`
	TechnicalAdministrator            types.Object `tfsdk:"technical_administrator"`
	Attributes                        types.Object `tfsdk:"attributes"`
	Metadata                          types.String `tfsdk:"metadata"`
	MetadataURL                       types.String `tfsdk:"metadata_url"`
	SubjectFormat                     types.String `tfsdk:"subject_format"`
}

var clientSaml2Client_attributesAttrTypesRS = objectAttrsTypeRSClientSaml2Client_attributes(false)
var clientSaml2Client_attributesAttrTypesRSRecurse = objectAttrsTypeRSClientSaml2Client_attributes(true)

type clientSaml2Client_attributesDataRS struct {
}

var clientSaml2Client_attributesAttrTypesDS = objectAttrsTypeDSClientSaml2Client_attributes(false)
var clientSaml2Client_attributesAttrTypesDSRecurse = objectAttrsTypeDSClientSaml2Client_attributes(true)

type clientSaml2Client_attributesDataDS struct {
}

var directoryAccountDirectoryAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectory(false)
var directoryAccountDirectoryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectory(true)

type directoryAccountDirectoryDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectoryAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectory(false)
var directoryAccountDirectoryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectory(true)

type directoryAccountDirectoryDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnit              types.Object `tfsdk:"base_organizational_unit"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroup                       types.Object `tfsdk:"helpdesk_group"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectoryLinkableWrapperAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectoryLinkableWrapper(false)
var directoryAccountDirectoryLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectoryLinkableWrapper(true)

type directoryAccountDirectoryLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectoryLinkableWrapperAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectoryLinkableWrapper(false)
var directoryAccountDirectoryLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectoryLinkableWrapper(true)

type directoryAccountDirectoryLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectoryPrimerAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectoryPrimer(false)
var directoryAccountDirectoryPrimerAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectoryPrimer(true)

type directoryAccountDirectoryPrimerDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
}

var directoryAccountDirectoryPrimerAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)
var directoryAccountDirectoryPrimerAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectoryPrimer(true)

type directoryAccountDirectoryPrimerDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
}

var directoryAccountDirectoryStatusReportAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectoryStatusReport(false)
var directoryAccountDirectoryStatusReportAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectoryStatusReport(true)

type directoryAccountDirectoryStatusReportDataRS struct {
	Accounts types.Int64  `tfsdk:"accounts"`
	Reason   types.String `tfsdk:"reason"`
	Status   types.String `tfsdk:"status"`
}

var directoryAccountDirectoryStatusReportAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectoryStatusReport(false)
var directoryAccountDirectoryStatusReportAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectoryStatusReport(true)

type directoryAccountDirectoryStatusReportDataDS struct {
	Accounts types.Int64  `tfsdk:"accounts"`
	Reason   types.String `tfsdk:"reason"`
	Status   types.String `tfsdk:"status"`
}

var directoryAccountDirectorySummaryAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectorySummary(false)
var directoryAccountDirectorySummaryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectorySummary(true)

type directoryAccountDirectorySummaryDataRS struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	DirectoryAccountDirectorySummaryType types.String `tfsdk:"directory_account_directory_summary_type"`
	DomainRestriction                    types.String `tfsdk:"domain_restriction"`
	FullyResolvedIssuer                  types.String `tfsdk:"fully_resolved_issuer"`
	Name                                 types.String `tfsdk:"name"`
	Status                               types.Object `tfsdk:"status"`
	UsernameCustomizable                 types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectorySummaryAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectorySummary(false)
var directoryAccountDirectorySummaryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectorySummary(true)

type directoryAccountDirectorySummaryDataDS struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	DirectoryAccountDirectorySummaryType types.String `tfsdk:"directory_account_directory_summary_type"`
	DomainRestriction                    types.String `tfsdk:"domain_restriction"`
	FullyResolvedIssuer                  types.String `tfsdk:"fully_resolved_issuer"`
	Name                                 types.String `tfsdk:"name"`
	Status                               types.Object `tfsdk:"status"`
	UsernameCustomizable                 types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectorySummaryLinkableWrapperAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectorySummaryLinkableWrapper(false)
var directoryAccountDirectorySummaryLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectorySummaryLinkableWrapper(true)

type directoryAccountDirectorySummaryLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectorySummaryLinkableWrapperAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectorySummaryLinkableWrapper(false)
var directoryAccountDirectorySummaryLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectorySummaryLinkableWrapper(true)

type directoryAccountDirectorySummaryLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectory_additionalObjectsAttrTypesRS = objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)
var directoryAccountDirectory_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(true)

type directoryAccountDirectory_additionalObjectsDataRS struct {
	Audit   types.Object `tfsdk:"audit"`
	Markers types.Object `tfsdk:"markers"`
	Status  types.Object `tfsdk:"status"`
}

var directoryAccountDirectory_additionalObjectsAttrTypesDS = objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)
var directoryAccountDirectory_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(true)

type directoryAccountDirectory_additionalObjectsDataDS struct {
	Audit   types.Object `tfsdk:"audit"`
	Markers types.Object `tfsdk:"markers"`
	Status  types.Object `tfsdk:"status"`
}

var directoryInternalDirectoryAttrTypesRS = objectAttrsTypeRSDirectoryInternalDirectory(false)
var directoryInternalDirectoryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryInternalDirectory(true)

type directoryInternalDirectoryDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	OwnerUUID                           types.String `tfsdk:"owner_uuid"`
}

var directoryInternalDirectoryAttrTypesDS = objectAttrsTypeDSDirectoryInternalDirectory(false)
var directoryInternalDirectoryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryInternalDirectory(true)

type directoryInternalDirectoryDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnit              types.Object `tfsdk:"base_organizational_unit"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroup                       types.Object `tfsdk:"helpdesk_group"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	Owner                               types.Object `tfsdk:"owner"`
}

var directoryLDAPDirectoryAttrTypesRS = objectAttrsTypeRSDirectoryLDAPDirectory(false)
var directoryLDAPDirectoryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryLDAPDirectory(true)

type directoryLDAPDirectoryDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	BaseDN                              types.String `tfsdk:"base_d_n"`
	ClientCertificateUUID               types.String `tfsdk:"client_certificate_uuid"`
	Dialect                             types.String `tfsdk:"dialect"`
	FailoverHost                        types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID      types.String `tfsdk:"failover_trusted_certificate_uuid"`
	Host                                types.String `tfsdk:"host"`
	PasswordRecovery                    types.String `tfsdk:"password_recovery"`
	Port                                types.Int64  `tfsdk:"port"`
	SearchBindDN                        types.String `tfsdk:"search_bind_d_n"`
	SearchBindPassword                  types.String `tfsdk:"search_bind_password"`
	SearchFilter                        types.String `tfsdk:"search_filter"`
	TLS                                 types.String `tfsdk:"tls"`
	TrustedCertificateUUID              types.String `tfsdk:"trusted_certificate_uuid"`
}

var directoryLDAPDirectoryAttrTypesDS = objectAttrsTypeDSDirectoryLDAPDirectory(false)
var directoryLDAPDirectoryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryLDAPDirectory(true)

type directoryLDAPDirectoryDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnit              types.Object `tfsdk:"base_organizational_unit"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroup                       types.Object `tfsdk:"helpdesk_group"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	BaseDN                              types.String `tfsdk:"base_d_n"`
	ClientCertificate                   types.Object `tfsdk:"client_certificate"`
	Dialect                             types.String `tfsdk:"dialect"`
	FailoverHost                        types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificate          types.Object `tfsdk:"failover_trusted_certificate"`
	Host                                types.String `tfsdk:"host"`
	PasswordRecovery                    types.String `tfsdk:"password_recovery"`
	Port                                types.Int64  `tfsdk:"port"`
	SearchBindDN                        types.String `tfsdk:"search_bind_d_n"`
	SearchBindPassword                  types.String `tfsdk:"search_bind_password"`
	SearchFilter                        types.String `tfsdk:"search_filter"`
	TLS                                 types.String `tfsdk:"tls"`
	TrustedCertificate                  types.Object `tfsdk:"trusted_certificate"`
}

var directoryMaintenanceDirectoryAttrTypesRS = objectAttrsTypeRSDirectoryMaintenanceDirectory(false)
var directoryMaintenanceDirectoryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryMaintenanceDirectory(true)

type directoryMaintenanceDirectoryDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryMaintenanceDirectoryAttrTypesDS = objectAttrsTypeDSDirectoryMaintenanceDirectory(false)
var directoryMaintenanceDirectoryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryMaintenanceDirectory(true)

type directoryMaintenanceDirectoryDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnit              types.Object `tfsdk:"base_organizational_unit"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroup                       types.Object `tfsdk:"helpdesk_group"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryOIDCDirectoryAttrTypesRS = objectAttrsTypeRSDirectoryOIDCDirectory(false)
var directoryOIDCDirectoryAttrTypesRSRecurse = objectAttrsTypeRSDirectoryOIDCDirectory(true)

type directoryOIDCDirectoryDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AcrValues                           types.String `tfsdk:"acr_values"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	ClientID                            types.String `tfsdk:"client_id"`
	ClientSecret                        types.String `tfsdk:"client_secret"`
	DomainRestriction                   types.String `tfsdk:"domain_restriction"`
	Enforces2fa                         types.Bool   `tfsdk:"enforces2fa"`
	FullyResolvedIssuer                 types.String `tfsdk:"fully_resolved_issuer"`
	Issuer                              types.String `tfsdk:"issuer"`
	LogoutURL                           types.String `tfsdk:"logout_url"`
	SendLoginHint                       types.Bool   `tfsdk:"send_login_hint"`
	VendorEscaped                       types.String `tfsdk:"vendor_escaped"`
}

var directoryOIDCDirectoryAttrTypesDS = objectAttrsTypeDSDirectoryOIDCDirectory(false)
var directoryOIDCDirectoryAttrTypesDSRecurse = objectAttrsTypeDSDirectoryOIDCDirectory(true)

type directoryOIDCDirectoryDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnit              types.Object `tfsdk:"base_organizational_unit"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroup                       types.Object `tfsdk:"helpdesk_group"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AcrValues                           types.String `tfsdk:"acr_values"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	ClientID                            types.String `tfsdk:"client_id"`
	ClientSecret                        types.String `tfsdk:"client_secret"`
	DomainRestriction                   types.String `tfsdk:"domain_restriction"`
	Enforces2fa                         types.Bool   `tfsdk:"enforces2fa"`
	FullyResolvedIssuer                 types.String `tfsdk:"fully_resolved_issuer"`
	Issuer                              types.String `tfsdk:"issuer"`
	LogoutURL                           types.String `tfsdk:"logout_url"`
	SendLoginHint                       types.Bool   `tfsdk:"send_login_hint"`
	VendorEscaped                       types.String `tfsdk:"vendor_escaped"`
}

var groupAccountGroupAttrTypesRS = objectAttrsTypeRSGroupAccountGroup(false)
var groupAccountGroupAttrTypesRSRecurse = objectAttrsTypeRSGroupAccountGroup(true)

type groupAccountGroupDataRS struct {
	UUID                   types.String `tfsdk:"uuid"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	EndDate                types.String `tfsdk:"end_date"`
	Folder                 types.Object `tfsdk:"folder"`
	LastUsed               types.String `tfsdk:"last_used"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupAccountGroupAttrTypesDS = objectAttrsTypeDSGroupAccountGroup(false)
var groupAccountGroupAttrTypesDSRecurse = objectAttrsTypeDSGroupAccountGroup(true)

type groupAccountGroupDataDS struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	Admin                  types.Bool   `tfsdk:"admin"`
	Name                   types.String `tfsdk:"name"`
	UUID                   types.String `tfsdk:"uuid"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	EndDate                types.String `tfsdk:"end_date"`
	Folder                 types.Object `tfsdk:"folder"`
	LastUsed               types.String `tfsdk:"last_used"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupAccountGroupLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupAccountGroupLinkableWrapper(false)
var groupAccountGroupLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupAccountGroupLinkableWrapper(true)

type groupAccountGroupLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupAccountGroupLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupAccountGroupLinkableWrapper(false)
var groupAccountGroupLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupAccountGroupLinkableWrapper(true)

type groupAccountGroupLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupAccountGroup_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupAccountGroup_additionalObjects(false)
var groupAccountGroup_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupAccountGroup_additionalObjects(true)

type groupAccountGroup_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var groupAccountGroup_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupAccountGroup_additionalObjects(false)
var groupAccountGroup_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupAccountGroup_additionalObjects(true)

type groupAccountGroup_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var groupAuthorizedGroupsWrapperAttrTypesRS = objectAttrsTypeRSGroupAuthorizedGroupsWrapper(false)
var groupAuthorizedGroupsWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupAuthorizedGroupsWrapper(true)

type groupAuthorizedGroupsWrapperDataRS struct {
	Items      types.List  `tfsdk:"items"`
	GroupCount types.Int64 `tfsdk:"group_count"`
}

var groupAuthorizedGroupsWrapperAttrTypesDS = objectAttrsTypeDSGroupAuthorizedGroupsWrapper(false)
var groupAuthorizedGroupsWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupAuthorizedGroupsWrapper(true)

type groupAuthorizedGroupsWrapperDataDS struct {
	Items      types.List  `tfsdk:"items"`
	GroupCount types.Int64 `tfsdk:"group_count"`
}

var groupGroupAttrTypesRS = objectAttrsTypeRSGroupGroup(false)
var groupGroupAttrTypesRSRecurse = objectAttrsTypeRSGroupGroup(true)

type groupGroupDataRS struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Admin                            types.Bool   `tfsdk:"admin"`
	Name                             types.String `tfsdk:"name"`
	UUID                             types.String `tfsdk:"uuid"`
	AdditionalObjects                types.Object `tfsdk:"additional_objects"`
	ApplicationAdministration        types.Bool   `tfsdk:"application_administration"`
	AuditConfig                      types.Object `tfsdk:"audit_config"`
	AuditRequested                   types.Bool   `tfsdk:"audit_requested"`
	Auditor                          types.Bool   `tfsdk:"auditor"`
	AuthorizingGroupAuditingUUID     types.String `tfsdk:"authorizing_group_auditing_uuid"`
	AuthorizingGroupDelegationUUID   types.String `tfsdk:"authorizing_group_delegation_uuid"`
	AuthorizingGroupMembershipUUID   types.String `tfsdk:"authorizing_group_membership_uuid"`
	AuthorizingGroupProvisioningUUID types.String `tfsdk:"authorizing_group_provisioning_uuid"`
	AuthorizingGroupTypes            types.List   `tfsdk:"authorizing_group_types"`
	ClassificationUUID               types.String `tfsdk:"classification_uuid"`
	Description                      types.String `tfsdk:"description"`
	ExtendedAccess                   types.String `tfsdk:"extended_access"`
	HideAuditTrail                   types.Bool   `tfsdk:"hide_audit_trail"`
	NestedUnderUUID                  types.String `tfsdk:"nested_under_uuid"`
	OrganizationalUnitUUID           types.String `tfsdk:"organizational_unit_uuid"`
	PrivateGroup                     types.Bool   `tfsdk:"private_group"`
	RecordTrail                      types.Bool   `tfsdk:"record_trail"`
	RotatingPasswordRequired         types.Bool   `tfsdk:"rotating_password_required"`
	SingleManaged                    types.Bool   `tfsdk:"single_managed"`
	VaultRecovery                    types.String `tfsdk:"vault_recovery"`
	VaultRequiresActivation          types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupAttrTypesDS = objectAttrsTypeDSGroupGroup(false)
var groupGroupAttrTypesDSRecurse = objectAttrsTypeDSGroupGroup(true)

type groupGroupDataDS struct {
	Links                        types.List   `tfsdk:"links"`
	Permissions                  types.List   `tfsdk:"permissions"`
	Admin                        types.Bool   `tfsdk:"admin"`
	Name                         types.String `tfsdk:"name"`
	UUID                         types.String `tfsdk:"uuid"`
	AdditionalObjects            types.Object `tfsdk:"additional_objects"`
	ApplicationAdministration    types.Bool   `tfsdk:"application_administration"`
	AuditConfig                  types.Object `tfsdk:"audit_config"`
	AuditRequested               types.Bool   `tfsdk:"audit_requested"`
	Auditor                      types.Bool   `tfsdk:"auditor"`
	AuthorizingGroupAuditing     types.Object `tfsdk:"authorizing_group_auditing"`
	AuthorizingGroupDelegation   types.Object `tfsdk:"authorizing_group_delegation"`
	AuthorizingGroupMembership   types.Object `tfsdk:"authorizing_group_membership"`
	AuthorizingGroupProvisioning types.Object `tfsdk:"authorizing_group_provisioning"`
	AuthorizingGroupTypes        types.List   `tfsdk:"authorizing_group_types"`
	Classification               types.Object `tfsdk:"classification"`
	Description                  types.String `tfsdk:"description"`
	ExtendedAccess               types.String `tfsdk:"extended_access"`
	HideAuditTrail               types.Bool   `tfsdk:"hide_audit_trail"`
	NestedUnder                  types.Object `tfsdk:"nested_under"`
	OrganizationalUnit           types.Object `tfsdk:"organizational_unit"`
	PrivateGroup                 types.Bool   `tfsdk:"private_group"`
	RecordTrail                  types.Bool   `tfsdk:"record_trail"`
	RotatingPasswordRequired     types.Bool   `tfsdk:"rotating_password_required"`
	SingleManaged                types.Bool   `tfsdk:"single_managed"`
	VaultRecovery                types.String `tfsdk:"vault_recovery"`
	VaultRequiresActivation      types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupAccountAttrTypesRS = objectAttrsTypeRSGroupGroupAccount(false)
var groupGroupAccountAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAccount(true)

type groupGroupAccountDataRS struct {
	UUID                   types.String `tfsdk:"uuid"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	DirectoryUUID          types.String `tfsdk:"directory_uuid"`
	DisconnectedNested     types.Bool   `tfsdk:"disconnected_nested"`
	EndDate                types.String `tfsdk:"end_date"`
	LastUsed               types.String `tfsdk:"last_used"`
	Nested                 types.Bool   `tfsdk:"nested"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	TwoFactorStatus        types.String `tfsdk:"two_factor_status"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccountAttrTypesDS = objectAttrsTypeDSGroupGroupAccount(false)
var groupGroupAccountAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAccount(true)

type groupGroupAccountDataDS struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	DisplayName            types.String `tfsdk:"display_name"`
	LastActive             types.String `tfsdk:"last_active"`
	Username               types.String `tfsdk:"username"`
	UUID                   types.String `tfsdk:"uuid"`
	Validity               types.String `tfsdk:"validity"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	Directory              types.Object `tfsdk:"directory"`
	DisconnectedNested     types.Bool   `tfsdk:"disconnected_nested"`
	EndDate                types.String `tfsdk:"end_date"`
	LastUsed               types.String `tfsdk:"last_used"`
	Nested                 types.Bool   `tfsdk:"nested"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	TwoFactorStatus        types.String `tfsdk:"two_factor_status"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupAccountLinkableWrapper(false)
var groupGroupAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAccountLinkableWrapper(true)

type groupGroupAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupAccountLinkableWrapper(false)
var groupGroupAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAccountLinkableWrapper(true)

type groupGroupAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAccountNestingAttrTypesRS = objectAttrsTypeRSGroupGroupAccountNesting(false)
var groupGroupAccountNestingAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAccountNesting(true)

type groupGroupAccountNestingDataRS struct {
	Connected types.Bool `tfsdk:"connected"`
}

var groupGroupAccountNestingAttrTypesDS = objectAttrsTypeDSGroupGroupAccountNesting(false)
var groupGroupAccountNestingAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAccountNesting(true)

type groupGroupAccountNestingDataDS struct {
	Connected types.Bool `tfsdk:"connected"`
}

var groupGroupAccountStatusAttrTypesRS = objectAttrsTypeRSGroupGroupAccountStatus(false)
var groupGroupAccountStatusAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAccountStatus(true)

type groupGroupAccountStatusDataRS struct {
	Folder                 types.Object `tfsdk:"folder"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccountStatusAttrTypesDS = objectAttrsTypeDSGroupGroupAccountStatus(false)
var groupGroupAccountStatusAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAccountStatus(true)

type groupGroupAccountStatusDataDS struct {
	Folder                 types.Object `tfsdk:"folder"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccount_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroupAccount_additionalObjects(false)
var groupGroupAccount_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAccount_additionalObjects(true)

type groupGroupAccount_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAccount_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroupAccount_additionalObjects(false)
var groupGroupAccount_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAccount_additionalObjects(true)

type groupGroupAccount_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAdminMailAttrTypesRS = objectAttrsTypeRSGroupGroupAdminMail(false)
var groupGroupAdminMailAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAdminMail(true)

type groupGroupAdminMailDataRS struct {
	Body types.String `tfsdk:"body"`
}

var groupGroupAdminMailAttrTypesDS = objectAttrsTypeDSGroupGroupAdminMail(false)
var groupGroupAdminMailAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAdminMail(true)

type groupGroupAdminMailDataDS struct {
	Body types.String `tfsdk:"body"`
}

var groupGroupAuditAttrTypesRS = objectAttrsTypeRSGroupGroupAudit(false)
var groupGroupAuditAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAudit(true)

type groupGroupAuditDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Accounts          types.List   `tfsdk:"accounts"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Comment           types.String `tfsdk:"comment"`
	CreatedAt         types.String `tfsdk:"created_at"`
	CreatedBy         types.String `tfsdk:"created_by"`
	GroupName         types.String `tfsdk:"group_name"`
	NameOnAudit       types.String `tfsdk:"name_on_audit"`
	ReviewedAt        types.String `tfsdk:"reviewed_at"`
	ReviewedBy        types.String `tfsdk:"reviewed_by"`
	Status            types.String `tfsdk:"status"`
	SubmittedAt       types.String `tfsdk:"submitted_at"`
	SubmittedBy       types.String `tfsdk:"submitted_by"`
}

var groupGroupAuditAttrTypesDS = objectAttrsTypeDSGroupGroupAudit(false)
var groupGroupAuditAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAudit(true)

type groupGroupAuditDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Accounts          types.List   `tfsdk:"accounts"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Comment           types.String `tfsdk:"comment"`
	CreatedAt         types.String `tfsdk:"created_at"`
	CreatedBy         types.String `tfsdk:"created_by"`
	GroupName         types.String `tfsdk:"group_name"`
	NameOnAudit       types.String `tfsdk:"name_on_audit"`
	ReviewedAt        types.String `tfsdk:"reviewed_at"`
	ReviewedBy        types.String `tfsdk:"reviewed_by"`
	Status            types.String `tfsdk:"status"`
	SubmittedAt       types.String `tfsdk:"submitted_at"`
	SubmittedBy       types.String `tfsdk:"submitted_by"`
}

var groupGroupAuditAccountAttrTypesRS = objectAttrsTypeRSGroupGroupAuditAccount(false)
var groupGroupAuditAccountAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAuditAccount(true)

type groupGroupAuditAccountDataRS struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	AccountUUID        types.String `tfsdk:"account_uuid"`
	AccountValid       types.Bool   `tfsdk:"account_valid"`
	Action             types.String `tfsdk:"action"`
	Comment            types.String `tfsdk:"comment"`
	DisconnectedNested types.Bool   `tfsdk:"disconnected_nested"`
	DisplayName        types.String `tfsdk:"display_name"`
	EndDate            types.String `tfsdk:"end_date"`
	LastActive         types.String `tfsdk:"last_active"`
	LastUsed           types.String `tfsdk:"last_used"`
	Nested             types.Bool   `tfsdk:"nested"`
	Rights             types.String `tfsdk:"rights"`
	Username           types.String `tfsdk:"username"`
}

var groupGroupAuditAccountAttrTypesDS = objectAttrsTypeDSGroupGroupAuditAccount(false)
var groupGroupAuditAccountAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAuditAccount(true)

type groupGroupAuditAccountDataDS struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	AccountUUID        types.String `tfsdk:"account_uuid"`
	AccountValid       types.Bool   `tfsdk:"account_valid"`
	Action             types.String `tfsdk:"action"`
	Comment            types.String `tfsdk:"comment"`
	DisconnectedNested types.Bool   `tfsdk:"disconnected_nested"`
	DisplayName        types.String `tfsdk:"display_name"`
	EndDate            types.String `tfsdk:"end_date"`
	LastActive         types.String `tfsdk:"last_active"`
	LastUsed           types.String `tfsdk:"last_used"`
	Nested             types.Bool   `tfsdk:"nested"`
	Rights             types.String `tfsdk:"rights"`
	Username           types.String `tfsdk:"username"`
}

var groupGroupAuditConfigAttrTypesRS = objectAttrsTypeRSGroupGroupAuditConfig(false)
var groupGroupAuditConfigAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAuditConfig(true)

type groupGroupAuditConfigDataRS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
	Months      types.List `tfsdk:"months"`
}

var groupGroupAuditConfigAttrTypesDS = objectAttrsTypeDSGroupGroupAuditConfig(false)
var groupGroupAuditConfigAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAuditConfig(true)

type groupGroupAuditConfigDataDS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
	Months      types.List `tfsdk:"months"`
}

var groupGroupAuditLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupAuditLinkableWrapper(false)
var groupGroupAuditLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAuditLinkableWrapper(true)

type groupGroupAuditLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAuditLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupAuditLinkableWrapper(false)
var groupGroupAuditLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAuditLinkableWrapper(true)

type groupGroupAuditLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAudit_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroupAudit_additionalObjects(false)
var groupGroupAudit_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAudit_additionalObjects(true)

type groupGroupAudit_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAudit_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroupAudit_additionalObjects(false)
var groupGroupAudit_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAudit_additionalObjects(true)

type groupGroupAudit_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAuditingInfoAttrTypesRS = objectAttrsTypeRSGroupGroupAuditingInfo(false)
var groupGroupAuditingInfoAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupAuditingInfo(true)

type groupGroupAuditingInfoDataRS struct {
	AuditDueDate              types.String `tfsdk:"audit_due_date"`
	LastAuditDate             types.String `tfsdk:"last_audit_date"`
	NrAccounts                types.Int64  `tfsdk:"nr_accounts"`
	NrDisabledAccounts        types.Int64  `tfsdk:"nr_disabled_accounts"`
	NrDisabledManagers        types.Int64  `tfsdk:"nr_disabled_managers"`
	NrExpiredVaultRecords     types.Int64  `tfsdk:"nr_expired_vault_records"`
	NrManagers                types.Int64  `tfsdk:"nr_managers"`
	NrVaultRecordsWithEndDate types.Int64  `tfsdk:"nr_vault_records_with_end_date"`
}

var groupGroupAuditingInfoAttrTypesDS = objectAttrsTypeDSGroupGroupAuditingInfo(false)
var groupGroupAuditingInfoAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupAuditingInfo(true)

type groupGroupAuditingInfoDataDS struct {
	AuditDueDate              types.String `tfsdk:"audit_due_date"`
	LastAuditDate             types.String `tfsdk:"last_audit_date"`
	NrAccounts                types.Int64  `tfsdk:"nr_accounts"`
	NrDisabledAccounts        types.Int64  `tfsdk:"nr_disabled_accounts"`
	NrDisabledManagers        types.Int64  `tfsdk:"nr_disabled_managers"`
	NrExpiredVaultRecords     types.Int64  `tfsdk:"nr_expired_vault_records"`
	NrManagers                types.Int64  `tfsdk:"nr_managers"`
	NrVaultRecordsWithEndDate types.Int64  `tfsdk:"nr_vault_records_with_end_date"`
}

var groupGroupClassificationAttrTypesRS = objectAttrsTypeRSGroupGroupClassification(false)
var groupGroupClassificationAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassification(true)

type groupGroupClassificationDataRS struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	Name                                 types.String `tfsdk:"name"`
	UUID                                 types.String `tfsdk:"uuid"`
	AdditionalObjects                    types.Object `tfsdk:"additional_objects"`
	AuthorizingGroupAuditingRequired     types.Bool   `tfsdk:"authorizing_group_auditing_required"`
	AuthorizingGroupDelegationRequired   types.Bool   `tfsdk:"authorizing_group_delegation_required"`
	AuthorizingGroupMembershipRequired   types.Bool   `tfsdk:"authorizing_group_membership_required"`
	AuthorizingGroupProvisioningRequired types.Bool   `tfsdk:"authorizing_group_provisioning_required"`
	DefaultClassification                types.Bool   `tfsdk:"default_classification"`
	Description                          types.String `tfsdk:"description"`
	MaximumAuditInterval                 types.Int64  `tfsdk:"maximum_audit_interval"`
	MinimumNrManagers                    types.Int64  `tfsdk:"minimum_nr_managers"`
	RecordTrailRequired                  types.Bool   `tfsdk:"record_trail_required"`
	RequiredMonths                       types.List   `tfsdk:"required_months"`
	RotatingPasswordRequired             types.Bool   `tfsdk:"rotating_password_required"`
	VaultRequiresActivation              types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupClassificationAttrTypesDS = objectAttrsTypeDSGroupGroupClassification(false)
var groupGroupClassificationAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassification(true)

type groupGroupClassificationDataDS struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	Name                                 types.String `tfsdk:"name"`
	UUID                                 types.String `tfsdk:"uuid"`
	AdditionalObjects                    types.Object `tfsdk:"additional_objects"`
	AuthorizingGroupAuditingRequired     types.Bool   `tfsdk:"authorizing_group_auditing_required"`
	AuthorizingGroupDelegationRequired   types.Bool   `tfsdk:"authorizing_group_delegation_required"`
	AuthorizingGroupMembershipRequired   types.Bool   `tfsdk:"authorizing_group_membership_required"`
	AuthorizingGroupProvisioningRequired types.Bool   `tfsdk:"authorizing_group_provisioning_required"`
	DefaultClassification                types.Bool   `tfsdk:"default_classification"`
	Description                          types.String `tfsdk:"description"`
	MaximumAuditInterval                 types.Int64  `tfsdk:"maximum_audit_interval"`
	MinimumNrManagers                    types.Int64  `tfsdk:"minimum_nr_managers"`
	RecordTrailRequired                  types.Bool   `tfsdk:"record_trail_required"`
	RequiredMonths                       types.List   `tfsdk:"required_months"`
	RotatingPasswordRequired             types.Bool   `tfsdk:"rotating_password_required"`
	VaultRequiresActivation              types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupClassificationInfoAttrTypesRS = objectAttrsTypeRSGroupGroupClassificationInfo(false)
var groupGroupClassificationInfoAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassificationInfo(true)

type groupGroupClassificationInfoDataRS struct {
	NrGroups types.Int64 `tfsdk:"nr_groups"`
}

var groupGroupClassificationInfoAttrTypesDS = objectAttrsTypeDSGroupGroupClassificationInfo(false)
var groupGroupClassificationInfoAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassificationInfo(true)

type groupGroupClassificationInfoDataDS struct {
	NrGroups types.Int64 `tfsdk:"nr_groups"`
}

var groupGroupClassificationLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupClassificationLinkableWrapper(false)
var groupGroupClassificationLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassificationLinkableWrapper(true)

type groupGroupClassificationLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClassificationLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupClassificationLinkableWrapper(false)
var groupGroupClassificationLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassificationLinkableWrapper(true)

type groupGroupClassificationLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClassificationPrimerAttrTypesRS = objectAttrsTypeRSGroupGroupClassificationPrimer(false)
var groupGroupClassificationPrimerAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassificationPrimer(true)

type groupGroupClassificationPrimerDataRS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupClassificationPrimerAttrTypesDS = objectAttrsTypeDSGroupGroupClassificationPrimer(false)
var groupGroupClassificationPrimerAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassificationPrimer(true)

type groupGroupClassificationPrimerDataDS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupClassificationUpdateAttrTypesRS = objectAttrsTypeRSGroupGroupClassificationUpdate(false)
var groupGroupClassificationUpdateAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassificationUpdate(true)

type groupGroupClassificationUpdateDataRS struct {
	ClassificatonUUID types.String `tfsdk:"classificaton_uuid"`
}

var groupGroupClassificationUpdateAttrTypesDS = objectAttrsTypeDSGroupGroupClassificationUpdate(false)
var groupGroupClassificationUpdateAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassificationUpdate(true)

type groupGroupClassificationUpdateDataDS struct {
	Classificaton types.Object `tfsdk:"classificaton"`
}

var groupGroupClassification_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroupClassification_additionalObjects(false)
var groupGroupClassification_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClassification_additionalObjects(true)

type groupGroupClassification_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
	Info  types.Object `tfsdk:"info"`
}

var groupGroupClassification_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroupClassification_additionalObjects(false)
var groupGroupClassification_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClassification_additionalObjects(true)

type groupGroupClassification_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
	Info  types.Object `tfsdk:"info"`
}

var groupGroupClientAttrTypesRS = objectAttrsTypeRSGroupGroupClient(false)
var groupGroupClientAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClient(true)

type groupGroupClientDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	ActivationRequired         types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ClientUUID                 types.String `tfsdk:"client_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	OwnerUUID                  types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID types.String `tfsdk:"technical_administrator_uuid"`
}

var groupGroupClientAttrTypesDS = objectAttrsTypeDSGroupGroupClient(false)
var groupGroupClientAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClient(true)

type groupGroupClientDataDS struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	ActivationRequired     types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	Client                 types.Object `tfsdk:"client"`
	Group                  types.Object `tfsdk:"group"`
	Owner                  types.Object `tfsdk:"owner"`
	TechnicalAdministrator types.Object `tfsdk:"technical_administrator"`
}

var groupGroupClientLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupClientLinkableWrapper(false)
var groupGroupClientLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClientLinkableWrapper(true)

type groupGroupClientLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClientLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupClientLinkableWrapper(false)
var groupGroupClientLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClientLinkableWrapper(true)

type groupGroupClientLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClient_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroupClient_additionalObjects(false)
var groupGroupClient_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupClient_additionalObjects(true)

type groupGroupClient_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupClient_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroupClient_additionalObjects(false)
var groupGroupClient_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupClient_additionalObjects(true)

type groupGroupClient_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupFolderAttrTypesRS = objectAttrsTypeRSGroupGroupFolder(false)
var groupGroupFolderAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupFolder(true)

type groupGroupFolderDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
}

var groupGroupFolderAttrTypesDS = objectAttrsTypeDSGroupGroupFolder(false)
var groupGroupFolderAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupFolder(true)

type groupGroupFolderDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
}

var groupGroupFolderLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupFolderLinkableWrapper(false)
var groupGroupFolderLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupFolderLinkableWrapper(true)

type groupGroupFolderLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupFolderLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupFolderLinkableWrapper(false)
var groupGroupFolderLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupFolderLinkableWrapper(true)

type groupGroupFolderLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupFolder_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroupFolder_additionalObjects(false)
var groupGroupFolder_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupFolder_additionalObjects(true)

type groupGroupFolder_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupFolder_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroupFolder_additionalObjects(false)
var groupGroupFolder_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupFolder_additionalObjects(true)

type groupGroupFolder_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupInfoAttrTypesRS = objectAttrsTypeRSGroupGroupInfo(false)
var groupGroupInfoAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupInfo(true)

type groupGroupInfoDataRS struct {
	NrAccounts           types.Int64 `tfsdk:"nr_accounts"`
	NrAccountsWithVault  types.Int64 `tfsdk:"nr_accounts_with_vault"`
	NrAudits             types.Int64 `tfsdk:"nr_audits"`
	NrClients            types.Int64 `tfsdk:"nr_clients"`
	NrProvisionedSystems types.Int64 `tfsdk:"nr_provisioned_systems"`
	NrVaultRecords       types.Int64 `tfsdk:"nr_vault_records"`
}

var groupGroupInfoAttrTypesDS = objectAttrsTypeDSGroupGroupInfo(false)
var groupGroupInfoAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupInfo(true)

type groupGroupInfoDataDS struct {
	NrAccounts           types.Int64 `tfsdk:"nr_accounts"`
	NrAccountsWithVault  types.Int64 `tfsdk:"nr_accounts_with_vault"`
	NrAudits             types.Int64 `tfsdk:"nr_audits"`
	NrClients            types.Int64 `tfsdk:"nr_clients"`
	NrProvisionedSystems types.Int64 `tfsdk:"nr_provisioned_systems"`
	NrVaultRecords       types.Int64 `tfsdk:"nr_vault_records"`
}

var groupGroupLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupLinkableWrapper(false)
var groupGroupLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupLinkableWrapper(true)

type groupGroupLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupLinkableWrapper(false)
var groupGroupLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupLinkableWrapper(true)

type groupGroupLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupPrimerAttrTypesRS = objectAttrsTypeRSGroupGroupPrimer(false)
var groupGroupPrimerAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupPrimer(true)

type groupGroupPrimerDataRS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Admin       types.Bool   `tfsdk:"admin"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupPrimerAttrTypesDS = objectAttrsTypeDSGroupGroupPrimer(false)
var groupGroupPrimerAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupPrimer(true)

type groupGroupPrimerDataDS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Admin       types.Bool   `tfsdk:"admin"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupPrimerLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupPrimerLinkableWrapper(false)
var groupGroupPrimerLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupPrimerLinkableWrapper(true)

type groupGroupPrimerLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupPrimerLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupPrimerLinkableWrapper(false)
var groupGroupPrimerLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupPrimerLinkableWrapper(true)

type groupGroupPrimerLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupSegmentedLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupGroupSegmentedLinkableWrapper(false)
var groupGroupSegmentedLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupSegmentedLinkableWrapper(true)

type groupGroupSegmentedLinkableWrapperDataRS struct {
	Items    types.List `tfsdk:"items"`
	Segments types.List `tfsdk:"segments"`
}

var groupGroupSegmentedLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupGroupSegmentedLinkableWrapper(false)
var groupGroupSegmentedLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupSegmentedLinkableWrapper(true)

type groupGroupSegmentedLinkableWrapperDataDS struct {
	Items    types.List `tfsdk:"items"`
	Segments types.List `tfsdk:"segments"`
}

var groupGroup_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupGroup_additionalObjects(false)
var groupGroup_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroup_additionalObjects(true)

type groupGroup_additionalObjectsDataRS struct {
	Accounts                   types.Object `tfsdk:"accounts"`
	AdministeredClients        types.Object `tfsdk:"administered_clients"`
	AdministeredSystems        types.Object `tfsdk:"administered_systems"`
	Admins                     types.Object `tfsdk:"admins"`
	Audit                      types.Object `tfsdk:"audit"`
	AuthorizedGroups           types.Object `tfsdk:"authorized_groups"`
	ClientPermissions          types.Object `tfsdk:"client_permissions"`
	Clients                    types.Object `tfsdk:"clients"`
	ContentAdministeredSystems types.Object `tfsdk:"content_administered_systems"`
	Groupauditinginfo          types.Object `tfsdk:"groupauditinginfo"`
	Groupinfo                  types.Object `tfsdk:"groupinfo"`
	Helpdesk                   types.Object `tfsdk:"helpdesk"`
	Markers                    types.Object `tfsdk:"markers"`
	Myaccount                  types.Object `tfsdk:"myaccount"`
	Mydelegatedaccount         types.Object `tfsdk:"mydelegatedaccount"`
	NestedGroups               types.Object `tfsdk:"nested_groups"`
	OwnedClients               types.Object `tfsdk:"owned_clients"`
	OwnedDirectories           types.Object `tfsdk:"owned_directories"`
	OwnedGroupsOnSystem        types.Object `tfsdk:"owned_groups_on_system"`
	OwnedOrganizationalUnits   types.Object `tfsdk:"owned_organizational_units"`
	OwnedSystems               types.Object `tfsdk:"owned_systems"`
	RecentAudits               types.Object `tfsdk:"recent_audits"`
	Requeststatus              types.String `tfsdk:"requeststatus"`
	ServiceAccounts            types.Object `tfsdk:"service_accounts"`
	Systems                    types.Object `tfsdk:"systems"`
	Vault                      types.Object `tfsdk:"vault"`
	Webhooks                   types.Object `tfsdk:"webhooks"`
}

var groupGroup_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupGroup_additionalObjects(false)
var groupGroup_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroup_additionalObjects(true)

type groupGroup_additionalObjectsDataDS struct {
	Accounts                   types.Object `tfsdk:"accounts"`
	AdministeredClients        types.Object `tfsdk:"administered_clients"`
	AdministeredSystems        types.Object `tfsdk:"administered_systems"`
	Admins                     types.Object `tfsdk:"admins"`
	Audit                      types.Object `tfsdk:"audit"`
	AuthorizedGroups           types.Object `tfsdk:"authorized_groups"`
	ClientPermissions          types.Object `tfsdk:"client_permissions"`
	Clients                    types.Object `tfsdk:"clients"`
	ContentAdministeredSystems types.Object `tfsdk:"content_administered_systems"`
	Groupauditinginfo          types.Object `tfsdk:"groupauditinginfo"`
	Groupinfo                  types.Object `tfsdk:"groupinfo"`
	Helpdesk                   types.Object `tfsdk:"helpdesk"`
	Markers                    types.Object `tfsdk:"markers"`
	Myaccount                  types.Object `tfsdk:"myaccount"`
	Mydelegatedaccount         types.Object `tfsdk:"mydelegatedaccount"`
	NestedGroups               types.Object `tfsdk:"nested_groups"`
	OwnedClients               types.Object `tfsdk:"owned_clients"`
	OwnedDirectories           types.Object `tfsdk:"owned_directories"`
	OwnedGroupsOnSystem        types.Object `tfsdk:"owned_groups_on_system"`
	OwnedOrganizationalUnits   types.Object `tfsdk:"owned_organizational_units"`
	OwnedSystems               types.Object `tfsdk:"owned_systems"`
	RecentAudits               types.Object `tfsdk:"recent_audits"`
	Requeststatus              types.String `tfsdk:"requeststatus"`
	ServiceAccounts            types.Object `tfsdk:"service_accounts"`
	Systems                    types.Object `tfsdk:"systems"`
	Vault                      types.Object `tfsdk:"vault"`
	Webhooks                   types.Object `tfsdk:"webhooks"`
}

var groupGroupsAuditStatsAttrTypesRS = objectAttrsTypeRSGroupGroupsAuditStats(false)
var groupGroupsAuditStatsAttrTypesRSRecurse = objectAttrsTypeRSGroupGroupsAuditStats(true)

type groupGroupsAuditStatsDataRS struct {
	AuditedGroups         types.Int64 `tfsdk:"audited_groups"`
	Classifications       types.List  `tfsdk:"classifications"`
	OverdueAuditGroups    types.Int64 `tfsdk:"overdue_audit_groups"`
	OverdueVaultPolicies  types.Int64 `tfsdk:"overdue_vault_policies"`
	UnauditedGroups       types.Int64 `tfsdk:"unaudited_groups"`
	ValidVaultPolicies    types.Int64 `tfsdk:"valid_vault_policies"`
	VaultsWithoutPolicies types.Int64 `tfsdk:"vaults_without_policies"`
}

var groupGroupsAuditStatsAttrTypesDS = objectAttrsTypeDSGroupGroupsAuditStats(false)
var groupGroupsAuditStatsAttrTypesDSRecurse = objectAttrsTypeDSGroupGroupsAuditStats(true)

type groupGroupsAuditStatsDataDS struct {
	AuditedGroups         types.Int64 `tfsdk:"audited_groups"`
	Classifications       types.List  `tfsdk:"classifications"`
	OverdueAuditGroups    types.Int64 `tfsdk:"overdue_audit_groups"`
	OverdueVaultPolicies  types.Int64 `tfsdk:"overdue_vault_policies"`
	UnauditedGroups       types.Int64 `tfsdk:"unaudited_groups"`
	ValidVaultPolicies    types.Int64 `tfsdk:"valid_vault_policies"`
	VaultsWithoutPolicies types.Int64 `tfsdk:"vaults_without_policies"`
}

var groupProvisioningGroupAttrTypesRS = objectAttrsTypeRSGroupProvisioningGroup(false)
var groupProvisioningGroupAttrTypesRSRecurse = objectAttrsTypeRSGroupProvisioningGroup(true)

type groupProvisioningGroupDataRS struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	ActivationRequired types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects  types.Object `tfsdk:"additional_objects"`
	GroupUUID          types.String `tfsdk:"group_uuid"`
	GroupOnSystem      types.Object `tfsdk:"group_on_system"`
}

var groupProvisioningGroupAttrTypesDS = objectAttrsTypeDSGroupProvisioningGroup(false)
var groupProvisioningGroupAttrTypesDSRecurse = objectAttrsTypeDSGroupProvisioningGroup(true)

type groupProvisioningGroupDataDS struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	ActivationRequired types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects  types.Object `tfsdk:"additional_objects"`
	Group              types.Object `tfsdk:"group"`
	GroupOnSystem      types.Object `tfsdk:"group_on_system"`
}

var groupProvisioningGroupLinkableWrapperAttrTypesRS = objectAttrsTypeRSGroupProvisioningGroupLinkableWrapper(false)
var groupProvisioningGroupLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSGroupProvisioningGroupLinkableWrapper(true)

type groupProvisioningGroupLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var groupProvisioningGroupLinkableWrapperAttrTypesDS = objectAttrsTypeDSGroupProvisioningGroupLinkableWrapper(false)
var groupProvisioningGroupLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSGroupProvisioningGroupLinkableWrapper(true)

type groupProvisioningGroupLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var groupProvisioningGroup_additionalObjectsAttrTypesRS = objectAttrsTypeRSGroupProvisioningGroup_additionalObjects(false)
var groupProvisioningGroup_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSGroupProvisioningGroup_additionalObjects(true)

type groupProvisioningGroup_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupProvisioningGroup_additionalObjectsAttrTypesDS = objectAttrsTypeDSGroupProvisioningGroup_additionalObjects(false)
var groupProvisioningGroup_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSGroupProvisioningGroup_additionalObjects(true)

type groupProvisioningGroup_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var launchpadDisplayedLaunchpadTileAttrTypesRS = objectAttrsTypeRSLaunchpadDisplayedLaunchpadTile(false)
var launchpadDisplayedLaunchpadTileAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadDisplayedLaunchpadTile(true)

type launchpadDisplayedLaunchpadTileDataRS struct {
	Links         types.List   `tfsdk:"links"`
	Permissions   types.List   `tfsdk:"permissions"`
	GroupUUID     types.String `tfsdk:"group_uuid"`
	IDenticonCode types.Int64  `tfsdk:"identicon_code"`
	Logo          types.List   `tfsdk:"logo"`
	Tile          types.Object `tfsdk:"tile"`
	Title         types.String `tfsdk:"title"`
	Uri           types.String `tfsdk:"uri"`
}

var launchpadDisplayedLaunchpadTileAttrTypesDS = objectAttrsTypeDSLaunchpadDisplayedLaunchpadTile(false)
var launchpadDisplayedLaunchpadTileAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadDisplayedLaunchpadTile(true)

type launchpadDisplayedLaunchpadTileDataDS struct {
	Links         types.List   `tfsdk:"links"`
	Permissions   types.List   `tfsdk:"permissions"`
	Group         types.Object `tfsdk:"group"`
	IDenticonCode types.Int64  `tfsdk:"identicon_code"`
	Logo          types.List   `tfsdk:"logo"`
	Tile          types.Object `tfsdk:"tile"`
	Title         types.String `tfsdk:"title"`
	Uri           types.String `tfsdk:"uri"`
}

var launchpadDisplayedLaunchpadTilesAttrTypesRS = objectAttrsTypeRSLaunchpadDisplayedLaunchpadTiles(false)
var launchpadDisplayedLaunchpadTilesAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadDisplayedLaunchpadTiles(true)

type launchpadDisplayedLaunchpadTilesDataRS struct {
	Items types.List `tfsdk:"items"`
}

var launchpadDisplayedLaunchpadTilesAttrTypesDS = objectAttrsTypeDSLaunchpadDisplayedLaunchpadTiles(false)
var launchpadDisplayedLaunchpadTilesAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadDisplayedLaunchpadTiles(true)

type launchpadDisplayedLaunchpadTilesDataDS struct {
	Items types.List `tfsdk:"items"`
}

var launchpadLaunchpadTileAttrTypesRS = objectAttrsTypeRSLaunchpadLaunchpadTile(false)
var launchpadLaunchpadTileAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadLaunchpadTile(true)

type launchpadLaunchpadTileDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
}

var launchpadLaunchpadTileAttrTypesDS = objectAttrsTypeDSLaunchpadLaunchpadTile(false)
var launchpadLaunchpadTileAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadLaunchpadTile(true)

type launchpadLaunchpadTileDataDS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Application                types.Object `tfsdk:"application"`
	Group                      types.Object `tfsdk:"group"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecord                types.Object `tfsdk:"vault_record"`
}

var launchpadLaunchpadTileLinkableWrapperAttrTypesRS = objectAttrsTypeRSLaunchpadLaunchpadTileLinkableWrapper(false)
var launchpadLaunchpadTileLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadLaunchpadTileLinkableWrapper(true)

type launchpadLaunchpadTileLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var launchpadLaunchpadTileLinkableWrapperAttrTypesDS = objectAttrsTypeDSLaunchpadLaunchpadTileLinkableWrapper(false)
var launchpadLaunchpadTileLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadLaunchpadTileLinkableWrapper(true)

type launchpadLaunchpadTileLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var launchpadLaunchpadTilePrimerAttrTypesRS = objectAttrsTypeRSLaunchpadLaunchpadTilePrimer(false)
var launchpadLaunchpadTilePrimerAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadLaunchpadTilePrimer(true)

type launchpadLaunchpadTilePrimerDataRS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var launchpadLaunchpadTilePrimerAttrTypesDS = objectAttrsTypeDSLaunchpadLaunchpadTilePrimer(false)
var launchpadLaunchpadTilePrimerAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadLaunchpadTilePrimer(true)

type launchpadLaunchpadTilePrimerDataDS struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var launchpadLaunchpadTile_additionalObjectsAttrTypesRS = objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(false)
var launchpadLaunchpadTile_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(true)

type launchpadLaunchpadTile_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var launchpadLaunchpadTile_additionalObjectsAttrTypesDS = objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(false)
var launchpadLaunchpadTile_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(true)

type launchpadLaunchpadTile_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var launchpadManualLaunchpadTileAttrTypesRS = objectAttrsTypeRSLaunchpadManualLaunchpadTile(false)
var launchpadManualLaunchpadTileAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadManualLaunchpadTile(true)

type launchpadManualLaunchpadTileDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
	Title                      types.String `tfsdk:"title"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadManualLaunchpadTileAttrTypesDS = objectAttrsTypeDSLaunchpadManualLaunchpadTile(false)
var launchpadManualLaunchpadTileAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadManualLaunchpadTile(true)

type launchpadManualLaunchpadTileDataDS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Application                types.Object `tfsdk:"application"`
	Group                      types.Object `tfsdk:"group"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecord                types.Object `tfsdk:"vault_record"`
	Title                      types.String `tfsdk:"title"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadSsoApplicationLaunchpadTileAttrTypesRS = objectAttrsTypeRSLaunchpadSsoApplicationLaunchpadTile(false)
var launchpadSsoApplicationLaunchpadTileAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadSsoApplicationLaunchpadTile(true)

type launchpadSsoApplicationLaunchpadTileDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadSsoApplicationLaunchpadTileAttrTypesDS = objectAttrsTypeDSLaunchpadSsoApplicationLaunchpadTile(false)
var launchpadSsoApplicationLaunchpadTileAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadSsoApplicationLaunchpadTile(true)

type launchpadSsoApplicationLaunchpadTileDataDS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Application                types.Object `tfsdk:"application"`
	Group                      types.Object `tfsdk:"group"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecord                types.Object `tfsdk:"vault_record"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadVaultRecordLaunchpadTileAttrTypesRS = objectAttrsTypeRSLaunchpadVaultRecordLaunchpadTile(false)
var launchpadVaultRecordLaunchpadTileAttrTypesRSRecurse = objectAttrsTypeRSLaunchpadVaultRecordLaunchpadTile(true)

type launchpadVaultRecordLaunchpadTileDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
}

var launchpadVaultRecordLaunchpadTileAttrTypesDS = objectAttrsTypeDSLaunchpadVaultRecordLaunchpadTile(false)
var launchpadVaultRecordLaunchpadTileAttrTypesDSRecurse = objectAttrsTypeDSLaunchpadVaultRecordLaunchpadTile(true)

type launchpadVaultRecordLaunchpadTileDataDS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Application                types.Object `tfsdk:"application"`
	Group                      types.Object `tfsdk:"group"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecord                types.Object `tfsdk:"vault_record"`
}

var licenseKeyHubLicenseInfoAttrTypesRS = objectAttrsTypeRSLicenseKeyHubLicenseInfo(false)
var licenseKeyHubLicenseInfoAttrTypesRSRecurse = objectAttrsTypeRSLicenseKeyHubLicenseInfo(true)

type licenseKeyHubLicenseInfoDataRS struct {
	CurrentLicenseStatus types.String `tfsdk:"current_license_status"`
	CustomerCompany      types.String `tfsdk:"customer_company"`
	CustomerContact      types.String `tfsdk:"customer_contact"`
	CustomerDomains      types.List   `tfsdk:"customer_domains"`
	Details              types.List   `tfsdk:"details"`
	ExpirationTime       types.String `tfsdk:"expiration_time"`
	Features             types.List   `tfsdk:"features"`
	IssueTime            types.String `tfsdk:"issue_time"`
	KeyHubDomain         types.String `tfsdk:"key_hub_domain"`
	LicenseKey           types.String `tfsdk:"license_key"`
	NotBeforeTime        types.String `tfsdk:"not_before_time"`
	UsersHardLimit       types.Int64  `tfsdk:"users_hard_limit"`
	UsersProLimit        types.Int64  `tfsdk:"users_pro_limit"`
	UsersSoftLimit       types.Int64  `tfsdk:"users_soft_limit"`
	UUID                 types.String `tfsdk:"uuid"`
	Version              types.Int64  `tfsdk:"version"`
}

var licenseKeyHubLicenseInfoAttrTypesDS = objectAttrsTypeDSLicenseKeyHubLicenseInfo(false)
var licenseKeyHubLicenseInfoAttrTypesDSRecurse = objectAttrsTypeDSLicenseKeyHubLicenseInfo(true)

type licenseKeyHubLicenseInfoDataDS struct {
	CurrentLicenseStatus types.String `tfsdk:"current_license_status"`
	CustomerCompany      types.String `tfsdk:"customer_company"`
	CustomerContact      types.String `tfsdk:"customer_contact"`
	CustomerDomains      types.List   `tfsdk:"customer_domains"`
	Details              types.List   `tfsdk:"details"`
	ExpirationTime       types.String `tfsdk:"expiration_time"`
	Features             types.List   `tfsdk:"features"`
	IssueTime            types.String `tfsdk:"issue_time"`
	KeyHubDomain         types.String `tfsdk:"key_hub_domain"`
	LicenseKey           types.String `tfsdk:"license_key"`
	NotBeforeTime        types.String `tfsdk:"not_before_time"`
	UsersHardLimit       types.Int64  `tfsdk:"users_hard_limit"`
	UsersProLimit        types.Int64  `tfsdk:"users_pro_limit"`
	UsersSoftLimit       types.Int64  `tfsdk:"users_soft_limit"`
	UUID                 types.String `tfsdk:"uuid"`
	Version              types.Int64  `tfsdk:"version"`
}

var markItemMarkerAttrTypesRS = objectAttrsTypeRSMarkItemMarker(false)
var markItemMarkerAttrTypesRSRecurse = objectAttrsTypeRSMarkItemMarker(true)

type markItemMarkerDataRS struct {
	Level              types.String `tfsdk:"level"`
	MarkItemMarkerType types.String `tfsdk:"mark_item_marker_type"`
	Parameters         types.Object `tfsdk:"parameters"`
}

var markItemMarkerAttrTypesDS = objectAttrsTypeDSMarkItemMarker(false)
var markItemMarkerAttrTypesDSRecurse = objectAttrsTypeDSMarkItemMarker(true)

type markItemMarkerDataDS struct {
	Level              types.String `tfsdk:"level"`
	MarkItemMarkerType types.String `tfsdk:"mark_item_marker_type"`
	Parameters         types.Object `tfsdk:"parameters"`
}

var markItemMarker_parametersAttrTypesRS = objectAttrsTypeRSMarkItemMarker_parameters(false)
var markItemMarker_parametersAttrTypesRSRecurse = objectAttrsTypeRSMarkItemMarker_parameters(true)

type markItemMarker_parametersDataRS struct {
}

var markItemMarker_parametersAttrTypesDS = objectAttrsTypeDSMarkItemMarker_parameters(false)
var markItemMarker_parametersAttrTypesDSRecurse = objectAttrsTypeDSMarkItemMarker_parameters(true)

type markItemMarker_parametersDataDS struct {
}

var markItemMarkersAttrTypesRS = objectAttrsTypeRSMarkItemMarkers(false)
var markItemMarkersAttrTypesRSRecurse = objectAttrsTypeRSMarkItemMarkers(true)

type markItemMarkersDataRS struct {
	Markers types.List `tfsdk:"markers"`
}

var markItemMarkersAttrTypesDS = objectAttrsTypeDSMarkItemMarkers(false)
var markItemMarkersAttrTypesDSRecurse = objectAttrsTypeDSMarkItemMarkers(true)

type markItemMarkersDataDS struct {
	Markers types.List `tfsdk:"markers"`
}

var notificationCertificateExpiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationCertificateExpiredNotification(false)
var notificationCertificateExpiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationCertificateExpiredNotification(true)

type notificationCertificateExpiredNotificationDataRS struct {
	Certificate types.Object `tfsdk:"certificate"`
	Directory   types.Object `tfsdk:"directory"`
	Expiration  types.String `tfsdk:"expiration"`
	LdapClient  types.Object `tfsdk:"ldap_client"`
	System      types.Object `tfsdk:"system"`
	Usage       types.String `tfsdk:"usage"`
	Webhook     types.Object `tfsdk:"webhook"`
}

var notificationCertificateExpiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationCertificateExpiredNotification(false)
var notificationCertificateExpiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationCertificateExpiredNotification(true)

type notificationCertificateExpiredNotificationDataDS struct {
	Certificate types.Object `tfsdk:"certificate"`
	Directory   types.Object `tfsdk:"directory"`
	Expiration  types.String `tfsdk:"expiration"`
	LdapClient  types.Object `tfsdk:"ldap_client"`
	System      types.Object `tfsdk:"system"`
	Usage       types.String `tfsdk:"usage"`
	Webhook     types.Object `tfsdk:"webhook"`
}

var notificationGroupAuditRequiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationGroupAuditRequiredNotification(false)
var notificationGroupAuditRequiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationGroupAuditRequiredNotification(true)

type notificationGroupAuditRequiredNotificationDataRS struct {
	DueDate                                        types.String `tfsdk:"due_date"`
	Group                                          types.Object `tfsdk:"group"`
	NotificationGroupAuditRequiredNotificationType types.String `tfsdk:"notification_group_audit_required_notification_type"`
}

var notificationGroupAuditRequiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationGroupAuditRequiredNotification(false)
var notificationGroupAuditRequiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationGroupAuditRequiredNotification(true)

type notificationGroupAuditRequiredNotificationDataDS struct {
	DueDate                                        types.String `tfsdk:"due_date"`
	Group                                          types.Object `tfsdk:"group"`
	NotificationGroupAuditRequiredNotificationType types.String `tfsdk:"notification_group_audit_required_notification_type"`
}

var notificationGroupEditRequiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationGroupEditRequiredNotification(false)
var notificationGroupEditRequiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationGroupEditRequiredNotification(true)

type notificationGroupEditRequiredNotificationDataRS struct {
	Group      types.Object `tfsdk:"group"`
	Parameters types.Object `tfsdk:"parameters"`
	Reason     types.String `tfsdk:"reason"`
}

var notificationGroupEditRequiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationGroupEditRequiredNotification(false)
var notificationGroupEditRequiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationGroupEditRequiredNotification(true)

type notificationGroupEditRequiredNotificationDataDS struct {
	Group      types.Object `tfsdk:"group"`
	Parameters types.Object `tfsdk:"parameters"`
	Reason     types.String `tfsdk:"reason"`
}

var notificationGroupEditRequiredNotification_parametersAttrTypesRS = objectAttrsTypeRSNotificationGroupEditRequiredNotification_parameters(false)
var notificationGroupEditRequiredNotification_parametersAttrTypesRSRecurse = objectAttrsTypeRSNotificationGroupEditRequiredNotification_parameters(true)

type notificationGroupEditRequiredNotification_parametersDataRS struct {
}

var notificationGroupEditRequiredNotification_parametersAttrTypesDS = objectAttrsTypeDSNotificationGroupEditRequiredNotification_parameters(false)
var notificationGroupEditRequiredNotification_parametersAttrTypesDSRecurse = objectAttrsTypeDSNotificationGroupEditRequiredNotification_parameters(true)

type notificationGroupEditRequiredNotification_parametersDataDS struct {
}

var notificationInvalidSignaturesDetectedNotificationAttrTypesRS = objectAttrsTypeRSNotificationInvalidSignaturesDetectedNotification(false)
var notificationInvalidSignaturesDetectedNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationInvalidSignaturesDetectedNotification(true)

type notificationInvalidSignaturesDetectedNotificationDataRS struct {
}

var notificationInvalidSignaturesDetectedNotificationAttrTypesDS = objectAttrsTypeDSNotificationInvalidSignaturesDetectedNotification(false)
var notificationInvalidSignaturesDetectedNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationInvalidSignaturesDetectedNotification(true)

type notificationInvalidSignaturesDetectedNotificationDataDS struct {
}

var notificationLicenseStatusNotificationAttrTypesRS = objectAttrsTypeRSNotificationLicenseStatusNotification(false)
var notificationLicenseStatusNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationLicenseStatusNotification(true)

type notificationLicenseStatusNotificationDataRS struct {
	ActiveAccounts types.Int64  `tfsdk:"active_accounts"`
	LicenseInfo    types.Object `tfsdk:"license_info"`
}

var notificationLicenseStatusNotificationAttrTypesDS = objectAttrsTypeDSNotificationLicenseStatusNotification(false)
var notificationLicenseStatusNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationLicenseStatusNotification(true)

type notificationLicenseStatusNotificationDataDS struct {
	ActiveAccounts types.Int64  `tfsdk:"active_accounts"`
	LicenseInfo    types.Object `tfsdk:"license_info"`
}

var notificationModificationRequestNotificationAttrTypesRS = objectAttrsTypeRSNotificationModificationRequestNotification(false)
var notificationModificationRequestNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationModificationRequestNotification(true)

type notificationModificationRequestNotificationDataRS struct {
	Admins  types.List   `tfsdk:"admins"`
	Groups  types.List   `tfsdk:"groups"`
	Request types.Object `tfsdk:"request"`
}

var notificationModificationRequestNotificationAttrTypesDS = objectAttrsTypeDSNotificationModificationRequestNotification(false)
var notificationModificationRequestNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationModificationRequestNotification(true)

type notificationModificationRequestNotificationDataDS struct {
	Admins  types.List   `tfsdk:"admins"`
	Groups  types.List   `tfsdk:"groups"`
	Request types.Object `tfsdk:"request"`
}

var notificationNotificationAttrTypesRS = objectAttrsTypeRSNotificationNotification(false)
var notificationNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationNotification(true)

type notificationNotificationDataRS struct {
}

var notificationNotificationAttrTypesDS = objectAttrsTypeDSNotificationNotification(false)
var notificationNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationNotification(true)

type notificationNotificationDataDS struct {
}

var notificationNotificationsAttrTypesRS = objectAttrsTypeRSNotificationNotifications(false)
var notificationNotificationsAttrTypesRSRecurse = objectAttrsTypeRSNotificationNotifications(true)

type notificationNotificationsDataRS struct {
	Items types.List `tfsdk:"items"`
}

var notificationNotificationsAttrTypesDS = objectAttrsTypeDSNotificationNotifications(false)
var notificationNotificationsAttrTypesDSRecurse = objectAttrsTypeDSNotificationNotifications(true)

type notificationNotificationsDataDS struct {
	Items types.List `tfsdk:"items"`
}

var notificationOldApiVersionUsageNotificationAttrTypesRS = objectAttrsTypeRSNotificationOldApiVersionUsageNotification(false)
var notificationOldApiVersionUsageNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationOldApiVersionUsageNotification(true)

type notificationOldApiVersionUsageNotificationDataRS struct {
	ApiVersion types.Int64  `tfsdk:"api_version"`
	Client     types.Object `tfsdk:"client"`
}

var notificationOldApiVersionUsageNotificationAttrTypesDS = objectAttrsTypeDSNotificationOldApiVersionUsageNotification(false)
var notificationOldApiVersionUsageNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationOldApiVersionUsageNotification(true)

type notificationOldApiVersionUsageNotificationDataDS struct {
	ApiVersion types.Int64  `tfsdk:"api_version"`
	Client     types.Object `tfsdk:"client"`
}

var notificationProvisionConfigRequiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationProvisionConfigRequiredNotification(false)
var notificationProvisionConfigRequiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationProvisionConfigRequiredNotification(true)

type notificationProvisionConfigRequiredNotificationDataRS struct {
	Systems types.List `tfsdk:"systems"`
}

var notificationProvisionConfigRequiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationProvisionConfigRequiredNotification(false)
var notificationProvisionConfigRequiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationProvisionConfigRequiredNotification(true)

type notificationProvisionConfigRequiredNotificationDataDS struct {
	Systems types.List `tfsdk:"systems"`
}

var notificationRotatingPasswordRequiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationRotatingPasswordRequiredNotification(false)
var notificationRotatingPasswordRequiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationRotatingPasswordRequiredNotification(true)

type notificationRotatingPasswordRequiredNotificationDataRS struct {
	Groups types.List `tfsdk:"groups"`
}

var notificationRotatingPasswordRequiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationRotatingPasswordRequiredNotification(false)
var notificationRotatingPasswordRequiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationRotatingPasswordRequiredNotification(true)

type notificationRotatingPasswordRequiredNotificationDataDS struct {
	Groups types.List `tfsdk:"groups"`
}

var notificationUpdateAvailableNotificationAttrTypesRS = objectAttrsTypeRSNotificationUpdateAvailableNotification(false)
var notificationUpdateAvailableNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationUpdateAvailableNotification(true)

type notificationUpdateAvailableNotificationDataRS struct {
	ReleasedAt types.String `tfsdk:"released_at"`
}

var notificationUpdateAvailableNotificationAttrTypesDS = objectAttrsTypeDSNotificationUpdateAvailableNotification(false)
var notificationUpdateAvailableNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationUpdateAvailableNotification(true)

type notificationUpdateAvailableNotificationDataDS struct {
	ReleasedAt types.String `tfsdk:"released_at"`
}

var notificationVaultRecordExpiredNotificationAttrTypesRS = objectAttrsTypeRSNotificationVaultRecordExpiredNotification(false)
var notificationVaultRecordExpiredNotificationAttrTypesRSRecurse = objectAttrsTypeRSNotificationVaultRecordExpiredNotification(true)

type notificationVaultRecordExpiredNotificationDataRS struct {
	Record types.Object `tfsdk:"record"`
}

var notificationVaultRecordExpiredNotificationAttrTypesDS = objectAttrsTypeDSNotificationVaultRecordExpiredNotification(false)
var notificationVaultRecordExpiredNotificationAttrTypesDSRecurse = objectAttrsTypeDSNotificationVaultRecordExpiredNotification(true)

type notificationVaultRecordExpiredNotificationDataDS struct {
	Record types.Object `tfsdk:"record"`
}

var organizationAccountOrganizationalUnitAttrTypesRS = objectAttrsTypeRSOrganizationAccountOrganizationalUnit(false)
var organizationAccountOrganizationalUnitAttrTypesRSRecurse = objectAttrsTypeRSOrganizationAccountOrganizationalUnit(true)

type organizationAccountOrganizationalUnitDataRS struct {
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
}

var organizationAccountOrganizationalUnitAttrTypesDS = objectAttrsTypeDSOrganizationAccountOrganizationalUnit(false)
var organizationAccountOrganizationalUnitAttrTypesDSRecurse = objectAttrsTypeDSOrganizationAccountOrganizationalUnit(true)

type organizationAccountOrganizationalUnitDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Name              types.String `tfsdk:"name"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
}

var organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRS = objectAttrsTypeRSOrganizationAccountOrganizationalUnitLinkableWrapper(false)
var organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSOrganizationAccountOrganizationalUnitLinkableWrapper(true)

type organizationAccountOrganizationalUnitLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDS = objectAttrsTypeDSOrganizationAccountOrganizationalUnitLinkableWrapper(false)
var organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSOrganizationAccountOrganizationalUnitLinkableWrapper(true)

type organizationAccountOrganizationalUnitLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRS = objectAttrsTypeRSOrganizationAccountOrganizationalUnit_additionalObjects(false)
var organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSOrganizationAccountOrganizationalUnit_additionalObjects(true)

type organizationAccountOrganizationalUnit_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDS = objectAttrsTypeDSOrganizationAccountOrganizationalUnit_additionalObjects(false)
var organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSOrganizationAccountOrganizationalUnit_additionalObjects(true)

type organizationAccountOrganizationalUnit_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationOrganizationalUnitAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnit(false)
var organizationOrganizationalUnitAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnit(true)

type organizationOrganizationalUnitDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Name              types.String `tfsdk:"name"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Depth             types.Int64  `tfsdk:"depth"`
	Description       types.String `tfsdk:"description"`
	OwnerUUID         types.String `tfsdk:"owner_uuid"`
	ParentUUID        types.String `tfsdk:"parent_uuid"`
}

var organizationOrganizationalUnitAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnit(false)
var organizationOrganizationalUnitAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnit(true)

type organizationOrganizationalUnitDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Name              types.String `tfsdk:"name"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Depth             types.Int64  `tfsdk:"depth"`
	Description       types.String `tfsdk:"description"`
	Owner             types.Object `tfsdk:"owner"`
	Parent            types.Object `tfsdk:"parent"`
}

var organizationOrganizationalUnitAccountAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitAccount(false)
var organizationOrganizationalUnitAccountAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitAccount(true)

type organizationOrganizationalUnitAccountDataRS struct {
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	DirectoryUUID     types.String `tfsdk:"directory_uuid"`
}

var organizationOrganizationalUnitAccountAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitAccount(false)
var organizationOrganizationalUnitAccountAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitAccount(true)

type organizationOrganizationalUnitAccountDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	DisplayName       types.String `tfsdk:"display_name"`
	LastActive        types.String `tfsdk:"last_active"`
	Username          types.String `tfsdk:"username"`
	UUID              types.String `tfsdk:"uuid"`
	Validity          types.String `tfsdk:"validity"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Directory         types.Object `tfsdk:"directory"`
}

var organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitAccountLinkableWrapper(false)
var organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitAccountLinkableWrapper(true)

type organizationOrganizationalUnitAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitAccountLinkableWrapper(false)
var organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitAccountLinkableWrapper(true)

type organizationOrganizationalUnitAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitAccount_additionalObjects(false)
var organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitAccount_additionalObjects(true)

type organizationOrganizationalUnitAccount_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitAccount_additionalObjects(false)
var organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitAccount_additionalObjects(true)

type organizationOrganizationalUnitAccount_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationOrganizationalUnitLinkableWrapperAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitLinkableWrapper(false)
var organizationOrganizationalUnitLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitLinkableWrapper(true)

type organizationOrganizationalUnitLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitLinkableWrapperAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitLinkableWrapper(false)
var organizationOrganizationalUnitLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitLinkableWrapper(true)

type organizationOrganizationalUnitLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitPrimerAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitPrimer(false)
var organizationOrganizationalUnitPrimerAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitPrimer(true)

type organizationOrganizationalUnitPrimerDataRS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var organizationOrganizationalUnitPrimerAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)
var organizationOrganizationalUnitPrimerAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(true)

type organizationOrganizationalUnitPrimerDataDS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnitPrimerLinkableWrapper(false)
var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnitPrimerLinkableWrapper(true)

type organizationOrganizationalUnitPrimerLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnitPrimerLinkableWrapper(false)
var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnitPrimerLinkableWrapper(true)

type organizationOrganizationalUnitPrimerLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnit_additionalObjectsAttrTypesRS = objectAttrsTypeRSOrganizationOrganizationalUnit_additionalObjects(false)
var organizationOrganizationalUnit_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSOrganizationOrganizationalUnit_additionalObjects(true)

type organizationOrganizationalUnit_additionalObjectsDataRS struct {
	Audit            types.Object `tfsdk:"audit"`
	CreateAsParentOf types.Object `tfsdk:"create_as_parent_of"`
}

var organizationOrganizationalUnit_additionalObjectsAttrTypesDS = objectAttrsTypeDSOrganizationOrganizationalUnit_additionalObjects(false)
var organizationOrganizationalUnit_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSOrganizationOrganizationalUnit_additionalObjects(true)

type organizationOrganizationalUnit_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningAbstractProvisionedLDAPAttrTypesRS = objectAttrsTypeRSProvisioningAbstractProvisionedLDAP(false)
var provisioningAbstractProvisionedLDAPAttrTypesRSRecurse = objectAttrsTypeRSProvisioningAbstractProvisionedLDAP(true)

type provisioningAbstractProvisionedLDAPDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
}

var provisioningAbstractProvisionedLDAPAttrTypesDS = objectAttrsTypeDSProvisioningAbstractProvisionedLDAP(false)
var provisioningAbstractProvisionedLDAPAttrTypesDSRecurse = objectAttrsTypeDSProvisioningAbstractProvisionedLDAP(true)

type provisioningAbstractProvisionedLDAPDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificate                       types.Object `tfsdk:"client_certificate"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificate              types.Object `tfsdk:"failover_trusted_certificate"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificate                      types.Object `tfsdk:"trusted_certificate"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
}

var provisioningAbstractProvisionedLDAP_attributesAttrTypesRS = objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(false)
var provisioningAbstractProvisionedLDAP_attributesAttrTypesRSRecurse = objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(true)

type provisioningAbstractProvisionedLDAP_attributesDataRS struct {
}

var provisioningAbstractProvisionedLDAP_attributesAttrTypesDS = objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(false)
var provisioningAbstractProvisionedLDAP_attributesAttrTypesDSRecurse = objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(true)

type provisioningAbstractProvisionedLDAP_attributesDataDS struct {
}

var provisioningAccountProvisioningStatusAttrTypesRS = objectAttrsTypeRSProvisioningAccountProvisioningStatus(false)
var provisioningAccountProvisioningStatusAttrTypesRSRecurse = objectAttrsTypeRSProvisioningAccountProvisioningStatus(true)

type provisioningAccountProvisioningStatusDataRS struct {
	Description types.String `tfsdk:"description"`
	Result      types.String `tfsdk:"result"`
	System      types.Object `tfsdk:"system"`
}

var provisioningAccountProvisioningStatusAttrTypesDS = objectAttrsTypeDSProvisioningAccountProvisioningStatus(false)
var provisioningAccountProvisioningStatusAttrTypesDSRecurse = objectAttrsTypeDSProvisioningAccountProvisioningStatus(true)

type provisioningAccountProvisioningStatusDataDS struct {
	Description types.String `tfsdk:"description"`
	Result      types.String `tfsdk:"result"`
	System      types.Object `tfsdk:"system"`
}

var provisioningAccountProvisioningStatusReportAttrTypesRS = objectAttrsTypeRSProvisioningAccountProvisioningStatusReport(false)
var provisioningAccountProvisioningStatusReportAttrTypesRSRecurse = objectAttrsTypeRSProvisioningAccountProvisioningStatusReport(true)

type provisioningAccountProvisioningStatusReportDataRS struct {
	Status types.List `tfsdk:"status"`
}

var provisioningAccountProvisioningStatusReportAttrTypesDS = objectAttrsTypeDSProvisioningAccountProvisioningStatusReport(false)
var provisioningAccountProvisioningStatusReportAttrTypesDSRecurse = objectAttrsTypeDSProvisioningAccountProvisioningStatusReport(true)

type provisioningAccountProvisioningStatusReportDataDS struct {
	Status types.List `tfsdk:"status"`
}

var provisioningCircuitBreakerStatisticsAttrTypesRS = objectAttrsTypeRSProvisioningCircuitBreakerStatistics(false)
var provisioningCircuitBreakerStatisticsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningCircuitBreakerStatistics(true)

type provisioningCircuitBreakerStatisticsDataRS struct {
	NumberOfFailedCalls       types.Int64  `tfsdk:"number_of_failed_calls"`
	NumberOfNotPermittedCalls types.Int64  `tfsdk:"number_of_not_permitted_calls"`
	NumberOfSuccessfulCalls   types.Int64  `tfsdk:"number_of_successful_calls"`
	State                     types.String `tfsdk:"state"`
}

var provisioningCircuitBreakerStatisticsAttrTypesDS = objectAttrsTypeDSProvisioningCircuitBreakerStatistics(false)
var provisioningCircuitBreakerStatisticsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningCircuitBreakerStatistics(true)

type provisioningCircuitBreakerStatisticsDataDS struct {
	NumberOfFailedCalls       types.Int64  `tfsdk:"number_of_failed_calls"`
	NumberOfNotPermittedCalls types.Int64  `tfsdk:"number_of_not_permitted_calls"`
	NumberOfSuccessfulCalls   types.Int64  `tfsdk:"number_of_successful_calls"`
	State                     types.String `tfsdk:"state"`
}

var provisioningGroupOnSystemAttrTypesRS = objectAttrsTypeRSProvisioningGroupOnSystem(false)
var provisioningGroupOnSystemAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupOnSystem(true)

type provisioningGroupOnSystemDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	OwnerUUID                           types.String `tfsdk:"owner_uuid"`
	SystemUUID                          types.String `tfsdk:"system_uuid"`
}

var provisioningGroupOnSystemAttrTypesDS = objectAttrsTypeDSProvisioningGroupOnSystem(false)
var provisioningGroupOnSystemAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupOnSystem(true)

type provisioningGroupOnSystemDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	Owner                               types.Object `tfsdk:"owner"`
	System                              types.Object `tfsdk:"system"`
}

var provisioningGroupOnSystemLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningGroupOnSystemLinkableWrapper(false)
var provisioningGroupOnSystemLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupOnSystemLinkableWrapper(true)

type provisioningGroupOnSystemLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningGroupOnSystemLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningGroupOnSystemLinkableWrapper(false)
var provisioningGroupOnSystemLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupOnSystemLinkableWrapper(true)

type provisioningGroupOnSystemLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningGroupOnSystemPrimerAttrTypesRS = objectAttrsTypeRSProvisioningGroupOnSystemPrimer(false)
var provisioningGroupOnSystemPrimerAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupOnSystemPrimer(true)

type provisioningGroupOnSystemPrimerDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
}

var provisioningGroupOnSystemPrimerAttrTypesDS = objectAttrsTypeDSProvisioningGroupOnSystemPrimer(false)
var provisioningGroupOnSystemPrimerAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupOnSystemPrimer(true)

type provisioningGroupOnSystemPrimerDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
}

var provisioningGroupOnSystemTypesAttrTypesRS = objectAttrsTypeRSProvisioningGroupOnSystemTypes(false)
var provisioningGroupOnSystemTypesAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupOnSystemTypes(true)

type provisioningGroupOnSystemTypesDataRS struct {
	Types types.List `tfsdk:"types"`
}

var provisioningGroupOnSystemTypesAttrTypesDS = objectAttrsTypeDSProvisioningGroupOnSystemTypes(false)
var provisioningGroupOnSystemTypesAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupOnSystemTypes(true)

type provisioningGroupOnSystemTypesDataDS struct {
	Types types.List `tfsdk:"types"`
}

var provisioningGroupOnSystem_additionalObjectsAttrTypesRS = objectAttrsTypeRSProvisioningGroupOnSystem_additionalObjects(false)
var provisioningGroupOnSystem_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupOnSystem_additionalObjects(true)

type provisioningGroupOnSystem_additionalObjectsDataRS struct {
	Audit           types.Object `tfsdk:"audit"`
	Provgroups      types.Object `tfsdk:"provgroups"`
	ServiceAccounts types.Object `tfsdk:"service_accounts"`
}

var provisioningGroupOnSystem_additionalObjectsAttrTypesDS = objectAttrsTypeDSProvisioningGroupOnSystem_additionalObjects(false)
var provisioningGroupOnSystem_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupOnSystem_additionalObjects(true)

type provisioningGroupOnSystem_additionalObjectsDataDS struct {
	Audit           types.Object `tfsdk:"audit"`
	Provgroups      types.Object `tfsdk:"provgroups"`
	ServiceAccounts types.Object `tfsdk:"service_accounts"`
}

var provisioningGroupProvisioningStatusAttrTypesRS = objectAttrsTypeRSProvisioningGroupProvisioningStatus(false)
var provisioningGroupProvisioningStatusAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupProvisioningStatus(true)

type provisioningGroupProvisioningStatusDataRS struct {
	Folder                        types.Object `tfsdk:"folder"`
	Group                         types.Object `tfsdk:"group"`
	ProvisioningDuration          types.Object `tfsdk:"provisioning_duration"`
	ProvisioningEndTime           types.String `tfsdk:"provisioning_end_time"`
	ProvisioningPermissionEndTime types.String `tfsdk:"provisioning_permission_end_time"`
	StatusReport                  types.Object `tfsdk:"status_report"`
	VisibleOnDashboard            types.Bool   `tfsdk:"visible_on_dashboard"`
}

var provisioningGroupProvisioningStatusAttrTypesDS = objectAttrsTypeDSProvisioningGroupProvisioningStatus(false)
var provisioningGroupProvisioningStatusAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupProvisioningStatus(true)

type provisioningGroupProvisioningStatusDataDS struct {
	Folder                        types.Object `tfsdk:"folder"`
	Group                         types.Object `tfsdk:"group"`
	ProvisioningDuration          types.Object `tfsdk:"provisioning_duration"`
	ProvisioningEndTime           types.String `tfsdk:"provisioning_end_time"`
	ProvisioningPermissionEndTime types.String `tfsdk:"provisioning_permission_end_time"`
	StatusReport                  types.Object `tfsdk:"status_report"`
	VisibleOnDashboard            types.Bool   `tfsdk:"visible_on_dashboard"`
}

var provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRS = objectAttrsTypeRSProvisioningGroupProvisioningStatus_provisioningDuration(false)
var provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRSRecurse = objectAttrsTypeRSProvisioningGroupProvisioningStatus_provisioningDuration(true)

type provisioningGroupProvisioningStatus_provisioningDurationDataRS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDS = objectAttrsTypeDSProvisioningGroupProvisioningStatus_provisioningDuration(false)
var provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDSRecurse = objectAttrsTypeDSProvisioningGroupProvisioningStatus_provisioningDuration(true)

type provisioningGroupProvisioningStatus_provisioningDurationDataDS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var provisioningOwnedGroupOnSystemsWrapperAttrTypesRS = objectAttrsTypeRSProvisioningOwnedGroupOnSystemsWrapper(false)
var provisioningOwnedGroupOnSystemsWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningOwnedGroupOnSystemsWrapper(true)

type provisioningOwnedGroupOnSystemsWrapperDataRS struct {
	Items         types.List  `tfsdk:"items"`
	UnlinkedCount types.Int64 `tfsdk:"unlinked_count"`
}

var provisioningOwnedGroupOnSystemsWrapperAttrTypesDS = objectAttrsTypeDSProvisioningOwnedGroupOnSystemsWrapper(false)
var provisioningOwnedGroupOnSystemsWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningOwnedGroupOnSystemsWrapper(true)

type provisioningOwnedGroupOnSystemsWrapperDataDS struct {
	Items         types.List  `tfsdk:"items"`
	UnlinkedCount types.Int64 `tfsdk:"unlinked_count"`
}

var provisioningProvisionNumberSequenceAttrTypesRS = objectAttrsTypeRSProvisioningProvisionNumberSequence(false)
var provisioningProvisionNumberSequenceAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionNumberSequence(true)

type provisioningProvisionNumberSequenceDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AccountCount      types.Int64  `tfsdk:"account_count"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
	NextUID           types.Int64  `tfsdk:"next_u_i_d"`
}

var provisioningProvisionNumberSequenceAttrTypesDS = objectAttrsTypeDSProvisioningProvisionNumberSequence(false)
var provisioningProvisionNumberSequenceAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionNumberSequence(true)

type provisioningProvisionNumberSequenceDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AccountCount      types.Int64  `tfsdk:"account_count"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
	NextUID           types.Int64  `tfsdk:"next_u_i_d"`
}

var provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningProvisionNumberSequenceLinkableWrapper(false)
var provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionNumberSequenceLinkableWrapper(true)

type provisioningProvisionNumberSequenceLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningProvisionNumberSequenceLinkableWrapper(false)
var provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionNumberSequenceLinkableWrapper(true)

type provisioningProvisionNumberSequenceLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionNumberSequence_additionalObjectsAttrTypesRS = objectAttrsTypeRSProvisioningProvisionNumberSequence_additionalObjects(false)
var provisioningProvisionNumberSequence_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionNumberSequence_additionalObjects(true)

type provisioningProvisionNumberSequence_additionalObjectsDataRS struct {
	Audit   types.Object `tfsdk:"audit"`
	Systems types.Object `tfsdk:"systems"`
}

var provisioningProvisionNumberSequence_additionalObjectsAttrTypesDS = objectAttrsTypeDSProvisioningProvisionNumberSequence_additionalObjects(false)
var provisioningProvisionNumberSequence_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionNumberSequence_additionalObjects(true)

type provisioningProvisionNumberSequence_additionalObjectsDataDS struct {
	Audit   types.Object `tfsdk:"audit"`
	Systems types.Object `tfsdk:"systems"`
}

var provisioningProvisionedADAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAD(false)
var provisioningProvisionedADAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAD(true)

type provisioningProvisionedADDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	SamAccountNameScheme                    types.String `tfsdk:"sam_account_name_scheme"`
}

var provisioningProvisionedADAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAD(false)
var provisioningProvisionedADAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAD(true)

type provisioningProvisionedADDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificate                       types.Object `tfsdk:"client_certificate"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificate              types.Object `tfsdk:"failover_trusted_certificate"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificate                      types.Object `tfsdk:"trusted_certificate"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	SamAccountNameScheme                    types.String `tfsdk:"sam_account_name_scheme"`
}

var provisioningProvisionedAccountAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAccount(false)
var provisioningProvisionedAccountAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAccount(true)

type provisioningProvisionedAccountDataRS struct {
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Uid               types.Int64  `tfsdk:"uid"`
}

var provisioningProvisionedAccountAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAccount(false)
var provisioningProvisionedAccountAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAccount(true)

type provisioningProvisionedAccountDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	DisplayName       types.String `tfsdk:"display_name"`
	LastActive        types.String `tfsdk:"last_active"`
	Username          types.String `tfsdk:"username"`
	UUID              types.String `tfsdk:"uuid"`
	Validity          types.String `tfsdk:"validity"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Uid               types.Int64  `tfsdk:"uid"`
}

var provisioningProvisionedAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAccountLinkableWrapper(false)
var provisioningProvisionedAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAccountLinkableWrapper(true)

type provisioningProvisionedAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAccountLinkableWrapper(false)
var provisioningProvisionedAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAccountLinkableWrapper(true)

type provisioningProvisionedAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedAccount_additionalObjectsAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAccount_additionalObjects(false)
var provisioningProvisionedAccount_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAccount_additionalObjects(true)

type provisioningProvisionedAccount_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedAccount_additionalObjectsAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAccount_additionalObjects(false)
var provisioningProvisionedAccount_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAccount_additionalObjects(true)

type provisioningProvisionedAccount_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedAzureOIDCDirectoryAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAzureOIDCDirectory(false)
var provisioningProvisionedAzureOIDCDirectoryAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAzureOIDCDirectory(true)

type provisioningProvisionedAzureOIDCDirectoryDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureOIDCDirectoryAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAzureOIDCDirectory(false)
var provisioningProvisionedAzureOIDCDirectoryAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAzureOIDCDirectory(true)

type provisioningProvisionedAzureOIDCDirectoryDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Directory                               types.Object `tfsdk:"directory"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAzureSyncLDAPDirectory(false)
var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAzureSyncLDAPDirectory(true)

type provisioningProvisionedAzureSyncLDAPDirectoryDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAzureSyncLDAPDirectory(false)
var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAzureSyncLDAPDirectory(true)

type provisioningProvisionedAzureSyncLDAPDirectoryDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	Directory                               types.Object `tfsdk:"directory"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureTenantAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedAzureTenant(false)
var provisioningProvisionedAzureTenantAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedAzureTenant(true)

type provisioningProvisionedAzureTenantDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	IDpDomain                               types.String `tfsdk:"idp_domain"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureTenantAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedAzureTenant(false)
var provisioningProvisionedAzureTenantAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedAzureTenant(true)

type provisioningProvisionedAzureTenantDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	IDpDomain                               types.String `tfsdk:"idp_domain"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedInternalLDAPAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedInternalLDAP(false)
var provisioningProvisionedInternalLDAPAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedInternalLDAP(true)

type provisioningProvisionedInternalLDAPDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Client                                  types.Object `tfsdk:"client"`
}

var provisioningProvisionedInternalLDAPAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedInternalLDAP(false)
var provisioningProvisionedInternalLDAPAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedInternalLDAP(true)

type provisioningProvisionedInternalLDAPDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Client                                  types.Object `tfsdk:"client"`
}

var provisioningProvisionedLDAPAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedLDAP(false)
var provisioningProvisionedLDAPAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedLDAP(true)

type provisioningProvisionedLDAPDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	Gid                                     types.Int64  `tfsdk:"gid"`
	HashingScheme                           types.String `tfsdk:"hashing_scheme"`
	Numbering                               types.Object `tfsdk:"numbering"`
}

var provisioningProvisionedLDAPAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedLDAP(false)
var provisioningProvisionedLDAPAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedLDAP(true)

type provisioningProvisionedLDAPDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificate                       types.Object `tfsdk:"client_certificate"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificate              types.Object `tfsdk:"failover_trusted_certificate"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificate                      types.Object `tfsdk:"trusted_certificate"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	Gid                                     types.Int64  `tfsdk:"gid"`
	HashingScheme                           types.String `tfsdk:"hashing_scheme"`
	Numbering                               types.Object `tfsdk:"numbering"`
}

var provisioningProvisionedLDAPDirectoryAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedLDAPDirectory(false)
var provisioningProvisionedLDAPDirectoryAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedLDAPDirectory(true)

type provisioningProvisionedLDAPDirectoryDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
}

var provisioningProvisionedLDAPDirectoryAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedLDAPDirectory(false)
var provisioningProvisionedLDAPDirectoryAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedLDAPDirectory(true)

type provisioningProvisionedLDAPDirectoryDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Directory                               types.Object `tfsdk:"directory"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
}

var provisioningProvisionedSystemAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystem(false)
var provisioningProvisionedSystemAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystem(true)

type provisioningProvisionedSystemDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
}

var provisioningProvisionedSystemAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystem(false)
var provisioningProvisionedSystemAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystem(true)

type provisioningProvisionedSystemDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministrator                    types.Object `tfsdk:"content_administrator"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	Owner                                   types.Object `tfsdk:"owner"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministrator                  types.Object `tfsdk:"technical_administrator"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
}

var provisioningProvisionedSystemLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(false)
var provisioningProvisionedSystemLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(true)

type provisioningProvisionedSystemLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(false)
var provisioningProvisionedSystemLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(true)

type provisioningProvisionedSystemLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemPrimerAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemPrimer(false)
var provisioningProvisionedSystemPrimerAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemPrimer(true)

type provisioningProvisionedSystemPrimerDataRS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
}

var provisioningProvisionedSystemPrimerAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)
var provisioningProvisionedSystemPrimerAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemPrimer(true)

type provisioningProvisionedSystemPrimerDataDS struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	OrganizationalUnit                      types.Object `tfsdk:"organizational_unit"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
}

var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemPrimerLinkableWrapper(false)
var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemPrimerLinkableWrapper(true)

type provisioningProvisionedSystemPrimerLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemPrimerLinkableWrapper(false)
var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemPrimerLinkableWrapper(true)

type provisioningProvisionedSystemPrimerLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemSyncLogAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemSyncLog(false)
var provisioningProvisionedSystemSyncLogAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemSyncLog(true)

type provisioningProvisionedSystemSyncLogDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	CreatedAt         types.String `tfsdk:"created_at"`
	Errors            types.Int64  `tfsdk:"errors"`
	Log               types.String `tfsdk:"log"`
	Modifications     types.Int64  `tfsdk:"modifications"`
}

var provisioningProvisionedSystemSyncLogAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemSyncLog(false)
var provisioningProvisionedSystemSyncLogAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemSyncLog(true)

type provisioningProvisionedSystemSyncLogDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	CreatedAt         types.String `tfsdk:"created_at"`
	Errors            types.Int64  `tfsdk:"errors"`
	Log               types.String `tfsdk:"log"`
	Modifications     types.Int64  `tfsdk:"modifications"`
}

var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemSyncLogLinkableWrapper(false)
var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemSyncLogLinkableWrapper(true)

type provisioningProvisionedSystemSyncLogLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemSyncLogLinkableWrapper(false)
var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemSyncLogLinkableWrapper(true)

type provisioningProvisionedSystemSyncLogLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystemSyncLog_additionalObjects(false)
var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystemSyncLog_additionalObjects(true)

type provisioningProvisionedSystemSyncLog_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystemSyncLog_additionalObjects(false)
var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystemSyncLog_additionalObjects(true)

type provisioningProvisionedSystemSyncLog_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedSystem_additionalObjectsAttrTypesRS = objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)
var provisioningProvisionedSystem_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(true)

type provisioningProvisionedSystem_additionalObjectsDataRS struct {
	Account               types.Object `tfsdk:"account"`
	Audit                 types.Object `tfsdk:"audit"`
	IssuedPermissions     types.Object `tfsdk:"issued_permissions"`
	LoginName             types.String `tfsdk:"login_name"`
	ManagementPermissions types.Object `tfsdk:"management_permissions"`
	Markers               types.Object `tfsdk:"markers"`
	Statistics            types.Object `tfsdk:"statistics"`
	SupportedGroupTypes   types.Object `tfsdk:"supported_group_types"`
}

var provisioningProvisionedSystem_additionalObjectsAttrTypesDS = objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)
var provisioningProvisionedSystem_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(true)

type provisioningProvisionedSystem_additionalObjectsDataDS struct {
	Account               types.Object `tfsdk:"account"`
	Audit                 types.Object `tfsdk:"audit"`
	IssuedPermissions     types.Object `tfsdk:"issued_permissions"`
	LoginName             types.String `tfsdk:"login_name"`
	ManagementPermissions types.Object `tfsdk:"management_permissions"`
	Markers               types.Object `tfsdk:"markers"`
	Statistics            types.Object `tfsdk:"statistics"`
	SupportedGroupTypes   types.Object `tfsdk:"supported_group_types"`
}

var provisioningProvisioningManagementPermissionsAttrTypesRS = objectAttrsTypeRSProvisioningProvisioningManagementPermissions(false)
var provisioningProvisioningManagementPermissionsAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisioningManagementPermissions(true)

type provisioningProvisioningManagementPermissionsDataRS struct {
	CreateNewGroupsAllowed       types.Bool `tfsdk:"create_new_groups_allowed"`
	CreateServiceAccountsAllowed types.Bool `tfsdk:"create_service_accounts_allowed"`
	ReuseExistingGroupsAllowed   types.Bool `tfsdk:"reuse_existing_groups_allowed"`
}

var provisioningProvisioningManagementPermissionsAttrTypesDS = objectAttrsTypeDSProvisioningProvisioningManagementPermissions(false)
var provisioningProvisioningManagementPermissionsAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisioningManagementPermissions(true)

type provisioningProvisioningManagementPermissionsDataDS struct {
	CreateNewGroupsAllowed       types.Bool `tfsdk:"create_new_groups_allowed"`
	CreateServiceAccountsAllowed types.Bool `tfsdk:"create_service_accounts_allowed"`
	ReuseExistingGroupsAllowed   types.Bool `tfsdk:"reuse_existing_groups_allowed"`
}

var provisioningProvisioningStatusAttrTypesRS = objectAttrsTypeRSProvisioningProvisioningStatus(false)
var provisioningProvisioningStatusAttrTypesRSRecurse = objectAttrsTypeRSProvisioningProvisioningStatus(true)

type provisioningProvisioningStatusDataRS struct {
	Groups              types.List `tfsdk:"groups"`
	IgnoreErrors        types.Bool `tfsdk:"ignore_errors"`
	RestrictedByLicense types.Bool `tfsdk:"restricted_by_license"`
}

var provisioningProvisioningStatusAttrTypesDS = objectAttrsTypeDSProvisioningProvisioningStatus(false)
var provisioningProvisioningStatusAttrTypesDSRecurse = objectAttrsTypeDSProvisioningProvisioningStatus(true)

type provisioningProvisioningStatusDataDS struct {
	Groups              types.List `tfsdk:"groups"`
	IgnoreErrors        types.Bool `tfsdk:"ignore_errors"`
	RestrictedByLicense types.Bool `tfsdk:"restricted_by_license"`
}

var provisioningTokenPasswordAttrTypesRS = objectAttrsTypeRSProvisioningTokenPassword(false)
var provisioningTokenPasswordAttrTypesRSRecurse = objectAttrsTypeRSProvisioningTokenPassword(true)

type provisioningTokenPasswordDataRS struct {
	Password types.String `tfsdk:"password"`
}

var provisioningTokenPasswordAttrTypesDS = objectAttrsTypeDSProvisioningTokenPassword(false)
var provisioningTokenPasswordAttrTypesDSRecurse = objectAttrsTypeDSProvisioningTokenPassword(true)

type provisioningTokenPasswordDataDS struct {
	Password types.String `tfsdk:"password"`
}

var requestAbstractApplicationModificationRequestAttrTypesRS = objectAttrsTypeRSRequestAbstractApplicationModificationRequest(false)
var requestAbstractApplicationModificationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestAbstractApplicationModificationRequest(true)

type requestAbstractApplicationModificationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestAbstractApplicationModificationRequestAttrTypesDS = objectAttrsTypeDSRequestAbstractApplicationModificationRequest(false)
var requestAbstractApplicationModificationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestAbstractApplicationModificationRequest(true)

type requestAbstractApplicationModificationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Application                    types.Object `tfsdk:"application"`
}

var requestAbstractOrganizationalUnitModificationRequestAttrTypesRS = objectAttrsTypeRSRequestAbstractOrganizationalUnitModificationRequest(false)
var requestAbstractOrganizationalUnitModificationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestAbstractOrganizationalUnitModificationRequest(true)

type requestAbstractOrganizationalUnitModificationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
}

var requestAbstractOrganizationalUnitModificationRequestAttrTypesDS = objectAttrsTypeDSRequestAbstractOrganizationalUnitModificationRequest(false)
var requestAbstractOrganizationalUnitModificationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestAbstractOrganizationalUnitModificationRequest(true)

type requestAbstractOrganizationalUnitModificationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnit             types.Object `tfsdk:"organizational_unit"`
}

var requestAbstractProvisionedSystemModificationRequestAttrTypesRS = objectAttrsTypeRSRequestAbstractProvisionedSystemModificationRequest(false)
var requestAbstractProvisionedSystemModificationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestAbstractProvisionedSystemModificationRequest(true)

type requestAbstractProvisionedSystemModificationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestAbstractProvisionedSystemModificationRequestAttrTypesDS = objectAttrsTypeDSRequestAbstractProvisionedSystemModificationRequest(false)
var requestAbstractProvisionedSystemModificationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestAbstractProvisionedSystemModificationRequest(true)

type requestAbstractProvisionedSystemModificationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
}

var requestAcceptGrantAccessRequestParametersAttrTypesRS = objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters(false)
var requestAcceptGrantAccessRequestParametersAttrTypesRSRecurse = objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters(true)

type requestAcceptGrantAccessRequestParametersDataRS struct {
	AccessDuration types.Object `tfsdk:"access_duration"`
}

var requestAcceptGrantAccessRequestParametersAttrTypesDS = objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters(false)
var requestAcceptGrantAccessRequestParametersAttrTypesDSRecurse = objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters(true)

type requestAcceptGrantAccessRequestParametersDataDS struct {
	AccessDuration types.Object `tfsdk:"access_duration"`
}

var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRS = objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters_accessDuration(false)
var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRSRecurse = objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters_accessDuration(true)

type requestAcceptGrantAccessRequestParameters_accessDurationDataRS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDS = objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters_accessDuration(false)
var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDSRecurse = objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters_accessDuration(true)

type requestAcceptGrantAccessRequestParameters_accessDurationDataDS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var requestAcceptJoinGroupRequestParametersAttrTypesRS = objectAttrsTypeRSRequestAcceptJoinGroupRequestParameters(false)
var requestAcceptJoinGroupRequestParametersAttrTypesRSRecurse = objectAttrsTypeRSRequestAcceptJoinGroupRequestParameters(true)

type requestAcceptJoinGroupRequestParametersDataRS struct {
	EndDate     types.String `tfsdk:"end_date"`
	MakeManager types.Bool   `tfsdk:"make_manager"`
}

var requestAcceptJoinGroupRequestParametersAttrTypesDS = objectAttrsTypeDSRequestAcceptJoinGroupRequestParameters(false)
var requestAcceptJoinGroupRequestParametersAttrTypesDSRecurse = objectAttrsTypeDSRequestAcceptJoinGroupRequestParameters(true)

type requestAcceptJoinGroupRequestParametersDataDS struct {
	EndDate     types.String `tfsdk:"end_date"`
	MakeManager types.Bool   `tfsdk:"make_manager"`
}

var requestAcceptModificationRequestParametersAttrTypesRS = objectAttrsTypeRSRequestAcceptModificationRequestParameters(false)
var requestAcceptModificationRequestParametersAttrTypesRSRecurse = objectAttrsTypeRSRequestAcceptModificationRequestParameters(true)

type requestAcceptModificationRequestParametersDataRS struct {
}

var requestAcceptModificationRequestParametersAttrTypesDS = objectAttrsTypeDSRequestAcceptModificationRequestParameters(false)
var requestAcceptModificationRequestParametersAttrTypesDSRecurse = objectAttrsTypeDSRequestAcceptModificationRequestParameters(true)

type requestAcceptModificationRequestParametersDataDS struct {
}

var requestAddGroupAdminRequestAttrTypesRS = objectAttrsTypeRSRequestAddGroupAdminRequest(false)
var requestAddGroupAdminRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestAddGroupAdminRequest(true)

type requestAddGroupAdminRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	NewAdminUUID                   types.String `tfsdk:"new_admin_uuid"`
	PrivateKey                     types.String `tfsdk:"private_key"`
}

var requestAddGroupAdminRequestAttrTypesDS = objectAttrsTypeDSRequestAddGroupAdminRequest(false)
var requestAddGroupAdminRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestAddGroupAdminRequest(true)

type requestAddGroupAdminRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	NewAdmin                       types.Object `tfsdk:"new_admin"`
	PrivateKey                     types.String `tfsdk:"private_key"`
}

var requestCreateGroupOnSystemRequestAttrTypesRS = objectAttrsTypeRSRequestCreateGroupOnSystemRequest(false)
var requestCreateGroupOnSystemRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestCreateGroupOnSystemRequest(true)

type requestCreateGroupOnSystemRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystemType              types.String `tfsdk:"group_on_system_type"`
	NameInSystem                   types.String `tfsdk:"name_in_system"`
}

var requestCreateGroupOnSystemRequestAttrTypesDS = objectAttrsTypeDSRequestCreateGroupOnSystemRequest(false)
var requestCreateGroupOnSystemRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestCreateGroupOnSystemRequest(true)

type requestCreateGroupOnSystemRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystemType              types.String `tfsdk:"group_on_system_type"`
	NameInSystem                   types.String `tfsdk:"name_in_system"`
}

var requestCreateGroupRequestAttrTypesRS = objectAttrsTypeRSRequestCreateGroupRequest(false)
var requestCreateGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestCreateGroupRequest(true)

type requestCreateGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestCreateGroupRequestAttrTypesDS = objectAttrsTypeDSRequestCreateGroupRequest(false)
var requestCreateGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestCreateGroupRequest(true)

type requestCreateGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnit             types.Object `tfsdk:"organizational_unit"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestCreateServiceAccountRequestAttrTypesRS = objectAttrsTypeRSRequestCreateServiceAccountRequest(false)
var requestCreateServiceAccountRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestCreateServiceAccountRequest(true)

type requestCreateServiceAccountRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	Username                       types.String `tfsdk:"username"`
}

var requestCreateServiceAccountRequestAttrTypesDS = objectAttrsTypeDSRequestCreateServiceAccountRequest(false)
var requestCreateServiceAccountRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestCreateServiceAccountRequest(true)

type requestCreateServiceAccountRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
	Username                       types.String `tfsdk:"username"`
}

var requestDisable2FARequestAttrTypesRS = objectAttrsTypeRSRequestDisable2FARequest(false)
var requestDisable2FARequestAttrTypesRSRecurse = objectAttrsTypeRSRequestDisable2FARequest(true)

type requestDisable2FARequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Subject                        types.String `tfsdk:"subject"`
}

var requestDisable2FARequestAttrTypesDS = objectAttrsTypeDSRequestDisable2FARequest(false)
var requestDisable2FARequestAttrTypesDSRecurse = objectAttrsTypeDSRequestDisable2FARequest(true)

type requestDisable2FARequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Subject                        types.String `tfsdk:"subject"`
}

var requestEnableTechnicalAdministrationRequestAttrTypesRS = objectAttrsTypeRSRequestEnableTechnicalAdministrationRequest(false)
var requestEnableTechnicalAdministrationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestEnableTechnicalAdministrationRequest(true)

type requestEnableTechnicalAdministrationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestEnableTechnicalAdministrationRequestAttrTypesDS = objectAttrsTypeDSRequestEnableTechnicalAdministrationRequest(false)
var requestEnableTechnicalAdministrationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestEnableTechnicalAdministrationRequest(true)

type requestEnableTechnicalAdministrationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestExtendAccessRequestAttrTypesRS = objectAttrsTypeRSRequestExtendAccessRequest(false)
var requestExtendAccessRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestExtendAccessRequest(true)

type requestExtendAccessRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ExtendUntil                    types.String `tfsdk:"extend_until"`
}

var requestExtendAccessRequestAttrTypesDS = objectAttrsTypeDSRequestExtendAccessRequest(false)
var requestExtendAccessRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestExtendAccessRequest(true)

type requestExtendAccessRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ExtendUntil                    types.String `tfsdk:"extend_until"`
}

var requestGrantAccessRequestAttrTypesRS = objectAttrsTypeRSRequestGrantAccessRequest(false)
var requestGrantAccessRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantAccessRequest(true)

type requestGrantAccessRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestGrantAccessRequestAttrTypesDS = objectAttrsTypeDSRequestGrantAccessRequest(false)
var requestGrantAccessRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantAccessRequest(true)

type requestGrantAccessRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestGrantApplicationRequestAttrTypesRS = objectAttrsTypeRSRequestGrantApplicationRequest(false)
var requestGrantApplicationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantApplicationRequest(true)

type requestGrantApplicationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestGrantApplicationRequestAttrTypesDS = objectAttrsTypeDSRequestGrantApplicationRequest(false)
var requestGrantApplicationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantApplicationRequest(true)

type requestGrantApplicationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Application                    types.Object `tfsdk:"application"`
}

var requestGrantClientPermissionRequestAttrTypesRS = objectAttrsTypeRSRequestGrantClientPermissionRequest(false)
var requestGrantClientPermissionRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantClientPermissionRequest(true)

type requestGrantClientPermissionRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
	PermissionType                 types.String `tfsdk:"permission_type"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestGrantClientPermissionRequestAttrTypesDS = objectAttrsTypeDSRequestGrantClientPermissionRequest(false)
var requestGrantClientPermissionRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantClientPermissionRequest(true)

type requestGrantClientPermissionRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Application                    types.Object `tfsdk:"application"`
	PermissionType                 types.String `tfsdk:"permission_type"`
	System                         types.Object `tfsdk:"system"`
}

var requestGrantGroupOnSystemRequestAttrTypesRS = objectAttrsTypeRSRequestGrantGroupOnSystemRequest(false)
var requestGrantGroupOnSystemRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantGroupOnSystemRequest(true)

type requestGrantGroupOnSystemRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantGroupOnSystemRequestAttrTypesDS = objectAttrsTypeDSRequestGrantGroupOnSystemRequest(false)
var requestGrantGroupOnSystemRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantGroupOnSystemRequest(true)

type requestGrantGroupOnSystemRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantGroupOnSystemRequestRequestAttrTypesRS = objectAttrsTypeRSRequestGrantGroupOnSystemRequestRequest(false)
var requestGrantGroupOnSystemRequestRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantGroupOnSystemRequestRequest(true)

type requestGrantGroupOnSystemRequestRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantGroupOnSystemRequestRequestAttrTypesDS = objectAttrsTypeDSRequestGrantGroupOnSystemRequestRequest(false)
var requestGrantGroupOnSystemRequestRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantGroupOnSystemRequestRequest(true)

type requestGrantGroupOnSystemRequestRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantServiceAccountGroupRequestAttrTypesRS = objectAttrsTypeRSRequestGrantServiceAccountGroupRequest(false)
var requestGrantServiceAccountGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestGrantServiceAccountGroupRequest(true)

type requestGrantServiceAccountGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
	ServiceAccountUUID             types.String `tfsdk:"service_account_uuid"`
}

var requestGrantServiceAccountGroupRequestAttrTypesDS = objectAttrsTypeDSRequestGrantServiceAccountGroupRequest(false)
var requestGrantServiceAccountGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestGrantServiceAccountGroupRequest(true)

type requestGrantServiceAccountGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
	ServiceAccount                 types.Object `tfsdk:"service_account"`
}

var requestJoinGroupRequestAttrTypesRS = objectAttrsTypeRSRequestJoinGroupRequest(false)
var requestJoinGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestJoinGroupRequest(true)

type requestJoinGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestJoinGroupRequestAttrTypesDS = objectAttrsTypeDSRequestJoinGroupRequest(false)
var requestJoinGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestJoinGroupRequest(true)

type requestJoinGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestJoinVaultRequestAttrTypesRS = objectAttrsTypeRSRequestJoinVaultRequest(false)
var requestJoinVaultRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestJoinVaultRequest(true)

type requestJoinVaultRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestJoinVaultRequestAttrTypesDS = objectAttrsTypeDSRequestJoinVaultRequest(false)
var requestJoinVaultRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestJoinVaultRequest(true)

type requestJoinVaultRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestModificationRequestAttrTypesRS = objectAttrsTypeRSRequestModificationRequest(false)
var requestModificationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestModificationRequest(true)

type requestModificationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestModificationRequestAttrTypesDS = objectAttrsTypeDSRequestModificationRequest(false)
var requestModificationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestModificationRequest(true)

type requestModificationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestModificationRequestLinkableWrapperAttrTypesRS = objectAttrsTypeRSRequestModificationRequestLinkableWrapper(false)
var requestModificationRequestLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSRequestModificationRequestLinkableWrapper(true)

type requestModificationRequestLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var requestModificationRequestLinkableWrapperAttrTypesDS = objectAttrsTypeDSRequestModificationRequestLinkableWrapper(false)
var requestModificationRequestLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSRequestModificationRequestLinkableWrapper(true)

type requestModificationRequestLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var requestModificationRequest_additionalObjectsAttrTypesRS = objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)
var requestModificationRequest_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSRequestModificationRequest_additionalObjects(true)

type requestModificationRequest_additionalObjectsDataRS struct {
	AcceptParams types.Object `tfsdk:"accept_params"`
	Audit        types.Object `tfsdk:"audit"`
	ResetStatus  types.Object `tfsdk:"reset_status"`
}

var requestModificationRequest_additionalObjectsAttrTypesDS = objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)
var requestModificationRequest_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSRequestModificationRequest_additionalObjects(true)

type requestModificationRequest_additionalObjectsDataDS struct {
	Audit       types.Object `tfsdk:"audit"`
	ResetStatus types.Object `tfsdk:"reset_status"`
}

var requestPasswordResetRequestAttrTypesRS = objectAttrsTypeRSRequestPasswordResetRequest(false)
var requestPasswordResetRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestPasswordResetRequest(true)

type requestPasswordResetRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	NewVaultAndDirectoryPassword   types.String `tfsdk:"new_vault_and_directory_password"`
	NewVaultPassword               types.String `tfsdk:"new_vault_password"`
	UnsyncedPassword               types.Bool   `tfsdk:"unsynced_password"`
}

var requestPasswordResetRequestAttrTypesDS = objectAttrsTypeDSRequestPasswordResetRequest(false)
var requestPasswordResetRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestPasswordResetRequest(true)

type requestPasswordResetRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestPasswordResetRequestStatusAttrTypesRS = objectAttrsTypeRSRequestPasswordResetRequestStatus(false)
var requestPasswordResetRequestStatusAttrTypesRSRecurse = objectAttrsTypeRSRequestPasswordResetRequestStatus(true)

type requestPasswordResetRequestStatusDataRS struct {
	CooldownEnd  types.String `tfsdk:"cooldown_end"`
	Managers     types.List   `tfsdk:"managers"`
	NrAccepted   types.Int64  `tfsdk:"nr_accepted"`
	ResetViaMail types.String `tfsdk:"reset_via_mail"`
}

var requestPasswordResetRequestStatusAttrTypesDS = objectAttrsTypeDSRequestPasswordResetRequestStatus(false)
var requestPasswordResetRequestStatusAttrTypesDSRecurse = objectAttrsTypeDSRequestPasswordResetRequestStatus(true)

type requestPasswordResetRequestStatusDataDS struct {
	CooldownEnd  types.String `tfsdk:"cooldown_end"`
	Managers     types.List   `tfsdk:"managers"`
	NrAccepted   types.Int64  `tfsdk:"nr_accepted"`
	ResetViaMail types.String `tfsdk:"reset_via_mail"`
}

var requestRemoveGroupRequestAttrTypesRS = objectAttrsTypeRSRequestRemoveGroupRequest(false)
var requestRemoveGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestRemoveGroupRequest(true)

type requestRemoveGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestRemoveGroupRequestAttrTypesDS = objectAttrsTypeDSRequestRemoveGroupRequest(false)
var requestRemoveGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestRemoveGroupRequest(true)

type requestRemoveGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestRemoveOrganizationalUnitRequestAttrTypesRS = objectAttrsTypeRSRequestRemoveOrganizationalUnitRequest(false)
var requestRemoveOrganizationalUnitRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestRemoveOrganizationalUnitRequest(true)

type requestRemoveOrganizationalUnitRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
	OrganizationalUnitName         types.String `tfsdk:"organizational_unit_name"`
}

var requestRemoveOrganizationalUnitRequestAttrTypesDS = objectAttrsTypeDSRequestRemoveOrganizationalUnitRequest(false)
var requestRemoveOrganizationalUnitRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestRemoveOrganizationalUnitRequest(true)

type requestRemoveOrganizationalUnitRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnit             types.Object `tfsdk:"organizational_unit"`
	OrganizationalUnitName         types.String `tfsdk:"organizational_unit_name"`
}

var requestRemoveProvisionedSystemRequestAttrTypesRS = objectAttrsTypeRSRequestRemoveProvisionedSystemRequest(false)
var requestRemoveProvisionedSystemRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestRemoveProvisionedSystemRequest(true)

type requestRemoveProvisionedSystemRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	SystemName                     types.String `tfsdk:"system_name"`
}

var requestRemoveProvisionedSystemRequestAttrTypesDS = objectAttrsTypeDSRequestRemoveProvisionedSystemRequest(false)
var requestRemoveProvisionedSystemRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestRemoveProvisionedSystemRequest(true)

type requestRemoveProvisionedSystemRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
	SystemName                     types.String `tfsdk:"system_name"`
}

var requestReviewAuditRequestAttrTypesRS = objectAttrsTypeRSRequestReviewAuditRequest(false)
var requestReviewAuditRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestReviewAuditRequest(true)

type requestReviewAuditRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestReviewAuditRequestAttrTypesDS = objectAttrsTypeDSRequestReviewAuditRequest(false)
var requestReviewAuditRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestReviewAuditRequest(true)

type requestReviewAuditRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestRevokeAdminRequestAttrTypesRS = objectAttrsTypeRSRequestRevokeAdminRequest(false)
var requestRevokeAdminRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestRevokeAdminRequest(true)

type requestRevokeAdminRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AdminUUID                      types.String `tfsdk:"admin_uuid"`
}

var requestRevokeAdminRequestAttrTypesDS = objectAttrsTypeDSRequestRevokeAdminRequest(false)
var requestRevokeAdminRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestRevokeAdminRequest(true)

type requestRevokeAdminRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Admin                          types.Object `tfsdk:"admin"`
}

var requestSetupAuthorizingGroupRequestAttrTypesRS = objectAttrsTypeRSRequestSetupAuthorizingGroupRequest(false)
var requestSetupAuthorizingGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestSetupAuthorizingGroupRequest(true)

type requestSetupAuthorizingGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AuthorizingGroupType           types.String `tfsdk:"authorizing_group_type"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroupUUID            types.String `tfsdk:"requesting_group_uuid"`
}

var requestSetupAuthorizingGroupRequestAttrTypesDS = objectAttrsTypeDSRequestSetupAuthorizingGroupRequest(false)
var requestSetupAuthorizingGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestSetupAuthorizingGroupRequest(true)

type requestSetupAuthorizingGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AuthorizingGroupType           types.String `tfsdk:"authorizing_group_type"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroup                types.Object `tfsdk:"requesting_group"`
}

var requestSetupNestedGroupRequestAttrTypesRS = objectAttrsTypeRSRequestSetupNestedGroupRequest(false)
var requestSetupNestedGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestSetupNestedGroupRequest(true)

type requestSetupNestedGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountAction                  types.String `tfsdk:"account_action"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroupUUID            types.String `tfsdk:"requesting_group_uuid"`
}

var requestSetupNestedGroupRequestAttrTypesDS = objectAttrsTypeDSRequestSetupNestedGroupRequest(false)
var requestSetupNestedGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestSetupNestedGroupRequest(true)

type requestSetupNestedGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountAction                  types.String `tfsdk:"account_action"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroup                types.Object `tfsdk:"requesting_group"`
}

var requestTransferApplicationAdministrationRequestAttrTypesRS = objectAttrsTypeRSRequestTransferApplicationAdministrationRequest(false)
var requestTransferApplicationAdministrationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferApplicationAdministrationRequest(true)

type requestTransferApplicationAdministrationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestTransferApplicationAdministrationRequestAttrTypesDS = objectAttrsTypeDSRequestTransferApplicationAdministrationRequest(false)
var requestTransferApplicationAdministrationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferApplicationAdministrationRequest(true)

type requestTransferApplicationAdministrationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Application                    types.Object `tfsdk:"application"`
}

var requestTransferApplicationOwnershipRequestAttrTypesRS = objectAttrsTypeRSRequestTransferApplicationOwnershipRequest(false)
var requestTransferApplicationOwnershipRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferApplicationOwnershipRequest(true)

type requestTransferApplicationOwnershipRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestTransferApplicationOwnershipRequestAttrTypesDS = objectAttrsTypeDSRequestTransferApplicationOwnershipRequest(false)
var requestTransferApplicationOwnershipRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferApplicationOwnershipRequest(true)

type requestTransferApplicationOwnershipRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Application                    types.Object `tfsdk:"application"`
}

var requestTransferAuditorGroupRequestAttrTypesRS = objectAttrsTypeRSRequestTransferAuditorGroupRequest(false)
var requestTransferAuditorGroupRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferAuditorGroupRequest(true)

type requestTransferAuditorGroupRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestTransferAuditorGroupRequestAttrTypesDS = objectAttrsTypeDSRequestTransferAuditorGroupRequest(false)
var requestTransferAuditorGroupRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferAuditorGroupRequest(true)

type requestTransferAuditorGroupRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestTransferGroupOnSystemOwnershipRequestAttrTypesRS = objectAttrsTypeRSRequestTransferGroupOnSystemOwnershipRequest(false)
var requestTransferGroupOnSystemOwnershipRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferGroupOnSystemOwnershipRequest(true)

type requestTransferGroupOnSystemOwnershipRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestTransferGroupOnSystemOwnershipRequestAttrTypesDS = objectAttrsTypeDSRequestTransferGroupOnSystemOwnershipRequest(false)
var requestTransferGroupOnSystemOwnershipRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferGroupOnSystemOwnershipRequest(true)

type requestTransferGroupOnSystemOwnershipRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestTransferOrganizationalUnitOwnershipRequestAttrTypesRS = objectAttrsTypeRSRequestTransferOrganizationalUnitOwnershipRequest(false)
var requestTransferOrganizationalUnitOwnershipRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferOrganizationalUnitOwnershipRequest(true)

type requestTransferOrganizationalUnitOwnershipRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
}

var requestTransferOrganizationalUnitOwnershipRequestAttrTypesDS = objectAttrsTypeDSRequestTransferOrganizationalUnitOwnershipRequest(false)
var requestTransferOrganizationalUnitOwnershipRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferOrganizationalUnitOwnershipRequest(true)

type requestTransferOrganizationalUnitOwnershipRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnit             types.Object `tfsdk:"organizational_unit"`
}

var requestTransferProvisionedSystemAdministrationRequestAttrTypesRS = objectAttrsTypeRSRequestTransferProvisionedSystemAdministrationRequest(false)
var requestTransferProvisionedSystemAdministrationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferProvisionedSystemAdministrationRequest(true)

type requestTransferProvisionedSystemAdministrationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferProvisionedSystemAdministrationRequestAttrTypesDS = objectAttrsTypeDSRequestTransferProvisionedSystemAdministrationRequest(false)
var requestTransferProvisionedSystemAdministrationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferProvisionedSystemAdministrationRequest(true)

type requestTransferProvisionedSystemAdministrationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
}

var requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRS = objectAttrsTypeRSRequestTransferProvisionedSystemContentAdministrationRequest(false)
var requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferProvisionedSystemContentAdministrationRequest(true)

type requestTransferProvisionedSystemContentAdministrationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDS = objectAttrsTypeDSRequestTransferProvisionedSystemContentAdministrationRequest(false)
var requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferProvisionedSystemContentAdministrationRequest(true)

type requestTransferProvisionedSystemContentAdministrationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
}

var requestTransferProvisionedSystemOwnershipRequestAttrTypesRS = objectAttrsTypeRSRequestTransferProvisionedSystemOwnershipRequest(false)
var requestTransferProvisionedSystemOwnershipRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferProvisionedSystemOwnershipRequest(true)

type requestTransferProvisionedSystemOwnershipRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferProvisionedSystemOwnershipRequestAttrTypesDS = objectAttrsTypeDSRequestTransferProvisionedSystemOwnershipRequest(false)
var requestTransferProvisionedSystemOwnershipRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferProvisionedSystemOwnershipRequest(true)

type requestTransferProvisionedSystemOwnershipRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	System                         types.Object `tfsdk:"system"`
}

var requestTransferServiceAccountAdministrationRequestAttrTypesRS = objectAttrsTypeRSRequestTransferServiceAccountAdministrationRequest(false)
var requestTransferServiceAccountAdministrationRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestTransferServiceAccountAdministrationRequest(true)

type requestTransferServiceAccountAdministrationRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ServiceAccountUUID             types.String `tfsdk:"service_account_uuid"`
}

var requestTransferServiceAccountAdministrationRequestAttrTypesDS = objectAttrsTypeDSRequestTransferServiceAccountAdministrationRequest(false)
var requestTransferServiceAccountAdministrationRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestTransferServiceAccountAdministrationRequest(true)

type requestTransferServiceAccountAdministrationRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ServiceAccount                 types.Object `tfsdk:"service_account"`
}

var requestUpdateGroupMembershipRequestAttrTypesRS = objectAttrsTypeRSRequestUpdateGroupMembershipRequest(false)
var requestUpdateGroupMembershipRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestUpdateGroupMembershipRequest(true)

type requestUpdateGroupMembershipRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountToUpdateUUID            types.String `tfsdk:"account_to_update_uuid"`
	CurrentEndDate                 types.String `tfsdk:"current_end_date"`
	CurrentRights                  types.String `tfsdk:"current_rights"`
	EndDate                        types.String `tfsdk:"end_date"`
	Rights                         types.String `tfsdk:"rights"`
	UpdateGroupMembershipType      types.String `tfsdk:"update_group_membership_type"`
}

var requestUpdateGroupMembershipRequestAttrTypesDS = objectAttrsTypeDSRequestUpdateGroupMembershipRequest(false)
var requestUpdateGroupMembershipRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestUpdateGroupMembershipRequest(true)

type requestUpdateGroupMembershipRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountToUpdate                types.Object `tfsdk:"account_to_update"`
	CurrentEndDate                 types.String `tfsdk:"current_end_date"`
	CurrentRights                  types.String `tfsdk:"current_rights"`
	EndDate                        types.String `tfsdk:"end_date"`
	Rights                         types.String `tfsdk:"rights"`
	UpdateGroupMembershipType      types.String `tfsdk:"update_group_membership_type"`
}

var requestVerifyInternalAccountRequestAttrTypesRS = objectAttrsTypeRSRequestVerifyInternalAccountRequest(false)
var requestVerifyInternalAccountRequestAttrTypesRSRecurse = objectAttrsTypeRSRequestVerifyInternalAccountRequest(true)

type requestVerifyInternalAccountRequestDataRS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	InternalAccountName            types.String `tfsdk:"internal_account_name"`
}

var requestVerifyInternalAccountRequestAttrTypesDS = objectAttrsTypeDSRequestVerifyInternalAccountRequest(false)
var requestVerifyInternalAccountRequestAttrTypesDSRecurse = objectAttrsTypeDSRequestVerifyInternalAccountRequest(true)

type requestVerifyInternalAccountRequestDataDS struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	Account                        types.Object `tfsdk:"account"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	Group                          types.Object `tfsdk:"group"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	InternalAccountName            types.String `tfsdk:"internal_account_name"`
}

var serviceaccountServiceAccountAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccount(false)
var serviceaccountServiceAccountAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccount(true)

type serviceaccountServiceAccountDataRS struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	Active                     types.Bool   `tfsdk:"active"`
	Name                       types.String `tfsdk:"name"`
	SystemUUID                 types.String `tfsdk:"system_uuid"`
	Username                   types.String `tfsdk:"username"`
	UUID                       types.String `tfsdk:"uuid"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Description                types.String `tfsdk:"description"`
	PasswordUUID               types.String `tfsdk:"password_uuid"`
	PasswordRotation           types.String `tfsdk:"password_rotation"`
	TechnicalAdministratorUUID types.String `tfsdk:"technical_administrator_uuid"`
}

var serviceaccountServiceAccountAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccount(false)
var serviceaccountServiceAccountAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccount(true)

type serviceaccountServiceAccountDataDS struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	Active                 types.Bool   `tfsdk:"active"`
	Name                   types.String `tfsdk:"name"`
	System                 types.Object `tfsdk:"system"`
	Username               types.String `tfsdk:"username"`
	UUID                   types.String `tfsdk:"uuid"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	Description            types.String `tfsdk:"description"`
	Password               types.Object `tfsdk:"password"`
	PasswordRotation       types.String `tfsdk:"password_rotation"`
	TechnicalAdministrator types.Object `tfsdk:"technical_administrator"`
}

var serviceaccountServiceAccountGroupAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountGroup(false)
var serviceaccountServiceAccountGroupAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountGroup(true)

type serviceaccountServiceAccountGroupDataRS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
}

var serviceaccountServiceAccountGroupAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountGroup(false)
var serviceaccountServiceAccountGroupAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountGroup(true)

type serviceaccountServiceAccountGroupDataDS struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
}

var serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountGroupLinkableWrapper(false)
var serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountGroupLinkableWrapper(true)

type serviceaccountServiceAccountGroupLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountGroupLinkableWrapper(false)
var serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountGroupLinkableWrapper(true)

type serviceaccountServiceAccountGroupLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountGroup_additionalObjects(false)
var serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountGroup_additionalObjects(true)

type serviceaccountServiceAccountGroup_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountGroup_additionalObjects(false)
var serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountGroup_additionalObjects(true)

type serviceaccountServiceAccountGroup_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var serviceaccountServiceAccountLinkableWrapperAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountLinkableWrapper(false)
var serviceaccountServiceAccountLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountLinkableWrapper(true)

type serviceaccountServiceAccountLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountLinkableWrapperAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountLinkableWrapper(false)
var serviceaccountServiceAccountLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountLinkableWrapper(true)

type serviceaccountServiceAccountLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountPrimerAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountPrimer(false)
var serviceaccountServiceAccountPrimerAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountPrimer(true)

type serviceaccountServiceAccountPrimerDataRS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Active      types.Bool   `tfsdk:"active"`
	Name        types.String `tfsdk:"name"`
	SystemUUID  types.String `tfsdk:"system_uuid"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
}

var serviceaccountServiceAccountPrimerAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountPrimer(false)
var serviceaccountServiceAccountPrimerAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountPrimer(true)

type serviceaccountServiceAccountPrimerDataDS struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Active      types.Bool   `tfsdk:"active"`
	Name        types.String `tfsdk:"name"`
	System      types.Object `tfsdk:"system"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
}

var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountPrimerLinkableWrapper(false)
var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountPrimerLinkableWrapper(true)

type serviceaccountServiceAccountPrimerLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountPrimerLinkableWrapper(false)
var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountPrimerLinkableWrapper(true)

type serviceaccountServiceAccountPrimerLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountStatusAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountStatus(false)
var serviceaccountServiceAccountStatusAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountStatus(true)

type serviceaccountServiceAccountStatusDataRS struct {
	AccountEnabled types.Bool `tfsdk:"account_enabled"`
}

var serviceaccountServiceAccountStatusAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountStatus(false)
var serviceaccountServiceAccountStatusAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountStatus(true)

type serviceaccountServiceAccountStatusDataDS struct {
	AccountEnabled types.Bool `tfsdk:"account_enabled"`
}

var serviceaccountServiceAccount_additionalObjectsAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccount_additionalObjects(false)
var serviceaccountServiceAccount_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccount_additionalObjects(true)

type serviceaccountServiceAccount_additionalObjectsDataRS struct {
	Audit  types.Object `tfsdk:"audit"`
	Groups types.Object `tfsdk:"groups"`
	Secret types.Object `tfsdk:"secret"`
}

var serviceaccountServiceAccount_additionalObjectsAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccount_additionalObjects(false)
var serviceaccountServiceAccount_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccount_additionalObjects(true)

type serviceaccountServiceAccount_additionalObjectsDataDS struct {
	Audit  types.Object `tfsdk:"audit"`
	Groups types.Object `tfsdk:"groups"`
}

var serviceaccountServiceAccountsAuditStatsAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats(false)
var serviceaccountServiceAccountsAuditStatsAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats(true)

type serviceaccountServiceAccountsAuditStatsDataRS struct {
	DisabledCount              types.Int64  `tfsdk:"disabled_count"`
	PasswordSchemeEnabledStats types.Object `tfsdk:"password_scheme_enabled_stats"`
	SystemStats                types.Object `tfsdk:"system_stats"`
}

var serviceaccountServiceAccountsAuditStatsAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats(false)
var serviceaccountServiceAccountsAuditStatsAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats(true)

type serviceaccountServiceAccountsAuditStatsDataDS struct {
	DisabledCount              types.Int64  `tfsdk:"disabled_count"`
	PasswordSchemeEnabledStats types.Object `tfsdk:"password_scheme_enabled_stats"`
	SystemStats                types.Object `tfsdk:"system_stats"`
}

var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(false)
var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(true)

type serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsDataRS struct {
}

var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(false)
var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(true)

type serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsDataDS struct {
}

var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRS = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_systemStats(false)
var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRSRecurse = objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_systemStats(true)

type serviceaccountServiceAccountsAuditStats_systemStatsDataRS struct {
}

var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDS = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_systemStats(false)
var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDSRecurse = objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_systemStats(true)

type serviceaccountServiceAccountsAuditStats_systemStatsDataDS struct {
}

var simpleStringValueAttrTypesRS = objectAttrsTypeRSSimpleStringValue(false)
var simpleStringValueAttrTypesRSRecurse = objectAttrsTypeRSSimpleStringValue(true)

type simpleStringValueDataRS struct {
	Value types.String `tfsdk:"value"`
}

var simpleStringValueAttrTypesDS = objectAttrsTypeDSSimpleStringValue(false)
var simpleStringValueAttrTypesDSRecurse = objectAttrsTypeDSSimpleStringValue(true)

type simpleStringValueDataDS struct {
	Value types.String `tfsdk:"value"`
}

var simpleVersionInfoAttrTypesRS = objectAttrsTypeRSSimpleVersionInfo(false)
var simpleVersionInfoAttrTypesRSRecurse = objectAttrsTypeRSSimpleVersionInfo(true)

type simpleVersionInfoDataRS struct {
	ContractVersions types.List   `tfsdk:"contract_versions"`
	KeyHubVersion    types.String `tfsdk:"key_hub_version"`
}

var simpleVersionInfoAttrTypesDS = objectAttrsTypeDSSimpleVersionInfo(false)
var simpleVersionInfoAttrTypesDSRecurse = objectAttrsTypeDSSimpleVersionInfo(true)

type simpleVersionInfoDataDS struct {
	ContractVersions types.List   `tfsdk:"contract_versions"`
	KeyHubVersion    types.String `tfsdk:"key_hub_version"`
}

var vaultDeletedVaultHolderAttrTypesRS = objectAttrsTypeRSVaultDeletedVaultHolder(false)
var vaultDeletedVaultHolderAttrTypesRSRecurse = objectAttrsTypeRSVaultDeletedVaultHolder(true)

type vaultDeletedVaultHolderDataRS struct {
	Links                       types.List   `tfsdk:"links"`
	Permissions                 types.List   `tfsdk:"permissions"`
	AdditionalObjects           types.Object `tfsdk:"additional_objects"`
	Name                        types.String `tfsdk:"name"`
	RecordCount                 types.Int64  `tfsdk:"record_count"`
	VaultDeletedVaultHolderType types.String `tfsdk:"vault_deleted_vault_holder_type"`
}

var vaultDeletedVaultHolderAttrTypesDS = objectAttrsTypeDSVaultDeletedVaultHolder(false)
var vaultDeletedVaultHolderAttrTypesDSRecurse = objectAttrsTypeDSVaultDeletedVaultHolder(true)

type vaultDeletedVaultHolderDataDS struct {
	Links                       types.List   `tfsdk:"links"`
	Permissions                 types.List   `tfsdk:"permissions"`
	AdditionalObjects           types.Object `tfsdk:"additional_objects"`
	Name                        types.String `tfsdk:"name"`
	RecordCount                 types.Int64  `tfsdk:"record_count"`
	VaultDeletedVaultHolderType types.String `tfsdk:"vault_deleted_vault_holder_type"`
}

var vaultDeletedVaultHolderLinkableWrapperAttrTypesRS = objectAttrsTypeRSVaultDeletedVaultHolderLinkableWrapper(false)
var vaultDeletedVaultHolderLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSVaultDeletedVaultHolderLinkableWrapper(true)

type vaultDeletedVaultHolderLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var vaultDeletedVaultHolderLinkableWrapperAttrTypesDS = objectAttrsTypeDSVaultDeletedVaultHolderLinkableWrapper(false)
var vaultDeletedVaultHolderLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSVaultDeletedVaultHolderLinkableWrapper(true)

type vaultDeletedVaultHolderLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var vaultDeletedVaultHolder_additionalObjectsAttrTypesRS = objectAttrsTypeRSVaultDeletedVaultHolder_additionalObjects(false)
var vaultDeletedVaultHolder_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSVaultDeletedVaultHolder_additionalObjects(true)

type vaultDeletedVaultHolder_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var vaultDeletedVaultHolder_additionalObjectsAttrTypesDS = objectAttrsTypeDSVaultDeletedVaultHolder_additionalObjects(false)
var vaultDeletedVaultHolder_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSVaultDeletedVaultHolder_additionalObjects(true)

type vaultDeletedVaultHolder_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var vaultDeletedVaultRecoveryAttrTypesRS = objectAttrsTypeRSVaultDeletedVaultRecovery(false)
var vaultDeletedVaultRecoveryAttrTypesRSRecurse = objectAttrsTypeRSVaultDeletedVaultRecovery(true)

type vaultDeletedVaultRecoveryDataRS struct {
	Prefix          types.String `tfsdk:"prefix"`
	PrivateKey      types.String `tfsdk:"private_key"`
	TargetGroupUUID types.String `tfsdk:"target_group_uuid"`
}

var vaultDeletedVaultRecoveryAttrTypesDS = objectAttrsTypeDSVaultDeletedVaultRecovery(false)
var vaultDeletedVaultRecoveryAttrTypesDSRecurse = objectAttrsTypeDSVaultDeletedVaultRecovery(true)

type vaultDeletedVaultRecoveryDataDS struct {
	Prefix      types.String `tfsdk:"prefix"`
	PrivateKey  types.String `tfsdk:"private_key"`
	TargetGroup types.Object `tfsdk:"target_group"`
}

var vaultMoveVaultRecordAttrTypesRS = objectAttrsTypeRSVaultMoveVaultRecord(false)
var vaultMoveVaultRecordAttrTypesRSRecurse = objectAttrsTypeRSVaultMoveVaultRecord(true)

type vaultMoveVaultRecordDataRS struct {
	AccountUUID   types.String `tfsdk:"account_uuid"`
	Action        types.String `tfsdk:"action"`
	GroupUUID     types.String `tfsdk:"group_uuid"`
	ShareDuration types.Object `tfsdk:"share_duration"`
}

var vaultMoveVaultRecordAttrTypesDS = objectAttrsTypeDSVaultMoveVaultRecord(false)
var vaultMoveVaultRecordAttrTypesDSRecurse = objectAttrsTypeDSVaultMoveVaultRecord(true)

type vaultMoveVaultRecordDataDS struct {
	Account       types.Object `tfsdk:"account"`
	Action        types.String `tfsdk:"action"`
	Group         types.Object `tfsdk:"group"`
	ShareDuration types.Object `tfsdk:"share_duration"`
}

var vaultMoveVaultRecord_shareDurationAttrTypesRS = objectAttrsTypeRSVaultMoveVaultRecord_shareDuration(false)
var vaultMoveVaultRecord_shareDurationAttrTypesRSRecurse = objectAttrsTypeRSVaultMoveVaultRecord_shareDuration(true)

type vaultMoveVaultRecord_shareDurationDataRS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var vaultMoveVaultRecord_shareDurationAttrTypesDS = objectAttrsTypeDSVaultMoveVaultRecord_shareDuration(false)
var vaultMoveVaultRecord_shareDurationAttrTypesDSRecurse = objectAttrsTypeDSVaultMoveVaultRecord_shareDuration(true)

type vaultMoveVaultRecord_shareDurationDataDS struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var vaultVaultAttrTypesRS = objectAttrsTypeRSVaultVault(false)
var vaultVaultAttrTypesRSRecurse = objectAttrsTypeRSVaultVault(true)

type vaultVaultDataRS struct {
	Links           types.List   `tfsdk:"links"`
	Permissions     types.List   `tfsdk:"permissions"`
	AccessAvailable types.Bool   `tfsdk:"access_available"`
	Name            types.String `tfsdk:"name"`
	Records         types.List   `tfsdk:"records"`
}

var vaultVaultAttrTypesDS = objectAttrsTypeDSVaultVault(false)
var vaultVaultAttrTypesDSRecurse = objectAttrsTypeDSVaultVault(true)

type vaultVaultDataDS struct {
	Links           types.List   `tfsdk:"links"`
	Permissions     types.List   `tfsdk:"permissions"`
	AccessAvailable types.Bool   `tfsdk:"access_available"`
	Name            types.String `tfsdk:"name"`
	Records         types.List   `tfsdk:"records"`
}

var vaultVaultHolderAttrTypesRS = objectAttrsTypeRSVaultVaultHolder(false)
var vaultVaultHolderAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultHolder(true)

type vaultVaultHolderDataRS struct {
}

var vaultVaultHolderAttrTypesDS = objectAttrsTypeDSVaultVaultHolder(false)
var vaultVaultHolderAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultHolder(true)

type vaultVaultHolderDataDS struct {
}

var vaultVaultRecordAttrTypesRS = objectAttrsTypeRSVaultVaultRecord(false)
var vaultVaultRecordAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecord(true)

type vaultVaultRecordDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Color             types.String `tfsdk:"color"`
	Name              types.String `tfsdk:"name"`
	ShareEndTime      types.String `tfsdk:"share_end_time"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Derived           types.Bool   `tfsdk:"derived"`
	EndDate           types.String `tfsdk:"end_date"`
	Filename          types.String `tfsdk:"filename"`
	Types             types.List   `tfsdk:"types"`
	URL               types.String `tfsdk:"url"`
	Username          types.String `tfsdk:"username"`
	WarningPeriod     types.String `tfsdk:"warning_period"`
}

var vaultVaultRecordAttrTypesDS = objectAttrsTypeDSVaultVaultRecord(false)
var vaultVaultRecordAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecord(true)

type vaultVaultRecordDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Color             types.String `tfsdk:"color"`
	Name              types.String `tfsdk:"name"`
	ShareEndTime      types.String `tfsdk:"share_end_time"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Derived           types.Bool   `tfsdk:"derived"`
	EndDate           types.String `tfsdk:"end_date"`
	Filename          types.String `tfsdk:"filename"`
	Types             types.List   `tfsdk:"types"`
	URL               types.String `tfsdk:"url"`
	Username          types.String `tfsdk:"username"`
	WarningPeriod     types.String `tfsdk:"warning_period"`
}

var vaultVaultRecordLinkableWrapperAttrTypesRS = objectAttrsTypeRSVaultVaultRecordLinkableWrapper(false)
var vaultVaultRecordLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordLinkableWrapper(true)

type vaultVaultRecordLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordLinkableWrapperAttrTypesDS = objectAttrsTypeDSVaultVaultRecordLinkableWrapper(false)
var vaultVaultRecordLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordLinkableWrapper(true)

type vaultVaultRecordLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordPrimerAttrTypesRS = objectAttrsTypeRSVaultVaultRecordPrimer(false)
var vaultVaultRecordPrimerAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordPrimer(true)

type vaultVaultRecordPrimerDataRS struct {
	Links        types.List   `tfsdk:"links"`
	Permissions  types.List   `tfsdk:"permissions"`
	Color        types.String `tfsdk:"color"`
	Name         types.String `tfsdk:"name"`
	ShareEndTime types.String `tfsdk:"share_end_time"`
	UUID         types.String `tfsdk:"uuid"`
}

var vaultVaultRecordPrimerAttrTypesDS = objectAttrsTypeDSVaultVaultRecordPrimer(false)
var vaultVaultRecordPrimerAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordPrimer(true)

type vaultVaultRecordPrimerDataDS struct {
	Links        types.List   `tfsdk:"links"`
	Permissions  types.List   `tfsdk:"permissions"`
	Color        types.String `tfsdk:"color"`
	Name         types.String `tfsdk:"name"`
	ShareEndTime types.String `tfsdk:"share_end_time"`
	UUID         types.String `tfsdk:"uuid"`
}

var vaultVaultRecordPrimerLinkableWrapperAttrTypesRS = objectAttrsTypeRSVaultVaultRecordPrimerLinkableWrapper(false)
var vaultVaultRecordPrimerLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordPrimerLinkableWrapper(true)

type vaultVaultRecordPrimerLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordPrimerLinkableWrapperAttrTypesDS = objectAttrsTypeDSVaultVaultRecordPrimerLinkableWrapper(false)
var vaultVaultRecordPrimerLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordPrimerLinkableWrapper(true)

type vaultVaultRecordPrimerLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordSecretsAttrTypesRS = objectAttrsTypeRSVaultVaultRecordSecrets(false)
var vaultVaultRecordSecretsAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordSecrets(true)

type vaultVaultRecordSecretsDataRS struct {
	Comment   types.String `tfsdk:"comment"`
	File      types.String `tfsdk:"file"`
	Password  types.String `tfsdk:"password"`
	Totp      types.String `tfsdk:"totp"`
	WriteTotp types.Bool   `tfsdk:"write_totp"`
}

var vaultVaultRecordSecretsAttrTypesDS = objectAttrsTypeDSVaultVaultRecordSecrets(false)
var vaultVaultRecordSecretsAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordSecrets(true)

type vaultVaultRecordSecretsDataDS struct {
	Comment  types.String `tfsdk:"comment"`
	File     types.String `tfsdk:"file"`
	Password types.String `tfsdk:"password"`
	Totp     types.String `tfsdk:"totp"`
}

var vaultVaultRecordShareAttrTypesRS = objectAttrsTypeRSVaultVaultRecordShare(false)
var vaultVaultRecordShareAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordShare(true)

type vaultVaultRecordShareDataRS struct {
	Name                      types.String `tfsdk:"name"`
	VaultVaultRecordShareType types.String `tfsdk:"vault_vault_record_share_type"`
}

var vaultVaultRecordShareAttrTypesDS = objectAttrsTypeDSVaultVaultRecordShare(false)
var vaultVaultRecordShareAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordShare(true)

type vaultVaultRecordShareDataDS struct {
	Name                      types.String `tfsdk:"name"`
	VaultVaultRecordShareType types.String `tfsdk:"vault_vault_record_share_type"`
}

var vaultVaultRecordShareSummaryAttrTypesRS = objectAttrsTypeRSVaultVaultRecordShareSummary(false)
var vaultVaultRecordShareSummaryAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecordShareSummary(true)

type vaultVaultRecordShareSummaryDataRS struct {
	Children types.List   `tfsdk:"children"`
	Parent   types.Object `tfsdk:"parent"`
}

var vaultVaultRecordShareSummaryAttrTypesDS = objectAttrsTypeDSVaultVaultRecordShareSummary(false)
var vaultVaultRecordShareSummaryAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecordShareSummary(true)

type vaultVaultRecordShareSummaryDataDS struct {
	Children types.List   `tfsdk:"children"`
	Parent   types.Object `tfsdk:"parent"`
}

var vaultVaultRecord_additionalObjectsAttrTypesRS = objectAttrsTypeRSVaultVaultRecord_additionalObjects(false)
var vaultVaultRecord_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecord_additionalObjects(true)

type vaultVaultRecord_additionalObjectsDataRS struct {
	Audit        types.Object `tfsdk:"audit"`
	DeleteTile   types.Bool   `tfsdk:"delete_tile"`
	ParentUUID   types.String `tfsdk:"parent_uuid"`
	Secret       types.Object `tfsdk:"secret"`
	ShareSummary types.Object `tfsdk:"share_summary"`
	Shares       types.Object `tfsdk:"shares"`
	Tile         types.Object `tfsdk:"tile"`
	Vaultholder  types.Object `tfsdk:"vaultholder"`
}

var vaultVaultRecord_additionalObjectsAttrTypesDS = objectAttrsTypeDSVaultVaultRecord_additionalObjects(false)
var vaultVaultRecord_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecord_additionalObjects(true)

type vaultVaultRecord_additionalObjectsDataDS struct {
	Audit        types.Object `tfsdk:"audit"`
	Parent       types.Object `tfsdk:"parent"`
	Secret       types.Object `tfsdk:"secret"`
	ShareSummary types.Object `tfsdk:"share_summary"`
	Shares       types.Object `tfsdk:"shares"`
	Tile         types.Object `tfsdk:"tile"`
	Vaultholder  types.Object `tfsdk:"vaultholder"`
}

var vaultVaultRecoveryAttrTypesRS = objectAttrsTypeRSVaultVaultRecovery(false)
var vaultVaultRecoveryAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultRecovery(true)

type vaultVaultRecoveryDataRS struct {
	AccountUUID types.String `tfsdk:"account_uuid"`
	PrivateKey  types.String `tfsdk:"private_key"`
}

var vaultVaultRecoveryAttrTypesDS = objectAttrsTypeDSVaultVaultRecovery(false)
var vaultVaultRecoveryAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultRecovery(true)

type vaultVaultRecoveryDataDS struct {
	Account    types.Object `tfsdk:"account"`
	PrivateKey types.String `tfsdk:"private_key"`
}

var vaultVaultUnlockAttrTypesRS = objectAttrsTypeRSVaultVaultUnlock(false)
var vaultVaultUnlockAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultUnlock(true)

type vaultVaultUnlockDataRS struct {
	Password types.String `tfsdk:"password"`
}

var vaultVaultUnlockAttrTypesDS = objectAttrsTypeDSVaultVaultUnlock(false)
var vaultVaultUnlockAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultUnlock(true)

type vaultVaultUnlockDataDS struct {
	Password types.String `tfsdk:"password"`
}

var vaultVaultUnlockResponseAttrTypesRS = objectAttrsTypeRSVaultVaultUnlockResponse(false)
var vaultVaultUnlockResponseAttrTypesRSRecurse = objectAttrsTypeRSVaultVaultUnlockResponse(true)

type vaultVaultUnlockResponseDataRS struct {
	ExpiresAt       types.String `tfsdk:"expires_at"`
	SessionPassword types.String `tfsdk:"session_password"`
}

var vaultVaultUnlockResponseAttrTypesDS = objectAttrsTypeDSVaultVaultUnlockResponse(false)
var vaultVaultUnlockResponseAttrTypesDSRecurse = objectAttrsTypeDSVaultVaultUnlockResponse(true)

type vaultVaultUnlockResponseDataDS struct {
	ExpiresAt       types.String `tfsdk:"expires_at"`
	SessionPassword types.String `tfsdk:"session_password"`
}

var webhookWebhookAttrTypesRS = objectAttrsTypeRSWebhookWebhook(false)
var webhookWebhookAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhook(true)

type webhookWebhookDataRS struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	AccountUUID            types.String `tfsdk:"account_uuid"`
	Active                 types.Bool   `tfsdk:"active"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	AllTypes               types.Bool   `tfsdk:"all_types"`
	AuthenticationScheme   types.String `tfsdk:"authentication_scheme"`
	BasicAuthPassword      types.String `tfsdk:"basic_auth_password"`
	BasicAuthUsername      types.String `tfsdk:"basic_auth_username"`
	BearerToken            types.String `tfsdk:"bearer_token"`
	ClientUUID             types.String `tfsdk:"client_uuid"`
	ClientCertificateUUID  types.String `tfsdk:"client_certificate_uuid"`
	CustomHeaderName       types.String `tfsdk:"custom_header_name"`
	CustomHeaderValue      types.String `tfsdk:"custom_header_value"`
	DirectoryUUID          types.String `tfsdk:"directory_uuid"`
	GroupUUID              types.String `tfsdk:"group_uuid"`
	Name                   types.String `tfsdk:"name"`
	SystemUUID             types.String `tfsdk:"system_uuid"`
	TLS                    types.String `tfsdk:"tls"`
	TrustedCertificateUUID types.String `tfsdk:"trusted_certificate_uuid"`
	Types                  types.List   `tfsdk:"types"`
	URL                    types.String `tfsdk:"url"`
	UUID                   types.String `tfsdk:"uuid"`
	VerbosePayloads        types.Bool   `tfsdk:"verbose_payloads"`
}

var webhookWebhookAttrTypesDS = objectAttrsTypeDSWebhookWebhook(false)
var webhookWebhookAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhook(true)

type webhookWebhookDataDS struct {
	Links                types.List   `tfsdk:"links"`
	Permissions          types.List   `tfsdk:"permissions"`
	Account              types.Object `tfsdk:"account"`
	Active               types.Bool   `tfsdk:"active"`
	AdditionalObjects    types.Object `tfsdk:"additional_objects"`
	AllTypes             types.Bool   `tfsdk:"all_types"`
	AuthenticationScheme types.String `tfsdk:"authentication_scheme"`
	BasicAuthPassword    types.String `tfsdk:"basic_auth_password"`
	BasicAuthUsername    types.String `tfsdk:"basic_auth_username"`
	BearerToken          types.String `tfsdk:"bearer_token"`
	Client               types.Object `tfsdk:"client"`
	ClientCertificate    types.Object `tfsdk:"client_certificate"`
	CustomHeaderName     types.String `tfsdk:"custom_header_name"`
	CustomHeaderValue    types.String `tfsdk:"custom_header_value"`
	Directory            types.Object `tfsdk:"directory"`
	Group                types.Object `tfsdk:"group"`
	Name                 types.String `tfsdk:"name"`
	System               types.Object `tfsdk:"system"`
	TLS                  types.String `tfsdk:"tls"`
	TrustedCertificate   types.Object `tfsdk:"trusted_certificate"`
	Types                types.List   `tfsdk:"types"`
	URL                  types.String `tfsdk:"url"`
	UUID                 types.String `tfsdk:"uuid"`
	VerbosePayloads      types.Bool   `tfsdk:"verbose_payloads"`
}

var webhookWebhookDeliveryAttrTypesRS = objectAttrsTypeRSWebhookWebhookDelivery(false)
var webhookWebhookDeliveryAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookDelivery(true)

type webhookWebhookDeliveryDataRS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Payload           types.Object `tfsdk:"payload"`
	ReponseHeaders    types.String `tfsdk:"reponse_headers"`
	RequestHeaders    types.String `tfsdk:"request_headers"`
	Response          types.String `tfsdk:"response"`
	Status            types.Int64  `tfsdk:"status"`
	Time              types.Int64  `tfsdk:"time"`
	TriggerTime       types.String `tfsdk:"trigger_time"`
}

var webhookWebhookDeliveryAttrTypesDS = objectAttrsTypeDSWebhookWebhookDelivery(false)
var webhookWebhookDeliveryAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookDelivery(true)

type webhookWebhookDeliveryDataDS struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Payload           types.Object `tfsdk:"payload"`
	ReponseHeaders    types.String `tfsdk:"reponse_headers"`
	RequestHeaders    types.String `tfsdk:"request_headers"`
	Response          types.String `tfsdk:"response"`
	Status            types.Int64  `tfsdk:"status"`
	Time              types.Int64  `tfsdk:"time"`
	TriggerTime       types.String `tfsdk:"trigger_time"`
}

var webhookWebhookDeliveryLinkableWrapperAttrTypesRS = objectAttrsTypeRSWebhookWebhookDeliveryLinkableWrapper(false)
var webhookWebhookDeliveryLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookDeliveryLinkableWrapper(true)

type webhookWebhookDeliveryLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookDeliveryLinkableWrapperAttrTypesDS = objectAttrsTypeDSWebhookWebhookDeliveryLinkableWrapper(false)
var webhookWebhookDeliveryLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookDeliveryLinkableWrapper(true)

type webhookWebhookDeliveryLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookDelivery_additionalObjectsAttrTypesRS = objectAttrsTypeRSWebhookWebhookDelivery_additionalObjects(false)
var webhookWebhookDelivery_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookDelivery_additionalObjects(true)

type webhookWebhookDelivery_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var webhookWebhookDelivery_additionalObjectsAttrTypesDS = objectAttrsTypeDSWebhookWebhookDelivery_additionalObjects(false)
var webhookWebhookDelivery_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookDelivery_additionalObjects(true)

type webhookWebhookDelivery_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

var webhookWebhookLinkableWrapperAttrTypesRS = objectAttrsTypeRSWebhookWebhookLinkableWrapper(false)
var webhookWebhookLinkableWrapperAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookLinkableWrapper(true)

type webhookWebhookLinkableWrapperDataRS struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookLinkableWrapperAttrTypesDS = objectAttrsTypeDSWebhookWebhookLinkableWrapper(false)
var webhookWebhookLinkableWrapperAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookLinkableWrapper(true)

type webhookWebhookLinkableWrapperDataDS struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookNameUuidAttrTypesRS = objectAttrsTypeRSWebhookWebhookNameUuid(false)
var webhookWebhookNameUuidAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookNameUuid(true)

type webhookWebhookNameUuidDataRS struct {
	Name   types.String `tfsdk:"name"`
	Object types.Object `tfsdk:"object"`
	UUID   types.String `tfsdk:"uuid"`
}

var webhookWebhookNameUuidAttrTypesDS = objectAttrsTypeDSWebhookWebhookNameUuid(false)
var webhookWebhookNameUuidAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookNameUuid(true)

type webhookWebhookNameUuidDataDS struct {
	Name   types.String `tfsdk:"name"`
	Object types.Object `tfsdk:"object"`
	UUID   types.String `tfsdk:"uuid"`
}

var webhookWebhookPushAttrTypesRS = objectAttrsTypeRSWebhookWebhookPush(false)
var webhookWebhookPushAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhookPush(true)

type webhookWebhookPushDataRS struct {
	Account                types.Object `tfsdk:"account"`
	ByParty                types.Object `tfsdk:"by_party"`
	Certificate            types.Object `tfsdk:"certificate"`
	Client                 types.Object `tfsdk:"client"`
	Directory              types.Object `tfsdk:"directory"`
	Group                  types.Object `tfsdk:"group"`
	Group2                 types.Object `tfsdk:"group2"`
	GroupClassification    types.Object `tfsdk:"group_classification"`
	ModificationRequest    types.Object `tfsdk:"modification_request"`
	OrganizationalUnit     types.Object `tfsdk:"organizational_unit"`
	Parameter1             types.String `tfsdk:"parameter1"`
	Parameter2             types.String `tfsdk:"parameter2"`
	Parameter3             types.String `tfsdk:"parameter3"`
	SecurityLevel          types.String `tfsdk:"security_level"`
	Seq                    types.Int64  `tfsdk:"seq"`
	ServiceAccount         types.Object `tfsdk:"service_account"`
	System                 types.Object `tfsdk:"system"`
	Timestamp              types.String `tfsdk:"timestamp"`
	VaultRecord            types.Object `tfsdk:"vault_record"`
	Webhook                types.Object `tfsdk:"webhook"`
	WebhookWebhookPushType types.String `tfsdk:"webhook_webhook_push_type"`
}

var webhookWebhookPushAttrTypesDS = objectAttrsTypeDSWebhookWebhookPush(false)
var webhookWebhookPushAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhookPush(true)

type webhookWebhookPushDataDS struct {
	Account                types.Object `tfsdk:"account"`
	ByParty                types.Object `tfsdk:"by_party"`
	Certificate            types.Object `tfsdk:"certificate"`
	Client                 types.Object `tfsdk:"client"`
	Directory              types.Object `tfsdk:"directory"`
	Group                  types.Object `tfsdk:"group"`
	Group2                 types.Object `tfsdk:"group2"`
	GroupClassification    types.Object `tfsdk:"group_classification"`
	ModificationRequest    types.Object `tfsdk:"modification_request"`
	OrganizationalUnit     types.Object `tfsdk:"organizational_unit"`
	Parameter1             types.String `tfsdk:"parameter1"`
	Parameter2             types.String `tfsdk:"parameter2"`
	Parameter3             types.String `tfsdk:"parameter3"`
	SecurityLevel          types.String `tfsdk:"security_level"`
	Seq                    types.Int64  `tfsdk:"seq"`
	ServiceAccount         types.Object `tfsdk:"service_account"`
	System                 types.Object `tfsdk:"system"`
	Timestamp              types.String `tfsdk:"timestamp"`
	VaultRecord            types.Object `tfsdk:"vault_record"`
	Webhook                types.Object `tfsdk:"webhook"`
	WebhookWebhookPushType types.String `tfsdk:"webhook_webhook_push_type"`
}

var webhookWebhook_additionalObjectsAttrTypesRS = objectAttrsTypeRSWebhookWebhook_additionalObjects(false)
var webhookWebhook_additionalObjectsAttrTypesRSRecurse = objectAttrsTypeRSWebhookWebhook_additionalObjects(true)

type webhookWebhook_additionalObjectsDataRS struct {
	Audit types.Object `tfsdk:"audit"`
}

var webhookWebhook_additionalObjectsAttrTypesDS = objectAttrsTypeDSWebhookWebhook_additionalObjects(false)
var webhookWebhook_additionalObjectsAttrTypesDSRecurse = objectAttrsTypeDSWebhookWebhook_additionalObjects(true)

type webhookWebhook_additionalObjectsDataDS struct {
	Audit types.Object `tfsdk:"audit"`
}

func objectAttrsTypeRSAuditInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["last_modified_by"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuditInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["last_modified_by"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSErrorReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["application_error"] = types.StringType
	objectAttrs["application_error_parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeRSErrorReport_applicationErrorParameters(recurse)}
	objectAttrs["code"] = types.Int64Type
	objectAttrs["error_details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["exception"] = types.StringType
	objectAttrs["message"] = types.StringType
	objectAttrs["reason"] = types.StringType
	objectAttrs["stacktrace"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSErrorReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["application_error"] = types.StringType
	objectAttrs["application_error_parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeDSErrorReport_applicationErrorParameters(recurse)}
	objectAttrs["code"] = types.Int64Type
	objectAttrs["error_details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["exception"] = types.StringType
	objectAttrs["message"] = types.StringType
	objectAttrs["reason"] = types.StringType
	objectAttrs["stacktrace"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeRSErrorReport_applicationErrorParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSErrorReport_applicationErrorParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSGeneratedSecret(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["generated_secret"] = types.StringType
	objectAttrs["old_secret"] = types.StringType
	objectAttrs["regenerate"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGeneratedSecret(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["generated_secret"] = types.StringType
	objectAttrs["old_secret"] = types.StringType
	objectAttrs["regenerate"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSNonLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSNonLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSRestLink(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["href"] = types.StringType
	objectAttrs["id"] = types.Int64Type
	objectAttrs["rel"] = types.StringType
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRestLink(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["href"] = types.StringType
	objectAttrs["id"] = types.Int64Type
	objectAttrs["rel"] = types.StringType
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSSegmentCount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSSegmentCount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuditAuditRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditAuditRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["audit_audit_record_type"] = types.StringType
	objectAttrs["date_time"] = types.StringType
	objectAttrs["on_account"] = types.StringType
	objectAttrs["on_certificate"] = types.StringType
	objectAttrs["on_client"] = types.StringType
	objectAttrs["on_directory"] = types.StringType
	objectAttrs["on_group"] = types.StringType
	objectAttrs["on_group2"] = types.StringType
	objectAttrs["on_group_classification"] = types.StringType
	objectAttrs["on_organizational_unit"] = types.StringType
	objectAttrs["on_service_account"] = types.StringType
	objectAttrs["on_system"] = types.StringType
	objectAttrs["on_vault_record"] = types.StringType
	objectAttrs["on_webhook"] = types.StringType
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["performed_by"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuditAuditRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditAuditRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["audit_audit_record_type"] = types.StringType
	objectAttrs["date_time"] = types.StringType
	objectAttrs["on_account"] = types.StringType
	objectAttrs["on_certificate"] = types.StringType
	objectAttrs["on_client"] = types.StringType
	objectAttrs["on_directory"] = types.StringType
	objectAttrs["on_group"] = types.StringType
	objectAttrs["on_group2"] = types.StringType
	objectAttrs["on_group_classification"] = types.StringType
	objectAttrs["on_organizational_unit"] = types.StringType
	objectAttrs["on_service_account"] = types.StringType
	objectAttrs["on_system"] = types.StringType
	objectAttrs["on_vault_record"] = types.StringType
	objectAttrs["on_webhook"] = types.StringType
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["performed_by"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuditAuditRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuditAuditRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSAuditAuditRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuditAuditRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSAuditAuditRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSAuditAuditRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSAuthAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(false)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_password_change_required"] = types.BoolType
	objectAttrs["directory_rotating_password"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["email"] = types.StringType
	objectAttrs["id_in_directory"] = types.StringType
	objectAttrs["key_hub_password_change_required"] = types.BoolType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["locale"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["token_password_enabled"] = types.BoolType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["valid_in_directory"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(false)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_password_change_required"] = types.BoolType
	objectAttrs["directory_rotating_password"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["email"] = types.StringType
	objectAttrs["id_in_directory"] = types.StringType
	objectAttrs["key_hub_password_change_required"] = types.BoolType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["locale"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["token_password_enabled"] = types.BoolType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["valid_in_directory"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountBulkUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["action"] = types.StringType
	objectAttrs["exclusive_selection"] = types.BoolType
	objectAttrs["selected_accounts"] = types.ListType{ElemType: types.Int64Type}
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountBulkUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["action"] = types.StringType
	objectAttrs["exclusive_selection"] = types.BoolType
	objectAttrs["selected_accounts"] = types.ListType{ElemType: types.Int64Type}
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountChangeLocale(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["locale"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountChangeLocale(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["locale"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountRecoveryStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["pending2_f_a_recovery_request"] = types.BoolType
	objectAttrs["pending_password_recovery_request"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountRecoveryStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["pending2_f_a_recovery_request"] = types.BoolType
	objectAttrs["pending_password_recovery_request"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountSettings(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["default_organizational_unit_uuid"] = types.StringType
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["in_groups"] = types.BoolType
	objectAttrs["in_multiple_organizational_units"] = types.BoolType
	objectAttrs["key_hub_admin"] = types.BoolType
	objectAttrs["multiple_organizational_units_exist"] = types.BoolType
	objectAttrs["password_mode"] = types.StringType
	objectAttrs["ssh_public_key"] = types.StringType
	objectAttrs["two_factor_authentication"] = types.StringType
	objectAttrs["use_token_password"] = types.BoolType
	objectAttrs["vault_status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountSettings(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["default_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["in_groups"] = types.BoolType
	objectAttrs["in_multiple_organizational_units"] = types.BoolType
	objectAttrs["key_hub_admin"] = types.BoolType
	objectAttrs["multiple_organizational_units_exist"] = types.BoolType
	objectAttrs["password_mode"] = types.StringType
	objectAttrs["ssh_public_key"] = types.StringType
	objectAttrs["two_factor_authentication"] = types.StringType
	objectAttrs["use_token_password"] = types.BoolType
	objectAttrs["vault_status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["decline_recovery_requests"] = types.BoolType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["two_factor_authentication_enabled"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["decline_recovery_requests"] = types.BoolType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["two_factor_authentication_enabled"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSAuthAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_login"] = types.BoolType
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupAccountGroupLinkableWrapper(recurse)}
	objectAttrs["pending_recovery_requests"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccountRecoveryStatus(recurse)}
	objectAttrs["settings"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccountSettings(recurse)}
	objectAttrs["stored_attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthStoredAccountAttributes(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSAuthAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_login"] = types.BoolType
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupAccountGroupLinkableWrapper(recurse)}
	objectAttrs["pending_recovery_requests"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountRecoveryStatus(recurse)}
	objectAttrs["settings"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountSettings(recurse)}
	objectAttrs["stored_attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthStoredAccountAttributes(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["directory_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccountsAuditStats_directoryStats(recurse)}
	objectAttrs["two_f_a_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccountsAuditStats_twoFAStats(recurse)}
	objectAttrs["validity_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuthAccountsAuditStats_validityStats(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["directory_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountsAuditStats_directoryStats(recurse)}
	objectAttrs["two_f_a_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountsAuditStats_twoFAStats(recurse)}
	objectAttrs["validity_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountsAuditStats_validityStats(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountsAuditStats_directoryStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountsAuditStats_directoryStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSAuthAccountsAuditStats_validityStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSAuthAccountsAuditStats_validityStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSAuthInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["uuid"] = types.StringType
	objectAttrs["activation_code"] = types.StringType
	objectAttrs["activation_deadline"] = types.StringType
	objectAttrs["company"] = types.StringType
	objectAttrs["first_name"] = types.StringType
	objectAttrs["last_name"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["telephone"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(false)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_password_change_required"] = types.BoolType
	objectAttrs["directory_rotating_password"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["email"] = types.StringType
	objectAttrs["id_in_directory"] = types.StringType
	objectAttrs["key_hub_password_change_required"] = types.BoolType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["locale"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["token_password_enabled"] = types.BoolType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["valid_in_directory"] = types.BoolType
	objectAttrs["activation_code"] = types.StringType
	objectAttrs["activation_deadline"] = types.StringType
	objectAttrs["company"] = types.StringType
	objectAttrs["first_name"] = types.StringType
	objectAttrs["last_name"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["telephone"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthInternalAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthInternalAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSAuthInternalAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthInternalAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSAuthInternalAccountStatusObject(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthInternalAccountStatusObject(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthMoveInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["internal_directory"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryInternalDirectory(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSAuthMoveInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["internal_directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryInternalDirectory(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSAuthPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["full"] = types.StringType
	objectAttrs["instances"] = types.ListType{ElemType: types.StringType}
	objectAttrs["operations"] = types.ListType{ElemType: types.StringType}
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["full"] = types.StringType
	objectAttrs["instances"] = types.ListType{ElemType: types.StringType}
	objectAttrs["operations"] = types.ListType{ElemType: types.StringType}
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthStoredAccountAttribute(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSAuthStoredAccountAttribute(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSAuthStoredAccountAttributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["attributes"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthStoredAccountAttribute(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSAuthStoredAccountAttributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["attributes"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthStoredAccountAttribute(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSCertificateCertificate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSCertificateCertificate_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["key_data"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSCertificateCertificate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificate_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["key_data"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeRSCertificateCertificateLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSCertificateCertificate(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSCertificateCertificateLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificate(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSCertificateCertificatePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSCertificateCertificatePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSCertificateCertificate_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSCertificateCertificate_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSClientClientApplication(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSClientClientApplication(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSClientClientApplicationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplication(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSClientClientApplicationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplication(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSClientClientApplicationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSClientClientApplicationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSClientClientApplication_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["delete_tile"] = types.BoolType
	objectAttrs["groupclients"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupLinkableWrapper(recurse)}
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGeneratedSecret(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadSsoApplicationLaunchpadTile(recurse)}
	objectAttrs["vault_record_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSClientClientApplication_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["groupclients"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupLinkableWrapper(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadSsoApplicationLaunchpadTile(recurse)}
	objectAttrs["vault_record_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSClientLdapClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["bind_dn"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret_uuid"] = types.StringType
	objectAttrs["used_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSClientLdapClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["bind_dn"] = types.StringType
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	objectAttrs["used_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(false)}}
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2Client_attributes(false)}
	objectAttrs["callback_u_r_i"] = types.StringType
	objectAttrs["confidential"] = types.BoolType
	objectAttrs["debug_mode"] = types.BoolType
	objectAttrs["id_token_claims"] = types.StringType
	objectAttrs["initiate_login_u_r_i"] = types.StringType
	objectAttrs["resource_u_r_is"] = types.StringType
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret_uuid"] = types.StringType
	objectAttrs["show_landing_page"] = types.BoolType
	objectAttrs["use_client_credentials"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(false)}}
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2Client_attributes(false)}
	objectAttrs["callback_u_r_i"] = types.StringType
	objectAttrs["confidential"] = types.BoolType
	objectAttrs["debug_mode"] = types.BoolType
	objectAttrs["id_token_claims"] = types.StringType
	objectAttrs["initiate_login_u_r_i"] = types.StringType
	objectAttrs["resource_u_r_is"] = types.StringType
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	objectAttrs["show_landing_page"] = types.BoolType
	objectAttrs["use_client_credentials"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2ClientPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["for_group_uuid"] = types.StringType
	objectAttrs["for_system_uuid"] = types.StringType
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2ClientPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["for_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["for_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2ClientPermissionWithClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["for_group_uuid"] = types.StringType
	objectAttrs["for_system_uuid"] = types.StringType
	objectAttrs["value"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2Client(false)}
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2ClientPermissionWithClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["for_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["for_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["value"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2Client(false)}
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermissionWithClient(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermissionWithClient(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSClientOAuth2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSClientOAuth2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSClientSaml2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientSaml2Client_attributes(false)}
	objectAttrs["metadata"] = types.StringType
	objectAttrs["metadata_url"] = types.StringType
	objectAttrs["subject_format"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSClientSaml2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientSaml2Client_attributes(false)}
	objectAttrs["metadata"] = types.StringType
	objectAttrs["metadata_url"] = types.StringType
	objectAttrs["subject_format"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSClientSaml2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSClientSaml2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectoryPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectoryPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectoryStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.Int64Type
	objectAttrs["reason"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectoryStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.Int64Type
	objectAttrs["reason"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectorySummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["directory_account_directory_summary_type"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectoryStatusReport(recurse)}
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectorySummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["directory_account_directory_summary_type"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryStatusReport(recurse)}
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectorySummary(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectorySummary(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeRSMarkItemMarkers(recurse)}
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectoryStatusReport(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeDSMarkItemMarkers(recurse)}
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryStatusReport(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSDirectoryInternalDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["owner_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryInternalDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSDirectoryLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["dialect"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["password_recovery"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["search_bind_d_n"] = types.StringType
	objectAttrs["search_bind_password"] = types.StringType
	objectAttrs["search_filter"] = types.StringType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["dialect"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["host"] = types.StringType
	objectAttrs["password_recovery"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["search_bind_d_n"] = types.StringType
	objectAttrs["search_bind_password"] = types.StringType
	objectAttrs["search_filter"] = types.StringType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSDirectoryMaintenanceDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryMaintenanceDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSDirectoryOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["acr_values"] = types.StringType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["enforces2fa"] = types.BoolType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["issuer"] = types.StringType
	objectAttrs["logout_url"] = types.StringType
	objectAttrs["send_login_hint"] = types.BoolType
	objectAttrs["vendor_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSDirectoryOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["acr_values"] = types.StringType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["enforces2fa"] = types.BoolType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["issuer"] = types.StringType
	objectAttrs["logout_url"] = types.StringType
	objectAttrs["send_login_hint"] = types.BoolType
	objectAttrs["vendor_escaped"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupAccountGroup_additionalObjects(false)}
	}
	objectAttrs["uuid"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupFolder(false)}
	objectAttrs["last_used"] = types.StringType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupAccountGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupFolder(false)}
	objectAttrs["last_used"] = types.StringType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupAccountGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupAccountGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupAuthorizedGroupsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}}
	objectAttrs["group_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSGroupAuthorizedGroupsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}}
	objectAttrs["group_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSGroupGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["application_administration"] = types.BoolType
	objectAttrs["audit_config"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAuditConfig(false)}
	objectAttrs["audit_requested"] = types.BoolType
	objectAttrs["auditor"] = types.BoolType
	objectAttrs["authorizing_group_auditing_uuid"] = types.StringType
	objectAttrs["authorizing_group_delegation_uuid"] = types.StringType
	objectAttrs["authorizing_group_membership_uuid"] = types.StringType
	objectAttrs["authorizing_group_provisioning_uuid"] = types.StringType
	objectAttrs["authorizing_group_types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["classification_uuid"] = types.StringType
	objectAttrs["description"] = types.StringType
	objectAttrs["extended_access"] = types.StringType
	objectAttrs["hide_audit_trail"] = types.BoolType
	objectAttrs["nested_under_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["private_group"] = types.BoolType
	objectAttrs["record_trail"] = types.BoolType
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["single_managed"] = types.BoolType
	objectAttrs["vault_recovery"] = types.StringType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["application_administration"] = types.BoolType
	objectAttrs["audit_config"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAuditConfig(false)}
	objectAttrs["audit_requested"] = types.BoolType
	objectAttrs["auditor"] = types.BoolType
	objectAttrs["authorizing_group_auditing"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["authorizing_group_delegation"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["authorizing_group_membership"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["authorizing_group_provisioning"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["authorizing_group_types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["classification"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassificationPrimer(false)}
	objectAttrs["description"] = types.StringType
	objectAttrs["extended_access"] = types.StringType
	objectAttrs["hide_audit_trail"] = types.BoolType
	objectAttrs["nested_under"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["private_group"] = types.BoolType
	objectAttrs["record_trail"] = types.BoolType
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["single_managed"] = types.BoolType
	objectAttrs["vault_recovery"] = types.StringType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccount_additionalObjects(false)}
	}
	objectAttrs["uuid"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAccountNesting(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["connected"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAccountNesting(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["connected"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupFolder(recurse)}
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupFolder(recurse)}
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAdminMail(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["body"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAdminMail(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["body"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAudit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAudit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["accounts"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAuditAccount(false)}}
	objectAttrs["comment"] = types.StringType
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	objectAttrs["name_on_audit"] = types.StringType
	objectAttrs["reviewed_at"] = types.StringType
	objectAttrs["reviewed_by"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["submitted_at"] = types.StringType
	objectAttrs["submitted_by"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAudit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAudit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["accounts"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAuditAccount(false)}}
	objectAttrs["comment"] = types.StringType
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	objectAttrs["name_on_audit"] = types.StringType
	objectAttrs["reviewed_at"] = types.StringType
	objectAttrs["reviewed_by"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["submitted_at"] = types.StringType
	objectAttrs["submitted_by"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAuditAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["account_valid"] = types.BoolType
	objectAttrs["action"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["display_name"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["rights"] = types.StringType
	objectAttrs["username"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAuditAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["account_valid"] = types.BoolType
	objectAttrs["action"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["display_name"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["rights"] = types.StringType
	objectAttrs["username"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAuditConfig(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["months"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAuditConfig(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["months"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAuditLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAudit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAuditLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAudit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAudit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAudit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupAuditingInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit_due_date"] = types.StringType
	objectAttrs["last_audit_date"] = types.StringType
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_managers"] = types.Int64Type
	objectAttrs["nr_expired_vault_records"] = types.Int64Type
	objectAttrs["nr_managers"] = types.Int64Type
	objectAttrs["nr_vault_records_with_end_date"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupAuditingInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit_due_date"] = types.StringType
	objectAttrs["last_audit_date"] = types.StringType
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_managers"] = types.Int64Type
	objectAttrs["nr_expired_vault_records"] = types.Int64Type
	objectAttrs["nr_managers"] = types.Int64Type
	objectAttrs["nr_vault_records_with_end_date"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClassification_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["authorizing_group_auditing_required"] = types.BoolType
	objectAttrs["authorizing_group_delegation_required"] = types.BoolType
	objectAttrs["authorizing_group_membership_required"] = types.BoolType
	objectAttrs["authorizing_group_provisioning_required"] = types.BoolType
	objectAttrs["default_classification"] = types.BoolType
	objectAttrs["description"] = types.StringType
	objectAttrs["maximum_audit_interval"] = types.Int64Type
	objectAttrs["minimum_nr_managers"] = types.Int64Type
	objectAttrs["record_trail_required"] = types.BoolType
	objectAttrs["required_months"] = types.ListType{ElemType: types.StringType}
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassification_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["authorizing_group_auditing_required"] = types.BoolType
	objectAttrs["authorizing_group_delegation_required"] = types.BoolType
	objectAttrs["authorizing_group_membership_required"] = types.BoolType
	objectAttrs["authorizing_group_provisioning_required"] = types.BoolType
	objectAttrs["default_classification"] = types.BoolType
	objectAttrs["description"] = types.StringType
	objectAttrs["maximum_audit_interval"] = types.Int64Type
	objectAttrs["minimum_nr_managers"] = types.Int64Type
	objectAttrs["record_trail_required"] = types.BoolType
	objectAttrs["required_months"] = types.ListType{ElemType: types.StringType}
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassificationInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_groups"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassificationInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_groups"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassificationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClassification(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassificationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassification(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassificationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassificationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassificationUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["classificaton_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassificationUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["classificaton"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassificationPrimer(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClassification_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["info"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClassificationInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClassification_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["info"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassificationInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClient_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["client_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClient_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClient(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClient(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupClient_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupClient_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupFolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupFolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupFolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupFolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupFolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupFolder(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupFolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupFolder(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupFolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupFolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_accounts_with_vault"] = types.Int64Type
	objectAttrs["nr_audits"] = types.Int64Type
	objectAttrs["nr_clients"] = types.Int64Type
	objectAttrs["nr_provisioned_systems"] = types.Int64Type
	objectAttrs["nr_vault_records"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_accounts_with_vault"] = types.Int64Type
	objectAttrs["nr_audits"] = types.Int64Type
	objectAttrs["nr_clients"] = types.Int64Type
	objectAttrs["nr_provisioned_systems"] = types.Int64Type
	objectAttrs["nr_vault_records"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}}
	objectAttrs["segments"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSSegmentCount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}}
	objectAttrs["segments"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSSegmentCount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["administered_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["admins"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["authorized_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupAuthorizedGroupsWrapper(recurse)}
	objectAttrs["client_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["clients"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["content_administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["groupauditinginfo"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAuditingInfo(recurse)}
	objectAttrs["groupinfo"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupInfo(recurse)}
	objectAttrs["helpdesk"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeRSMarkItemMarkers(recurse)}
	objectAttrs["myaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccount(recurse)}
	objectAttrs["mydelegatedaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAccount(recurse)}
	objectAttrs["nested_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupPrimerLinkableWrapper(recurse)}
	objectAttrs["owned_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["owned_directories"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryAccountDirectoryLinkableWrapper(recurse)}
	objectAttrs["owned_groups_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningOwnedGroupOnSystemsWrapper(recurse)}
	objectAttrs["owned_organizational_units"] = types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnitLinkableWrapper(recurse)}
	objectAttrs["owned_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["recent_audits"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupAuditLinkableWrapper(recurse)}
	objectAttrs["requeststatus"] = types.StringType
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountLinkableWrapper(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVault(recurse)}
	objectAttrs["webhooks"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["administered_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["admins"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["authorized_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupAuthorizedGroupsWrapper(recurse)}
	objectAttrs["client_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["clients"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["content_administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["groupauditinginfo"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAuditingInfo(recurse)}
	objectAttrs["groupinfo"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupInfo(recurse)}
	objectAttrs["helpdesk"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeDSMarkItemMarkers(recurse)}
	objectAttrs["myaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccount(recurse)}
	objectAttrs["mydelegatedaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAccount(recurse)}
	objectAttrs["nested_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimerLinkableWrapper(recurse)}
	objectAttrs["owned_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["owned_directories"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryLinkableWrapper(recurse)}
	objectAttrs["owned_groups_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningOwnedGroupOnSystemsWrapper(recurse)}
	objectAttrs["owned_organizational_units"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitLinkableWrapper(recurse)}
	objectAttrs["owned_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["recent_audits"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupAuditLinkableWrapper(recurse)}
	objectAttrs["requeststatus"] = types.StringType
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountLinkableWrapper(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVault(recurse)}
	objectAttrs["webhooks"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSGroupGroupsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audited_groups"] = types.Int64Type
	objectAttrs["classifications"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupClassification(recurse)}}
	objectAttrs["overdue_audit_groups"] = types.Int64Type
	objectAttrs["overdue_vault_policies"] = types.Int64Type
	objectAttrs["unaudited_groups"] = types.Int64Type
	objectAttrs["valid_vault_policies"] = types.Int64Type
	objectAttrs["vaults_without_policies"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSGroupGroupsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audited_groups"] = types.Int64Type
	objectAttrs["classifications"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupClassification(recurse)}}
	objectAttrs["overdue_audit_groups"] = types.Int64Type
	objectAttrs["overdue_vault_policies"] = types.Int64Type
	objectAttrs["unaudited_groups"] = types.Int64Type
	objectAttrs["valid_vault_policies"] = types.Int64Type
	objectAttrs["vaults_without_policies"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSGroupProvisioningGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupProvisioningGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeDSGroupProvisioningGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupProvisioningGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeRSGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSGroupProvisioningGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupProvisioningGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSGroupProvisioningGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSGroupProvisioningGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTilePrimer(recurse)}
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(recurse)}
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTilePrimer(recurse)}
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadDisplayedLaunchpadTile(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadDisplayedLaunchpadTile(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTile(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTile(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadLaunchpadTilePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadLaunchpadTilePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadManualLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadManualLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSLicenseKeyHubLicenseInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["current_license_status"] = types.StringType
	objectAttrs["customer_company"] = types.StringType
	objectAttrs["customer_contact"] = types.StringType
	objectAttrs["customer_domains"] = types.ListType{ElemType: types.StringType}
	objectAttrs["details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration_time"] = types.StringType
	objectAttrs["features"] = types.ListType{ElemType: types.StringType}
	objectAttrs["issue_time"] = types.StringType
	objectAttrs["key_hub_domain"] = types.StringType
	objectAttrs["license_key"] = types.StringType
	objectAttrs["not_before_time"] = types.StringType
	objectAttrs["users_hard_limit"] = types.Int64Type
	objectAttrs["users_pro_limit"] = types.Int64Type
	objectAttrs["users_soft_limit"] = types.Int64Type
	objectAttrs["uuid"] = types.StringType
	objectAttrs["version"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSLicenseKeyHubLicenseInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["current_license_status"] = types.StringType
	objectAttrs["customer_company"] = types.StringType
	objectAttrs["customer_contact"] = types.StringType
	objectAttrs["customer_domains"] = types.ListType{ElemType: types.StringType}
	objectAttrs["details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration_time"] = types.StringType
	objectAttrs["features"] = types.ListType{ElemType: types.StringType}
	objectAttrs["issue_time"] = types.StringType
	objectAttrs["key_hub_domain"] = types.StringType
	objectAttrs["license_key"] = types.StringType
	objectAttrs["not_before_time"] = types.StringType
	objectAttrs["users_hard_limit"] = types.Int64Type
	objectAttrs["users_pro_limit"] = types.Int64Type
	objectAttrs["users_soft_limit"] = types.Int64Type
	objectAttrs["uuid"] = types.StringType
	objectAttrs["version"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSMarkItemMarker(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["level"] = types.StringType
	objectAttrs["mark_item_marker_type"] = types.StringType
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeRSMarkItemMarker_parameters(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSMarkItemMarker(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["level"] = types.StringType
	objectAttrs["mark_item_marker_type"] = types.StringType
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeDSMarkItemMarker_parameters(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSMarkItemMarker_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSMarkItemMarker_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSMarkItemMarkers(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["markers"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSMarkItemMarker(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSMarkItemMarkers(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["markers"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSMarkItemMarker(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSNotificationCertificateExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeRSCertificateCertificate(recurse)}
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeRSDirectoryLDAPDirectory(recurse)}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["ldap_client"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientLdapClient(recurse)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem(recurse)}
	objectAttrs["usage"] = types.StringType
	objectAttrs["webhook"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhook(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSNotificationCertificateExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificate(recurse)}
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryLDAPDirectory(recurse)}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["ldap_client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientLdapClient(recurse)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem(recurse)}
	objectAttrs["usage"] = types.StringType
	objectAttrs["webhook"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhook(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSNotificationGroupAuditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["due_date"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}
	objectAttrs["notification_group_audit_required_notification_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSNotificationGroupAuditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["due_date"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}
	objectAttrs["notification_group_audit_required_notification_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSNotificationGroupEditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeRSNotificationGroupEditRequiredNotification_parameters(recurse)}
	objectAttrs["reason"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSNotificationGroupEditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeDSNotificationGroupEditRequiredNotification_parameters(recurse)}
	objectAttrs["reason"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSNotificationLicenseStatusNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_accounts"] = types.Int64Type
	objectAttrs["license_info"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLicenseKeyHubLicenseInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSNotificationLicenseStatusNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_accounts"] = types.Int64Type
	objectAttrs["license_info"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLicenseKeyHubLicenseInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSNotificationModificationRequestNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["admins"] = types.ListType{ElemType: types.StringType}
	objectAttrs["groups"] = types.ListType{ElemType: types.StringType}
	objectAttrs["request"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSNotificationModificationRequestNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["admins"] = types.ListType{ElemType: types.StringType}
	objectAttrs["groups"] = types.ListType{ElemType: types.StringType}
	objectAttrs["request"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSNotificationNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSNotificationNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSNotificationNotifications(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSNotificationNotification(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSNotificationNotifications(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSNotificationNotification(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSNotificationOldApiVersionUsageNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["api_version"] = types.Int64Type
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2Client(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSNotificationOldApiVersionUsageNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["api_version"] = types.Int64Type
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2Client(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSNotificationProvisionConfigRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["systems"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSNotificationProvisionConfigRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["systems"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSNotificationUpdateAvailableNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["released_at"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSNotificationUpdateAvailableNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["released_at"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSNotificationVaultRecordExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["record"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecord(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSNotificationVaultRecordExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecord(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationAccountOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationAccountOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSOrganizationAccountOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationAccountOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationAccountOrganizationalUnit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationAccountOrganizationalUnit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["depth"] = types.Int64Type
	objectAttrs["description"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["parent_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["depth"] = types.Int64Type
	objectAttrs["description"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["parent"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnitAccount_additionalObjects(false)}
	}
	objectAttrs["uuid"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnitAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnit(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["create_as_parent_of"] = types.ObjectType{AttrTypes: objectAttrsTypeRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningAbstractProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningAbstractProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["user_d_n"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSProvisioningAccountProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["description"] = types.StringType
	objectAttrs["result"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupProvisioningGroup(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningAccountProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["description"] = types.StringType
	objectAttrs["result"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupProvisioningGroup(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningAccountProvisioningStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningAccountProvisioningStatus(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningAccountProvisioningStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningAccountProvisioningStatus(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningCircuitBreakerStatistics(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["number_of_failed_calls"] = types.Int64Type
	objectAttrs["number_of_not_permitted_calls"] = types.Int64Type
	objectAttrs["number_of_successful_calls"] = types.Int64Type
	objectAttrs["state"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningCircuitBreakerStatistics(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["number_of_failed_calls"] = types.Int64Type
	objectAttrs["number_of_not_permitted_calls"] = types.Int64Type
	objectAttrs["number_of_successful_calls"] = types.Int64Type
	objectAttrs["state"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupOnSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupOnSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupOnSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupOnSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupOnSystemTypes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupOnSystemTypes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["provgroups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["provgroups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroupFolder(recurse)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGroupGroup(recurse)}
	objectAttrs["provisioning_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse)}
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["provisioning_permission_end_time"] = types.StringType
	objectAttrs["status_report"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningAccountProvisioningStatusReport(recurse)}
	objectAttrs["visible_on_dashboard"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupFolder(recurse)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroup(recurse)}
	objectAttrs["provisioning_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse)}
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["provisioning_permission_end_time"] = types.StringType
	objectAttrs["status_report"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningAccountProvisioningStatusReport(recurse)}
	objectAttrs["visible_on_dashboard"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(recurse)}}
	objectAttrs["unlinked_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(recurse)}}
	objectAttrs["unlinked_count"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionNumberSequence(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionNumberSequence_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	objectAttrs["next_u_i_d"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionNumberSequence(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionNumberSequence_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	objectAttrs["next_u_i_d"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionNumberSequence(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionNumberSequence(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAD(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["sam_account_name_scheme"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAD(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["sam_account_name_scheme"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedAccount_additionalObjects(false)}
	}
	objectAttrs["uuid"] = types.StringType
	objectAttrs["uid"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["uid"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedAzureTenant(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["idp_domain"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedAzureTenant(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["idp_domain"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedInternalLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientLdapClient(false)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedInternalLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientLdapClient(false)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["gid"] = types.Int64Type
	objectAttrs["hashing_scheme"] = types.StringType
	objectAttrs["numbering"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionNumberSequence(false)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["gid"] = types.Int64Type
	objectAttrs["hashing_scheme"] = types.StringType
	objectAttrs["numbering"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionNumberSequence(false)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["group_d_n"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["owner"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["username_prefix"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystem(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystem(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(recurse)}
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemSyncLog(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemSyncLog_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["created_at"] = types.StringType
	objectAttrs["errors"] = types.Int64Type
	objectAttrs["log"] = types.StringType
	objectAttrs["modifications"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemSyncLog(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemSyncLog_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["created_at"] = types.StringType
	objectAttrs["errors"] = types.Int64Type
	objectAttrs["log"] = types.StringType
	objectAttrs["modifications"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedSystemSyncLog(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemSyncLog(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisionedAccount(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["issued_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["login_name"] = types.StringType
	objectAttrs["management_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningProvisioningManagementPermissions(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeRSMarkItemMarkers(recurse)}
	objectAttrs["statistics"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningCircuitBreakerStatistics(recurse)}
	objectAttrs["supported_group_types"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystemTypes(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedAccount(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["issued_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["login_name"] = types.StringType
	objectAttrs["management_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisioningManagementPermissions(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeDSMarkItemMarkers(recurse)}
	objectAttrs["statistics"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningCircuitBreakerStatistics(recurse)}
	objectAttrs["supported_group_types"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystemTypes(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisioningManagementPermissions(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["create_new_groups_allowed"] = types.BoolType
	objectAttrs["create_service_accounts_allowed"] = types.BoolType
	objectAttrs["reuse_existing_groups_allowed"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisioningManagementPermissions(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["create_new_groups_allowed"] = types.BoolType
	objectAttrs["create_service_accounts_allowed"] = types.BoolType
	objectAttrs["reuse_existing_groups_allowed"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupProvisioningStatus(recurse)}}
	objectAttrs["ignore_errors"] = types.BoolType
	objectAttrs["restricted_by_license"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupProvisioningStatus(recurse)}}
	objectAttrs["ignore_errors"] = types.BoolType
	objectAttrs["restricted_by_license"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSProvisioningTokenPassword(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSProvisioningTokenPassword(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestAbstractApplicationModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestAbstractApplicationModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["access_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["access_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["end_date"] = types.StringType
	objectAttrs["make_manager"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["end_date"] = types.StringType
	objectAttrs["make_manager"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSRequestAcceptModificationRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSRequestAcceptModificationRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSRequestAddGroupAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["new_admin_uuid"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestAddGroupAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["new_admin"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestCreateGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system_type"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestCreateGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system_type"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestCreateGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestCreateGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestCreateServiceAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestCreateServiceAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["username"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestDisable2FARequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["subject"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestDisable2FARequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["subject"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestExtendAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["extend_until"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestExtendAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["extend_until"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantApplicationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantApplicationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantClientPermissionRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["permission_type"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantClientPermissionRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["permission_type"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestGrantServiceAccountGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(false)}
	objectAttrs["service_account_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestGrantServiceAccountGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(false)}
	objectAttrs["service_account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestJoinGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestJoinGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestJoinVaultRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestJoinVaultRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestModificationRequestLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSRequestModificationRequestLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSRequestModificationRequest_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accept_params"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestAcceptModificationRequestParameters(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["reset_status"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestPasswordResetRequestStatus(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSRequestModificationRequest_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["reset_status"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestPasswordResetRequestStatus(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSRequestPasswordResetRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["new_vault_and_directory_password"] = types.StringType
	objectAttrs["new_vault_password"] = types.StringType
	objectAttrs["unsynced_password"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSRequestPasswordResetRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestPasswordResetRequestStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["cooldown_end"] = types.StringType
	objectAttrs["managers"] = types.ListType{ElemType: types.StringType}
	objectAttrs["nr_accepted"] = types.Int64Type
	objectAttrs["reset_via_mail"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestPasswordResetRequestStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["cooldown_end"] = types.StringType
	objectAttrs["managers"] = types.ListType{ElemType: types.StringType}
	objectAttrs["nr_accepted"] = types.Int64Type
	objectAttrs["reset_via_mail"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestRemoveGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestRemoveGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["organizational_unit_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	objectAttrs["organizational_unit_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestRemoveProvisionedSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["system_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestRemoveProvisionedSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["system_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestReviewAuditRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestReviewAuditRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestRevokeAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["admin_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestRevokeAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["admin"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestSetupAuthorizingGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["authorizing_group_type"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestSetupAuthorizingGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["authorizing_group_type"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestSetupNestedGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_action"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestSetupNestedGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_action"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferApplicationAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferApplicationAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferApplicationOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferApplicationOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferAuditorGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferAuditorGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningGroupOnSystem(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSOrganizationOrganizationalUnitPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["service_account_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["service_account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSRequestUpdateGroupMembershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_to_update_uuid"] = types.StringType
	objectAttrs["current_end_date"] = types.StringType
	objectAttrs["current_rights"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["update_group_membership_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestUpdateGroupMembershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_to_update"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["current_end_date"] = types.StringType
	objectAttrs["current_rights"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["update_group_membership_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSRequestVerifyInternalAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["internal_account_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSRequestVerifyInternalAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["internal_account_name"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["description"] = types.StringType
	objectAttrs["password_uuid"] = types.StringType
	objectAttrs["password_rotation"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(recurse)}
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["description"] = types.StringType
	objectAttrs["password"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(false)}
	objectAttrs["password_rotation"] = types.StringType
	objectAttrs["technical_administrator"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountGroup(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccount(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(recurse)}
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountGroupLinkableWrapper(recurse)}
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeRSGeneratedSecret(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountGroupLinkableWrapper(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["disabled_count"] = types.Int64Type
	objectAttrs["password_scheme_enabled_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse)}
	objectAttrs["system_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_systemStats(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["disabled_count"] = types.Int64Type
	objectAttrs["password_scheme_enabled_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse)}
	objectAttrs["system_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_systemStats(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSSimpleStringValue(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSSimpleStringValue(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["value"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSSimpleVersionInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["contract_versions"] = types.ListType{ElemType: types.Int64Type}
	objectAttrs["key_hub_version"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSSimpleVersionInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["contract_versions"] = types.ListType{ElemType: types.Int64Type}
	objectAttrs["key_hub_version"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultDeletedVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultDeletedVaultHolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["record_count"] = types.Int64Type
	objectAttrs["vault_deleted_vault_holder_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultDeletedVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultDeletedVaultHolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["record_count"] = types.Int64Type
	objectAttrs["vault_deleted_vault_holder_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSVaultDeletedVaultHolder(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSVaultDeletedVaultHolder(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVault(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSVaultDeletedVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["prefix"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	objectAttrs["target_group_uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultDeletedVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["prefix"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	objectAttrs["target_group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSVaultMoveVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["action"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["share_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultMoveVaultRecord_shareDuration(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSVaultMoveVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(recurse)}
	objectAttrs["action"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(recurse)}
	objectAttrs["share_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultMoveVaultRecord_shareDuration(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSVaultMoveVaultRecord_shareDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeDSVaultMoveVaultRecord_shareDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}

func objectAttrsTypeRSVaultVault(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["access_available"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["records"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSVaultVault(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["access_available"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["records"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["derived"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["filename"] = types.StringType
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["warning_period"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["derived"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["filename"] = types.StringType
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["warning_period"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecord(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordSecrets(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["comment"] = types.StringType
	objectAttrs["file"] = types.StringType
	objectAttrs["password"] = types.StringType
	objectAttrs["totp"] = types.StringType
	objectAttrs["write_totp"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordSecrets(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["comment"] = types.StringType
	objectAttrs["file"] = types.StringType
	objectAttrs["password"] = types.StringType
	objectAttrs["totp"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordShare(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["vault_vault_record_share_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordShare(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["vault_vault_record_share_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecordShareSummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["children"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecordShare(recurse)}}
	objectAttrs["parent"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecordShare(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecordShareSummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["children"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordShare(recurse)}}
	objectAttrs["parent"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordShare(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	objectAttrs["delete_tile"] = types.BoolType
	objectAttrs["parent_uuid"] = types.StringType
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecordSecrets(recurse)}
	objectAttrs["share_summary"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecordShareSummary(recurse)}
	objectAttrs["shares"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultRecordPrimerLinkableWrapper(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLaunchpadVaultRecordLaunchpadTile(recurse)}
	objectAttrs["vaultholder"] = types.ObjectType{AttrTypes: objectAttrsTypeRSVaultVaultHolder(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	objectAttrs["parent"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimer(recurse)}
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordSecrets(recurse)}
	objectAttrs["share_summary"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordShareSummary(recurse)}
	objectAttrs["shares"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultRecordPrimerLinkableWrapper(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLaunchpadVaultRecordLaunchpadTile(recurse)}
	objectAttrs["vaultholder"] = types.ObjectType{AttrTypes: objectAttrsTypeDSVaultVaultHolder(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(recurse)}
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultUnlock(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultUnlock(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSVaultVaultUnlockResponse(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["expires_at"] = types.StringType
	objectAttrs["session_password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSVaultVaultUnlockResponse(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["expires_at"] = types.StringType
	objectAttrs["session_password"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhook(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhook_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["active"] = types.BoolType
	objectAttrs["all_types"] = types.BoolType
	objectAttrs["authentication_scheme"] = types.StringType
	objectAttrs["basic_auth_password"] = types.StringType
	objectAttrs["basic_auth_username"] = types.StringType
	objectAttrs["bearer_token"] = types.StringType
	objectAttrs["client_uuid"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["custom_header_name"] = types.StringType
	objectAttrs["custom_header_value"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["verbose_payloads"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhook(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhook_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuthAccountPrimer(false)}
	objectAttrs["active"] = types.BoolType
	objectAttrs["all_types"] = types.BoolType
	objectAttrs["authentication_scheme"] = types.StringType
	objectAttrs["basic_auth_password"] = types.StringType
	objectAttrs["basic_auth_username"] = types.StringType
	objectAttrs["bearer_token"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSClientClientApplicationPrimer(false)}
	objectAttrs["client_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["custom_header_name"] = types.StringType
	objectAttrs["custom_header_value"] = types.StringType
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSDirectoryAccountDirectoryPrimer(false)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSGroupGroupPrimer(false)}
	objectAttrs["name"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSProvisioningProvisionedSystemPrimer(false)}
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSCertificateCertificatePrimer(false)}
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["verbose_payloads"] = types.BoolType
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookDelivery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookDelivery_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSAuthPermission(recurse)}}
	objectAttrs["payload"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookPush(false)}
	objectAttrs["reponse_headers"] = types.StringType
	objectAttrs["request_headers"] = types.StringType
	objectAttrs["response"] = types.StringType
	objectAttrs["status"] = types.Int64Type
	objectAttrs["time"] = types.Int64Type
	objectAttrs["trigger_time"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookDelivery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookDelivery_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSAuthPermission(recurse)}}
	objectAttrs["payload"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookPush(false)}
	objectAttrs["reponse_headers"] = types.StringType
	objectAttrs["request_headers"] = types.StringType
	objectAttrs["response"] = types.StringType
	objectAttrs["status"] = types.Int64Type
	objectAttrs["time"] = types.Int64Type
	objectAttrs["trigger_time"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookDelivery(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookDelivery(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhook(recurse)}}
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhook(recurse)}}
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookNameUuid(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["object"] = types.ObjectType{AttrTypes: objectAttrsTypeRSLinkable(recurse)}
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookNameUuid(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["object"] = types.ObjectType{AttrTypes: objectAttrsTypeDSLinkable(recurse)}
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhookPush(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["by_party"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group2"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group_classification"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["modification_request"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	objectAttrs["seq"] = types.Int64Type
	objectAttrs["service_account"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["timestamp"] = types.StringType
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["webhook"] = types.ObjectType{AttrTypes: objectAttrsTypeRSWebhookWebhookNameUuid(recurse)}
	objectAttrs["webhook_webhook_push_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhookPush(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["by_party"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group2"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["group_classification"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["modification_request"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["organizational_unit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	objectAttrs["seq"] = types.Int64Type
	objectAttrs["service_account"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["timestamp"] = types.StringType
	objectAttrs["vault_record"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["webhook"] = types.ObjectType{AttrTypes: objectAttrsTypeDSWebhookWebhookNameUuid(recurse)}
	objectAttrs["webhook_webhook_push_type"] = types.StringType
	return objectAttrs
}

func objectAttrsTypeRSWebhookWebhook_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeRSAuditInfo(recurse)}
	return objectAttrs
}

func objectAttrsTypeDSWebhookWebhook_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeDSAuditInfo(recurse)}
	return objectAttrs
}

func tkhToTFObjectRSAuditInfo(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditInfoAttrTypesRSRecurse
	} else {
		attrs = auditInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditInfo(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditInfoAttrTypesDSRecurse
	} else {
		attrs = auditInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSErrorReport(recurse bool, tkh keyhubmodel.ErrorReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReportAttrTypesRSRecurse
	} else {
		attrs = errorReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["application_error"] = types.StringPointerValue(tkh.GetApplicationError())
	{
		val, d := tkhToTFObjectRSErrorReport_applicationErrorParameters(recurse, tkh.GetApplicationErrorParameters())
		diags.Append(d...)
		obj["application_error_parameters"] = val
	}
	obj["code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetCode()))
	{
		elemType := attrs["error_details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetErrorDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["error_details"] = val
	}
	obj["exception"] = types.StringPointerValue(tkh.GetException())
	obj["message"] = types.StringPointerValue(tkh.GetMessage())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	{
		elemType := attrs["stacktrace"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStacktrace(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["stacktrace"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSErrorReport(recurse bool, tkh keyhubmodel.ErrorReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReportAttrTypesDSRecurse
	} else {
		attrs = errorReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["application_error"] = types.StringPointerValue(tkh.GetApplicationError())
	{
		val, d := tkhToTFObjectDSErrorReport_applicationErrorParameters(recurse, tkh.GetApplicationErrorParameters())
		diags.Append(d...)
		obj["application_error_parameters"] = val
	}
	obj["code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetCode()))
	{
		elemType := attrs["error_details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetErrorDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["error_details"] = val
	}
	obj["exception"] = types.StringPointerValue(tkh.GetException())
	obj["message"] = types.StringPointerValue(tkh.GetMessage())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	{
		elemType := attrs["stacktrace"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStacktrace(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["stacktrace"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSErrorReport_applicationErrorParameters(recurse bool, tkh keyhubmodel.ErrorReport_applicationErrorParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReport_applicationErrorParametersAttrTypesRSRecurse
	} else {
		attrs = errorReport_applicationErrorParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSErrorReport_applicationErrorParameters(recurse bool, tkh keyhubmodel.ErrorReport_applicationErrorParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReport_applicationErrorParametersAttrTypesDSRecurse
	} else {
		attrs = errorReport_applicationErrorParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesRSRecurse
	} else {
		attrs = generatedSecretAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesDSRecurse
	} else {
		attrs = generatedSecretAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesRSRecurse
	} else {
		attrs = linkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesDSRecurse
	} else {
		attrs = linkableAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesRSRecurse
	} else {
		attrs = nonLinkableAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesDSRecurse
	} else {
		attrs = nonLinkableAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesRSRecurse
	} else {
		attrs = restLinkAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesDSRecurse
	} else {
		attrs = restLinkAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSegmentCount(recurse bool, tkh keyhubmodel.SegmentCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = segmentCountAttrTypesRSRecurse
	} else {
		attrs = segmentCountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSegmentCount(recurse bool, tkh keyhubmodel.SegmentCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = segmentCountAttrTypesDSRecurse
	} else {
		attrs = segmentCountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecord(recurse bool, tkh keyhubmodel.AuditAuditRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSAuditAuditRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["audit_audit_record_type"] = stringerToTF(tkh.GetAuditAuditRecordType())
	obj["date_time"] = timePointerToTF(tkh.GetDateTime())
	obj["on_account"] = types.StringPointerValue(tkh.GetOnAccount())
	obj["on_certificate"] = types.StringPointerValue(tkh.GetOnCertificate())
	obj["on_client"] = types.StringPointerValue(tkh.GetOnClient())
	obj["on_directory"] = types.StringPointerValue(tkh.GetOnDirectory())
	obj["on_group"] = types.StringPointerValue(tkh.GetOnGroup())
	obj["on_group2"] = types.StringPointerValue(tkh.GetOnGroup2())
	obj["on_group_classification"] = types.StringPointerValue(tkh.GetOnGroupClassification())
	obj["on_organizational_unit"] = types.StringPointerValue(tkh.GetOnOrganizationalUnit())
	obj["on_service_account"] = types.StringPointerValue(tkh.GetOnServiceAccount())
	obj["on_system"] = types.StringPointerValue(tkh.GetOnSystem())
	obj["on_vault_record"] = types.StringPointerValue(tkh.GetOnVaultRecord())
	obj["on_webhook"] = types.StringPointerValue(tkh.GetOnWebhook())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["performed_by"] = types.StringPointerValue(tkh.GetPerformedBy())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecord(recurse bool, tkh keyhubmodel.AuditAuditRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuditAuditRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["audit_audit_record_type"] = stringerToTF(tkh.GetAuditAuditRecordType())
	obj["date_time"] = timePointerToTF(tkh.GetDateTime())
	obj["on_account"] = types.StringPointerValue(tkh.GetOnAccount())
	obj["on_certificate"] = types.StringPointerValue(tkh.GetOnCertificate())
	obj["on_client"] = types.StringPointerValue(tkh.GetOnClient())
	obj["on_directory"] = types.StringPointerValue(tkh.GetOnDirectory())
	obj["on_group"] = types.StringPointerValue(tkh.GetOnGroup())
	obj["on_group2"] = types.StringPointerValue(tkh.GetOnGroup2())
	obj["on_group_classification"] = types.StringPointerValue(tkh.GetOnGroupClassification())
	obj["on_organizational_unit"] = types.StringPointerValue(tkh.GetOnOrganizationalUnit())
	obj["on_service_account"] = types.StringPointerValue(tkh.GetOnServiceAccount())
	obj["on_system"] = types.StringPointerValue(tkh.GetOnSystem())
	obj["on_vault_record"] = types.StringPointerValue(tkh.GetOnVaultRecord())
	obj["on_webhook"] = types.StringPointerValue(tkh.GetOnWebhook())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["performed_by"] = types.StringPointerValue(tkh.GetPerformedBy())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecordLinkableWrapper(recurse bool, tkh keyhubmodel.AuditAuditRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecordLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditAuditRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuditAuditRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecordLinkableWrapper(recurse bool, tkh keyhubmodel.AuditAuditRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecordLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditAuditRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuditAuditRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuditAuditRecord_additionalObjects(recurse bool, tkh keyhubmodel.AuditAuditRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecord_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = auditAuditRecord_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecord_additionalObjects(recurse bool, tkh keyhubmodel.AuditAuditRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecord_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecord_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccount(recurse bool, tkh keyhubmodel.AuthAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountAttrTypesRSRecurse
	} else {
		attrs = authAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccount(recurse bool, tkh keyhubmodel.AuthAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountAttrTypesDSRecurse
	} else {
		attrs = authAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountBulkUpdate(recurse bool, tkh keyhubmodel.AuthAccountBulkUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountBulkUpdateAttrTypesRSRecurse
	} else {
		attrs = authAccountBulkUpdateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["exclusive_selection"] = types.BoolPointerValue(tkh.GetExclusiveSelection())
	{
		elemType := attrs["selected_accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSelectedAccounts(), func(tkh int64, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(tkh)
		})
		diags.Append(d...)
		obj["selected_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountBulkUpdate(recurse bool, tkh keyhubmodel.AuthAccountBulkUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountBulkUpdateAttrTypesDSRecurse
	} else {
		attrs = authAccountBulkUpdateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["exclusive_selection"] = types.BoolPointerValue(tkh.GetExclusiveSelection())
	{
		elemType := attrs["selected_accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSelectedAccounts(), func(tkh int64, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(tkh)
		})
		diags.Append(d...)
		obj["selected_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountChangeLocale(recurse bool, tkh keyhubmodel.AuthAccountChangeLocaleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountChangeLocaleAttrTypesRSRecurse
	} else {
		attrs = authAccountChangeLocaleAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountChangeLocale(recurse bool, tkh keyhubmodel.AuthAccountChangeLocaleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountChangeLocaleAttrTypesDSRecurse
	} else {
		attrs = authAccountChangeLocaleAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = authAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = authAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = authAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesDSRecurse
	} else {
		attrs = authAccountPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountRecoveryStatus(recurse bool, tkh keyhubmodel.AuthAccountRecoveryStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountRecoveryStatusAttrTypesRSRecurse
	} else {
		attrs = authAccountRecoveryStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["pending2_f_a_recovery_request"] = types.BoolPointerValue(tkh.GetPending2FARecoveryRequest())
	obj["pending_password_recovery_request"] = types.BoolPointerValue(tkh.GetPendingPasswordRecoveryRequest())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountRecoveryStatus(recurse bool, tkh keyhubmodel.AuthAccountRecoveryStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountRecoveryStatusAttrTypesDSRecurse
	} else {
		attrs = authAccountRecoveryStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["pending2_f_a_recovery_request"] = types.BoolPointerValue(tkh.GetPending2FARecoveryRequest())
	obj["pending_password_recovery_request"] = types.BoolPointerValue(tkh.GetPendingPasswordRecoveryRequest())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountSettings(recurse bool, tkh keyhubmodel.AuthAccountSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountSettingsAttrTypesRSRecurse
	} else {
		attrs = authAccountSettingsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["default_organizational_unit_uuid"] = withUuidToTF(tkh.GetDefaultOrganizationalUnit())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["in_groups"] = types.BoolPointerValue(tkh.GetInGroups())
	obj["in_multiple_organizational_units"] = types.BoolPointerValue(tkh.GetInMultipleOrganizationalUnits())
	obj["key_hub_admin"] = types.BoolPointerValue(tkh.GetKeyHubAdmin())
	obj["multiple_organizational_units_exist"] = types.BoolPointerValue(tkh.GetMultipleOrganizationalUnitsExist())
	obj["password_mode"] = stringerToTF(tkh.GetPasswordMode())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["two_factor_authentication"] = stringerToTF(tkh.GetTwoFactorAuthentication())
	obj["use_token_password"] = types.BoolPointerValue(tkh.GetUseTokenPassword())
	obj["vault_status"] = stringerToTF(tkh.GetVaultStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountSettings(recurse bool, tkh keyhubmodel.AuthAccountSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountSettingsAttrTypesDSRecurse
	} else {
		attrs = authAccountSettingsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetDefaultOrganizationalUnit())
		diags.Append(d...)
		obj["default_organizational_unit"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["in_groups"] = types.BoolPointerValue(tkh.GetInGroups())
	obj["in_multiple_organizational_units"] = types.BoolPointerValue(tkh.GetInMultipleOrganizationalUnits())
	obj["key_hub_admin"] = types.BoolPointerValue(tkh.GetKeyHubAdmin())
	obj["multiple_organizational_units_exist"] = types.BoolPointerValue(tkh.GetMultipleOrganizationalUnitsExist())
	obj["password_mode"] = stringerToTF(tkh.GetPasswordMode())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["two_factor_authentication"] = stringerToTF(tkh.GetTwoFactorAuthentication())
	obj["use_token_password"] = types.BoolPointerValue(tkh.GetUseTokenPassword())
	obj["vault_status"] = stringerToTF(tkh.GetVaultStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountStatus(recurse bool, tkh keyhubmodel.AuthAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountStatusAttrTypesRSRecurse
	} else {
		attrs = authAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["decline_recovery_requests"] = types.BoolPointerValue(tkh.GetDeclineRecoveryRequests())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["two_factor_authentication_enabled"] = types.BoolPointerValue(tkh.GetTwoFactorAuthenticationEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountStatus(recurse bool, tkh keyhubmodel.AuthAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountStatusAttrTypesDSRecurse
	} else {
		attrs = authAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["decline_recovery_requests"] = types.BoolPointerValue(tkh.GetDeclineRecoveryRequests())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["two_factor_authentication_enabled"] = types.BoolPointerValue(tkh.GetTwoFactorAuthenticationEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = authAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_login"] = types.BoolPointerValue(tkh.GetActiveLogin())
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountRecoveryStatus(recurse, tkh.GetPendingRecoveryRequests())
		diags.Append(d...)
		obj["pending_recovery_requests"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountSettings(recurse, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthStoredAccountAttributes(recurse, tkh.GetStoredAttributes())
		diags.Append(d...)
		obj["stored_attributes"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = authAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_login"] = types.BoolPointerValue(tkh.GetActiveLogin())
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountRecoveryStatus(recurse, tkh.GetPendingRecoveryRequests())
		diags.Append(d...)
		obj["pending_recovery_requests"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountSettings(recurse, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthStoredAccountAttributes(recurse, tkh.GetStoredAttributes())
		diags.Append(d...)
		obj["stored_attributes"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_directoryStats(recurse, tkh.GetDirectoryStats())
		diags.Append(d...)
		obj["directory_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_twoFAStats(recurse, tkh.GetTwoFAStats())
		diags.Append(d...)
		obj["two_f_a_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSAuthAccountsAuditStats_validityStats(recurse, tkh.GetValidityStats())
		diags.Append(d...)
		obj["validity_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_directoryStats(recurse, tkh.GetDirectoryStats())
		diags.Append(d...)
		obj["directory_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_twoFAStats(recurse, tkh.GetTwoFAStats())
		diags.Append(d...)
		obj["two_f_a_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_validityStats(recurse, tkh.GetValidityStats())
		diags.Append(d...)
		obj["validity_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_directoryStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_directoryStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_twoFAStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_twoFAStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthAccountsAuditStats_validityStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_validityStatsAttrTypesRSRecurse
	} else {
		attrs = authAccountsAuditStats_validityStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_validityStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_validityStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_validityStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uuid"] = withUuidToTF(tkh)
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = timePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = timePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthInternalAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthInternalAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthInternalAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthInternalAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthInternalAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthInternalAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthInternalAccountStatusObject(recurse bool, tkh keyhubmodel.AuthInternalAccountStatusObjectable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountStatusObjectAttrTypesRSRecurse
	} else {
		attrs = authInternalAccountStatusObjectAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccountStatusObject(recurse bool, tkh keyhubmodel.AuthInternalAccountStatusObjectable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountStatusObjectAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountStatusObjectAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthMoveInternalAccount(recurse bool, tkh keyhubmodel.AuthMoveInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authMoveInternalAccountAttrTypesRSRecurse
	} else {
		attrs = authMoveInternalAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSDirectoryInternalDirectory(recurse, tkh.GetInternalDirectory())
		diags.Append(d...)
		obj["internal_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthMoveInternalAccount(recurse bool, tkh keyhubmodel.AuthMoveInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authMoveInternalAccountAttrTypesDSRecurse
	} else {
		attrs = authMoveInternalAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSDirectoryInternalDirectory(recurse, tkh.GetInternalDirectory())
		diags.Append(d...)
		obj["internal_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesRSRecurse
	} else {
		attrs = authPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesDSRecurse
	} else {
		attrs = authPermissionAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthStoredAccountAttribute(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributeable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributeAttrTypesRSRecurse
	} else {
		attrs = authStoredAccountAttributeAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthStoredAccountAttribute(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributeable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributeAttrTypesDSRecurse
	} else {
		attrs = authStoredAccountAttributeAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSAuthStoredAccountAttributes(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributesAttrTypesRSRecurse
	} else {
		attrs = authStoredAccountAttributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.AuthStoredAccountAttributeable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthStoredAccountAttribute(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthStoredAccountAttributes(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributesAttrTypesDSRecurse
	} else {
		attrs = authStoredAccountAttributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.AuthStoredAccountAttributeable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthStoredAccountAttribute(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificate(recurse bool, tkh keyhubmodel.CertificateCertificateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateAttrTypesRSRecurse
	} else {
		attrs = certificateCertificateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSCertificateCertificate_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		elemType := attrs["key_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetKeyData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["key_data"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificate(recurse bool, tkh keyhubmodel.CertificateCertificateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateAttrTypesDSRecurse
	} else {
		attrs = certificateCertificateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSCertificateCertificate_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		elemType := attrs["key_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetKeyData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["key_data"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificateLinkableWrapper(recurse bool, tkh keyhubmodel.CertificateCertificateLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = certificateCertificateLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.CertificateCertificateable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSCertificateCertificate(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificateLinkableWrapper(recurse bool, tkh keyhubmodel.CertificateCertificateLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = certificateCertificateLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.CertificateCertificateable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSCertificateCertificate(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesRSRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesDSRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSCertificateCertificate_additionalObjects(recurse bool, tkh keyhubmodel.CertificateCertificate_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificate_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = certificateCertificate_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificate_additionalObjects(recurse bool, tkh keyhubmodel.CertificateCertificate_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificate_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = certificateCertificate_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientClientApplication(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientClientApplication(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesRSRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadSsoApplicationLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesRSRecurse
	} else {
		attrs = clientLdapClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = withUuidToTF(tkh.GetSharedSecret())
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesDSRecurse
	} else {
		attrs = clientLdapClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_u_r_i"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["confidential"] = types.BoolPointerValue(tkh.GetConfidential())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_u_r_i"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["resource_u_r_is"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = withUuidToTF(tkh.GetSharedSecret())
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_u_r_i"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["confidential"] = types.BoolPointerValue(tkh.GetConfidential())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_u_r_i"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["resource_u_r_is"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = withUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = withUuidToTF(tkh.GetForSystem())
	obj["value"] = stringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectRSClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectDSClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientOAuth2Client_attributes(recurse bool, tkh keyhubmodel.ClientOAuth2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2Client_attributesAttrTypesRSRecurse
	} else {
		attrs = clientOAuth2Client_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2Client_attributes(recurse bool, tkh keyhubmodel.ClientOAuth2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2Client_attributesAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2Client_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesRSRecurse
	} else {
		attrs = clientSaml2ClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	{
		val, d := tkhToTFObjectRSClientSaml2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesDSRecurse
	} else {
		attrs = clientSaml2ClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	{
		val, d := tkhToTFObjectDSClientSaml2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSClientSaml2Client_attributes(recurse bool, tkh keyhubmodel.ClientSaml2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2Client_attributesAttrTypesRSRecurse
	} else {
		attrs = clientSaml2Client_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientSaml2Client_attributes(recurse bool, tkh keyhubmodel.ClientSaml2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2Client_attributesAttrTypesDSRecurse
	} else {
		attrs = clientSaml2Client_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectory(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectory(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSDirectoryAccountDirectory(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSDirectoryAccountDirectory(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryPrimer(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryPrimer(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectorySummary(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["directory_account_directory_summary_type"] = stringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectorySummary(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["directory_account_directory_summary_type"] = stringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSDirectoryAccountDirectorySummary(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSDirectoryAccountDirectorySummary(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryInternalDirectory(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryInternalDirectory(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryLDAPDirectory(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["dialect"] = stringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = stringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["search_bind_d_n"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryLDAPDirectory(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["dialect"] = stringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = stringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["search_bind_d_n"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryMaintenanceDirectory(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryMaintenanceDirectory(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSDirectoryOIDCDirectory(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesRSRecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = withUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = withUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryOIDCDirectory(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupAccountGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupAuthorizedGroupsWrapper(recurse bool, tkh keyhubmodel.GroupAuthorizedGroupsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAuthorizedGroupsWrapperAttrTypesRSRecurse
	} else {
		attrs = groupAuthorizedGroupsWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["group_count"] = types.Int64PointerValue(tkh.GetGroupCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAuthorizedGroupsWrapper(recurse bool, tkh keyhubmodel.GroupAuthorizedGroupsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAuthorizedGroupsWrapperAttrTypesDSRecurse
	} else {
		attrs = groupAuthorizedGroupsWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["group_count"] = types.Int64PointerValue(tkh.GetGroupCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesRSRecurse
	} else {
		attrs = groupGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectRSGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["auditor"] = types.BoolPointerValue(tkh.GetAuditor())
	obj["authorizing_group_auditing_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupAuditing())
	obj["authorizing_group_delegation_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupDelegation())
	obj["authorizing_group_membership_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupMembership())
	obj["authorizing_group_provisioning_uuid"] = withUuidToTF(tkh.GetAuthorizingGroupProvisioning())
	{
		elemType := attrs["authorizing_group_types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	obj["classification_uuid"] = withUuidToTF(tkh.GetClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	obj["nested_under_uuid"] = withUuidToTF(tkh.GetNestedUnder())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesDSRecurse
	} else {
		attrs = groupGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectDSGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["auditor"] = types.BoolPointerValue(tkh.GetAuditor())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupAuditing())
		diags.Append(d...)
		obj["authorizing_group_auditing"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupDelegation())
		diags.Append(d...)
		obj["authorizing_group_delegation"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupMembership())
		diags.Append(d...)
		obj["authorizing_group_membership"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupProvisioning())
		diags.Append(d...)
		obj["authorizing_group_provisioning"] = val
	}
	{
		elemType := attrs["authorizing_group_types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationPrimer(false, tkh.GetClassification())
		diags.Append(d...)
		obj["classification"] = val
	}
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetNestedUnder())
		diags.Append(d...)
		obj["nested_under"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountNesting(recurse bool, tkh keyhubmodel.GroupGroupAccountNestingable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountNestingAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountNestingAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["connected"] = types.BoolPointerValue(tkh.GetConnected())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountNesting(recurse bool, tkh keyhubmodel.GroupGroupAccountNestingable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountNestingAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountNestingAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["connected"] = types.BoolPointerValue(tkh.GetConnected())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccountStatus(recurse bool, tkh keyhubmodel.GroupGroupAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountStatusAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountStatus(recurse bool, tkh keyhubmodel.GroupGroupAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountStatusAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAdminMail(recurse bool, tkh keyhubmodel.GroupGroupAdminMailable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAdminMailAttrTypesRSRecurse
	} else {
		attrs = groupGroupAdminMailAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["body"] = types.StringPointerValue(tkh.GetBody())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAdminMail(recurse bool, tkh keyhubmodel.GroupGroupAdminMailable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAdminMailAttrTypesDSRecurse
	} else {
		attrs = groupGroupAdminMailAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["body"] = types.StringPointerValue(tkh.GetBody())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditAccount(recurse bool, tkh keyhubmodel.GroupGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAccountAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditAccount(recurse bool, tkh keyhubmodel.GroupGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAccountAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupAudit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAudit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAudit_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAudit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupAudit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAudit_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAudit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupAudit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupAuditingInfo(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = stringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = stringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditingInfo(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = stringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = stringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassification(recurse bool, tkh keyhubmodel.GroupGroupClassificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupClassification_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["authorizing_group_auditing_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupAuditingRequired())
	obj["authorizing_group_delegation_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupDelegationRequired())
	obj["authorizing_group_membership_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupMembershipRequired())
	obj["authorizing_group_provisioning_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupProvisioningRequired())
	obj["default_classification"] = types.BoolPointerValue(tkh.GetDefaultClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["maximum_audit_interval"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMaximumAuditInterval()))
	obj["minimum_nr_managers"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMinimumNrManagers()))
	obj["record_trail_required"] = types.BoolPointerValue(tkh.GetRecordTrailRequired())
	{
		elemType := attrs["required_months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRequiredMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["required_months"] = val
	}
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassification(recurse bool, tkh keyhubmodel.GroupGroupClassificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupClassification_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["authorizing_group_auditing_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupAuditingRequired())
	obj["authorizing_group_delegation_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupDelegationRequired())
	obj["authorizing_group_membership_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupMembershipRequired())
	obj["authorizing_group_provisioning_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupProvisioningRequired())
	obj["default_classification"] = types.BoolPointerValue(tkh.GetDefaultClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["maximum_audit_interval"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMaximumAuditInterval()))
	obj["minimum_nr_managers"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMinimumNrManagers()))
	obj["record_trail_required"] = types.BoolPointerValue(tkh.GetRecordTrailRequired())
	{
		elemType := attrs["required_months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRequiredMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["required_months"] = val
	}
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationInfo(recurse bool, tkh keyhubmodel.GroupGroupClassificationInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_groups"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrGroups()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationInfo(recurse bool, tkh keyhubmodel.GroupGroupClassificationInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_groups"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrGroups()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassificationUpdate(recurse bool, tkh keyhubmodel.GroupGroupClassificationUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationUpdateAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassificationUpdateAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["classificaton_uuid"] = withUuidToTF(tkh.GetClassificaton())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationUpdate(recurse bool, tkh keyhubmodel.GroupGroupClassificationUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationUpdateAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationUpdateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationPrimer(recurse, tkh.GetClassificaton())
		diags.Append(d...)
		obj["classificaton"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClassification_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClassification_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassification_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupClassification_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupClassificationInfo(recurse, tkh.GetInfo())
		diags.Append(d...)
		obj["info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassification_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClassification_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassification_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassification_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationInfo(recurse, tkh.GetInfo())
		diags.Append(d...)
		obj["info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["client_uuid"] = withUuidToTF(tkh.GetClient())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesDSRecurse
	} else {
		attrs = groupGroupClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolder(recurse bool, tkh keyhubmodel.GroupGroupFolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupGroupFolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolder(recurse bool, tkh keyhubmodel.GroupGroupFolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupFolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolderLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupFolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolderLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupFolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolderLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupFolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolderLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupFolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupFolder_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupFolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolder_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroupFolder_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolder_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupFolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolder_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolder_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupInfo(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesRSRecurse
	} else {
		attrs = groupGroupInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupInfo(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesRSRecurse
	} else {
		attrs = groupGroupPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesDSRecurse
	} else {
		attrs = groupGroupPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupSegmentedLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	{
		elemType := attrs["segments"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSegments(), func(tkh keyhubmodel.SegmentCountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSSegmentCount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["segments"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupSegmentedLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	{
		elemType := attrs["segments"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSegments(), func(tkh keyhubmodel.SegmentCountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSSegmentCount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["segments"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = val
	}
	{
		val, d := tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupAuthorizedGroupsWrapper(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupClientLinkableWrapper(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAuditingInfo(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupInfo(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectorySummaryLinkableWrapper(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAccount(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupPrimerLinkableWrapper(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	{
		val, d := tkhToTFObjectRSClientClientApplicationLinkableWrapper(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryAccountDirectoryLinkableWrapper(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningOwnedGroupOnSystemsWrapper(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectRSOrganizationOrganizationalUnitLinkableWrapper(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroupAuditLinkableWrapper(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = val
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookLinkableWrapper(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupAuthorizedGroupsWrapper(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAuditingInfo(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupInfo(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimerLinkableWrapper(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryLinkableWrapper(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningOwnedGroupOnSystemsWrapper(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitLinkableWrapper(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAuditLinkableWrapper(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = val
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookLinkableWrapper(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupGroupsAuditStats(recurse bool, tkh keyhubmodel.GroupGroupsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = groupGroupsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audited_groups"] = types.Int64PointerValue(tkh.GetAuditedGroups())
	{
		elemType := attrs["classifications"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetClassifications(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["classifications"] = val
	}
	obj["overdue_audit_groups"] = types.Int64PointerValue(tkh.GetOverdueAuditGroups())
	obj["overdue_vault_policies"] = types.Int64PointerValue(tkh.GetOverdueVaultPolicies())
	obj["unaudited_groups"] = types.Int64PointerValue(tkh.GetUnauditedGroups())
	obj["valid_vault_policies"] = types.Int64PointerValue(tkh.GetValidVaultPolicies())
	obj["vaults_without_policies"] = types.Int64PointerValue(tkh.GetVaultsWithoutPolicies())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupsAuditStats(recurse bool, tkh keyhubmodel.GroupGroupsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = groupGroupsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audited_groups"] = types.Int64PointerValue(tkh.GetAuditedGroups())
	{
		elemType := attrs["classifications"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetClassifications(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["classifications"] = val
	}
	obj["overdue_audit_groups"] = types.Int64PointerValue(tkh.GetOverdueAuditGroups())
	obj["overdue_vault_policies"] = types.Int64PointerValue(tkh.GetOverdueVaultPolicies())
	obj["unaudited_groups"] = types.Int64PointerValue(tkh.GetUnauditedGroups())
	obj["valid_vault_policies"] = types.Int64PointerValue(tkh.GetValidVaultPolicies())
	obj["vaults_without_policies"] = types.Int64PointerValue(tkh.GetVaultsWithoutPolicies())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSGroupProvisioningGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupProvisioningGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadDisplayedLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadLaunchpadTilePrimer(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadDisplayedLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadLaunchpadTilePrimer(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadDisplayedLaunchpadTiles(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesRSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSLaunchpadDisplayedLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadDisplayedLaunchpadTiles(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesDSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSLaunchpadDisplayedLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTileLinkableWrapper(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTileLinkableWrapper(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTilePrimer(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTilePrimerAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTilePrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTilePrimer(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTilePrimerAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTilePrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadManualLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadManualLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadManualLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadManualLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadManualLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadManualLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadManualLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadManualLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRSRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = withUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSLicenseKeyHubLicenseInfo(recurse bool, tkh keyhubmodel.LicenseKeyHubLicenseInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = licenseKeyHubLicenseInfoAttrTypesRSRecurse
	} else {
		attrs = licenseKeyHubLicenseInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["current_license_status"] = stringerToTF(tkh.GetCurrentLicenseStatus())
	obj["customer_company"] = types.StringPointerValue(tkh.GetCustomerCompany())
	obj["customer_contact"] = types.StringPointerValue(tkh.GetCustomerContact())
	{
		elemType := attrs["customer_domains"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCustomerDomains(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["customer_domains"] = val
	}
	{
		elemType := attrs["details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["details"] = val
	}
	obj["expiration_time"] = timePointerToTF(tkh.GetExpirationTime())
	{
		elemType := attrs["features"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetFeatures(), func(tkh keyhubmodel.LicenseLicenseFeature, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["features"] = val
	}
	obj["issue_time"] = timePointerToTF(tkh.GetIssueTime())
	obj["key_hub_domain"] = types.StringPointerValue(tkh.GetKeyHubDomain())
	obj["license_key"] = types.StringPointerValue(tkh.GetLicenseKey())
	obj["not_before_time"] = timePointerToTF(tkh.GetNotBeforeTime())
	obj["users_hard_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersHardLimit()))
	obj["users_pro_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersProLimit()))
	obj["users_soft_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersSoftLimit()))
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVersion()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLicenseKeyHubLicenseInfo(recurse bool, tkh keyhubmodel.LicenseKeyHubLicenseInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = licenseKeyHubLicenseInfoAttrTypesDSRecurse
	} else {
		attrs = licenseKeyHubLicenseInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["current_license_status"] = stringerToTF(tkh.GetCurrentLicenseStatus())
	obj["customer_company"] = types.StringPointerValue(tkh.GetCustomerCompany())
	obj["customer_contact"] = types.StringPointerValue(tkh.GetCustomerContact())
	{
		elemType := attrs["customer_domains"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCustomerDomains(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["customer_domains"] = val
	}
	{
		elemType := attrs["details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["details"] = val
	}
	obj["expiration_time"] = timePointerToTF(tkh.GetExpirationTime())
	{
		elemType := attrs["features"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetFeatures(), func(tkh keyhubmodel.LicenseLicenseFeature, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["features"] = val
	}
	obj["issue_time"] = timePointerToTF(tkh.GetIssueTime())
	obj["key_hub_domain"] = types.StringPointerValue(tkh.GetKeyHubDomain())
	obj["license_key"] = types.StringPointerValue(tkh.GetLicenseKey())
	obj["not_before_time"] = timePointerToTF(tkh.GetNotBeforeTime())
	obj["users_hard_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersHardLimit()))
	obj["users_pro_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersProLimit()))
	obj["users_soft_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersSoftLimit()))
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVersion()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarker(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesRSRecurse
	} else {
		attrs = markItemMarkerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = stringerToTF(tkh.GetLevel())
	obj["mark_item_marker_type"] = stringerToTF(tkh.GetMarkItemMarkerType())
	{
		val, d := tkhToTFObjectRSMarkItemMarker_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarker(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesDSRecurse
	} else {
		attrs = markItemMarkerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = stringerToTF(tkh.GetLevel())
	obj["mark_item_marker_type"] = stringerToTF(tkh.GetMarkItemMarkerType())
	{
		val, d := tkhToTFObjectDSMarkItemMarker_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarker_parameters(recurse bool, tkh keyhubmodel.MarkItemMarker_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarker_parametersAttrTypesRSRecurse
	} else {
		attrs = markItemMarker_parametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarker_parameters(recurse bool, tkh keyhubmodel.MarkItemMarker_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarker_parametersAttrTypesDSRecurse
	} else {
		attrs = markItemMarker_parametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSMarkItemMarkers(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesRSRecurse
	} else {
		attrs = markItemMarkersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSMarkItemMarker(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarkers(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesDSRecurse
	} else {
		attrs = markItemMarkersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSMarkItemMarker(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationCertificateExpiredNotification(recurse bool, tkh keyhubmodel.NotificationCertificateExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationCertificateExpiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationCertificateExpiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSCertificateCertificate(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectRSDirectoryLDAPDirectory(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	{
		val, d := tkhToTFObjectRSClientLdapClient(recurse, tkh.GetLdapClient())
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystem(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["usage"] = stringerToTF(tkh.GetUsage())
	{
		val, d := tkhToTFObjectRSWebhookWebhook(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationCertificateExpiredNotification(recurse bool, tkh keyhubmodel.NotificationCertificateExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationCertificateExpiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationCertificateExpiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSCertificateCertificate(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryLDAPDirectory(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	{
		val, d := tkhToTFObjectDSClientLdapClient(recurse, tkh.GetLdapClient())
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystem(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["usage"] = stringerToTF(tkh.GetUsage())
	{
		val, d := tkhToTFObjectDSWebhookWebhook(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupAuditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["due_date"] = timePointerToTF(tkh.GetDueDate())
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["notification_group_audit_required_notification_type"] = stringerToTF(tkh.GetNotificationGroupAuditRequiredNotificationType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupAuditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["due_date"] = timePointerToTF(tkh.GetDueDate())
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["notification_group_audit_required_notification_type"] = stringerToTF(tkh.GetNotificationGroupAuditRequiredNotificationType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupEditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSNotificationGroupEditRequiredNotification_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}
	obj["reason"] = stringerToTF(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupEditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSNotificationGroupEditRequiredNotification_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}
	obj["reason"] = stringerToTF(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationGroupEditRequiredNotification_parameters(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesRSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupEditRequiredNotification_parameters(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesDSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationInvalidSignaturesDetectedNotification(recurse bool, tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationInvalidSignaturesDetectedNotification(recurse bool, tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationLicenseStatusNotification(recurse bool, tkh keyhubmodel.NotificationLicenseStatusNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationLicenseStatusNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationLicenseStatusNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetActiveAccounts()))
	{
		val, d := tkhToTFObjectRSLicenseKeyHubLicenseInfo(recurse, tkh.GetLicenseInfo())
		diags.Append(d...)
		obj["license_info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationLicenseStatusNotification(recurse bool, tkh keyhubmodel.NotificationLicenseStatusNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationLicenseStatusNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationLicenseStatusNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetActiveAccounts()))
	{
		val, d := tkhToTFObjectDSLicenseKeyHubLicenseInfo(recurse, tkh.GetLicenseInfo())
		diags.Append(d...)
		obj["license_info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationModificationRequestNotification(recurse bool, tkh keyhubmodel.NotificationModificationRequestNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationModificationRequestNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationModificationRequestNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["admins"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAdmins(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSRequestModificationRequest(recurse, tkh.GetRequest())
		diags.Append(d...)
		obj["request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationModificationRequestNotification(recurse bool, tkh keyhubmodel.NotificationModificationRequestNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationModificationRequestNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationModificationRequestNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["admins"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAdmins(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSRequestModificationRequest(recurse, tkh.GetRequest())
		diags.Append(d...)
		obj["request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationNotification(recurse bool, tkh keyhubmodel.NotificationNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationNotification(recurse bool, tkh keyhubmodel.NotificationNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationNotifications(recurse bool, tkh keyhubmodel.NotificationNotificationsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationsAttrTypesRSRecurse
	} else {
		attrs = notificationNotificationsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.NotificationNotificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSNotificationNotification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationNotifications(recurse bool, tkh keyhubmodel.NotificationNotificationsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationsAttrTypesDSRecurse
	} else {
		attrs = notificationNotificationsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.NotificationNotificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSNotificationNotification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationOldApiVersionUsageNotification(recurse bool, tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["api_version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetApiVersion()))
	{
		val, d := tkhToTFObjectRSClientOAuth2Client(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationOldApiVersionUsageNotification(recurse bool, tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["api_version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetApiVersion()))
	{
		val, d := tkhToTFObjectDSClientOAuth2Client(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationProvisionConfigRequiredNotification(recurse bool, tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["systems"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSystems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationProvisionConfigRequiredNotification(recurse bool, tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["systems"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSystems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationRotatingPasswordRequiredNotification(recurse bool, tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationRotatingPasswordRequiredNotification(recurse bool, tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationUpdateAvailableNotification(recurse bool, tkh keyhubmodel.NotificationUpdateAvailableNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationUpdateAvailableNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationUpdateAvailableNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["released_at"] = stringerToTF(tkh.GetReleasedAt())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationUpdateAvailableNotification(recurse bool, tkh keyhubmodel.NotificationUpdateAvailableNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationUpdateAvailableNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationUpdateAvailableNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["released_at"] = stringerToTF(tkh.GetReleasedAt())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSNotificationVaultRecordExpiredNotification(recurse bool, tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesRSRecurse
	} else {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh.GetRecord())
		diags.Append(d...)
		obj["record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationVaultRecordExpiredNotification(recurse bool, tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh.GetRecord())
		diags.Append(d...)
		obj["record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationAccountOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationAccountOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationAccountOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationAccountOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["depth"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["parent_uuid"] = withUuidToTF(tkh.GetParent())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["depth"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnitAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSOrganizationOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSOrganizationOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse, tkh.GetCreateAsParentOf())
		diags.Append(d...)
		obj["create_as_parent_of"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAbstractProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAbstractProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesRSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesDSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAccountProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["result"] = stringerToTF(tkh.GetResult())
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroup(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAccountProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["result"] = stringerToTF(tkh.GetResult())
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroup(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningAccountProvisioningStatusReport(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesRSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["status"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStatus(), func(tkh keyhubmodel.ProvisioningAccountProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningAccountProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAccountProvisioningStatusReport(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesDSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["status"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStatus(), func(tkh keyhubmodel.ProvisioningAccountProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningAccountProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningCircuitBreakerStatistics(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRSRecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = stringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningCircuitBreakerStatistics(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesDSRecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = stringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystemTypes(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemTypes(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	{
		val, d := tkhToTFObjectRSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse, tkh.GetProvisioningDuration())
		diags.Append(d...)
		obj["provisioning_duration"] = val
	}
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	{
		val, d := tkhToTFObjectRSProvisioningAccountProvisioningStatusReport(recurse, tkh.GetStatusReport())
		diags.Append(d...)
		obj["status_report"] = val
	}
	obj["visible_on_dashboard"] = types.BoolPointerValue(tkh.GetVisibleOnDashboard())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse, tkh.GetProvisioningDuration())
		diags.Append(d...)
		obj["provisioning_duration"] = val
	}
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	{
		val, d := tkhToTFObjectDSProvisioningAccountProvisioningStatusReport(recurse, tkh.GetStatusReport())
		diags.Append(d...)
		obj["status_report"] = val
	}
	obj["visible_on_dashboard"] = types.BoolPointerValue(tkh.GetVisibleOnDashboard())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningOwnedGroupOnSystemsWrapper(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningOwnedGroupOnSystemsWrapper(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequence(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_u_i_d"] = types.Int64PointerValue(tkh.GetNextUID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequence(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_u_i_d"] = types.Int64PointerValue(tkh.GetNextUID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionNumberSequenceable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionNumberSequenceable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionNumberSequence_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequence_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAD(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedADAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAD(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedADAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["uuid"] = withUuidToTF(tkh)
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAccount_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccount_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureOIDCDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureOIDCDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedAzureTenant(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureTenant(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedInternalLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSClientLdapClient(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedInternalLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSClientLdapClient(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = withUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectRSProvisioningProvisionNumberSequence(false, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence(false, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystem(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = withUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	obj["owner_uuid"] = withUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystem(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningProvisionedSystemSyncLog(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemSyncLog(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisionedSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSProvisioningProvisionedAccount(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = val
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectRSProvisioningProvisioningManagementPermissions(recurse, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningCircuitBreakerStatistics(recurse, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystemTypes(recurse, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedAccount(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = val
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisioningManagementPermissions(recurse, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningCircuitBreakerStatistics(recurse, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystemTypes(recurse, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisioningManagementPermissions(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisioningManagementPermissions(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningStatusAttrTypesRSRecurse
	} else {
		attrs = provisioningProvisioningStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.ProvisioningGroupProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSProvisioningGroupProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	obj["ignore_errors"] = types.BoolPointerValue(tkh.GetIgnoreErrors())
	obj["restricted_by_license"] = types.BoolPointerValue(tkh.GetRestrictedByLicense())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.ProvisioningGroupProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	obj["ignore_errors"] = types.BoolPointerValue(tkh.GetIgnoreErrors())
	obj["restricted_by_license"] = types.BoolPointerValue(tkh.GetRestrictedByLicense())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSProvisioningTokenPassword(recurse bool, tkh keyhubmodel.ProvisioningTokenPasswordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningTokenPasswordAttrTypesRSRecurse
	} else {
		attrs = provisioningTokenPasswordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningTokenPassword(recurse bool, tkh keyhubmodel.ProvisioningTokenPasswordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningTokenPasswordAttrTypesDSRecurse
	} else {
		attrs = provisioningTokenPasswordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractApplicationModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractApplicationModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractApplicationModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractApplicationModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractApplicationModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractApplicationModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractApplicationModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractApplicationModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractOrganizationalUnitModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractOrganizationalUnitModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAbstractProvisionedSystemModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractProvisionedSystemModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse, tkh.GetAccessDuration())
		diags.Append(d...)
		obj["access_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse, tkh.GetAccessDuration())
		diags.Append(d...)
		obj["access_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptJoinGroupRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["make_manager"] = types.BoolPointerValue(tkh.GetMakeManager())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptJoinGroupRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["make_manager"] = types.BoolPointerValue(tkh.GetMakeManager())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAcceptModificationRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptModificationRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptModificationRequestParametersAttrTypesRSRecurse
	} else {
		attrs = requestAcceptModificationRequestParametersAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptModificationRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptModificationRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptModificationRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptModificationRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestAddGroupAdminRequest(recurse bool, tkh keyhubmodel.RequestAddGroupAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAddGroupAdminRequestAttrTypesRSRecurse
	} else {
		attrs = requestAddGroupAdminRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["new_admin_uuid"] = withUuidToTF(tkh.GetNewAdmin())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAddGroupAdminRequest(recurse bool, tkh keyhubmodel.RequestAddGroupAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAddGroupAdminRequestAttrTypesDSRecurse
	} else {
		attrs = requestAddGroupAdminRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetNewAdmin())
		diags.Append(d...)
		obj["new_admin"] = val
	}
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupOnSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateGroupOnSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_on_system_type"] = stringerToTF(tkh.GetGroupOnSystemType())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupOnSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateGroupOnSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_on_system_type"] = stringerToTF(tkh.GetGroupOnSystemType())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateGroupRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateGroupRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestCreateServiceAccountRequest(recurse bool, tkh keyhubmodel.RequestCreateServiceAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateServiceAccountRequestAttrTypesRSRecurse
	} else {
		attrs = requestCreateServiceAccountRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateServiceAccountRequest(recurse bool, tkh keyhubmodel.RequestCreateServiceAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateServiceAccountRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateServiceAccountRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestDisable2FARequest(recurse bool, tkh keyhubmodel.RequestDisable2FARequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestDisable2FARequestAttrTypesRSRecurse
	} else {
		attrs = requestDisable2FARequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["subject"] = types.StringPointerValue(tkh.GetSubject())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestDisable2FARequest(recurse bool, tkh keyhubmodel.RequestDisable2FARequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestDisable2FARequestAttrTypesDSRecurse
	} else {
		attrs = requestDisable2FARequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["subject"] = types.StringPointerValue(tkh.GetSubject())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestEnableTechnicalAdministrationRequest(recurse bool, tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestEnableTechnicalAdministrationRequest(recurse bool, tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestExtendAccessRequest(recurse bool, tkh keyhubmodel.RequestExtendAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestExtendAccessRequestAttrTypesRSRecurse
	} else {
		attrs = requestExtendAccessRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["extend_until"] = timePointerToTF(tkh.GetExtendUntil())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestExtendAccessRequest(recurse bool, tkh keyhubmodel.RequestExtendAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestExtendAccessRequestAttrTypesDSRecurse
	} else {
		attrs = requestExtendAccessRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["extend_until"] = timePointerToTF(tkh.GetExtendUntil())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantAccessRequest(recurse bool, tkh keyhubmodel.RequestGrantAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantAccessRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantAccessRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantAccessRequest(recurse bool, tkh keyhubmodel.RequestGrantAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantAccessRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantAccessRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantApplicationRequest(recurse bool, tkh keyhubmodel.RequestGrantApplicationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantApplicationRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantApplicationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantApplicationRequest(recurse bool, tkh keyhubmodel.RequestGrantApplicationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantApplicationRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantApplicationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantClientPermissionRequest(recurse bool, tkh keyhubmodel.RequestGrantClientPermissionRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantClientPermissionRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantClientPermissionRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())
	obj["permission_type"] = stringerToTF(tkh.GetPermissionType())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantClientPermissionRequest(recurse bool, tkh keyhubmodel.RequestGrantClientPermissionRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantClientPermissionRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantClientPermissionRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	obj["permission_type"] = stringerToTF(tkh.GetPermissionType())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantGroupOnSystemRequestRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantGroupOnSystemRequestRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestGrantServiceAccountGroupRequest(recurse bool, tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}
	obj["service_account_uuid"] = withUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantServiceAccountGroupRequest(recurse bool, tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(false, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestJoinGroupRequest(recurse bool, tkh keyhubmodel.RequestJoinGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestJoinGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestJoinGroupRequest(recurse bool, tkh keyhubmodel.RequestJoinGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestJoinGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestJoinVaultRequest(recurse bool, tkh keyhubmodel.RequestJoinVaultRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinVaultRequestAttrTypesRSRecurse
	} else {
		attrs = requestJoinVaultRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestJoinVaultRequest(recurse bool, tkh keyhubmodel.RequestJoinVaultRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinVaultRequestAttrTypesDSRecurse
	} else {
		attrs = requestJoinVaultRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequest(recurse bool, tkh keyhubmodel.RequestModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequest(recurse bool, tkh keyhubmodel.RequestModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequestLinkableWrapper(recurse bool, tkh keyhubmodel.RequestModificationRequestLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequestLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.RequestModificationRequestable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRequestModificationRequest(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequestLinkableWrapper(recurse bool, tkh keyhubmodel.RequestModificationRequestLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequestLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.RequestModificationRequestable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRequestModificationRequest(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestModificationRequest_additionalObjects(recurse bool, tkh keyhubmodel.RequestModificationRequest_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequest_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = requestModificationRequest_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSRequestAcceptModificationRequestParameters(recurse, tkh.GetAcceptParams())
		diags.Append(d...)
		obj["accept_params"] = val
	}
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSRequestPasswordResetRequestStatus(recurse, tkh.GetResetStatus())
		diags.Append(d...)
		obj["reset_status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequest_additionalObjects(recurse bool, tkh keyhubmodel.RequestModificationRequest_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequest_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequest_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSRequestPasswordResetRequestStatus(recurse, tkh.GetResetStatus())
		diags.Append(d...)
		obj["reset_status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestPasswordResetRequest(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestAttrTypesRSRecurse
	} else {
		attrs = requestPasswordResetRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["new_vault_and_directory_password"] = types.StringPointerValue(tkh.GetNewVaultAndDirectoryPassword())
	obj["new_vault_password"] = types.StringPointerValue(tkh.GetNewVaultPassword())
	obj["unsynced_password"] = types.BoolPointerValue(tkh.GetUnsyncedPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestPasswordResetRequest(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestAttrTypesDSRecurse
	} else {
		attrs = requestPasswordResetRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestPasswordResetRequestStatus(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestStatusAttrTypesRSRecurse
	} else {
		attrs = requestPasswordResetRequestStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["cooldown_end"] = timePointerToTF(tkh.GetCooldownEnd())
	{
		elemType := attrs["managers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetManagers(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["managers"] = val
	}
	obj["nr_accepted"] = types.Int64PointerValue(tkh.GetNrAccepted())
	obj["reset_via_mail"] = stringerToTF(tkh.GetResetViaMail())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestPasswordResetRequestStatus(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestStatusAttrTypesDSRecurse
	} else {
		attrs = requestPasswordResetRequestStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["cooldown_end"] = timePointerToTF(tkh.GetCooldownEnd())
	{
		elemType := attrs["managers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetManagers(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["managers"] = val
	}
	obj["nr_accepted"] = types.Int64PointerValue(tkh.GetNrAccepted())
	obj["reset_via_mail"] = stringerToTF(tkh.GetResetViaMail())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveGroupRequest(recurse bool, tkh keyhubmodel.RequestRemoveGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveGroupRequest(recurse bool, tkh keyhubmodel.RequestRemoveGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveOrganizationalUnitRequest(recurse bool, tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())
	obj["organizational_unit_name"] = types.StringPointerValue(tkh.GetOrganizationalUnitName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveOrganizationalUnitRequest(recurse bool, tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["organizational_unit_name"] = types.StringPointerValue(tkh.GetOrganizationalUnitName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRemoveProvisionedSystemRequest(recurse bool, tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesRSRecurse
	} else {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["system_name"] = types.StringPointerValue(tkh.GetSystemName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveProvisionedSystemRequest(recurse bool, tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["system_name"] = types.StringPointerValue(tkh.GetSystemName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestReviewAuditRequest(recurse bool, tkh keyhubmodel.RequestReviewAuditRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestReviewAuditRequestAttrTypesRSRecurse
	} else {
		attrs = requestReviewAuditRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestReviewAuditRequest(recurse bool, tkh keyhubmodel.RequestReviewAuditRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestReviewAuditRequestAttrTypesDSRecurse
	} else {
		attrs = requestReviewAuditRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestRevokeAdminRequest(recurse bool, tkh keyhubmodel.RequestRevokeAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRevokeAdminRequestAttrTypesRSRecurse
	} else {
		attrs = requestRevokeAdminRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["admin_uuid"] = withUuidToTF(tkh.GetAdmin())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRevokeAdminRequest(recurse bool, tkh keyhubmodel.RequestRevokeAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRevokeAdminRequestAttrTypesDSRecurse
	} else {
		attrs = requestRevokeAdminRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAdmin())
		diags.Append(d...)
		obj["admin"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestSetupAuthorizingGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["authorizing_group_type"] = stringerToTF(tkh.GetAuthorizingGroupType())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = withUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestSetupAuthorizingGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["authorizing_group_type"] = stringerToTF(tkh.GetAuthorizingGroupType())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetRequestingGroup())
		diags.Append(d...)
		obj["requesting_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestSetupNestedGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupNestedGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupNestedGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestSetupNestedGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["account_action"] = stringerToTF(tkh.GetAccountAction())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = withUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestSetupNestedGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupNestedGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupNestedGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestSetupNestedGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["account_action"] = stringerToTF(tkh.GetAccountAction())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetRequestingGroup())
		diags.Append(d...)
		obj["requesting_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferApplicationAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferApplicationAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferApplicationOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["application_uuid"] = withUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferApplicationOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferAuditorGroupRequest(recurse bool, tkh keyhubmodel.RequestTransferAuditorGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferAuditorGroupRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferAuditorGroupRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferAuditorGroupRequest(recurse bool, tkh keyhubmodel.RequestTransferAuditorGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferAuditorGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferAuditorGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferGroupOnSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectRSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferGroupOnSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = withUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferProvisionedSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestTransferServiceAccountAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesRSRecurse
	} else {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["service_account_uuid"] = withUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferServiceAccountAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(false, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestUpdateGroupMembershipRequest(recurse bool, tkh keyhubmodel.RequestUpdateGroupMembershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestUpdateGroupMembershipRequestAttrTypesRSRecurse
	} else {
		attrs = requestUpdateGroupMembershipRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["account_to_update_uuid"] = withUuidToTF(tkh.GetAccountToUpdate())
	obj["current_end_date"] = stringerToTF(tkh.GetCurrentEndDate())
	obj["current_rights"] = stringerToTF(tkh.GetCurrentRights())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["update_group_membership_type"] = stringerToTF(tkh.GetUpdateGroupMembershipType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestUpdateGroupMembershipRequest(recurse bool, tkh keyhubmodel.RequestUpdateGroupMembershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestUpdateGroupMembershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestUpdateGroupMembershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccountToUpdate())
		diags.Append(d...)
		obj["account_to_update"] = val
	}
	obj["current_end_date"] = stringerToTF(tkh.GetCurrentEndDate())
	obj["current_rights"] = stringerToTF(tkh.GetCurrentRights())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["update_group_membership_type"] = stringerToTF(tkh.GetUpdateGroupMembershipType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSRequestVerifyInternalAccountRequest(recurse bool, tkh keyhubmodel.RequestVerifyInternalAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestVerifyInternalAccountRequestAttrTypesRSRecurse
	} else {
		attrs = requestVerifyInternalAccountRequestAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["internal_account_name"] = types.StringPointerValue(tkh.GetInternalAccountName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestVerifyInternalAccountRequest(recurse bool, tkh keyhubmodel.RequestVerifyInternalAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestVerifyInternalAccountRequestAttrTypesDSRecurse
	} else {
		attrs = requestVerifyInternalAccountRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["internal_account_name"] = types.StringPointerValue(tkh.GetInternalAccountName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["password_uuid"] = withUuidToTF(tkh.GetPassword())
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	obj["technical_administrator_uuid"] = withUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetPassword())
		diags.Append(d...)
		obj["password"] = val
	}
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSServiceaccountServiceAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSServiceaccountServiceAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountStatus(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountStatusAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountStatusAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountStatus(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountStatusAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["disabled_count"] = types.Int64PointerValue(tkh.GetDisabledCount())
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse, tkh.GetPasswordSchemeEnabledStats())
		diags.Append(d...)
		obj["password_scheme_enabled_stats"] = val
	}
	{
		val, d := tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_systemStats(recurse, tkh.GetSystemStats())
		diags.Append(d...)
		obj["system_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["disabled_count"] = types.Int64PointerValue(tkh.GetDisabledCount())
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse, tkh.GetPasswordSchemeEnabledStats())
		diags.Append(d...)
		obj["password_scheme_enabled_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_systemStats(recurse, tkh.GetSystemStats())
		diags.Append(d...)
		obj["system_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSimpleStringValue(recurse bool, tkh keyhubmodel.SimpleStringValueable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleStringValueAttrTypesRSRecurse
	} else {
		attrs = simpleStringValueAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSimpleStringValue(recurse bool, tkh keyhubmodel.SimpleStringValueable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleStringValueAttrTypesDSRecurse
	} else {
		attrs = simpleStringValueAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSSimpleVersionInfo(recurse bool, tkh keyhubmodel.SimpleVersionInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleVersionInfoAttrTypesRSRecurse
	} else {
		attrs = simpleVersionInfoAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["contract_versions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetContractVersions(), func(tkh int32, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(int64(tkh))
		})
		diags.Append(d...)
		obj["contract_versions"] = val
	}
	obj["key_hub_version"] = types.StringPointerValue(tkh.GetKeyHubVersion())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSimpleVersionInfo(recurse bool, tkh keyhubmodel.SimpleVersionInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleVersionInfoAttrTypesDSRecurse
	} else {
		attrs = simpleVersionInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["contract_versions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetContractVersions(), func(tkh int32, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(int64(tkh))
		})
		diags.Append(d...)
		obj["contract_versions"] = val
	}
	obj["key_hub_version"] = types.StringPointerValue(tkh.GetKeyHubVersion())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolder(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultDeletedVaultHolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetRecordCount()))
	obj["vault_deleted_vault_holder_type"] = stringerToTF(tkh.GetVaultDeletedVaultHolderType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolder(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultDeletedVaultHolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetRecordCount()))
	obj["vault_deleted_vault_holder_type"] = stringerToTF(tkh.GetVaultDeletedVaultHolderType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolderLinkableWrapper(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultDeletedVaultHolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultDeletedVaultHolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolderLinkableWrapper(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultDeletedVaultHolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultDeletedVaultHolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultHolder_additionalObjects(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolder_additionalObjects(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultDeletedVaultRecovery(recurse bool, tkh keyhubmodel.VaultDeletedVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultRecoveryAttrTypesRSRecurse
	} else {
		attrs = vaultDeletedVaultRecoveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["prefix"] = types.StringPointerValue(tkh.GetPrefix())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())
	obj["target_group_uuid"] = withUuidToTF(tkh.GetTargetGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultRecovery(recurse bool, tkh keyhubmodel.VaultDeletedVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultRecoveryAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultRecoveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["prefix"] = types.StringPointerValue(tkh.GetPrefix())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetTargetGroup())
		diags.Append(d...)
		obj["target_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultMoveVaultRecord(recurse bool, tkh keyhubmodel.VaultMoveVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecordAttrTypesRSRecurse
	} else {
		attrs = vaultMoveVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectRSVaultMoveVaultRecord_shareDuration(recurse, tkh.GetShareDuration())
		diags.Append(d...)
		obj["share_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultMoveVaultRecord(recurse bool, tkh keyhubmodel.VaultMoveVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecordAttrTypesDSRecurse
	} else {
		attrs = vaultMoveVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["action"] = stringerToTF(tkh.GetAction())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultMoveVaultRecord_shareDuration(recurse, tkh.GetShareDuration())
		diags.Append(d...)
		obj["share_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultMoveVaultRecord_shareDuration(recurse bool, tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesRSRecurse
	} else {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultMoveVaultRecord_shareDuration(recurse bool, tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesDSRecurse
	} else {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVault(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesRSRecurse
	} else {
		attrs = vaultVaultAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVault(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesDSRecurse
	} else {
		attrs = vaultVaultAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultHolder(recurse bool, tkh keyhubmodel.VaultVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultHolderAttrTypesRSRecurse
	} else {
		attrs = vaultVaultHolderAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultHolder(recurse bool, tkh keyhubmodel.VaultVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultHolderAttrTypesDSRecurse
	} else {
		attrs = vaultVaultHolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			return withUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())
	obj["write_totp"] = types.BoolPointerValue(tkh.GetWriteTotp())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordShare(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["vault_vault_record_share_type"] = stringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordShare(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["vault_vault_record_share_type"] = stringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecordShareSummary(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSVaultVaultRecordShare(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordShare(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordShareSummary(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecordShare(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordShare(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	obj["parent_uuid"] = withUuidToTF(tkh.GetParent())
	{
		val, d := tkhToTFObjectRSVaultVaultRecordSecrets(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordShareSummary(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultRecordPrimerLinkableWrapper(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = val
	}
	{
		val, d := tkhToTFObjectRSLaunchpadVaultRecordLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectRSVaultVaultHolder(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordSecrets(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordShareSummary(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimerLinkableWrapper(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadVaultRecordLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultHolder(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultRecovery(recurse bool, tkh keyhubmodel.VaultVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecoveryAttrTypesRSRecurse
	} else {
		attrs = vaultVaultRecoveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecovery(recurse bool, tkh keyhubmodel.VaultVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecoveryAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecoveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultUnlock(recurse bool, tkh keyhubmodel.VaultVaultUnlockable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockAttrTypesRSRecurse
	} else {
		attrs = vaultVaultUnlockAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultUnlock(recurse bool, tkh keyhubmodel.VaultVaultUnlockable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockAttrTypesDSRecurse
	} else {
		attrs = vaultVaultUnlockAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSVaultVaultUnlockResponse(recurse bool, tkh keyhubmodel.VaultVaultUnlockResponseable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockResponseAttrTypesRSRecurse
	} else {
		attrs = vaultVaultUnlockResponseAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["expires_at"] = timePointerToTF(tkh.GetExpiresAt())
	obj["session_password"] = types.StringPointerValue(tkh.GetSessionPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultUnlockResponse(recurse bool, tkh keyhubmodel.VaultVaultUnlockResponseable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockResponseAttrTypesDSRecurse
	} else {
		attrs = vaultVaultUnlockResponseAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["expires_at"] = timePointerToTF(tkh.GetExpiresAt())
	obj["session_password"] = types.StringPointerValue(tkh.GetSessionPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhook(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSWebhookWebhook_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = withUuidToTF(tkh.GetAccount())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	obj["client_uuid"] = withUuidToTF(tkh.GetClient())
	obj["client_certificate_uuid"] = withUuidToTF(tkh.GetClientCertificate())
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	obj["directory_uuid"] = withUuidToTF(tkh.GetDirectory())
	obj["group_uuid"] = withUuidToTF(tkh.GetGroup())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = withUuidToTF(tkh.GetSystem())
	obj["tls"] = stringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = withUuidToTF(tkh.GetTrustedCertificate())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhook(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSWebhookWebhook_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDeliveryAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRSWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = timePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDeliveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = timePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDeliveryLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookDeliveryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSWebhookWebhookDelivery(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDeliveryLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookDeliveryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSWebhookWebhookDelivery(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookDelivery_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDelivery_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRSWebhookWebhook(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSWebhookWebhook(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookNameUuid(recurse bool, tkh keyhubmodel.WebhookWebhookNameUuidable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookNameUuidAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookNameUuidAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectRSLinkable(recurse, tkh.GetObject())
		diags.Append(d...)
		obj["object"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookNameUuid(recurse bool, tkh keyhubmodel.WebhookWebhookNameUuidable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookNameUuidAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookNameUuidAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSLinkable(recurse, tkh.GetObject())
		diags.Append(d...)
		obj["object"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhookPush(recurse bool, tkh keyhubmodel.WebhookWebhookPushable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookPushAttrTypesRSRecurse
	} else {
		attrs = webhookWebhookPushAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetByParty())
		diags.Append(d...)
		obj["by_party"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroup2())
		diags.Append(d...)
		obj["group2"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetGroupClassification())
		diags.Append(d...)
		obj["group_classification"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetModificationRequest())
		diags.Append(d...)
		obj["modification_request"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())
	obj["seq"] = types.Int64PointerValue(tkh.GetSeq())
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["timestamp"] = timePointerToTF(tkh.GetTimestamp())
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	{
		val, d := tkhToTFObjectRSWebhookWebhookNameUuid(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}
	obj["webhook_webhook_push_type"] = stringerToTF(tkh.GetWebhookWebhookPushType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookPush(recurse bool, tkh keyhubmodel.WebhookWebhookPushable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookPushAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookPushAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetByParty())
		diags.Append(d...)
		obj["by_party"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroup2())
		diags.Append(d...)
		obj["group2"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroupClassification())
		diags.Append(d...)
		obj["group_classification"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetModificationRequest())
		diags.Append(d...)
		obj["modification_request"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())
	obj["seq"] = types.Int64PointerValue(tkh.GetSeq())
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["timestamp"] = timePointerToTF(tkh.GetTimestamp())
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}
	obj["webhook_webhook_push_type"] = stringerToTF(tkh.GetWebhookWebhookPushType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRSWebhookWebhook_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesRSRecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypesRS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhook_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tfObjectToTKHRSAuditInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	tkh.SetLastModifiedBy(objAttrs["last_modified_by"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuditInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	tkh.SetLastModifiedBy(objAttrs["last_modified_by"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSErrorReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewErrorReport()
	tkh.SetApplicationError(objAttrs["application_error"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSErrorReport_applicationErrorParameters(ctx, recurse, objAttrs["application_error_parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplicationErrorParameters(val)
	}
	tkh.SetCode(int64PToInt32P(objAttrs["code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["error_details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetErrorDetails(val)
	}
	tkh.SetException(objAttrs["exception"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMessage(objAttrs["message"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["stacktrace"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetStacktrace(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSErrorReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewErrorReport()
	tkh.SetApplicationError(objAttrs["application_error"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSErrorReport_applicationErrorParameters(ctx, recurse, objAttrs["application_error_parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplicationErrorParameters(val)
	}
	tkh.SetCode(int64PToInt32P(objAttrs["code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["error_details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetErrorDetails(val)
	}
	tkh.SetException(objAttrs["exception"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMessage(objAttrs["message"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["stacktrace"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetStacktrace(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSErrorReport_applicationErrorParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReport_applicationErrorParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewErrorReport_applicationErrorParameters()
	return tkh, diags
}

func tfObjectToTKHDSErrorReport_applicationErrorParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReport_applicationErrorParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewErrorReport_applicationErrorParameters()
	return tkh, diags
}

func tfObjectToTKHRSGeneratedSecret(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGeneratedSecret()
	tkh.SetGeneratedSecret(objAttrs["generated_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOldSecret(objAttrs["old_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRegenerate(objAttrs["regenerate"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSGeneratedSecret(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGeneratedSecret()
	tkh.SetGeneratedSecret(objAttrs["generated_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOldSecret(objAttrs["old_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRegenerate(objAttrs["regenerate"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLinkable()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLinkable()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNonLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHDSNonLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHRSRestLink(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRestLink()
	tkh.SetHref(objAttrs["href"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetId(objAttrs["id"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetRel(objAttrs["rel"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSRestLink(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRestLink()
	tkh.SetHref(objAttrs["href"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetId(objAttrs["id"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetRel(objAttrs["rel"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSSegmentCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SegmentCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSegmentCount()
	tkh.SetCount(objAttrs["count"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSSegmentCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SegmentCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSegmentCount()
	tkh.SetCount(objAttrs["count"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["audit_audit_record_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetAuditAuditRecordType(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["date_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDateTime(val)
	}
	tkh.SetOnAccount(objAttrs["on_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnCertificate(objAttrs["on_certificate"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnClient(objAttrs["on_client"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnDirectory(objAttrs["on_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup(objAttrs["on_group"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup2(objAttrs["on_group2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroupClassification(objAttrs["on_group_classification"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnOrganizationalUnit(objAttrs["on_organizational_unit"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnServiceAccount(objAttrs["on_service_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnSystem(objAttrs["on_system"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnVaultRecord(objAttrs["on_vault_record"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnWebhook(objAttrs["on_webhook"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPerformedBy(objAttrs["performed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSAuditAuditRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditAuditRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["audit_audit_record_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetAuditAuditRecordType(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["date_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDateTime(val)
	}
	tkh.SetOnAccount(objAttrs["on_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnCertificate(objAttrs["on_certificate"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnClient(objAttrs["on_client"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnDirectory(objAttrs["on_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup(objAttrs["on_group"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup2(objAttrs["on_group2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroupClassification(objAttrs["on_group_classification"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnOrganizationalUnit(objAttrs["on_organizational_unit"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnServiceAccount(objAttrs["on_service_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnSystem(objAttrs["on_system"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnVaultRecord(objAttrs["on_vault_record"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnWebhook(objAttrs["on_webhook"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPerformedBy(objAttrs["performed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSAuditAuditRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordable {
			tkh, d := tfObjectToTKHRSAuditAuditRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditAuditRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordable {
			tkh, d := tfObjectToTKHDSAuditAuditRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditAuditRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuditAuditRecord_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDirectoryPasswordChangeRequired(objAttrs["directory_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetDirectoryRotatingPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetEmail(objAttrs["email"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdInDirectory(objAttrs["id_in_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyHubPasswordChangeRequired(objAttrs["key_hub_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTokenPasswordEnabled(objAttrs["token_password_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetValidInDirectory(objAttrs["valid_in_directory"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSAuthAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDirectoryPasswordChangeRequired(objAttrs["directory_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetDirectoryRotatingPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetEmail(objAttrs["email"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdInDirectory(objAttrs["id_in_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyHubPasswordChangeRequired(objAttrs["key_hub_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTokenPasswordEnabled(objAttrs["token_password_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetValidInDirectory(objAttrs["valid_in_directory"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSAuthAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountBulkUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountBulkUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountBulkUpdate()
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountBulkUpdateAction, func(val any) keyhubmodel.AuthAccountBulkUpdateAction {
			return *val.(*keyhubmodel.AuthAccountBulkUpdateAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetExclusiveSelection(objAttrs["exclusive_selection"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["selected_accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int64 {
			return val.(basetypes.Int64Value).ValueInt64()
		})
		diags.Append(d...)
		tkh.SetSelectedAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountBulkUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountBulkUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountBulkUpdate()
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountBulkUpdateAction, func(val any) keyhubmodel.AuthAccountBulkUpdateAction {
			return *val.(*keyhubmodel.AuthAccountBulkUpdateAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetExclusiveSelection(objAttrs["exclusive_selection"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["selected_accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int64 {
			return val.(basetypes.Int64Value).ValueInt64()
		})
		diags.Append(d...)
		tkh.SetSelectedAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountChangeLocale(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountChangeLocaleable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountChangeLocale()
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountChangeLocale(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountChangeLocaleable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountChangeLocale()
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthAccountable {
			tkh, d := tfObjectToTKHRSAuthAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthAccountable {
			tkh, d := tfObjectToTKHDSAuthAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountRecoveryStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountRecoveryStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountRecoveryStatus()
	tkh.SetPending2FARecoveryRequest(objAttrs["pending2_f_a_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetPendingPasswordRecoveryRequest(objAttrs["pending_password_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountRecoveryStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountRecoveryStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountRecoveryStatus()
	tkh.SetPending2FARecoveryRequest(objAttrs["pending2_f_a_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetPendingPasswordRecoveryRequest(objAttrs["pending_password_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountSettings(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountSettings()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["default_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDefaultOrganizationalUnit(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetInGroups(objAttrs["in_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetInMultipleOrganizationalUnits(objAttrs["in_multiple_organizational_units"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetKeyHubAdmin(objAttrs["key_hub_admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetMultipleOrganizationalUnitsExist(objAttrs["multiple_organizational_units_exist"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["password_mode"].(basetypes.StringValue), keyhubmodel.ParseAuthPasswordMode, func(val any) keyhubmodel.AuthPasswordMode { return *val.(*keyhubmodel.AuthPasswordMode) })
		diags.Append(d...)
		tkh.SetPasswordMode(val)
	}
	tkh.SetSshPublicKey(objAttrs["ssh_public_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_authentication"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorAuthentication(val)
	}
	tkh.SetUseTokenPassword(objAttrs["use_token_password"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_status"].(basetypes.StringValue), keyhubmodel.ParseVaultAccountVaultStatus, func(val any) keyhubmodel.VaultAccountVaultStatus { return *val.(*keyhubmodel.VaultAccountVaultStatus) })
		diags.Append(d...)
		tkh.SetVaultStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountSettings(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountSettings()
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["default_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDefaultOrganizationalUnit(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetInGroups(objAttrs["in_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetInMultipleOrganizationalUnits(objAttrs["in_multiple_organizational_units"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetKeyHubAdmin(objAttrs["key_hub_admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetMultipleOrganizationalUnitsExist(objAttrs["multiple_organizational_units_exist"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["password_mode"].(basetypes.StringValue), keyhubmodel.ParseAuthPasswordMode, func(val any) keyhubmodel.AuthPasswordMode { return *val.(*keyhubmodel.AuthPasswordMode) })
		diags.Append(d...)
		tkh.SetPasswordMode(val)
	}
	tkh.SetSshPublicKey(objAttrs["ssh_public_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_authentication"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorAuthentication(val)
	}
	tkh.SetUseTokenPassword(objAttrs["use_token_password"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_status"].(basetypes.StringValue), keyhubmodel.ParseVaultAccountVaultStatus, func(val any) keyhubmodel.VaultAccountVaultStatus { return *val.(*keyhubmodel.VaultAccountVaultStatus) })
		diags.Append(d...)
		tkh.SetVaultStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDeclineRecoveryRequests(objAttrs["decline_recovery_requests"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTwoFactorAuthenticationEnabled(objAttrs["two_factor_authentication_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDeclineRecoveryRequests(objAttrs["decline_recovery_requests"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTwoFactorAuthenticationEnabled(objAttrs["two_factor_authentication_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccount_additionalObjects()
	tkh.SetActiveLogin(objAttrs["active_login"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupAccountGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuthAccountRecoveryStatus(ctx, recurse, objAttrs["pending_recovery_requests"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPendingRecoveryRequests(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountSettings(ctx, recurse, objAttrs["settings"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSettings(val)
	}
	{
		val, d := tfObjectToTKHRSAuthStoredAccountAttributes(ctx, recurse, objAttrs["stored_attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStoredAttributes(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccount_additionalObjects()
	tkh.SetActiveLogin(objAttrs["active_login"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupAccountGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountRecoveryStatus(ctx, recurse, objAttrs["pending_recovery_requests"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPendingRecoveryRequests(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountSettings(ctx, recurse, objAttrs["settings"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSettings(val)
	}
	{
		val, d := tfObjectToTKHDSAuthStoredAccountAttributes(ctx, recurse, objAttrs["stored_attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStoredAttributes(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountsAuditStats()
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_directoryStats(ctx, recurse, objAttrs["directory_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectoryStats(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_twoFAStats(ctx, recurse, objAttrs["two_f_a_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTwoFAStats(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_validityStats(ctx, recurse, objAttrs["validity_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetValidityStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthAccountsAuditStats()
	{
		val, d := tfObjectToTKHDSAuthAccountsAuditStats_directoryStats(ctx, recurse, objAttrs["directory_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectoryStats(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountsAuditStats_twoFAStats(ctx, recurse, objAttrs["two_f_a_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTwoFAStats(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountsAuditStats_validityStats(ctx, recurse, objAttrs["validity_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetValidityStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_directoryStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_directoryStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_directoryStats()
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountsAuditStats_directoryStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_directoryStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_directoryStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_twoFAStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_twoFAStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_twoFAStats()
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountsAuditStats_twoFAStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_twoFAStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_twoFAStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_validityStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_validityStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_validityStats()
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountsAuditStats_validityStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_validityStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewAuthAccountsAuditStats_validityStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccount()
	{
		val, d := findAuthAccountByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.AuthAccount = *(val.(*keyhubmodel.AuthAccount))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetActivationCode(objAttrs["activation_code"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["activation_deadline"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetActivationDeadline(val)
	}
	tkh.SetCompany(objAttrs["company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFirstName(objAttrs["first_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLastName(objAttrs["last_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetTelephone(objAttrs["telephone"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDirectoryPasswordChangeRequired(objAttrs["directory_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetDirectoryRotatingPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetEmail(objAttrs["email"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdInDirectory(objAttrs["id_in_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyHubPasswordChangeRequired(objAttrs["key_hub_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTokenPasswordEnabled(objAttrs["token_password_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetValidInDirectory(objAttrs["valid_in_directory"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActivationCode(objAttrs["activation_code"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["activation_deadline"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetActivationDeadline(val)
	}
	tkh.SetCompany(objAttrs["company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFirstName(objAttrs["first_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLastName(objAttrs["last_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetTelephone(objAttrs["telephone"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSAuthAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthInternalAccountable {
			tkh, d := tfObjectToTKHRSAuthInternalAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthInternalAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthInternalAccountable {
			tkh, d := tfObjectToTKHDSAuthInternalAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccountStatusObject(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountStatusObjectable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccountStatusObject()
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthInternalAccountStatusObject(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountStatusObjectable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthInternalAccountStatusObject()
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthMoveInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthMoveInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthMoveInternalAccount()
	{
		val, d := tfObjectToTKHRSDirectoryInternalDirectory(ctx, recurse, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInternalDirectory(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthMoveInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthMoveInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthMoveInternalAccount()
	{
		val, d := tfObjectToTKHDSDirectoryInternalDirectory(ctx, recurse, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInternalDirectory(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthPermission()
	tkh.SetFull(objAttrs["full"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["instances"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSlice(objAttrs["operations"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetOperations(val)
	}
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthPermission()
	tkh.SetFull(objAttrs["full"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["instances"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSlice(objAttrs["operations"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetOperations(val)
	}
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthStoredAccountAttribute(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributeable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthStoredAccountAttribute()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthStoredAccountAttribute(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributeable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthStoredAccountAttribute()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthStoredAccountAttributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthStoredAccountAttributes()
	{
		val, d := tfToSlice(objAttrs["attributes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthStoredAccountAttributeable {
			tkh, d := tfObjectToTKHRSAuthStoredAccountAttribute(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthStoredAccountAttributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewAuthStoredAccountAttributes()
	{
		val, d := tfToSlice(objAttrs["attributes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthStoredAccountAttributeable {
			tkh, d := tfObjectToTKHDSAuthStoredAccountAttribute(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificate()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["certificate_certificate_primer_type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["key_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetKeyData(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSCertificateCertificate_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificate()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["certificate_certificate_primer_type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["key_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetKeyData(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSCertificateCertificate_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificateLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificateLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.CertificateCertificateable {
			tkh, d := tfObjectToTKHRSCertificateCertificate(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificateLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificateLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.CertificateCertificateable {
			tkh, d := tfObjectToTKHDSCertificateCertificate(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificatePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["certificate_certificate_primer_type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificatePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["certificate_certificate_primer_type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificate_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificate_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificate_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificate_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificate_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewCertificateCertificate_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplication(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHRSClientClientApplication(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHDSClientClientApplication(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplicationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(objAttrs["delete_tile"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, objAttrs["groupclients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetVaultRecordCount(int64PToInt32P(objAttrs["vault_record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx, recurse, objAttrs["groupclients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupclients(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetVaultRecordCount(int64PToInt32P(objAttrs["vault_record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSClientLdapClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientLdapClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetBindDn(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetUsedForProvisioning(objAttrs["used_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientLdapClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientLdapClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetBindDn(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["shared_secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetUsedForProvisioning(objAttrs["used_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2Client_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetCallbackURI(objAttrs["callback_u_r_i"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetConfidential(objAttrs["confidential"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDebugMode(objAttrs["debug_mode"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetIdTokenClaims(objAttrs["id_token_claims"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetInitiateLoginURI(objAttrs["initiate_login_u_r_i"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResourceURIs(objAttrs["resource_u_r_is"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetShowLandingPage(objAttrs["show_landing_page"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUseClientCredentials(objAttrs["use_client_credentials"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2Client_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetCallbackURI(objAttrs["callback_u_r_i"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetConfidential(objAttrs["confidential"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDebugMode(objAttrs["debug_mode"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetIdTokenClaims(objAttrs["id_token_claims"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetInitiateLoginURI(objAttrs["initiate_login_u_r_i"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResourceURIs(objAttrs["resource_u_r_is"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["shared_secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetShowLandingPage(objAttrs["show_landing_page"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUseClientCredentials(objAttrs["use_client_credentials"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["for_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["for_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermissionLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionable {
			tkh, d := tfObjectToTKHDSClientOAuth2ClientPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["for_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["for_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2Client(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewClientOAuth2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewClientOAuth2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	{
		val, d := tfObjectToTKHRSClientSaml2Client_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetMetadata(objAttrs["metadata"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMetadataUrl(objAttrs["metadata_url"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tkh.SetSubjectFormat(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientSaml2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["client_client_application_primer_type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	{
		val, d := tfObjectToTKHDSClientSaml2Client_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetMetadata(objAttrs["metadata"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMetadataUrl(objAttrs["metadata_url"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tkh.SetSubjectFormat(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewClientSaml2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHDSClientSaml2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewClientSaml2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectory(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHDSDirectoryAccountDirectory(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tkh.SetAccounts(objAttrs["accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tkh.SetAccounts(objAttrs["accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_summary_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectorySummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_summary_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectorySummaryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHDSDirectoryAccountDirectorySummary(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryInternalDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryInternalDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tkh.SetDialect(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tkh.SetPasswordRecovery(val)
	}
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSearchBindDN(objAttrs["search_bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchBindPassword(objAttrs["search_bind_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchFilter(objAttrs["search_filter"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tkh.SetDialect(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tkh.SetPasswordRecovery(val)
	}
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSearchBindDN(objAttrs["search_bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchBindPassword(objAttrs["search_bind_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchFilter(objAttrs["search_filter"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryMaintenanceDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryMaintenanceDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryMaintenanceDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryMaintenanceDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryOIDCDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAcrValues(objAttrs["acr_values"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetEnforces2fa(objAttrs["enforces2fa"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIssuer(objAttrs["issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLogoutUrl(objAttrs["logout_url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSendLoginHint(objAttrs["send_login_hint"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewDirectoryOIDCDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_account_directory_primer_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAcrValues(objAttrs["acr_values"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetEnforces2fa(objAttrs["enforces2fa"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIssuer(objAttrs["issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLogoutUrl(objAttrs["logout_url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSendLoginHint(objAttrs["send_login_hint"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroup()
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.GroupGroupPrimer = *(val.(*keyhubmodel.GroupGroupPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, false, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupFolder(ctx, false, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupAccountGroupable {
			tkh, d := tfObjectToTKHRSGroupAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupAccountGroupable {
			tkh, d := tfObjectToTKHDSGroupAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAuthorizedGroupsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAuthorizedGroupsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetGroupCount(objAttrs["group_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupAuthorizedGroupsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAuthorizedGroupsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupAuthorizedGroupsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHDSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetGroupCount(objAttrs["group_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetApplicationAdministration(objAttrs["application_administration"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSGroupGroupAuditConfig(ctx, false, objAttrs["audit_config"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuditConfig(val)
	}
	tkh.SetAuditRequested(objAttrs["audit_requested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuditor(objAttrs["auditor"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_auditing_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_delegation_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_membership_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_provisioning_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSlice(objAttrs["authorizing_group_types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, objAttrs["classification_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClassification(val)
	}
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tkh.SetExtendedAccess(val)
	}
	tkh.SetHideAuditTrail(objAttrs["hide_audit_trail"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["nested_under_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetNestedUnder(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetPrivateGroup(objAttrs["private_group"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRecordTrail(objAttrs["record_trail"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSingleManaged(objAttrs["single_managed"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tkh.SetVaultRecovery(val)
	}
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetApplicationAdministration(objAttrs["application_administration"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupAuditConfig(ctx, false, objAttrs["audit_config"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuditConfig(val)
	}
	tkh.SetAuditRequested(objAttrs["audit_requested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuditor(objAttrs["auditor"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_auditing"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_delegation"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_membership"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_provisioning"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSlice(objAttrs["authorizing_group_types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClassificationPrimer(ctx, false, objAttrs["classification"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClassification(val)
	}
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tkh.SetExtendedAccess(val)
	}
	tkh.SetHideAuditTrail(objAttrs["hide_audit_trail"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["nested_under"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNestedUnder(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetPrivateGroup(objAttrs["private_group"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRecordTrail(objAttrs["record_trail"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSingleManaged(objAttrs["single_managed"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tkh.SetVaultRecovery(val)
	}
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountNesting(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountNestingable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountNesting()
	tkh.SetConnected(objAttrs["connected"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccountNesting(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountNestingable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountNesting()
	tkh.SetConnected(objAttrs["connected"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountStatus()
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccountStatus()
	{
		val, d := tfObjectToTKHDSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAdminMail(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAdminMailable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAdminMail()
	tkh.SetBody(objAttrs["body"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAdminMail(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAdminMailable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAdminMail()
	tkh.SetBody(objAttrs["body"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAudit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameOnAudit(objAttrs["name_on_audit"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(objAttrs["reviewed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupAuditStatus, func(val any) keyhubmodel.GroupGroupAuditStatus { return *val.(*keyhubmodel.GroupGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(objAttrs["submitted_by"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAudit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAudit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditAccountable {
			tkh, d := tfObjectToTKHDSGroupGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameOnAudit(objAttrs["name_on_audit"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(objAttrs["reviewed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupAuditStatus, func(val any) keyhubmodel.GroupGroupAuditStatus { return *val.(*keyhubmodel.GroupGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(objAttrs["submitted_by"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupAudit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountUuid(objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountValid(objAttrs["account_valid"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountUuid(objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountValid(objAttrs["account_valid"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditConfig(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditConfig(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditable {
			tkh, d := tfObjectToTKHRSGroupGroupAudit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditable {
			tkh, d := tfObjectToTKHDSGroupGroupAudit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAudit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAudit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditingInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(objAttrs["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastAuditDate(val)
	}
	tkh.SetNrAccounts(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledAccounts(objAttrs["nr_disabled_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledManagers(objAttrs["nr_disabled_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrExpiredVaultRecords(objAttrs["nr_expired_vault_records"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrManagers(objAttrs["nr_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrVaultRecordsWithEndDate(objAttrs["nr_vault_records_with_end_date"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditingInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(objAttrs["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastAuditDate(val)
	}
	tkh.SetNrAccounts(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledAccounts(objAttrs["nr_disabled_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledManagers(objAttrs["nr_disabled_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrExpiredVaultRecords(objAttrs["nr_expired_vault_records"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrManagers(objAttrs["nr_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrVaultRecordsWithEndDate(objAttrs["nr_vault_records_with_end_date"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassification()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAuthorizingGroupAuditingRequired(objAttrs["authorizing_group_auditing_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupDelegationRequired(objAttrs["authorizing_group_delegation_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupMembershipRequired(objAttrs["authorizing_group_membership_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupProvisioningRequired(objAttrs["authorizing_group_provisioning_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDefaultClassification(objAttrs["default_classification"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMaximumAuditInterval(int64PToInt32P(objAttrs["maximum_audit_interval"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetMinimumNrManagers(int64PToInt32P(objAttrs["minimum_nr_managers"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetRecordTrailRequired(objAttrs["record_trail_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["required_months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRequiredMonths(val)
	}
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClassification_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassification()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAuthorizingGroupAuditingRequired(objAttrs["authorizing_group_auditing_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupDelegationRequired(objAttrs["authorizing_group_delegation_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupMembershipRequired(objAttrs["authorizing_group_membership_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupProvisioningRequired(objAttrs["authorizing_group_provisioning_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDefaultClassification(objAttrs["default_classification"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMaximumAuditInterval(int64PToInt32P(objAttrs["maximum_audit_interval"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetMinimumNrManagers(int64PToInt32P(objAttrs["minimum_nr_managers"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetRecordTrailRequired(objAttrs["record_trail_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["required_months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRequiredMonths(val)
	}
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupClassification_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationInfo()
	tkh.SetNrGroups(int64PToInt32P(objAttrs["nr_groups"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationInfo()
	tkh.SetNrGroups(int64PToInt32P(objAttrs["nr_groups"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHRSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHDSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationUpdate()
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, objAttrs["classificaton_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClassificaton(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassificationUpdate()
	{
		val, d := tfObjectToTKHDSGroupGroupClassificationPrimer(ctx, recurse, objAttrs["classificaton"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClassificaton(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassification_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassification_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassification_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupClassificationInfo(ctx, recurse, objAttrs["info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassification_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassification_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClassification_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClassificationInfo(ctx, recurse, objAttrs["info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupClient_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSGroupGroupClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHDSGroupGroupClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupFolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupFolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupFolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupFolderable {
			tkh, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupFolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupFolderable {
			tkh, d := tfObjectToTKHDSGroupGroupFolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolder_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupFolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupFolder_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupInfo()
	tkh.SetNrAccounts(int64PToInt32P(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAccountsWithVault(int64PToInt32P(objAttrs["nr_accounts_with_vault"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAudits(int64PToInt32P(objAttrs["nr_audits"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrClients(int64PToInt32P(objAttrs["nr_clients"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrProvisionedSystems(int64PToInt32P(objAttrs["nr_provisioned_systems"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrVaultRecords(int64PToInt32P(objAttrs["nr_vault_records"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupInfo()
	tkh.SetNrAccounts(int64PToInt32P(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAccountsWithVault(int64PToInt32P(objAttrs["nr_accounts_with_vault"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAudits(int64PToInt32P(objAttrs["nr_audits"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrClients(int64PToInt32P(objAttrs["nr_clients"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrProvisionedSystems(int64PToInt32P(objAttrs["nr_provisioned_systems"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrVaultRecords(int64PToInt32P(objAttrs["nr_vault_records"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHDSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := findGroupGroupPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupSegmentedLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupSegmentedLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupSegmentedLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	{
		val, d := tfToSlice(objAttrs["segments"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.SegmentCountable {
			tkh, d := tfObjectToTKHRSSegmentCount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSegments(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupSegmentedLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupSegmentedLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupSegmentedLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHDSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	{
		val, d := tfToSlice(objAttrs["segments"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.SegmentCountable {
			tkh, d := tfObjectToTKHDSSegmentCount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSegments(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, objAttrs["accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, objAttrs["administered_clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdministeredClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["administered_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, objAttrs["admins"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdmins(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx, recurse, objAttrs["authorized_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "group.AuthorizedGroupsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, objAttrs["client_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, objAttrs["clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["content_administered_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAuditingInfo(ctx, recurse, objAttrs["groupauditinginfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupInfo(ctx, recurse, objAttrs["groupinfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx, recurse, objAttrs["helpdesk"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdesk(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["myaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["mydelegatedaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx, recurse, objAttrs["nested_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNestedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, objAttrs["owned_clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx, recurse, objAttrs["owned_directories"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedDirectories(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx, recurse, objAttrs["owned_groups_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedGroupsOnSystem(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "provisioning.OwnedGroupOnSystemsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx, recurse, objAttrs["owned_organizational_units"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["owned_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAuditLinkableWrapper(ctx, recurse, objAttrs["recent_audits"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecentAudits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := parseCastPointer(objAttrs["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx, recurse, objAttrs["service_accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx, recurse, objAttrs["systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx, recurse, objAttrs["webhooks"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx, recurse, objAttrs["accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx, recurse, objAttrs["administered_clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdministeredClients(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["administered_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx, recurse, objAttrs["admins"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdmins(val)
	}
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupAuthorizedGroupsWrapper(ctx, recurse, objAttrs["authorized_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizedGroups(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, objAttrs["client_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx, recurse, objAttrs["clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClients(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["content_administered_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAuditingInfo(ctx, recurse, objAttrs["groupauditinginfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupInfo(ctx, recurse, objAttrs["groupinfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectorySummaryLinkableWrapper(ctx, recurse, objAttrs["helpdesk"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdesk(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, objAttrs["myaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, objAttrs["mydelegatedaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimerLinkableWrapper(ctx, recurse, objAttrs["nested_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx, recurse, objAttrs["owned_clients"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedClients(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryLinkableWrapper(ctx, recurse, objAttrs["owned_directories"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedDirectories(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningOwnedGroupOnSystemsWrapper(ctx, recurse, objAttrs["owned_groups_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedGroupsOnSystem(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitLinkableWrapper(ctx, recurse, objAttrs["owned_organizational_units"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, objAttrs["owned_systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAuditLinkableWrapper(ctx, recurse, objAttrs["recent_audits"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecentAudits(val)
	}
	{
		val, d := parseCastPointer(objAttrs["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountLinkableWrapper(ctx, recurse, objAttrs["service_accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx, recurse, objAttrs["systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookLinkableWrapper(ctx, recurse, objAttrs["webhooks"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupsAuditStats()
	tkh.SetAuditedGroups(objAttrs["audited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfToSlice(objAttrs["classifications"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHRSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetClassifications(val)
	}
	tkh.SetOverdueAuditGroups(objAttrs["overdue_audit_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetOverdueVaultPolicies(objAttrs["overdue_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetUnauditedGroups(objAttrs["unaudited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetValidVaultPolicies(objAttrs["valid_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetVaultsWithoutPolicies(objAttrs["vaults_without_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupGroupsAuditStats()
	tkh.SetAuditedGroups(objAttrs["audited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfToSlice(objAttrs["classifications"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHDSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetClassifications(val)
	}
	tkh.SetOverdueAuditGroups(objAttrs["overdue_audit_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetOverdueVaultPolicies(objAttrs["overdue_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetUnauditedGroups(objAttrs["unaudited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetValidVaultPolicies(objAttrs["valid_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetVaultsWithoutPolicies(objAttrs["vaults_without_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupProvisioningGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHDSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadDisplayedLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadDisplayedLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadLaunchpadTilePrimer(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadDisplayedLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadDisplayedLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHDSLaunchpadLaunchpadTilePrimer(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadDisplayedLaunchpadTiles(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTilesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadDisplayedLaunchpadTiles()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadDisplayedLaunchpadTileable {
			tkh, d := tfObjectToTKHRSLaunchpadDisplayedLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadDisplayedLaunchpadTiles(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTilesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadDisplayedLaunchpadTiles()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadDisplayedLaunchpadTileable {
			tkh, d := tfObjectToTKHDSLaunchpadDisplayedLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["vault_record_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTileLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTileLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadLaunchpadTileable {
			tkh, d := tfObjectToTKHRSLaunchpadLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadLaunchpadTileLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTileLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadLaunchpadTileable {
			tkh, d := tfObjectToTKHDSLaunchpadLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTilePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTilePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadLaunchpadTilePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTilePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTile_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadLaunchpadTile_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadLaunchpadTile_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadManualLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadManualLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadManualLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["vault_record_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadManualLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadManualLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadManualLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["vault_record_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["vault_record_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLicenseKeyHubLicenseInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LicenseKeyHubLicenseInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLicenseKeyHubLicenseInfo()
	{
		val, d := parseCastPointer(objAttrs["current_license_status"].(basetypes.StringValue), keyhubmodel.ParseLicenseKeyHubLicenseInfoLicenseStatus, func(val any) keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus {
			return *val.(*keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus)
		})
		diags.Append(d...)
		tkh.SetCurrentLicenseStatus(val)
	}
	tkh.SetCustomerCompany(objAttrs["customer_company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomerContact(objAttrs["customer_contact"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["customer_domains"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCustomerDomains(val)
	}
	{
		val, d := tfToSlice(objAttrs["details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetDetails(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpirationTime(val)
	}
	{
		val, d := tfToSlice(objAttrs["features"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LicenseLicenseFeature {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseLicenseLicenseFeature, func(val any) keyhubmodel.LicenseLicenseFeature { return *val.(*keyhubmodel.LicenseLicenseFeature) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetFeatures(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["issue_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetIssueTime(val)
	}
	tkh.SetKeyHubDomain(objAttrs["key_hub_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLicenseKey(objAttrs["license_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["not_before_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetNotBeforeTime(val)
	}
	tkh.SetUsersHardLimit(int64PToInt32P(objAttrs["users_hard_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersProLimit(int64PToInt32P(objAttrs["users_pro_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersSoftLimit(int64PToInt32P(objAttrs["users_soft_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVersion(int64PToInt32P(objAttrs["version"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSLicenseKeyHubLicenseInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LicenseKeyHubLicenseInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewLicenseKeyHubLicenseInfo()
	{
		val, d := parseCastPointer(objAttrs["current_license_status"].(basetypes.StringValue), keyhubmodel.ParseLicenseKeyHubLicenseInfoLicenseStatus, func(val any) keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus {
			return *val.(*keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus)
		})
		diags.Append(d...)
		tkh.SetCurrentLicenseStatus(val)
	}
	tkh.SetCustomerCompany(objAttrs["customer_company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomerContact(objAttrs["customer_contact"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["customer_domains"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCustomerDomains(val)
	}
	{
		val, d := tfToSlice(objAttrs["details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetDetails(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpirationTime(val)
	}
	{
		val, d := tfToSlice(objAttrs["features"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LicenseLicenseFeature {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseLicenseLicenseFeature, func(val any) keyhubmodel.LicenseLicenseFeature { return *val.(*keyhubmodel.LicenseLicenseFeature) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetFeatures(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["issue_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetIssueTime(val)
	}
	tkh.SetKeyHubDomain(objAttrs["key_hub_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLicenseKey(objAttrs["license_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["not_before_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetNotBeforeTime(val)
	}
	tkh.SetUsersHardLimit(int64PToInt32P(objAttrs["users_hard_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersProLimit(int64PToInt32P(objAttrs["users_pro_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersSoftLimit(int64PToInt32P(objAttrs["users_soft_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVersion(int64PToInt32P(objAttrs["version"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarker(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(objAttrs["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(objAttrs["mark_item_marker_type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarker_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSMarkItemMarker(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(objAttrs["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(objAttrs["mark_item_marker_type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarker_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarker_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarker_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewMarkItemMarker_parameters()
	return tkh, diags
}

func tfObjectToTKHDSMarkItemMarker_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarker_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewMarkItemMarker_parameters()
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarkers(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSlice(objAttrs["markers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHRSMarkItemMarker(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSMarkItemMarkers(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSlice(objAttrs["markers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHDSMarkItemMarker(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationCertificateExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationCertificateExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationCertificateExpiredNotification()
	{
		val, d := tfObjectToTKHRSCertificateCertificate(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryLDAPDirectory(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	{
		val, d := tfObjectToTKHRSClientLdapClient(ctx, recurse, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLdapClient(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystem(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["usage"].(basetypes.StringValue), keyhubmodel.ParseNotificationCertificateUsage, func(val any) keyhubmodel.NotificationCertificateUsage {
			return *val.(*keyhubmodel.NotificationCertificateUsage)
		})
		diags.Append(d...)
		tkh.SetUsage(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhook(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationCertificateExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationCertificateExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationCertificateExpiredNotification()
	{
		val, d := tfObjectToTKHDSCertificateCertificate(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryLDAPDirectory(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	{
		val, d := tfObjectToTKHDSClientLdapClient(ctx, recurse, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLdapClient(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystem(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["usage"].(basetypes.StringValue), keyhubmodel.ParseNotificationCertificateUsage, func(val any) keyhubmodel.NotificationCertificateUsage {
			return *val.(*keyhubmodel.NotificationCertificateUsage)
		})
		diags.Append(d...)
		tkh.SetUsage(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhook(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupAuditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupAuditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationGroupAuditRequiredNotification()
	{
		val, d := tfToTimePointer(objAttrs["due_date"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDueDate(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := parseCastPointer(objAttrs["notification_group_audit_required_notification_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRequiredSourceType, func(val any) keyhubmodel.AuditAuditRequiredSourceType {
			return *val.(*keyhubmodel.AuditAuditRequiredSourceType)
		})
		diags.Append(d...)
		tkh.SetNotificationGroupAuditRequiredNotificationType(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationGroupAuditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupAuditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationGroupAuditRequiredNotification()
	{
		val, d := tfToTimePointer(objAttrs["due_date"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDueDate(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := parseCastPointer(objAttrs["notification_group_audit_required_notification_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRequiredSourceType, func(val any) keyhubmodel.AuditAuditRequiredSourceType {
			return *val.(*keyhubmodel.AuditAuditRequiredSourceType)
		})
		diags.Append(d...)
		tkh.SetNotificationGroupAuditRequiredNotificationType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupEditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationGroupEditRequiredNotification()
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSNotificationGroupEditRequiredNotification_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	{
		val, d := parseCastPointer(objAttrs["reason"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupEditRequiredReason, func(val any) keyhubmodel.GroupGroupEditRequiredReason {
			return *val.(*keyhubmodel.GroupGroupEditRequiredReason)
		})
		diags.Append(d...)
		tkh.SetReason(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationGroupEditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationGroupEditRequiredNotification()
	{
		val, d := tfObjectToTKHDSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSNotificationGroupEditRequiredNotification_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	{
		val, d := parseCastPointer(objAttrs["reason"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupEditRequiredReason, func(val any) keyhubmodel.GroupGroupEditRequiredReason {
			return *val.(*keyhubmodel.GroupGroupEditRequiredReason)
		})
		diags.Append(d...)
		tkh.SetReason(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupEditRequiredNotification_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotification_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationGroupEditRequiredNotification_parameters()
	return tkh, diags
}

func tfObjectToTKHDSNotificationGroupEditRequiredNotification_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotification_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationGroupEditRequiredNotification_parameters()
	return tkh, diags
}

func tfObjectToTKHRSNotificationInvalidSignaturesDetectedNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationInvalidSignaturesDetectedNotification()
	return tkh, diags
}

func tfObjectToTKHDSNotificationInvalidSignaturesDetectedNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationInvalidSignaturesDetectedNotification()
	return tkh, diags
}

func tfObjectToTKHRSNotificationLicenseStatusNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationLicenseStatusNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationLicenseStatusNotification()
	tkh.SetActiveAccounts(int64PToInt32P(objAttrs["active_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHRSLicenseKeyHubLicenseInfo(ctx, recurse, objAttrs["license_info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLicenseInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationLicenseStatusNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationLicenseStatusNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationLicenseStatusNotification()
	tkh.SetActiveAccounts(int64PToInt32P(objAttrs["active_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSLicenseKeyHubLicenseInfo(ctx, recurse, objAttrs["license_info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLicenseInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationModificationRequestNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationModificationRequestNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationModificationRequestNotification()
	{
		val, d := tfToSlice(objAttrs["admins"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetAdmins(val)
	}
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSRequestModificationRequest(ctx, recurse, objAttrs["request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRequest(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationModificationRequestNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationModificationRequestNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationModificationRequestNotification()
	{
		val, d := tfToSlice(objAttrs["admins"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetAdmins(val)
	}
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSRequestModificationRequest(ctx, recurse, objAttrs["request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRequest(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationNotification()
	return tkh, diags
}

func tfObjectToTKHDSNotificationNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewNotificationNotification()
	return tkh, diags
}

func tfObjectToTKHRSNotificationNotifications(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationNotifications()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.NotificationNotificationable {
			tkh, d := tfObjectToTKHRSNotificationNotification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationNotifications(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationNotifications()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.NotificationNotificationable {
			tkh, d := tfObjectToTKHDSNotificationNotification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationOldApiVersionUsageNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationOldApiVersionUsageNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationOldApiVersionUsageNotification()
	tkh.SetApiVersion(int64PToInt32P(objAttrs["api_version"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationOldApiVersionUsageNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationOldApiVersionUsageNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationOldApiVersionUsageNotification()
	tkh.SetApiVersion(int64PToInt32P(objAttrs["api_version"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSClientOAuth2Client(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationProvisionConfigRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationProvisionConfigRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationProvisionConfigRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["systems"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationProvisionConfigRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationProvisionConfigRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationProvisionConfigRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["systems"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationRotatingPasswordRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationRotatingPasswordRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationRotatingPasswordRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := findGroupGroupPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationRotatingPasswordRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationRotatingPasswordRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationRotatingPasswordRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationUpdateAvailableNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationUpdateAvailableNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationUpdateAvailableNotification()
	{
		val, d := parsePointer2(objAttrs["released_at"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetReleasedAt(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationUpdateAvailableNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationUpdateAvailableNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationUpdateAvailableNotification()
	{
		val, d := parsePointer2(objAttrs["released_at"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetReleasedAt(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationVaultRecordExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationVaultRecordExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationVaultRecordExpiredNotification()
	{
		val, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, objAttrs["record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecord(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNotificationVaultRecordExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationVaultRecordExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewNotificationVaultRecordExpiredNotification()
	{
		val, d := tfObjectToTKHDSVaultVaultRecord(ctx, recurse, objAttrs["record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecord(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnit()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.OrganizationOrganizationalUnitPrimer = *(val.(*keyhubmodel.OrganizationOrganizationalUnitPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationAccountOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationAccountOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSOrganizationAccountOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationAccountOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationAccountOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationAccountOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationAccountOrganizationalUnitable {
			tkh, d := tfObjectToTKHDSOrganizationAccountOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationAccountOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationAccountOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDepth(int64PToInt32P(objAttrs["depth"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDepth(int64PToInt32P(objAttrs["depth"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSOrganizationOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnitAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSOrganizationOrganizationalUnitAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitAccountable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitAccountable {
			tkh, d := tfObjectToTKHDSOrganizationOrganizationalUnitAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHDSOrganizationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnitPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx, recurse, objAttrs["create_as_parent_of"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCreateAsParentOf(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAbstractProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningAbstractProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewProvisioningAbstractProvisionedLDAP_attributes()
	return tkh, diags
}

func tfObjectToTKHDSProvisioningAbstractProvisionedLDAP_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewProvisioningAbstractProvisionedLDAP_attributes()
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAccountProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAccountProvisioningStatus()
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["result"].(basetypes.StringValue), keyhubmodel.ParseProvisioningAccountProvisioningResult, func(val any) keyhubmodel.ProvisioningAccountProvisioningResult {
			return *val.(*keyhubmodel.ProvisioningAccountProvisioningResult)
		})
		diags.Append(d...)
		tkh.SetResult(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningAccountProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAccountProvisioningStatus()
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["result"].(basetypes.StringValue), keyhubmodel.ParseProvisioningAccountProvisioningResult, func(val any) keyhubmodel.ProvisioningAccountProvisioningResult {
			return *val.(*keyhubmodel.ProvisioningAccountProvisioningResult)
		})
		diags.Append(d...)
		tkh.SetResult(val)
	}
	{
		val, d := tfObjectToTKHDSGroupProvisioningGroup(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAccountProvisioningStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAccountProvisioningStatusReport()
	{
		val, d := tfToSlice(objAttrs["status"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningAccountProvisioningStatusable {
			tkh, d := tfObjectToTKHRSProvisioningAccountProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningAccountProvisioningStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningAccountProvisioningStatusReport()
	{
		val, d := tfToSlice(objAttrs["status"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningAccountProvisioningStatusable {
			tkh, d := tfObjectToTKHDSProvisioningAccountProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tkh.SetNumberOfFailedCalls(objAttrs["number_of_failed_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfNotPermittedCalls(objAttrs["number_of_not_permitted_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfSuccessfulCalls(objAttrs["number_of_successful_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningCircuitBreakerStatistics(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tkh.SetNumberOfFailedCalls(objAttrs["number_of_failed_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfNotPermittedCalls(objAttrs["number_of_not_permitted_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfSuccessfulCalls(objAttrs["number_of_successful_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningGroupOnSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemTypes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx, recurse, objAttrs["provgroups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetProvgroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapper(ctx, recurse, objAttrs["service_accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx, recurse, objAttrs["provgroups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetProvgroups(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountPrimerLinkableWrapper(ctx, recurse, objAttrs["service_accounts"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupProvisioningStatus()
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupProvisioningStatus_provisioningDuration(ctx, recurse, objAttrs["provisioning_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetProvisioningDuration(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningAccountProvisioningStatusReport(ctx, recurse, objAttrs["status_report"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatusReport(val)
	}
	tkh.SetVisibleOnDashboard(objAttrs["visible_on_dashboard"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupProvisioningStatus()
	{
		val, d := tfObjectToTKHDSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupProvisioningStatus_provisioningDuration(ctx, recurse, objAttrs["provisioning_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetProvisioningDuration(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningAccountProvisioningStatusReport(ctx, recurse, objAttrs["status_report"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatusReport(val)
	}
	tkh.SetVisibleOnDashboard(objAttrs["visible_on_dashboard"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupProvisioningStatus_provisioningDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupProvisioningStatus_provisioningDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupProvisioningStatus_provisioningDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningGroupProvisioningStatus_provisioningDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetUnlinkedCount(objAttrs["unlinked_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningOwnedGroupOnSystemsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetUnlinkedCount(objAttrs["unlinked_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNextUID(objAttrs["next_u_i_d"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionNumberSequence(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNextUID(objAttrs["next_u_i_d"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionNumberSequence_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequenceLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequenceLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionNumberSequenceable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionNumberSequenceLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequenceLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionNumberSequenceable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionNumberSequence(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx, recurse, objAttrs["systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionNumberSequence_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx, recurse, objAttrs["systems"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAD(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAD(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			tkh.AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetUid(objAttrs["uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	tkh.SetUid(objAttrs["uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedAccountable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedAccountable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureSyncLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureSyncLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureTenant(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureTenant()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdpDomain(objAttrs["idp_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureTenant(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedAzureTenant()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdpDomain(objAttrs["idp_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedInternalLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSClientLdapClient(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedInternalLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSClientLdapClient(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGid(objAttrs["gid"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, false, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedLDAP()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningAbstractProvisionedLDAP_attributes(ctx, false, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_d_n"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGid(objAttrs["gid"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionNumberSequence(ctx, false, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetGroupDN(objAttrs["group_d_n"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["provisioning_provisioned_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLog(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLog()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetErrors(int64PToInt32P(objAttrs["errors"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLog(objAttrs["log"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetModifications(int64PToInt32P(objAttrs["modifications"].(basetypes.Int64Value).ValueInt64Pointer()))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemSyncLog(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLog()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetErrors(int64PToInt32P(objAttrs["errors"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLog(objAttrs["log"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetModifications(int64PToInt32P(objAttrs["modifications"].(basetypes.Int64Value).ValueInt64Pointer()))
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLogLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLogLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemSyncLogable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystemSyncLog(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemSyncLogLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLogLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemSyncLogable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystemSyncLog(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLog_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystemSyncLog_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedAccount(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, objAttrs["issued_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetIssuedPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	tkh.SetLoginName(objAttrs["login_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx, recurse, objAttrs["management_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx, recurse, objAttrs["statistics"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx, recurse, objAttrs["supported_group_types"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedAccount(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, objAttrs["issued_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetIssuedPermissions(val)
	}
	tkh.SetLoginName(objAttrs["login_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisioningManagementPermissions(ctx, recurse, objAttrs["management_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningCircuitBreakerStatistics(ctx, recurse, objAttrs["statistics"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystemTypes(ctx, recurse, objAttrs["supported_group_types"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tkh.SetCreateNewGroupsAllowed(objAttrs["create_new_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCreateServiceAccountsAllowed(objAttrs["create_service_accounts_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetReuseExistingGroupsAllowed(objAttrs["reuse_existing_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisioningManagementPermissions(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tkh.SetCreateNewGroupsAllowed(objAttrs["create_new_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCreateServiceAccountsAllowed(objAttrs["create_service_accounts_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetReuseExistingGroupsAllowed(objAttrs["reuse_existing_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisioningStatus()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupProvisioningStatusable {
			tkh, d := tfObjectToTKHRSProvisioningGroupProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	tkh.SetIgnoreErrors(objAttrs["ignore_errors"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRestrictedByLicense(objAttrs["restricted_by_license"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningProvisioningStatus()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupProvisioningStatusable {
			tkh, d := tfObjectToTKHDSProvisioningGroupProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	tkh.SetIgnoreErrors(objAttrs["ignore_errors"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRestrictedByLicense(objAttrs["restricted_by_license"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningTokenPassword(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningTokenPasswordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningTokenPassword()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningTokenPassword(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningTokenPasswordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewProvisioningTokenPassword()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractApplicationModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractApplicationModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractApplicationModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestAbstractApplicationModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractApplicationModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractApplicationModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractOrganizationalUnitModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractOrganizationalUnitModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestAbstractOrganizationalUnitModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractOrganizationalUnitModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractProvisionedSystemModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractProvisionedSystemModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestAbstractProvisionedSystemModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAbstractProvisionedSystemModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptGrantAccessRequestParameters()
	{
		val, d := tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx, recurse, objAttrs["access_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccessDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestAcceptGrantAccessRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptGrantAccessRequestParameters()
	{
		val, d := tfObjectToTKHDSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx, recurse, objAttrs["access_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccessDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptGrantAccessRequestParameters_accessDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptGrantAccessRequestParameters_accessDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptJoinGroupRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptJoinGroupRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptJoinGroupRequestParameters()
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetMakeManager(objAttrs["make_manager"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSRequestAcceptJoinGroupRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptJoinGroupRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAcceptJoinGroupRequestParameters()
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetMakeManager(objAttrs["make_manager"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptModificationRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptModificationRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewRequestAcceptModificationRequestParameters()
	return tkh, diags
}

func tfObjectToTKHDSRequestAcceptModificationRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptModificationRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewRequestAcceptModificationRequestParameters()
	return tkh, diags
}

func tfObjectToTKHRSRequestAddGroupAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAddGroupAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAddGroupAdminRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["new_admin_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetNewAdmin(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestAddGroupAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAddGroupAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestAddGroupAdminRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["new_admin"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNewAdmin(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateGroupOnSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["group_on_system_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetGroupOnSystemType(val)
	}
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestCreateGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateGroupOnSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["group_on_system_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetGroupOnSystemType(val)
	}
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestCreateGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateServiceAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateServiceAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateServiceAccountRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestCreateServiceAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateServiceAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestCreateServiceAccountRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestDisable2FARequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestDisable2FARequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestDisable2FARequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetSubject(objAttrs["subject"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestDisable2FARequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestDisable2FARequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestDisable2FARequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetSubject(objAttrs["subject"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestEnableTechnicalAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestEnableTechnicalAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestEnableTechnicalAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestEnableTechnicalAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestEnableTechnicalAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestEnableTechnicalAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestExtendAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestExtendAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestExtendAccessRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["extend_until"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExtendUntil(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestExtendAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestExtendAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestExtendAccessRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["extend_until"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExtendUntil(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantAccessRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantAccessRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantApplicationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantApplicationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantApplicationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantApplicationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantApplicationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantApplicationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantClientPermissionRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantClientPermissionRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantClientPermissionRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := parseCastPointer(objAttrs["permission_type"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetPermissionType(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantClientPermissionRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantClientPermissionRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantClientPermissionRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := parseCastPointer(objAttrs["permission_type"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetPermissionType(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantGroupOnSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantGroupOnSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantGroupOnSystemRequestRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantGroupOnSystemRequestRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantGroupOnSystemRequestRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantGroupOnSystemRequestRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantServiceAccountGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantServiceAccountGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantServiceAccountGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	{
		val, d := findServiceaccountServiceAccountPrimerByUUID(ctx, objAttrs["service_account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestGrantServiceAccountGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantServiceAccountGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestGrantServiceAccountGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx, false, objAttrs["service_account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestJoinGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestJoinGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestJoinGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestJoinGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestJoinVaultRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinVaultRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestJoinVaultRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestJoinVaultRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinVaultRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestJoinVaultRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequestLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequestLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestModificationRequestable {
			tkh, d := tfObjectToTKHRSRequestModificationRequest(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestModificationRequestLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequestLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestModificationRequestable {
			tkh, d := tfObjectToTKHDSRequestModificationRequest(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequest_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequest_additionalObjects()
	{
		val, d := tfObjectToTKHRSRequestAcceptModificationRequestParameters(ctx, recurse, objAttrs["accept_params"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAcceptParams(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSRequestPasswordResetRequestStatus(ctx, recurse, objAttrs["reset_status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetResetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequest_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestModificationRequest_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSRequestPasswordResetRequestStatus(ctx, recurse, objAttrs["reset_status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetResetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestPasswordResetRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestPasswordResetRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetNewVaultAndDirectoryPassword(objAttrs["new_vault_and_directory_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNewVaultPassword(objAttrs["new_vault_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUnsyncedPassword(objAttrs["unsynced_password"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestPasswordResetRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestPasswordResetRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestPasswordResetRequestStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestPasswordResetRequestStatus()
	{
		val, d := tfToTimePointer(objAttrs["cooldown_end"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCooldownEnd(val)
	}
	{
		val, d := tfToSlice(objAttrs["managers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetManagers(val)
	}
	tkh.SetNrAccepted(objAttrs["nr_accepted"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["reset_via_mail"].(basetypes.StringValue), keyhubmodel.ParseRequestPasswordResetEmailType, func(val any) keyhubmodel.RequestPasswordResetEmailType {
			return *val.(*keyhubmodel.RequestPasswordResetEmailType)
		})
		diags.Append(d...)
		tkh.SetResetViaMail(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestPasswordResetRequestStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestPasswordResetRequestStatus()
	{
		val, d := tfToTimePointer(objAttrs["cooldown_end"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCooldownEnd(val)
	}
	{
		val, d := tfToSlice(objAttrs["managers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetManagers(val)
	}
	tkh.SetNrAccepted(objAttrs["nr_accepted"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["reset_via_mail"].(basetypes.StringValue), keyhubmodel.ParseRequestPasswordResetEmailType, func(val any) keyhubmodel.RequestPasswordResetEmailType {
			return *val.(*keyhubmodel.RequestPasswordResetEmailType)
		})
		diags.Append(d...)
		tkh.SetResetViaMail(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestRemoveGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveOrganizationalUnitRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveOrganizationalUnitRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveOrganizationalUnitRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetOrganizationalUnitName(objAttrs["organizational_unit_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestRemoveOrganizationalUnitRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveOrganizationalUnitRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveOrganizationalUnitRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetOrganizationalUnitName(objAttrs["organizational_unit_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveProvisionedSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveProvisionedSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveProvisionedSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetSystemName(objAttrs["system_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestRemoveProvisionedSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveProvisionedSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRemoveProvisionedSystemRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetSystemName(objAttrs["system_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestReviewAuditRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestReviewAuditRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestReviewAuditRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestReviewAuditRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestReviewAuditRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestReviewAuditRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestRevokeAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRevokeAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRevokeAdminRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["admin_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAdmin(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestRevokeAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRevokeAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestRevokeAdminRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["admin"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAdmin(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestSetupAuthorizingGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupAuthorizingGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestSetupAuthorizingGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := parseCastPointer(objAttrs["authorizing_group_type"].(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
			return *val.(*keyhubmodel.RequestAuthorizingGroupType)
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupType(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["requesting_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestSetupAuthorizingGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupAuthorizingGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestSetupAuthorizingGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := parseCastPointer(objAttrs["authorizing_group_type"].(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
			return *val.(*keyhubmodel.RequestAuthorizingGroupType)
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupType(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["requesting_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestSetupNestedGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupNestedGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestSetupNestedGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := parseCastPointer(objAttrs["account_action"].(basetypes.StringValue), keyhubmodel.ParseRequestGroupNestAccountAction, func(val any) keyhubmodel.RequestGroupNestAccountAction {
			return *val.(*keyhubmodel.RequestGroupNestAccountAction)
		})
		diags.Append(d...)
		tkh.SetAccountAction(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["requesting_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestSetupNestedGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupNestedGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestSetupNestedGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := parseCastPointer(objAttrs["account_action"].(basetypes.StringValue), keyhubmodel.ParseRequestGroupNestAccountAction, func(val any) keyhubmodel.RequestGroupNestAccountAction {
			return *val.(*keyhubmodel.RequestGroupNestAccountAction)
		})
		diags.Append(d...)
		tkh.SetAccountAction(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["requesting_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferApplicationAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferApplicationAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferApplicationAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferApplicationAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferApplicationOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferApplicationOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferApplicationOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferApplicationOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["application"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferAuditorGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferAuditorGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferAuditorGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferAuditorGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferAuditorGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferAuditorGroupRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferGroupOnSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferGroupOnSystemOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferGroupOnSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferGroupOnSystemOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferOrganizationalUnitOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferOrganizationalUnitOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferOrganizationalUnitOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferOrganizationalUnitOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferProvisionedSystemAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemContentAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemContentAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferProvisionedSystemContentAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemContentAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferProvisionedSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferProvisionedSystemOwnershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferServiceAccountAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferServiceAccountAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferServiceAccountAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findServiceaccountServiceAccountPrimerByUUID(ctx, objAttrs["service_account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestTransferServiceAccountAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferServiceAccountAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestTransferServiceAccountAdministrationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx, false, objAttrs["service_account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestUpdateGroupMembershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestUpdateGroupMembershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestUpdateGroupMembershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_to_update_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccountToUpdate(val)
	}
	{
		val, d := parsePointer2(objAttrs["current_end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetCurrentEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["current_rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetCurrentRights(val)
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["update_group_membership_type"].(basetypes.StringValue), keyhubmodel.ParseRequestUpdateGroupMembershipType, func(val any) keyhubmodel.RequestUpdateGroupMembershipType {
			return *val.(*keyhubmodel.RequestUpdateGroupMembershipType)
		})
		diags.Append(d...)
		tkh.SetUpdateGroupMembershipType(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestUpdateGroupMembershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestUpdateGroupMembershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestUpdateGroupMembershipRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account_to_update"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccountToUpdate(val)
	}
	{
		val, d := parsePointer2(objAttrs["current_end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetCurrentEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["current_rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetCurrentRights(val)
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["update_group_membership_type"].(basetypes.StringValue), keyhubmodel.ParseRequestUpdateGroupMembershipType, func(val any) keyhubmodel.RequestUpdateGroupMembershipType {
			return *val.(*keyhubmodel.RequestUpdateGroupMembershipType)
		})
		diags.Append(d...)
		tkh.SetUpdateGroupMembershipType(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestVerifyInternalAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestVerifyInternalAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestVerifyInternalAccountRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetInternalAccountName(objAttrs["internal_account_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSRequestVerifyInternalAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestVerifyInternalAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewRequestVerifyInternalAccountRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetInternalAccountName(objAttrs["internal_account_name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["password_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tkh.SetPasswordRotation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["password"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tkh.SetPasswordRotation(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSServiceaccountServiceAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["provisioning_group_on_system_primer_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := findServiceaccountServiceAccountPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountGroupLinkableWrapper(ctx, recurse, objAttrs["groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats()
	tkh.SetDisabledCount(objAttrs["disabled_count"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx, recurse, objAttrs["password_scheme_enabled_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordSchemeEnabledStats(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_systemStats(ctx, recurse, objAttrs["system_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystemStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats()
	tkh.SetDisabledCount(objAttrs["disabled_count"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx, recurse, objAttrs["password_scheme_enabled_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordSchemeEnabledStats(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountsAuditStats_systemStats(ctx, recurse, objAttrs["system_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystemStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats()
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats()
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_systemStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats_systemStats()
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountsAuditStats_systemStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewServiceaccountServiceAccountsAuditStats_systemStats()
	return tkh, diags
}

func tfObjectToTKHRSSimpleStringValue(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleStringValueable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSimpleStringValue()
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSSimpleStringValue(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleStringValueable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSimpleStringValue()
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSSimpleVersionInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleVersionInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSimpleVersionInfo()
	{
		val, d := tfToSlice(objAttrs["contract_versions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int32 {
			return int32(val.(basetypes.Int64Value).ValueInt64())
		})
		diags.Append(d...)
		tkh.SetContractVersions(val)
	}
	tkh.SetKeyHubVersion(objAttrs["key_hub_version"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSSimpleVersionInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleVersionInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewSimpleVersionInfo()
	{
		val, d := tfToSlice(objAttrs["contract_versions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int32 {
			return int32(val.(basetypes.Int64Value).ValueInt64())
		})
		diags.Append(d...)
		tkh.SetContractVersions(val)
	}
	tkh.SetKeyHubVersion(objAttrs["key_hub_version"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRecordCount(int64PToInt32P(objAttrs["record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["vault_deleted_vault_holder_type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultDeletedVaultHolderType(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultDeletedVaultHolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultDeletedVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRecordCount(int64PToInt32P(objAttrs["record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["vault_deleted_vault_holder_type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultDeletedVaultHolderType(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSVaultDeletedVaultHolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultDeletedVaultHolderable {
			tkh, d := tfObjectToTKHRSVaultDeletedVaultHolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultDeletedVaultHolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultDeletedVaultHolderable {
			tkh, d := tfObjectToTKHDSVaultDeletedVaultHolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolder_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultDeletedVaultHolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultHolder_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultRecovery()
	tkh.SetPrefix(objAttrs["prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["target_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTargetGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultDeletedVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultDeletedVaultRecovery()
	tkh.SetPrefix(objAttrs["prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, objAttrs["target_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTargetGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultMoveVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultMoveVaultRecord()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseVaultMoveVaultRecordAction, func(val any) keyhubmodel.VaultMoveVaultRecordAction {
			return *val.(*keyhubmodel.VaultMoveVaultRecordAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSVaultMoveVaultRecord_shareDuration(ctx, recurse, objAttrs["share_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultMoveVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultMoveVaultRecord()
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseVaultMoveVaultRecordAction, func(val any) keyhubmodel.VaultMoveVaultRecordAction {
			return *val.(*keyhubmodel.VaultMoveVaultRecordAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSVaultMoveVaultRecord_shareDuration(ctx, recurse, objAttrs["share_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultMoveVaultRecord_shareDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecord_shareDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultMoveVaultRecord_shareDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultMoveVaultRecord_shareDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecord_shareDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultMoveVaultRecord_shareDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVault(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVault()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccessAvailable(objAttrs["access_available"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["records"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVault(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVault()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccessAvailable(objAttrs["access_available"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["records"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHDSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewVaultVaultHolder()
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	tkh := keyhubmodel.NewVaultVaultHolder()
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHDSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := findVaultVaultRecordPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordSecrets(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordSecrets()
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFile(objAttrs["file"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTotp(objAttrs["totp"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetWriteTotp(objAttrs["write_totp"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordSecrets(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordSecrets()
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFile(objAttrs["file"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTotp(objAttrs["totp"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShare(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordShare()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_vault_record_share_type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordShare(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordShare()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_vault_record_share_type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShareSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSlice(objAttrs["children"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordShareSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSlice(objAttrs["children"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHDSVaultVaultRecordShare(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordShare(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(objAttrs["delete_tile"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordSecrets(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShareSummary(ctx, recurse, objAttrs["share_summary"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx, recurse, objAttrs["shares"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShares(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultHolder(ctx, recurse, objAttrs["vaultholder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordSecrets(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordShareSummary(ctx, recurse, objAttrs["share_summary"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimerLinkableWrapper(ctx, recurse, objAttrs["shares"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShares(val)
	}
	{
		val, d := tfObjectToTKHDSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultHolder(ctx, recurse, objAttrs["vaultholder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecovery()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultRecovery()
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultUnlock(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultUnlock()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultUnlock(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultUnlock()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultUnlockResponse(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockResponseable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultUnlockResponse()
	{
		val, d := tfToTimePointer(objAttrs["expires_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiresAt(val)
	}
	tkh.SetSessionPassword(objAttrs["session_password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultUnlockResponse(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockResponseable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewVaultVaultUnlockResponse()
	{
		val, d := tfToTimePointer(objAttrs["expires_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiresAt(val)
	}
	tkh.SetSessionPassword(objAttrs["session_password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAllTypes(objAttrs["all_types"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseWebhookWebhookAuthenticationScheme, func(val any) keyhubmodel.WebhookWebhookAuthenticationScheme {
			return *val.(*keyhubmodel.WebhookWebhookAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(objAttrs["basic_auth_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBasicAuthUsername(objAttrs["basic_auth_username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBearerToken(objAttrs["bearer_token"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetCustomHeaderName(objAttrs["custom_header_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderValue(objAttrs["custom_header_value"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVerbosePayloads(objAttrs["verbose_payloads"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhook(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAllTypes(objAttrs["all_types"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseWebhookWebhookAuthenticationScheme, func(val any) keyhubmodel.WebhookWebhookAuthenticationScheme {
			return *val.(*keyhubmodel.WebhookWebhookAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(objAttrs["basic_auth_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBasicAuthUsername(objAttrs["basic_auth_username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBearerToken(objAttrs["bearer_token"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetCustomHeaderName(objAttrs["custom_header_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderValue(objAttrs["custom_header_value"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVerbosePayloads(objAttrs["verbose_payloads"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSWebhookWebhook_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDelivery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDelivery()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookPush(ctx, false, objAttrs["payload"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPayload(val)
	}
	tkh.SetReponseHeaders(objAttrs["reponse_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRequestHeaders(objAttrs["request_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResponse(objAttrs["response"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetStatus(int64PToInt32P(objAttrs["status"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetTime(int64PToInt32P(objAttrs["time"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToTimePointer(objAttrs["trigger_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTriggerTime(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhookDelivery_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookDelivery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDelivery()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookPush(ctx, false, objAttrs["payload"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPayload(val)
	}
	tkh.SetReponseHeaders(objAttrs["reponse_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRequestHeaders(objAttrs["request_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResponse(objAttrs["response"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetStatus(int64PToInt32P(objAttrs["status"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetTime(int64PToInt32P(objAttrs["time"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToTimePointer(objAttrs["trigger_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTriggerTime(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSWebhookWebhookDelivery_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDeliveryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDeliveryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookDeliveryable {
			tkh, d := tfObjectToTKHRSWebhookWebhookDelivery(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookDeliveryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDeliveryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookDeliveryable {
			tkh, d := tfObjectToTKHDSWebhookWebhookDelivery(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDelivery_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDelivery_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDelivery_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookDelivery_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDelivery_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookDelivery_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHRSWebhookWebhook(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHDSWebhookWebhook(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookNameUuid(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookNameUuidable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookNameUuid()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSLinkable(ctx, recurse, objAttrs["object"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetObject(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookNameUuid(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookNameUuidable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookNameUuid()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSLinkable(ctx, recurse, objAttrs["object"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetObject(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookPush(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookPushable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookPush()
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["by_party"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetByParty(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group2"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup2(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group_classification"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupClassification(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetModificationRequest(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	tkh.SetSeq(objAttrs["seq"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["service_account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["timestamp"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTimestamp(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	{
		val, d := parseCastPointer(objAttrs["webhook_webhook_push_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetWebhookWebhookPushType(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookPush(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookPushable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhookPush()
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["by_party"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetByParty(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group2"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup2(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group_classification"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupClassification(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetModificationRequest(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	tkh.SetSeq(objAttrs["seq"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["service_account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["timestamp"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTimestamp(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookNameUuid(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	{
		val, d := parseCastPointer(objAttrs["webhook_webhook_push_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetWebhookWebhookPushType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhook_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	tkh := keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func fillDataStructFromTFObjectRSAuditInfo(data *auditInfoDataRS, obj types.Object) {
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LastModifiedBy = obj.Attributes()["last_modified_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuditInfo(data *auditInfoDataDS, obj types.Object) {
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LastModifiedBy = obj.Attributes()["last_modified_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSErrorReport(data *errorReportDataRS, obj types.Object) {
	data.ApplicationError = obj.Attributes()["application_error"].(basetypes.StringValue)
	data.ApplicationErrorParameters = obj.Attributes()["application_error_parameters"].(basetypes.ObjectValue)
	data.Code = obj.Attributes()["code"].(basetypes.Int64Value)
	data.ErrorDetails = obj.Attributes()["error_details"].(basetypes.ListValue)
	data.Exception = obj.Attributes()["exception"].(basetypes.StringValue)
	data.Message = obj.Attributes()["message"].(basetypes.StringValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Stacktrace = obj.Attributes()["stacktrace"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSErrorReport(data *errorReportDataDS, obj types.Object) {
	data.ApplicationError = obj.Attributes()["application_error"].(basetypes.StringValue)
	data.ApplicationErrorParameters = obj.Attributes()["application_error_parameters"].(basetypes.ObjectValue)
	data.Code = obj.Attributes()["code"].(basetypes.Int64Value)
	data.ErrorDetails = obj.Attributes()["error_details"].(basetypes.ListValue)
	data.Exception = obj.Attributes()["exception"].(basetypes.StringValue)
	data.Message = obj.Attributes()["message"].(basetypes.StringValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Stacktrace = obj.Attributes()["stacktrace"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSErrorReport_applicationErrorParameters(data *errorReport_applicationErrorParametersDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSErrorReport_applicationErrorParameters(data *errorReport_applicationErrorParametersDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSGeneratedSecret(data *generatedSecretDataRS, obj types.Object) {
	data.GeneratedSecret = obj.Attributes()["generated_secret"].(basetypes.StringValue)
	data.OldSecret = obj.Attributes()["old_secret"].(basetypes.StringValue)
	data.Regenerate = obj.Attributes()["regenerate"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGeneratedSecret(data *generatedSecretDataDS, obj types.Object) {
	data.GeneratedSecret = obj.Attributes()["generated_secret"].(basetypes.StringValue)
	data.OldSecret = obj.Attributes()["old_secret"].(basetypes.StringValue)
	data.Regenerate = obj.Attributes()["regenerate"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSLinkable(data *linkableDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSLinkable(data *linkableDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSNonLinkable(data *nonLinkableDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSNonLinkable(data *nonLinkableDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSRestLink(data *restLinkDataRS, obj types.Object) {
	data.Href = obj.Attributes()["href"].(basetypes.StringValue)
	data.ID = obj.Attributes()["id"].(basetypes.Int64Value)
	data.Rel = obj.Attributes()["rel"].(basetypes.StringValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRestLink(data *restLinkDataDS, obj types.Object) {
	data.Href = obj.Attributes()["href"].(basetypes.StringValue)
	data.ID = obj.Attributes()["id"].(basetypes.Int64Value)
	data.Rel = obj.Attributes()["rel"].(basetypes.StringValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSSegmentCount(data *segmentCountDataRS, obj types.Object) {
	data.Count = obj.Attributes()["count"].(basetypes.Int64Value)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSSegmentCount(data *segmentCountDataDS, obj types.Object) {
	data.Count = obj.Attributes()["count"].(basetypes.Int64Value)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuditAuditRecord(data *auditAuditRecordDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuditAuditRecordType = obj.Attributes()["audit_audit_record_type"].(basetypes.StringValue)
	data.DateTime = obj.Attributes()["date_time"].(basetypes.StringValue)
	data.OnAccount = obj.Attributes()["on_account"].(basetypes.StringValue)
	data.OnCertificate = obj.Attributes()["on_certificate"].(basetypes.StringValue)
	data.OnClient = obj.Attributes()["on_client"].(basetypes.StringValue)
	data.OnDirectory = obj.Attributes()["on_directory"].(basetypes.StringValue)
	data.OnGroup = obj.Attributes()["on_group"].(basetypes.StringValue)
	data.OnGroup2 = obj.Attributes()["on_group2"].(basetypes.StringValue)
	data.OnGroupClassification = obj.Attributes()["on_group_classification"].(basetypes.StringValue)
	data.OnOrganizationalUnit = obj.Attributes()["on_organizational_unit"].(basetypes.StringValue)
	data.OnServiceAccount = obj.Attributes()["on_service_account"].(basetypes.StringValue)
	data.OnSystem = obj.Attributes()["on_system"].(basetypes.StringValue)
	data.OnVaultRecord = obj.Attributes()["on_vault_record"].(basetypes.StringValue)
	data.OnWebhook = obj.Attributes()["on_webhook"].(basetypes.StringValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.PerformedBy = obj.Attributes()["performed_by"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuditAuditRecord(data *auditAuditRecordDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuditAuditRecordType = obj.Attributes()["audit_audit_record_type"].(basetypes.StringValue)
	data.DateTime = obj.Attributes()["date_time"].(basetypes.StringValue)
	data.OnAccount = obj.Attributes()["on_account"].(basetypes.StringValue)
	data.OnCertificate = obj.Attributes()["on_certificate"].(basetypes.StringValue)
	data.OnClient = obj.Attributes()["on_client"].(basetypes.StringValue)
	data.OnDirectory = obj.Attributes()["on_directory"].(basetypes.StringValue)
	data.OnGroup = obj.Attributes()["on_group"].(basetypes.StringValue)
	data.OnGroup2 = obj.Attributes()["on_group2"].(basetypes.StringValue)
	data.OnGroupClassification = obj.Attributes()["on_group_classification"].(basetypes.StringValue)
	data.OnOrganizationalUnit = obj.Attributes()["on_organizational_unit"].(basetypes.StringValue)
	data.OnServiceAccount = obj.Attributes()["on_service_account"].(basetypes.StringValue)
	data.OnSystem = obj.Attributes()["on_system"].(basetypes.StringValue)
	data.OnVaultRecord = obj.Attributes()["on_vault_record"].(basetypes.StringValue)
	data.OnWebhook = obj.Attributes()["on_webhook"].(basetypes.StringValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.PerformedBy = obj.Attributes()["performed_by"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuditAuditRecordLinkableWrapper(data *auditAuditRecordLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSAuditAuditRecordLinkableWrapper(data *auditAuditRecordLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSAuditAuditRecord_additionalObjects(data *auditAuditRecord_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSAuditAuditRecord_additionalObjects(data *auditAuditRecord_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSAuthAccount(data *authAccountDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryPasswordChangeRequired = obj.Attributes()["directory_password_change_required"].(basetypes.BoolValue)
	data.DirectoryRotatingPassword = obj.Attributes()["directory_rotating_password"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.Email = obj.Attributes()["email"].(basetypes.StringValue)
	data.IDInDirectory = obj.Attributes()["id_in_directory"].(basetypes.StringValue)
	data.KeyHubPasswordChangeRequired = obj.Attributes()["key_hub_password_change_required"].(basetypes.BoolValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TokenPasswordEnabled = obj.Attributes()["token_password_enabled"].(basetypes.BoolValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.ValidInDirectory = obj.Attributes()["valid_in_directory"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSAuthAccount(data *authAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryPasswordChangeRequired = obj.Attributes()["directory_password_change_required"].(basetypes.BoolValue)
	data.DirectoryRotatingPassword = obj.Attributes()["directory_rotating_password"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.Email = obj.Attributes()["email"].(basetypes.StringValue)
	data.IDInDirectory = obj.Attributes()["id_in_directory"].(basetypes.StringValue)
	data.KeyHubPasswordChangeRequired = obj.Attributes()["key_hub_password_change_required"].(basetypes.BoolValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TokenPasswordEnabled = obj.Attributes()["token_password_enabled"].(basetypes.BoolValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.ValidInDirectory = obj.Attributes()["valid_in_directory"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSAuthAccountBulkUpdate(data *authAccountBulkUpdateDataRS, obj types.Object) {
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.ExclusiveSelection = obj.Attributes()["exclusive_selection"].(basetypes.BoolValue)
	data.SelectedAccounts = obj.Attributes()["selected_accounts"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSAuthAccountBulkUpdate(data *authAccountBulkUpdateDataDS, obj types.Object) {
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.ExclusiveSelection = obj.Attributes()["exclusive_selection"].(basetypes.BoolValue)
	data.SelectedAccounts = obj.Attributes()["selected_accounts"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSAuthAccountChangeLocale(data *authAccountChangeLocaleDataRS, obj types.Object) {
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthAccountChangeLocale(data *authAccountChangeLocaleDataDS, obj types.Object) {
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthAccountLinkableWrapper(data *authAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSAuthAccountLinkableWrapper(data *authAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSAuthAccountPrimer(data *authAccountPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthAccountPrimer(data *authAccountPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthAccountRecoveryStatus(data *authAccountRecoveryStatusDataRS, obj types.Object) {
	data.Pending2FARecoveryRequest = obj.Attributes()["pending2_f_a_recovery_request"].(basetypes.BoolValue)
	data.PendingPasswordRecoveryRequest = obj.Attributes()["pending_password_recovery_request"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSAuthAccountRecoveryStatus(data *authAccountRecoveryStatusDataDS, obj types.Object) {
	data.Pending2FARecoveryRequest = obj.Attributes()["pending2_f_a_recovery_request"].(basetypes.BoolValue)
	data.PendingPasswordRecoveryRequest = obj.Attributes()["pending_password_recovery_request"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSAuthAccountSettings(data *authAccountSettingsDataRS, obj types.Object) {
	data.DefaultOrganizationalUnitUUID = obj.Attributes()["default_organizational_unit_uuid"].(basetypes.StringValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.InGroups = obj.Attributes()["in_groups"].(basetypes.BoolValue)
	data.InMultipleOrganizationalUnits = obj.Attributes()["in_multiple_organizational_units"].(basetypes.BoolValue)
	data.KeyHubAdmin = obj.Attributes()["key_hub_admin"].(basetypes.BoolValue)
	data.MultipleOrganizationalUnitsExist = obj.Attributes()["multiple_organizational_units_exist"].(basetypes.BoolValue)
	data.PasswordMode = obj.Attributes()["password_mode"].(basetypes.StringValue)
	data.SshPublicKey = obj.Attributes()["ssh_public_key"].(basetypes.StringValue)
	data.TwoFactorAuthentication = obj.Attributes()["two_factor_authentication"].(basetypes.StringValue)
	data.UseTokenPassword = obj.Attributes()["use_token_password"].(basetypes.BoolValue)
	data.VaultStatus = obj.Attributes()["vault_status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthAccountSettings(data *authAccountSettingsDataDS, obj types.Object) {
	data.DefaultOrganizationalUnit = obj.Attributes()["default_organizational_unit"].(basetypes.ObjectValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.InGroups = obj.Attributes()["in_groups"].(basetypes.BoolValue)
	data.InMultipleOrganizationalUnits = obj.Attributes()["in_multiple_organizational_units"].(basetypes.BoolValue)
	data.KeyHubAdmin = obj.Attributes()["key_hub_admin"].(basetypes.BoolValue)
	data.MultipleOrganizationalUnitsExist = obj.Attributes()["multiple_organizational_units_exist"].(basetypes.BoolValue)
	data.PasswordMode = obj.Attributes()["password_mode"].(basetypes.StringValue)
	data.SshPublicKey = obj.Attributes()["ssh_public_key"].(basetypes.StringValue)
	data.TwoFactorAuthentication = obj.Attributes()["two_factor_authentication"].(basetypes.StringValue)
	data.UseTokenPassword = obj.Attributes()["use_token_password"].(basetypes.BoolValue)
	data.VaultStatus = obj.Attributes()["vault_status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthAccountStatus(data *authAccountStatusDataRS, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DeclineRecoveryRequests = obj.Attributes()["decline_recovery_requests"].(basetypes.BoolValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TwoFactorAuthenticationEnabled = obj.Attributes()["two_factor_authentication_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSAuthAccountStatus(data *authAccountStatusDataDS, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DeclineRecoveryRequests = obj.Attributes()["decline_recovery_requests"].(basetypes.BoolValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TwoFactorAuthenticationEnabled = obj.Attributes()["two_factor_authentication_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSAuthAccount_additionalObjects(data *authAccount_additionalObjectsDataRS, obj types.Object) {
	data.ActiveLogin = obj.Attributes()["active_login"].(basetypes.BoolValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.PendingRecoveryRequests = obj.Attributes()["pending_recovery_requests"].(basetypes.ObjectValue)
	data.Settings = obj.Attributes()["settings"].(basetypes.ObjectValue)
	data.StoredAttributes = obj.Attributes()["stored_attributes"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSAuthAccount_additionalObjects(data *authAccount_additionalObjectsDataDS, obj types.Object) {
	data.ActiveLogin = obj.Attributes()["active_login"].(basetypes.BoolValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.PendingRecoveryRequests = obj.Attributes()["pending_recovery_requests"].(basetypes.ObjectValue)
	data.Settings = obj.Attributes()["settings"].(basetypes.ObjectValue)
	data.StoredAttributes = obj.Attributes()["stored_attributes"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSAuthAccountsAuditStats(data *authAccountsAuditStatsDataRS, obj types.Object) {
	data.DirectoryStats = obj.Attributes()["directory_stats"].(basetypes.ObjectValue)
	data.TwoFAStats = obj.Attributes()["two_f_a_stats"].(basetypes.ObjectValue)
	data.ValidityStats = obj.Attributes()["validity_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSAuthAccountsAuditStats(data *authAccountsAuditStatsDataDS, obj types.Object) {
	data.DirectoryStats = obj.Attributes()["directory_stats"].(basetypes.ObjectValue)
	data.TwoFAStats = obj.Attributes()["two_f_a_stats"].(basetypes.ObjectValue)
	data.ValidityStats = obj.Attributes()["validity_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSAuthAccountsAuditStats_directoryStats(data *authAccountsAuditStats_directoryStatsDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSAuthAccountsAuditStats_directoryStats(data *authAccountsAuditStats_directoryStatsDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSAuthAccountsAuditStats_twoFAStats(data *authAccountsAuditStats_twoFAStatsDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSAuthAccountsAuditStats_twoFAStats(data *authAccountsAuditStats_twoFAStatsDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSAuthAccountsAuditStats_validityStats(data *authAccountsAuditStats_validityStatsDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSAuthAccountsAuditStats_validityStats(data *authAccountsAuditStats_validityStatsDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSAuthInternalAccount(data *authInternalAccountDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.ActivationCode = obj.Attributes()["activation_code"].(basetypes.StringValue)
	data.ActivationDeadline = obj.Attributes()["activation_deadline"].(basetypes.StringValue)
	data.Company = obj.Attributes()["company"].(basetypes.StringValue)
	data.FirstName = obj.Attributes()["first_name"].(basetypes.StringValue)
	data.LastName = obj.Attributes()["last_name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Telephone = obj.Attributes()["telephone"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthInternalAccount(data *authInternalAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryPasswordChangeRequired = obj.Attributes()["directory_password_change_required"].(basetypes.BoolValue)
	data.DirectoryRotatingPassword = obj.Attributes()["directory_rotating_password"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.Email = obj.Attributes()["email"].(basetypes.StringValue)
	data.IDInDirectory = obj.Attributes()["id_in_directory"].(basetypes.StringValue)
	data.KeyHubPasswordChangeRequired = obj.Attributes()["key_hub_password_change_required"].(basetypes.BoolValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TokenPasswordEnabled = obj.Attributes()["token_password_enabled"].(basetypes.BoolValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.ValidInDirectory = obj.Attributes()["valid_in_directory"].(basetypes.BoolValue)
	data.ActivationCode = obj.Attributes()["activation_code"].(basetypes.StringValue)
	data.ActivationDeadline = obj.Attributes()["activation_deadline"].(basetypes.StringValue)
	data.Company = obj.Attributes()["company"].(basetypes.StringValue)
	data.FirstName = obj.Attributes()["first_name"].(basetypes.StringValue)
	data.LastName = obj.Attributes()["last_name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Telephone = obj.Attributes()["telephone"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthInternalAccountLinkableWrapper(data *authInternalAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSAuthInternalAccountLinkableWrapper(data *authInternalAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSAuthInternalAccountStatusObject(data *authInternalAccountStatusObjectDataRS, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthInternalAccountStatusObject(data *authInternalAccountStatusObjectDataDS, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthMoveInternalAccount(data *authMoveInternalAccountDataRS, obj types.Object) {
	data.InternalDirectory = obj.Attributes()["internal_directory"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSAuthMoveInternalAccount(data *authMoveInternalAccountDataDS, obj types.Object) {
	data.InternalDirectory = obj.Attributes()["internal_directory"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSAuthPermission(data *authPermissionDataRS, obj types.Object) {
	data.Full = obj.Attributes()["full"].(basetypes.StringValue)
	data.Instances = obj.Attributes()["instances"].(basetypes.ListValue)
	data.Operations = obj.Attributes()["operations"].(basetypes.ListValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthPermission(data *authPermissionDataDS, obj types.Object) {
	data.Full = obj.Attributes()["full"].(basetypes.StringValue)
	data.Instances = obj.Attributes()["instances"].(basetypes.ListValue)
	data.Operations = obj.Attributes()["operations"].(basetypes.ListValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthStoredAccountAttribute(data *authStoredAccountAttributeDataRS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSAuthStoredAccountAttribute(data *authStoredAccountAttributeDataDS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSAuthStoredAccountAttributes(data *authStoredAccountAttributesDataRS, obj types.Object) {
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSAuthStoredAccountAttributes(data *authStoredAccountAttributesDataDS, obj types.Object) {
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSCertificateCertificate(data *certificateCertificateDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.KeyData = obj.Attributes()["key_data"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSCertificateCertificate(data *certificateCertificateDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.KeyData = obj.Attributes()["key_data"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSCertificateCertificateLinkableWrapper(data *certificateCertificateLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSCertificateCertificateLinkableWrapper(data *certificateCertificateLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSCertificateCertificatePrimer(data *certificateCertificatePrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSCertificateCertificatePrimer(data *certificateCertificatePrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSCertificateCertificate_additionalObjects(data *certificateCertificate_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSCertificateCertificate_additionalObjects(data *certificateCertificate_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSClientClientApplication(data *clientClientApplicationDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSClientClientApplication(data *clientClientApplicationDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSClientClientApplicationLinkableWrapper(data *clientClientApplicationLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSClientClientApplicationLinkableWrapper(data *clientClientApplicationLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSClientClientApplicationPrimer(data *clientClientApplicationPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSClientClientApplicationPrimer(data *clientClientApplicationPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSClientClientApplication_additionalObjects(data *clientClientApplication_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.DeleteTile = obj.Attributes()["delete_tile"].(basetypes.BoolValue)
	data.Groupclients = obj.Attributes()["groupclients"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.VaultRecordCount = obj.Attributes()["vault_record_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSClientClientApplication_additionalObjects(data *clientClientApplication_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groupclients = obj.Attributes()["groupclients"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.VaultRecordCount = obj.Attributes()["vault_record_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSClientLdapClient(data *clientLdapClientDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.BindDn = obj.Attributes()["bind_dn"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecretUUID = obj.Attributes()["shared_secret_uuid"].(basetypes.StringValue)
	data.UsedForProvisioning = obj.Attributes()["used_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSClientLdapClient(data *clientLdapClientDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.BindDn = obj.Attributes()["bind_dn"].(basetypes.StringValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecret = obj.Attributes()["shared_secret"].(basetypes.ObjectValue)
	data.UsedForProvisioning = obj.Attributes()["used_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSClientOAuth2Client(data *clientOAuth2ClientDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.CallbackURI = obj.Attributes()["callback_u_r_i"].(basetypes.StringValue)
	data.Confidential = obj.Attributes()["confidential"].(basetypes.BoolValue)
	data.DebugMode = obj.Attributes()["debug_mode"].(basetypes.BoolValue)
	data.IDTokenClaims = obj.Attributes()["id_token_claims"].(basetypes.StringValue)
	data.InitiateLoginURI = obj.Attributes()["initiate_login_u_r_i"].(basetypes.StringValue)
	data.ResourceURIs = obj.Attributes()["resource_u_r_is"].(basetypes.StringValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecretUUID = obj.Attributes()["shared_secret_uuid"].(basetypes.StringValue)
	data.ShowLandingPage = obj.Attributes()["show_landing_page"].(basetypes.BoolValue)
	data.UseClientCredentials = obj.Attributes()["use_client_credentials"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSClientOAuth2Client(data *clientOAuth2ClientDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.CallbackURI = obj.Attributes()["callback_u_r_i"].(basetypes.StringValue)
	data.Confidential = obj.Attributes()["confidential"].(basetypes.BoolValue)
	data.DebugMode = obj.Attributes()["debug_mode"].(basetypes.BoolValue)
	data.IDTokenClaims = obj.Attributes()["id_token_claims"].(basetypes.StringValue)
	data.InitiateLoginURI = obj.Attributes()["initiate_login_u_r_i"].(basetypes.StringValue)
	data.ResourceURIs = obj.Attributes()["resource_u_r_is"].(basetypes.StringValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecret = obj.Attributes()["shared_secret"].(basetypes.ObjectValue)
	data.ShowLandingPage = obj.Attributes()["show_landing_page"].(basetypes.BoolValue)
	data.UseClientCredentials = obj.Attributes()["use_client_credentials"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSClientOAuth2ClientPermission(data *clientOAuth2ClientPermissionDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroupUUID = obj.Attributes()["for_group_uuid"].(basetypes.StringValue)
	data.ForSystemUUID = obj.Attributes()["for_system_uuid"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSClientOAuth2ClientPermission(data *clientOAuth2ClientPermissionDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroup = obj.Attributes()["for_group"].(basetypes.ObjectValue)
	data.ForSystem = obj.Attributes()["for_system"].(basetypes.ObjectValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSClientOAuth2ClientPermissionLinkableWrapper(data *clientOAuth2ClientPermissionLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSClientOAuth2ClientPermissionLinkableWrapper(data *clientOAuth2ClientPermissionLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSClientOAuth2ClientPermissionWithClient(data *clientOAuth2ClientPermissionWithClientDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroupUUID = obj.Attributes()["for_group_uuid"].(basetypes.StringValue)
	data.ForSystemUUID = obj.Attributes()["for_system_uuid"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSClientOAuth2ClientPermissionWithClient(data *clientOAuth2ClientPermissionWithClientDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroup = obj.Attributes()["for_group"].(basetypes.ObjectValue)
	data.ForSystem = obj.Attributes()["for_system"].(basetypes.ObjectValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSClientOAuth2ClientPermissionWithClientLinkableWrapper(data *clientOAuth2ClientPermissionWithClientLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(data *clientOAuth2ClientPermissionWithClientLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSClientOAuth2ClientPermission_additionalObjects(data *clientOAuth2ClientPermission_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSClientOAuth2ClientPermission_additionalObjects(data *clientOAuth2ClientPermission_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSClientOAuth2Client_attributes(data *clientOAuth2Client_attributesDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSClientOAuth2Client_attributes(data *clientOAuth2Client_attributesDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSClientSaml2Client(data *clientSaml2ClientDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.Metadata = obj.Attributes()["metadata"].(basetypes.StringValue)
	data.MetadataURL = obj.Attributes()["metadata_url"].(basetypes.StringValue)
	data.SubjectFormat = obj.Attributes()["subject_format"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSClientSaml2Client(data *clientSaml2ClientDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.Metadata = obj.Attributes()["metadata"].(basetypes.StringValue)
	data.MetadataURL = obj.Attributes()["metadata_url"].(basetypes.StringValue)
	data.SubjectFormat = obj.Attributes()["subject_format"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSClientSaml2Client_attributes(data *clientSaml2Client_attributesDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSClientSaml2Client_attributes(data *clientSaml2Client_attributesDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectory(data *directoryAccountDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectory(data *directoryAccountDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnit = obj.Attributes()["base_organizational_unit"].(basetypes.ObjectValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroup = obj.Attributes()["helpdesk_group"].(basetypes.ObjectValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectoryLinkableWrapper(data *directoryAccountDirectoryLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectoryLinkableWrapper(data *directoryAccountDirectoryLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectoryPrimer(data *directoryAccountDirectoryPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectoryPrimer(data *directoryAccountDirectoryPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectoryStatusReport(data *directoryAccountDirectoryStatusReportDataRS, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.Int64Value)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectoryStatusReport(data *directoryAccountDirectoryStatusReportDataDS, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.Int64Value)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectorySummary(data *directoryAccountDirectorySummaryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DirectoryAccountDirectorySummaryType = obj.Attributes()["directory_account_directory_summary_type"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectorySummary(data *directoryAccountDirectorySummaryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DirectoryAccountDirectorySummaryType = obj.Attributes()["directory_account_directory_summary_type"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectorySummaryLinkableWrapper(data *directoryAccountDirectorySummaryLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectorySummaryLinkableWrapper(data *directoryAccountDirectorySummaryLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSDirectoryAccountDirectory_additionalObjects(data *directoryAccountDirectory_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSDirectoryAccountDirectory_additionalObjects(data *directoryAccountDirectory_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSDirectoryInternalDirectory(data *directoryInternalDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSDirectoryInternalDirectory(data *directoryInternalDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnit = obj.Attributes()["base_organizational_unit"].(basetypes.ObjectValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroup = obj.Attributes()["helpdesk_group"].(basetypes.ObjectValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSDirectoryLDAPDirectory(data *directoryLDAPDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.Dialect = obj.Attributes()["dialect"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.PasswordRecovery = obj.Attributes()["password_recovery"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.SearchBindDN = obj.Attributes()["search_bind_d_n"].(basetypes.StringValue)
	data.SearchBindPassword = obj.Attributes()["search_bind_password"].(basetypes.StringValue)
	data.SearchFilter = obj.Attributes()["search_filter"].(basetypes.StringValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSDirectoryLDAPDirectory(data *directoryLDAPDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnit = obj.Attributes()["base_organizational_unit"].(basetypes.ObjectValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroup = obj.Attributes()["helpdesk_group"].(basetypes.ObjectValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.Dialect = obj.Attributes()["dialect"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificate = obj.Attributes()["failover_trusted_certificate"].(basetypes.ObjectValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.PasswordRecovery = obj.Attributes()["password_recovery"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.SearchBindDN = obj.Attributes()["search_bind_d_n"].(basetypes.StringValue)
	data.SearchBindPassword = obj.Attributes()["search_bind_password"].(basetypes.StringValue)
	data.SearchFilter = obj.Attributes()["search_filter"].(basetypes.StringValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificate = obj.Attributes()["trusted_certificate"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSDirectoryMaintenanceDirectory(data *directoryMaintenanceDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSDirectoryMaintenanceDirectory(data *directoryMaintenanceDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnit = obj.Attributes()["base_organizational_unit"].(basetypes.ObjectValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroup = obj.Attributes()["helpdesk_group"].(basetypes.ObjectValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSDirectoryOIDCDirectory(data *directoryOIDCDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AcrValues = obj.Attributes()["acr_values"].(basetypes.StringValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.Enforces2fa = obj.Attributes()["enforces2fa"].(basetypes.BoolValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Issuer = obj.Attributes()["issuer"].(basetypes.StringValue)
	data.LogoutURL = obj.Attributes()["logout_url"].(basetypes.StringValue)
	data.SendLoginHint = obj.Attributes()["send_login_hint"].(basetypes.BoolValue)
	data.VendorEscaped = obj.Attributes()["vendor_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSDirectoryOIDCDirectory(data *directoryOIDCDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnit = obj.Attributes()["base_organizational_unit"].(basetypes.ObjectValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroup = obj.Attributes()["helpdesk_group"].(basetypes.ObjectValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AcrValues = obj.Attributes()["acr_values"].(basetypes.StringValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.Enforces2fa = obj.Attributes()["enforces2fa"].(basetypes.BoolValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Issuer = obj.Attributes()["issuer"].(basetypes.StringValue)
	data.LogoutURL = obj.Attributes()["logout_url"].(basetypes.StringValue)
	data.SendLoginHint = obj.Attributes()["send_login_hint"].(basetypes.BoolValue)
	data.VendorEscaped = obj.Attributes()["vendor_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupAccountGroup(data *groupAccountGroupDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupAccountGroup(data *groupAccountGroupDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupAccountGroupLinkableWrapper(data *groupAccountGroupLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupAccountGroupLinkableWrapper(data *groupAccountGroupLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupAccountGroup_additionalObjects(data *groupAccountGroup_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupAccountGroup_additionalObjects(data *groupAccountGroup_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupAuthorizedGroupsWrapper(data *groupAuthorizedGroupsWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.GroupCount = obj.Attributes()["group_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSGroupAuthorizedGroupsWrapper(data *groupAuthorizedGroupsWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.GroupCount = obj.Attributes()["group_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSGroupGroup(data *groupGroupDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationAdministration = obj.Attributes()["application_administration"].(basetypes.BoolValue)
	data.AuditConfig = obj.Attributes()["audit_config"].(basetypes.ObjectValue)
	data.AuditRequested = obj.Attributes()["audit_requested"].(basetypes.BoolValue)
	data.Auditor = obj.Attributes()["auditor"].(basetypes.BoolValue)
	data.AuthorizingGroupAuditingUUID = obj.Attributes()["authorizing_group_auditing_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupDelegationUUID = obj.Attributes()["authorizing_group_delegation_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupMembershipUUID = obj.Attributes()["authorizing_group_membership_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupProvisioningUUID = obj.Attributes()["authorizing_group_provisioning_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupTypes = obj.Attributes()["authorizing_group_types"].(basetypes.ListValue)
	data.ClassificationUUID = obj.Attributes()["classification_uuid"].(basetypes.StringValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.ExtendedAccess = obj.Attributes()["extended_access"].(basetypes.StringValue)
	data.HideAuditTrail = obj.Attributes()["hide_audit_trail"].(basetypes.BoolValue)
	data.NestedUnderUUID = obj.Attributes()["nested_under_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.PrivateGroup = obj.Attributes()["private_group"].(basetypes.BoolValue)
	data.RecordTrail = obj.Attributes()["record_trail"].(basetypes.BoolValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.SingleManaged = obj.Attributes()["single_managed"].(basetypes.BoolValue)
	data.VaultRecovery = obj.Attributes()["vault_recovery"].(basetypes.StringValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupGroup(data *groupGroupDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationAdministration = obj.Attributes()["application_administration"].(basetypes.BoolValue)
	data.AuditConfig = obj.Attributes()["audit_config"].(basetypes.ObjectValue)
	data.AuditRequested = obj.Attributes()["audit_requested"].(basetypes.BoolValue)
	data.Auditor = obj.Attributes()["auditor"].(basetypes.BoolValue)
	data.AuthorizingGroupAuditing = obj.Attributes()["authorizing_group_auditing"].(basetypes.ObjectValue)
	data.AuthorizingGroupDelegation = obj.Attributes()["authorizing_group_delegation"].(basetypes.ObjectValue)
	data.AuthorizingGroupMembership = obj.Attributes()["authorizing_group_membership"].(basetypes.ObjectValue)
	data.AuthorizingGroupProvisioning = obj.Attributes()["authorizing_group_provisioning"].(basetypes.ObjectValue)
	data.AuthorizingGroupTypes = obj.Attributes()["authorizing_group_types"].(basetypes.ListValue)
	data.Classification = obj.Attributes()["classification"].(basetypes.ObjectValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.ExtendedAccess = obj.Attributes()["extended_access"].(basetypes.StringValue)
	data.HideAuditTrail = obj.Attributes()["hide_audit_trail"].(basetypes.BoolValue)
	data.NestedUnder = obj.Attributes()["nested_under"].(basetypes.ObjectValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.PrivateGroup = obj.Attributes()["private_group"].(basetypes.BoolValue)
	data.RecordTrail = obj.Attributes()["record_trail"].(basetypes.BoolValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.SingleManaged = obj.Attributes()["single_managed"].(basetypes.BoolValue)
	data.VaultRecovery = obj.Attributes()["vault_recovery"].(basetypes.StringValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupGroupAccount(data *groupGroupAccountDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupGroupAccount(data *groupGroupAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupGroupAccountLinkableWrapper(data *groupGroupAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupAccountLinkableWrapper(data *groupGroupAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupAccountNesting(data *groupGroupAccountNestingDataRS, obj types.Object) {
	data.Connected = obj.Attributes()["connected"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupGroupAccountNesting(data *groupGroupAccountNestingDataDS, obj types.Object) {
	data.Connected = obj.Attributes()["connected"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupGroupAccountStatus(data *groupGroupAccountStatusDataRS, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupGroupAccountStatus(data *groupGroupAccountStatusDataDS, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupGroupAccount_additionalObjects(data *groupGroupAccount_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroupAccount_additionalObjects(data *groupGroupAccount_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupAdminMail(data *groupGroupAdminMailDataRS, obj types.Object) {
	data.Body = obj.Attributes()["body"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupAdminMail(data *groupGroupAdminMailDataDS, obj types.Object) {
	data.Body = obj.Attributes()["body"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupAudit(data *groupGroupAuditDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
	data.NameOnAudit = obj.Attributes()["name_on_audit"].(basetypes.StringValue)
	data.ReviewedAt = obj.Attributes()["reviewed_at"].(basetypes.StringValue)
	data.ReviewedBy = obj.Attributes()["reviewed_by"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SubmittedAt = obj.Attributes()["submitted_at"].(basetypes.StringValue)
	data.SubmittedBy = obj.Attributes()["submitted_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupAudit(data *groupGroupAuditDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
	data.NameOnAudit = obj.Attributes()["name_on_audit"].(basetypes.StringValue)
	data.ReviewedAt = obj.Attributes()["reviewed_at"].(basetypes.StringValue)
	data.ReviewedBy = obj.Attributes()["reviewed_by"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SubmittedAt = obj.Attributes()["submitted_at"].(basetypes.StringValue)
	data.SubmittedBy = obj.Attributes()["submitted_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupAuditAccount(data *groupGroupAuditAccountDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AccountValid = obj.Attributes()["account_valid"].(basetypes.BoolValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupAuditAccount(data *groupGroupAuditAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AccountValid = obj.Attributes()["account_valid"].(basetypes.BoolValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupAuditConfig(data *groupGroupAuditConfigDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Months = obj.Attributes()["months"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupAuditConfig(data *groupGroupAuditConfigDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Months = obj.Attributes()["months"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupAuditLinkableWrapper(data *groupGroupAuditLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupAuditLinkableWrapper(data *groupGroupAuditLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupAudit_additionalObjects(data *groupGroupAudit_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroupAudit_additionalObjects(data *groupGroupAudit_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupAuditingInfo(data *groupGroupAuditingInfoDataRS, obj types.Object) {
	data.AuditDueDate = obj.Attributes()["audit_due_date"].(basetypes.StringValue)
	data.LastAuditDate = obj.Attributes()["last_audit_date"].(basetypes.StringValue)
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrDisabledAccounts = obj.Attributes()["nr_disabled_accounts"].(basetypes.Int64Value)
	data.NrDisabledManagers = obj.Attributes()["nr_disabled_managers"].(basetypes.Int64Value)
	data.NrExpiredVaultRecords = obj.Attributes()["nr_expired_vault_records"].(basetypes.Int64Value)
	data.NrManagers = obj.Attributes()["nr_managers"].(basetypes.Int64Value)
	data.NrVaultRecordsWithEndDate = obj.Attributes()["nr_vault_records_with_end_date"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSGroupGroupAuditingInfo(data *groupGroupAuditingInfoDataDS, obj types.Object) {
	data.AuditDueDate = obj.Attributes()["audit_due_date"].(basetypes.StringValue)
	data.LastAuditDate = obj.Attributes()["last_audit_date"].(basetypes.StringValue)
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrDisabledAccounts = obj.Attributes()["nr_disabled_accounts"].(basetypes.Int64Value)
	data.NrDisabledManagers = obj.Attributes()["nr_disabled_managers"].(basetypes.Int64Value)
	data.NrExpiredVaultRecords = obj.Attributes()["nr_expired_vault_records"].(basetypes.Int64Value)
	data.NrManagers = obj.Attributes()["nr_managers"].(basetypes.Int64Value)
	data.NrVaultRecordsWithEndDate = obj.Attributes()["nr_vault_records_with_end_date"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSGroupGroupClassification(data *groupGroupClassificationDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuthorizingGroupAuditingRequired = obj.Attributes()["authorizing_group_auditing_required"].(basetypes.BoolValue)
	data.AuthorizingGroupDelegationRequired = obj.Attributes()["authorizing_group_delegation_required"].(basetypes.BoolValue)
	data.AuthorizingGroupMembershipRequired = obj.Attributes()["authorizing_group_membership_required"].(basetypes.BoolValue)
	data.AuthorizingGroupProvisioningRequired = obj.Attributes()["authorizing_group_provisioning_required"].(basetypes.BoolValue)
	data.DefaultClassification = obj.Attributes()["default_classification"].(basetypes.BoolValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.MaximumAuditInterval = obj.Attributes()["maximum_audit_interval"].(basetypes.Int64Value)
	data.MinimumNrManagers = obj.Attributes()["minimum_nr_managers"].(basetypes.Int64Value)
	data.RecordTrailRequired = obj.Attributes()["record_trail_required"].(basetypes.BoolValue)
	data.RequiredMonths = obj.Attributes()["required_months"].(basetypes.ListValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSGroupGroupClassification(data *groupGroupClassificationDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuthorizingGroupAuditingRequired = obj.Attributes()["authorizing_group_auditing_required"].(basetypes.BoolValue)
	data.AuthorizingGroupDelegationRequired = obj.Attributes()["authorizing_group_delegation_required"].(basetypes.BoolValue)
	data.AuthorizingGroupMembershipRequired = obj.Attributes()["authorizing_group_membership_required"].(basetypes.BoolValue)
	data.AuthorizingGroupProvisioningRequired = obj.Attributes()["authorizing_group_provisioning_required"].(basetypes.BoolValue)
	data.DefaultClassification = obj.Attributes()["default_classification"].(basetypes.BoolValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.MaximumAuditInterval = obj.Attributes()["maximum_audit_interval"].(basetypes.Int64Value)
	data.MinimumNrManagers = obj.Attributes()["minimum_nr_managers"].(basetypes.Int64Value)
	data.RecordTrailRequired = obj.Attributes()["record_trail_required"].(basetypes.BoolValue)
	data.RequiredMonths = obj.Attributes()["required_months"].(basetypes.ListValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSGroupGroupClassificationInfo(data *groupGroupClassificationInfoDataRS, obj types.Object) {
	data.NrGroups = obj.Attributes()["nr_groups"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSGroupGroupClassificationInfo(data *groupGroupClassificationInfoDataDS, obj types.Object) {
	data.NrGroups = obj.Attributes()["nr_groups"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSGroupGroupClassificationLinkableWrapper(data *groupGroupClassificationLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupClassificationLinkableWrapper(data *groupGroupClassificationLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupClassificationPrimer(data *groupGroupClassificationPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupClassificationPrimer(data *groupGroupClassificationPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupClassificationUpdate(data *groupGroupClassificationUpdateDataRS, obj types.Object) {
	data.ClassificatonUUID = obj.Attributes()["classificaton_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupClassificationUpdate(data *groupGroupClassificationUpdateDataDS, obj types.Object) {
	data.Classificaton = obj.Attributes()["classificaton"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupClassification_additionalObjects(data *groupGroupClassification_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Info = obj.Attributes()["info"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroupClassification_additionalObjects(data *groupGroupClassification_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Info = obj.Attributes()["info"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupClient(data *groupGroupClientDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ClientUUID = obj.Attributes()["client_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupClient(data *groupGroupClientDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupClientLinkableWrapper(data *groupGroupClientLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupClientLinkableWrapper(data *groupGroupClientLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupClient_additionalObjects(data *groupGroupClient_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroupClient_additionalObjects(data *groupGroupClient_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupFolder(data *groupGroupFolderDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupFolder(data *groupGroupFolderDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupFolderLinkableWrapper(data *groupGroupFolderLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupFolderLinkableWrapper(data *groupGroupFolderLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupFolder_additionalObjects(data *groupGroupFolder_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroupFolder_additionalObjects(data *groupGroupFolder_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupInfo(data *groupGroupInfoDataRS, obj types.Object) {
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrAccountsWithVault = obj.Attributes()["nr_accounts_with_vault"].(basetypes.Int64Value)
	data.NrAudits = obj.Attributes()["nr_audits"].(basetypes.Int64Value)
	data.NrClients = obj.Attributes()["nr_clients"].(basetypes.Int64Value)
	data.NrProvisionedSystems = obj.Attributes()["nr_provisioned_systems"].(basetypes.Int64Value)
	data.NrVaultRecords = obj.Attributes()["nr_vault_records"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSGroupGroupInfo(data *groupGroupInfoDataDS, obj types.Object) {
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrAccountsWithVault = obj.Attributes()["nr_accounts_with_vault"].(basetypes.Int64Value)
	data.NrAudits = obj.Attributes()["nr_audits"].(basetypes.Int64Value)
	data.NrClients = obj.Attributes()["nr_clients"].(basetypes.Int64Value)
	data.NrProvisionedSystems = obj.Attributes()["nr_provisioned_systems"].(basetypes.Int64Value)
	data.NrVaultRecords = obj.Attributes()["nr_vault_records"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSGroupGroupLinkableWrapper(data *groupGroupLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupLinkableWrapper(data *groupGroupLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupPrimer(data *groupGroupPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSGroupGroupPrimer(data *groupGroupPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSGroupGroupPrimerLinkableWrapper(data *groupGroupPrimerLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupPrimerLinkableWrapper(data *groupGroupPrimerLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroupSegmentedLinkableWrapper(data *groupGroupSegmentedLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.Segments = obj.Attributes()["segments"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupGroupSegmentedLinkableWrapper(data *groupGroupSegmentedLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.Segments = obj.Attributes()["segments"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupGroup_additionalObjects(data *groupGroup_additionalObjectsDataRS, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ObjectValue)
	data.AdministeredClients = obj.Attributes()["administered_clients"].(basetypes.ObjectValue)
	data.AdministeredSystems = obj.Attributes()["administered_systems"].(basetypes.ObjectValue)
	data.Admins = obj.Attributes()["admins"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.AuthorizedGroups = obj.Attributes()["authorized_groups"].(basetypes.ObjectValue)
	data.ClientPermissions = obj.Attributes()["client_permissions"].(basetypes.ObjectValue)
	data.Clients = obj.Attributes()["clients"].(basetypes.ObjectValue)
	data.ContentAdministeredSystems = obj.Attributes()["content_administered_systems"].(basetypes.ObjectValue)
	data.Groupauditinginfo = obj.Attributes()["groupauditinginfo"].(basetypes.ObjectValue)
	data.Groupinfo = obj.Attributes()["groupinfo"].(basetypes.ObjectValue)
	data.Helpdesk = obj.Attributes()["helpdesk"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Myaccount = obj.Attributes()["myaccount"].(basetypes.ObjectValue)
	data.Mydelegatedaccount = obj.Attributes()["mydelegatedaccount"].(basetypes.ObjectValue)
	data.NestedGroups = obj.Attributes()["nested_groups"].(basetypes.ObjectValue)
	data.OwnedClients = obj.Attributes()["owned_clients"].(basetypes.ObjectValue)
	data.OwnedDirectories = obj.Attributes()["owned_directories"].(basetypes.ObjectValue)
	data.OwnedGroupsOnSystem = obj.Attributes()["owned_groups_on_system"].(basetypes.ObjectValue)
	data.OwnedOrganizationalUnits = obj.Attributes()["owned_organizational_units"].(basetypes.ObjectValue)
	data.OwnedSystems = obj.Attributes()["owned_systems"].(basetypes.ObjectValue)
	data.RecentAudits = obj.Attributes()["recent_audits"].(basetypes.ObjectValue)
	data.Requeststatus = obj.Attributes()["requeststatus"].(basetypes.StringValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
	data.Webhooks = obj.Attributes()["webhooks"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupGroup_additionalObjects(data *groupGroup_additionalObjectsDataDS, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ObjectValue)
	data.AdministeredClients = obj.Attributes()["administered_clients"].(basetypes.ObjectValue)
	data.AdministeredSystems = obj.Attributes()["administered_systems"].(basetypes.ObjectValue)
	data.Admins = obj.Attributes()["admins"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.AuthorizedGroups = obj.Attributes()["authorized_groups"].(basetypes.ObjectValue)
	data.ClientPermissions = obj.Attributes()["client_permissions"].(basetypes.ObjectValue)
	data.Clients = obj.Attributes()["clients"].(basetypes.ObjectValue)
	data.ContentAdministeredSystems = obj.Attributes()["content_administered_systems"].(basetypes.ObjectValue)
	data.Groupauditinginfo = obj.Attributes()["groupauditinginfo"].(basetypes.ObjectValue)
	data.Groupinfo = obj.Attributes()["groupinfo"].(basetypes.ObjectValue)
	data.Helpdesk = obj.Attributes()["helpdesk"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Myaccount = obj.Attributes()["myaccount"].(basetypes.ObjectValue)
	data.Mydelegatedaccount = obj.Attributes()["mydelegatedaccount"].(basetypes.ObjectValue)
	data.NestedGroups = obj.Attributes()["nested_groups"].(basetypes.ObjectValue)
	data.OwnedClients = obj.Attributes()["owned_clients"].(basetypes.ObjectValue)
	data.OwnedDirectories = obj.Attributes()["owned_directories"].(basetypes.ObjectValue)
	data.OwnedGroupsOnSystem = obj.Attributes()["owned_groups_on_system"].(basetypes.ObjectValue)
	data.OwnedOrganizationalUnits = obj.Attributes()["owned_organizational_units"].(basetypes.ObjectValue)
	data.OwnedSystems = obj.Attributes()["owned_systems"].(basetypes.ObjectValue)
	data.RecentAudits = obj.Attributes()["recent_audits"].(basetypes.ObjectValue)
	data.Requeststatus = obj.Attributes()["requeststatus"].(basetypes.StringValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
	data.Webhooks = obj.Attributes()["webhooks"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupGroupsAuditStats(data *groupGroupsAuditStatsDataRS, obj types.Object) {
	data.AuditedGroups = obj.Attributes()["audited_groups"].(basetypes.Int64Value)
	data.Classifications = obj.Attributes()["classifications"].(basetypes.ListValue)
	data.OverdueAuditGroups = obj.Attributes()["overdue_audit_groups"].(basetypes.Int64Value)
	data.OverdueVaultPolicies = obj.Attributes()["overdue_vault_policies"].(basetypes.Int64Value)
	data.UnauditedGroups = obj.Attributes()["unaudited_groups"].(basetypes.Int64Value)
	data.ValidVaultPolicies = obj.Attributes()["valid_vault_policies"].(basetypes.Int64Value)
	data.VaultsWithoutPolicies = obj.Attributes()["vaults_without_policies"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSGroupGroupsAuditStats(data *groupGroupsAuditStatsDataDS, obj types.Object) {
	data.AuditedGroups = obj.Attributes()["audited_groups"].(basetypes.Int64Value)
	data.Classifications = obj.Attributes()["classifications"].(basetypes.ListValue)
	data.OverdueAuditGroups = obj.Attributes()["overdue_audit_groups"].(basetypes.Int64Value)
	data.OverdueVaultPolicies = obj.Attributes()["overdue_vault_policies"].(basetypes.Int64Value)
	data.UnauditedGroups = obj.Attributes()["unaudited_groups"].(basetypes.Int64Value)
	data.ValidVaultPolicies = obj.Attributes()["valid_vault_policies"].(basetypes.Int64Value)
	data.VaultsWithoutPolicies = obj.Attributes()["vaults_without_policies"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSGroupProvisioningGroup(data *groupProvisioningGroupDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupProvisioningGroup(data *groupProvisioningGroupDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSGroupProvisioningGroupLinkableWrapper(data *groupProvisioningGroupLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSGroupProvisioningGroupLinkableWrapper(data *groupProvisioningGroupLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSGroupProvisioningGroup_additionalObjects(data *groupProvisioningGroup_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSGroupProvisioningGroup_additionalObjects(data *groupProvisioningGroup_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSLaunchpadDisplayedLaunchpadTile(data *launchpadDisplayedLaunchpadTileDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSLaunchpadDisplayedLaunchpadTile(data *launchpadDisplayedLaunchpadTileDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSLaunchpadDisplayedLaunchpadTiles(data *launchpadDisplayedLaunchpadTilesDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSLaunchpadDisplayedLaunchpadTiles(data *launchpadDisplayedLaunchpadTilesDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSLaunchpadLaunchpadTile(data *launchpadLaunchpadTileDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSLaunchpadLaunchpadTile(data *launchpadLaunchpadTileDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSLaunchpadLaunchpadTileLinkableWrapper(data *launchpadLaunchpadTileLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSLaunchpadLaunchpadTileLinkableWrapper(data *launchpadLaunchpadTileLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSLaunchpadLaunchpadTilePrimer(data *launchpadLaunchpadTilePrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSLaunchpadLaunchpadTilePrimer(data *launchpadLaunchpadTilePrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSLaunchpadLaunchpadTile_additionalObjects(data *launchpadLaunchpadTile_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSLaunchpadLaunchpadTile_additionalObjects(data *launchpadLaunchpadTile_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSLaunchpadManualLaunchpadTile(data *launchpadManualLaunchpadTileDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSLaunchpadManualLaunchpadTile(data *launchpadManualLaunchpadTileDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSLaunchpadSsoApplicationLaunchpadTile(data *launchpadSsoApplicationLaunchpadTileDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSLaunchpadSsoApplicationLaunchpadTile(data *launchpadSsoApplicationLaunchpadTileDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSLaunchpadVaultRecordLaunchpadTile(data *launchpadVaultRecordLaunchpadTileDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSLaunchpadVaultRecordLaunchpadTile(data *launchpadVaultRecordLaunchpadTileDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSLicenseKeyHubLicenseInfo(data *licenseKeyHubLicenseInfoDataRS, obj types.Object) {
	data.CurrentLicenseStatus = obj.Attributes()["current_license_status"].(basetypes.StringValue)
	data.CustomerCompany = obj.Attributes()["customer_company"].(basetypes.StringValue)
	data.CustomerContact = obj.Attributes()["customer_contact"].(basetypes.StringValue)
	data.CustomerDomains = obj.Attributes()["customer_domains"].(basetypes.ListValue)
	data.Details = obj.Attributes()["details"].(basetypes.ListValue)
	data.ExpirationTime = obj.Attributes()["expiration_time"].(basetypes.StringValue)
	data.Features = obj.Attributes()["features"].(basetypes.ListValue)
	data.IssueTime = obj.Attributes()["issue_time"].(basetypes.StringValue)
	data.KeyHubDomain = obj.Attributes()["key_hub_domain"].(basetypes.StringValue)
	data.LicenseKey = obj.Attributes()["license_key"].(basetypes.StringValue)
	data.NotBeforeTime = obj.Attributes()["not_before_time"].(basetypes.StringValue)
	data.UsersHardLimit = obj.Attributes()["users_hard_limit"].(basetypes.Int64Value)
	data.UsersProLimit = obj.Attributes()["users_pro_limit"].(basetypes.Int64Value)
	data.UsersSoftLimit = obj.Attributes()["users_soft_limit"].(basetypes.Int64Value)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Version = obj.Attributes()["version"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSLicenseKeyHubLicenseInfo(data *licenseKeyHubLicenseInfoDataDS, obj types.Object) {
	data.CurrentLicenseStatus = obj.Attributes()["current_license_status"].(basetypes.StringValue)
	data.CustomerCompany = obj.Attributes()["customer_company"].(basetypes.StringValue)
	data.CustomerContact = obj.Attributes()["customer_contact"].(basetypes.StringValue)
	data.CustomerDomains = obj.Attributes()["customer_domains"].(basetypes.ListValue)
	data.Details = obj.Attributes()["details"].(basetypes.ListValue)
	data.ExpirationTime = obj.Attributes()["expiration_time"].(basetypes.StringValue)
	data.Features = obj.Attributes()["features"].(basetypes.ListValue)
	data.IssueTime = obj.Attributes()["issue_time"].(basetypes.StringValue)
	data.KeyHubDomain = obj.Attributes()["key_hub_domain"].(basetypes.StringValue)
	data.LicenseKey = obj.Attributes()["license_key"].(basetypes.StringValue)
	data.NotBeforeTime = obj.Attributes()["not_before_time"].(basetypes.StringValue)
	data.UsersHardLimit = obj.Attributes()["users_hard_limit"].(basetypes.Int64Value)
	data.UsersProLimit = obj.Attributes()["users_pro_limit"].(basetypes.Int64Value)
	data.UsersSoftLimit = obj.Attributes()["users_soft_limit"].(basetypes.Int64Value)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Version = obj.Attributes()["version"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSMarkItemMarker(data *markItemMarkerDataRS, obj types.Object) {
	data.Level = obj.Attributes()["level"].(basetypes.StringValue)
	data.MarkItemMarkerType = obj.Attributes()["mark_item_marker_type"].(basetypes.StringValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSMarkItemMarker(data *markItemMarkerDataDS, obj types.Object) {
	data.Level = obj.Attributes()["level"].(basetypes.StringValue)
	data.MarkItemMarkerType = obj.Attributes()["mark_item_marker_type"].(basetypes.StringValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSMarkItemMarker_parameters(data *markItemMarker_parametersDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSMarkItemMarker_parameters(data *markItemMarker_parametersDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSMarkItemMarkers(data *markItemMarkersDataRS, obj types.Object) {
	data.Markers = obj.Attributes()["markers"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSMarkItemMarkers(data *markItemMarkersDataDS, obj types.Object) {
	data.Markers = obj.Attributes()["markers"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSNotificationCertificateExpiredNotification(data *notificationCertificateExpiredNotificationDataRS, obj types.Object) {
	data.Certificate = obj.Attributes()["certificate"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.LdapClient = obj.Attributes()["ldap_client"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Usage = obj.Attributes()["usage"].(basetypes.StringValue)
	data.Webhook = obj.Attributes()["webhook"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSNotificationCertificateExpiredNotification(data *notificationCertificateExpiredNotificationDataDS, obj types.Object) {
	data.Certificate = obj.Attributes()["certificate"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.LdapClient = obj.Attributes()["ldap_client"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Usage = obj.Attributes()["usage"].(basetypes.StringValue)
	data.Webhook = obj.Attributes()["webhook"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSNotificationGroupAuditRequiredNotification(data *notificationGroupAuditRequiredNotificationDataRS, obj types.Object) {
	data.DueDate = obj.Attributes()["due_date"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.NotificationGroupAuditRequiredNotificationType = obj.Attributes()["notification_group_audit_required_notification_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSNotificationGroupAuditRequiredNotification(data *notificationGroupAuditRequiredNotificationDataDS, obj types.Object) {
	data.DueDate = obj.Attributes()["due_date"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.NotificationGroupAuditRequiredNotificationType = obj.Attributes()["notification_group_audit_required_notification_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSNotificationGroupEditRequiredNotification(data *notificationGroupEditRequiredNotificationDataRS, obj types.Object) {
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSNotificationGroupEditRequiredNotification(data *notificationGroupEditRequiredNotificationDataDS, obj types.Object) {
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSNotificationGroupEditRequiredNotification_parameters(data *notificationGroupEditRequiredNotification_parametersDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSNotificationGroupEditRequiredNotification_parameters(data *notificationGroupEditRequiredNotification_parametersDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSNotificationInvalidSignaturesDetectedNotification(data *notificationInvalidSignaturesDetectedNotificationDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSNotificationInvalidSignaturesDetectedNotification(data *notificationInvalidSignaturesDetectedNotificationDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSNotificationLicenseStatusNotification(data *notificationLicenseStatusNotificationDataRS, obj types.Object) {
	data.ActiveAccounts = obj.Attributes()["active_accounts"].(basetypes.Int64Value)
	data.LicenseInfo = obj.Attributes()["license_info"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSNotificationLicenseStatusNotification(data *notificationLicenseStatusNotificationDataDS, obj types.Object) {
	data.ActiveAccounts = obj.Attributes()["active_accounts"].(basetypes.Int64Value)
	data.LicenseInfo = obj.Attributes()["license_info"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSNotificationModificationRequestNotification(data *notificationModificationRequestNotificationDataRS, obj types.Object) {
	data.Admins = obj.Attributes()["admins"].(basetypes.ListValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.Request = obj.Attributes()["request"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSNotificationModificationRequestNotification(data *notificationModificationRequestNotificationDataDS, obj types.Object) {
	data.Admins = obj.Attributes()["admins"].(basetypes.ListValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.Request = obj.Attributes()["request"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSNotificationNotification(data *notificationNotificationDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSNotificationNotification(data *notificationNotificationDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSNotificationNotifications(data *notificationNotificationsDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSNotificationNotifications(data *notificationNotificationsDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSNotificationOldApiVersionUsageNotification(data *notificationOldApiVersionUsageNotificationDataRS, obj types.Object) {
	data.ApiVersion = obj.Attributes()["api_version"].(basetypes.Int64Value)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSNotificationOldApiVersionUsageNotification(data *notificationOldApiVersionUsageNotificationDataDS, obj types.Object) {
	data.ApiVersion = obj.Attributes()["api_version"].(basetypes.Int64Value)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSNotificationProvisionConfigRequiredNotification(data *notificationProvisionConfigRequiredNotificationDataRS, obj types.Object) {
	data.Systems = obj.Attributes()["systems"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSNotificationProvisionConfigRequiredNotification(data *notificationProvisionConfigRequiredNotificationDataDS, obj types.Object) {
	data.Systems = obj.Attributes()["systems"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSNotificationRotatingPasswordRequiredNotification(data *notificationRotatingPasswordRequiredNotificationDataRS, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSNotificationRotatingPasswordRequiredNotification(data *notificationRotatingPasswordRequiredNotificationDataDS, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSNotificationUpdateAvailableNotification(data *notificationUpdateAvailableNotificationDataRS, obj types.Object) {
	data.ReleasedAt = obj.Attributes()["released_at"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSNotificationUpdateAvailableNotification(data *notificationUpdateAvailableNotificationDataDS, obj types.Object) {
	data.ReleasedAt = obj.Attributes()["released_at"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSNotificationVaultRecordExpiredNotification(data *notificationVaultRecordExpiredNotificationDataRS, obj types.Object) {
	data.Record = obj.Attributes()["record"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSNotificationVaultRecordExpiredNotification(data *notificationVaultRecordExpiredNotificationDataDS, obj types.Object) {
	data.Record = obj.Attributes()["record"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationAccountOrganizationalUnit(data *organizationAccountOrganizationalUnitDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSOrganizationAccountOrganizationalUnit(data *organizationAccountOrganizationalUnitDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationAccountOrganizationalUnitLinkableWrapper(data *organizationAccountOrganizationalUnitLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSOrganizationAccountOrganizationalUnitLinkableWrapper(data *organizationAccountOrganizationalUnitLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSOrganizationAccountOrganizationalUnit_additionalObjects(data *organizationAccountOrganizationalUnit_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(data *organizationAccountOrganizationalUnit_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnit(data *organizationOrganizationalUnitDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Depth = obj.Attributes()["depth"].(basetypes.Int64Value)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.ParentUUID = obj.Attributes()["parent_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnit(data *organizationOrganizationalUnitDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Depth = obj.Attributes()["depth"].(basetypes.Int64Value)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.Parent = obj.Attributes()["parent"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitAccount(data *organizationOrganizationalUnitAccountDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitAccount(data *organizationOrganizationalUnitAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitAccountLinkableWrapper(data *organizationOrganizationalUnitAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitAccountLinkableWrapper(data *organizationOrganizationalUnitAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitAccount_additionalObjects(data *organizationOrganizationalUnitAccount_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(data *organizationOrganizationalUnitAccount_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitLinkableWrapper(data *organizationOrganizationalUnitLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitLinkableWrapper(data *organizationOrganizationalUnitLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitPrimer(data *organizationOrganizationalUnitPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitPrimer(data *organizationOrganizationalUnitPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnitPrimerLinkableWrapper(data *organizationOrganizationalUnitPrimerLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnitPrimerLinkableWrapper(data *organizationOrganizationalUnitPrimerLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSOrganizationOrganizationalUnit_additionalObjects(data *organizationOrganizationalUnit_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.CreateAsParentOf = obj.Attributes()["create_as_parent_of"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSOrganizationOrganizationalUnit_additionalObjects(data *organizationOrganizationalUnit_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningAbstractProvisionedLDAP(data *provisioningAbstractProvisionedLDAPDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningAbstractProvisionedLDAP(data *provisioningAbstractProvisionedLDAPDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificate = obj.Attributes()["failover_trusted_certificate"].(basetypes.ObjectValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificate = obj.Attributes()["trusted_certificate"].(basetypes.ObjectValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningAbstractProvisionedLDAP_attributes(data *provisioningAbstractProvisionedLDAP_attributesDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(data *provisioningAbstractProvisionedLDAP_attributesDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSProvisioningAccountProvisioningStatus(data *provisioningAccountProvisioningStatusDataRS, obj types.Object) {
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.Result = obj.Attributes()["result"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningAccountProvisioningStatus(data *provisioningAccountProvisioningStatusDataDS, obj types.Object) {
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.Result = obj.Attributes()["result"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningAccountProvisioningStatusReport(data *provisioningAccountProvisioningStatusReportDataRS, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningAccountProvisioningStatusReport(data *provisioningAccountProvisioningStatusReportDataDS, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningCircuitBreakerStatistics(data *provisioningCircuitBreakerStatisticsDataRS, obj types.Object) {
	data.NumberOfFailedCalls = obj.Attributes()["number_of_failed_calls"].(basetypes.Int64Value)
	data.NumberOfNotPermittedCalls = obj.Attributes()["number_of_not_permitted_calls"].(basetypes.Int64Value)
	data.NumberOfSuccessfulCalls = obj.Attributes()["number_of_successful_calls"].(basetypes.Int64Value)
	data.State = obj.Attributes()["state"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningCircuitBreakerStatistics(data *provisioningCircuitBreakerStatisticsDataDS, obj types.Object) {
	data.NumberOfFailedCalls = obj.Attributes()["number_of_failed_calls"].(basetypes.Int64Value)
	data.NumberOfNotPermittedCalls = obj.Attributes()["number_of_not_permitted_calls"].(basetypes.Int64Value)
	data.NumberOfSuccessfulCalls = obj.Attributes()["number_of_successful_calls"].(basetypes.Int64Value)
	data.State = obj.Attributes()["state"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupOnSystem(data *provisioningGroupOnSystemDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupOnSystem(data *provisioningGroupOnSystemDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupOnSystemLinkableWrapper(data *provisioningGroupOnSystemLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupOnSystemLinkableWrapper(data *provisioningGroupOnSystemLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupOnSystemPrimer(data *provisioningGroupOnSystemPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupOnSystemPrimer(data *provisioningGroupOnSystemPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupOnSystemTypes(data *provisioningGroupOnSystemTypesDataRS, obj types.Object) {
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupOnSystemTypes(data *provisioningGroupOnSystemTypesDataDS, obj types.Object) {
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupOnSystem_additionalObjects(data *provisioningGroupOnSystem_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Provgroups = obj.Attributes()["provgroups"].(basetypes.ObjectValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupOnSystem_additionalObjects(data *provisioningGroupOnSystem_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Provgroups = obj.Attributes()["provgroups"].(basetypes.ObjectValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupProvisioningStatus(data *provisioningGroupProvisioningStatusDataRS, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.ProvisioningDuration = obj.Attributes()["provisioning_duration"].(basetypes.ObjectValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.ProvisioningPermissionEndTime = obj.Attributes()["provisioning_permission_end_time"].(basetypes.StringValue)
	data.StatusReport = obj.Attributes()["status_report"].(basetypes.ObjectValue)
	data.VisibleOnDashboard = obj.Attributes()["visible_on_dashboard"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSProvisioningGroupProvisioningStatus(data *provisioningGroupProvisioningStatusDataDS, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.ProvisioningDuration = obj.Attributes()["provisioning_duration"].(basetypes.ObjectValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.ProvisioningPermissionEndTime = obj.Attributes()["provisioning_permission_end_time"].(basetypes.StringValue)
	data.StatusReport = obj.Attributes()["status_report"].(basetypes.ObjectValue)
	data.VisibleOnDashboard = obj.Attributes()["visible_on_dashboard"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSProvisioningGroupProvisioningStatus_provisioningDuration(data *provisioningGroupProvisioningStatus_provisioningDurationDataRS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSProvisioningGroupProvisioningStatus_provisioningDuration(data *provisioningGroupProvisioningStatus_provisioningDurationDataDS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSProvisioningOwnedGroupOnSystemsWrapper(data *provisioningOwnedGroupOnSystemsWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.UnlinkedCount = obj.Attributes()["unlinked_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSProvisioningOwnedGroupOnSystemsWrapper(data *provisioningOwnedGroupOnSystemsWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.UnlinkedCount = obj.Attributes()["unlinked_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSProvisioningProvisionNumberSequence(data *provisioningProvisionNumberSequenceDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.NextUID = obj.Attributes()["next_u_i_d"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSProvisioningProvisionNumberSequence(data *provisioningProvisionNumberSequenceDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.NextUID = obj.Attributes()["next_u_i_d"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSProvisioningProvisionNumberSequenceLinkableWrapper(data *provisioningProvisionNumberSequenceLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionNumberSequenceLinkableWrapper(data *provisioningProvisionNumberSequenceLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionNumberSequence_additionalObjects(data *provisioningProvisionNumberSequence_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionNumberSequence_additionalObjects(data *provisioningProvisionNumberSequence_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAD(data *provisioningProvisionedADDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.SamAccountNameScheme = obj.Attributes()["sam_account_name_scheme"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAD(data *provisioningProvisionedADDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificate = obj.Attributes()["failover_trusted_certificate"].(basetypes.ObjectValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificate = obj.Attributes()["trusted_certificate"].(basetypes.ObjectValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.SamAccountNameScheme = obj.Attributes()["sam_account_name_scheme"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAccount(data *provisioningProvisionedAccountDataRS, obj types.Object) {
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Uid = obj.Attributes()["uid"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAccount(data *provisioningProvisionedAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Uid = obj.Attributes()["uid"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAccountLinkableWrapper(data *provisioningProvisionedAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAccountLinkableWrapper(data *provisioningProvisionedAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAccount_additionalObjects(data *provisioningProvisionedAccount_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAccount_additionalObjects(data *provisioningProvisionedAccount_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAzureOIDCDirectory(data *provisioningProvisionedAzureOIDCDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAzureOIDCDirectory(data *provisioningProvisionedAzureOIDCDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAzureSyncLDAPDirectory(data *provisioningProvisionedAzureSyncLDAPDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAzureSyncLDAPDirectory(data *provisioningProvisionedAzureSyncLDAPDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedAzureTenant(data *provisioningProvisionedAzureTenantDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.IDpDomain = obj.Attributes()["idp_domain"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedAzureTenant(data *provisioningProvisionedAzureTenantDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.IDpDomain = obj.Attributes()["idp_domain"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedInternalLDAP(data *provisioningProvisionedInternalLDAPDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedInternalLDAP(data *provisioningProvisionedInternalLDAPDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedLDAP(data *provisioningProvisionedLDAPDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.Gid = obj.Attributes()["gid"].(basetypes.Int64Value)
	data.HashingScheme = obj.Attributes()["hashing_scheme"].(basetypes.StringValue)
	data.Numbering = obj.Attributes()["numbering"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedLDAP(data *provisioningProvisionedLDAPDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificate = obj.Attributes()["failover_trusted_certificate"].(basetypes.ObjectValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificate = obj.Attributes()["trusted_certificate"].(basetypes.ObjectValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.Gid = obj.Attributes()["gid"].(basetypes.Int64Value)
	data.HashingScheme = obj.Attributes()["hashing_scheme"].(basetypes.StringValue)
	data.Numbering = obj.Attributes()["numbering"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedLDAPDirectory(data *provisioningProvisionedLDAPDirectoryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedLDAPDirectory(data *provisioningProvisionedLDAPDirectoryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystem(data *provisioningProvisionedSystemDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystem(data *provisioningProvisionedSystemDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministrator = obj.Attributes()["content_administrator"].(basetypes.ObjectValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.Owner = obj.Attributes()["owner"].(basetypes.ObjectValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemLinkableWrapper(data *provisioningProvisionedSystemLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemLinkableWrapper(data *provisioningProvisionedSystemLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemPrimer(data *provisioningProvisionedSystemPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemPrimer(data *provisioningProvisionedSystemPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemPrimerLinkableWrapper(data *provisioningProvisionedSystemPrimerLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemPrimerLinkableWrapper(data *provisioningProvisionedSystemPrimerLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemSyncLog(data *provisioningProvisionedSystemSyncLogDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.Errors = obj.Attributes()["errors"].(basetypes.Int64Value)
	data.Log = obj.Attributes()["log"].(basetypes.StringValue)
	data.Modifications = obj.Attributes()["modifications"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemSyncLog(data *provisioningProvisionedSystemSyncLogDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.Errors = obj.Attributes()["errors"].(basetypes.Int64Value)
	data.Log = obj.Attributes()["log"].(basetypes.StringValue)
	data.Modifications = obj.Attributes()["modifications"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemSyncLogLinkableWrapper(data *provisioningProvisionedSystemSyncLogLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemSyncLogLinkableWrapper(data *provisioningProvisionedSystemSyncLogLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystemSyncLog_additionalObjects(data *provisioningProvisionedSystemSyncLog_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(data *provisioningProvisionedSystemSyncLog_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisionedSystem_additionalObjects(data *provisioningProvisionedSystem_additionalObjectsDataRS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.IssuedPermissions = obj.Attributes()["issued_permissions"].(basetypes.ObjectValue)
	data.LoginName = obj.Attributes()["login_name"].(basetypes.StringValue)
	data.ManagementPermissions = obj.Attributes()["management_permissions"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Statistics = obj.Attributes()["statistics"].(basetypes.ObjectValue)
	data.SupportedGroupTypes = obj.Attributes()["supported_group_types"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisionedSystem_additionalObjects(data *provisioningProvisionedSystem_additionalObjectsDataDS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.IssuedPermissions = obj.Attributes()["issued_permissions"].(basetypes.ObjectValue)
	data.LoginName = obj.Attributes()["login_name"].(basetypes.StringValue)
	data.ManagementPermissions = obj.Attributes()["management_permissions"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Statistics = obj.Attributes()["statistics"].(basetypes.ObjectValue)
	data.SupportedGroupTypes = obj.Attributes()["supported_group_types"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisioningManagementPermissions(data *provisioningProvisioningManagementPermissionsDataRS, obj types.Object) {
	data.CreateNewGroupsAllowed = obj.Attributes()["create_new_groups_allowed"].(basetypes.BoolValue)
	data.CreateServiceAccountsAllowed = obj.Attributes()["create_service_accounts_allowed"].(basetypes.BoolValue)
	data.ReuseExistingGroupsAllowed = obj.Attributes()["reuse_existing_groups_allowed"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisioningManagementPermissions(data *provisioningProvisioningManagementPermissionsDataDS, obj types.Object) {
	data.CreateNewGroupsAllowed = obj.Attributes()["create_new_groups_allowed"].(basetypes.BoolValue)
	data.CreateServiceAccountsAllowed = obj.Attributes()["create_service_accounts_allowed"].(basetypes.BoolValue)
	data.ReuseExistingGroupsAllowed = obj.Attributes()["reuse_existing_groups_allowed"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSProvisioningProvisioningStatus(data *provisioningProvisioningStatusDataRS, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.IgnoreErrors = obj.Attributes()["ignore_errors"].(basetypes.BoolValue)
	data.RestrictedByLicense = obj.Attributes()["restricted_by_license"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSProvisioningProvisioningStatus(data *provisioningProvisioningStatusDataDS, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.IgnoreErrors = obj.Attributes()["ignore_errors"].(basetypes.BoolValue)
	data.RestrictedByLicense = obj.Attributes()["restricted_by_license"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSProvisioningTokenPassword(data *provisioningTokenPasswordDataRS, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSProvisioningTokenPassword(data *provisioningTokenPasswordDataDS, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestAbstractApplicationModificationRequest(data *requestAbstractApplicationModificationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestAbstractApplicationModificationRequest(data *requestAbstractApplicationModificationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestAbstractOrganizationalUnitModificationRequest(data *requestAbstractOrganizationalUnitModificationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestAbstractOrganizationalUnitModificationRequest(data *requestAbstractOrganizationalUnitModificationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestAbstractProvisionedSystemModificationRequest(data *requestAbstractProvisionedSystemModificationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestAbstractProvisionedSystemModificationRequest(data *requestAbstractProvisionedSystemModificationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestAcceptGrantAccessRequestParameters(data *requestAcceptGrantAccessRequestParametersDataRS, obj types.Object) {
	data.AccessDuration = obj.Attributes()["access_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSRequestAcceptGrantAccessRequestParameters(data *requestAcceptGrantAccessRequestParametersDataDS, obj types.Object) {
	data.AccessDuration = obj.Attributes()["access_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestAcceptGrantAccessRequestParameters_accessDuration(data *requestAcceptGrantAccessRequestParameters_accessDurationDataRS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSRequestAcceptGrantAccessRequestParameters_accessDuration(data *requestAcceptGrantAccessRequestParameters_accessDurationDataDS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSRequestAcceptJoinGroupRequestParameters(data *requestAcceptJoinGroupRequestParametersDataRS, obj types.Object) {
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.MakeManager = obj.Attributes()["make_manager"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSRequestAcceptJoinGroupRequestParameters(data *requestAcceptJoinGroupRequestParametersDataDS, obj types.Object) {
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.MakeManager = obj.Attributes()["make_manager"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSRequestAcceptModificationRequestParameters(data *requestAcceptModificationRequestParametersDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSRequestAcceptModificationRequestParameters(data *requestAcceptModificationRequestParametersDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSRequestAddGroupAdminRequest(data *requestAddGroupAdminRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.NewAdminUUID = obj.Attributes()["new_admin_uuid"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestAddGroupAdminRequest(data *requestAddGroupAdminRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.NewAdmin = obj.Attributes()["new_admin"].(basetypes.ObjectValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestCreateGroupOnSystemRequest(data *requestCreateGroupOnSystemRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystemType = obj.Attributes()["group_on_system_type"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestCreateGroupOnSystemRequest(data *requestCreateGroupOnSystemRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystemType = obj.Attributes()["group_on_system_type"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestCreateGroupRequest(data *requestCreateGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestCreateGroupRequest(data *requestCreateGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestCreateServiceAccountRequest(data *requestCreateServiceAccountRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestCreateServiceAccountRequest(data *requestCreateServiceAccountRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestDisable2FARequest(data *requestDisable2FARequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Subject = obj.Attributes()["subject"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestDisable2FARequest(data *requestDisable2FARequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Subject = obj.Attributes()["subject"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestEnableTechnicalAdministrationRequest(data *requestEnableTechnicalAdministrationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestEnableTechnicalAdministrationRequest(data *requestEnableTechnicalAdministrationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestExtendAccessRequest(data *requestExtendAccessRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ExtendUntil = obj.Attributes()["extend_until"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestExtendAccessRequest(data *requestExtendAccessRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ExtendUntil = obj.Attributes()["extend_until"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestGrantAccessRequest(data *requestGrantAccessRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestGrantAccessRequest(data *requestGrantAccessRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestGrantApplicationRequest(data *requestGrantApplicationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestGrantApplicationRequest(data *requestGrantApplicationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestGrantClientPermissionRequest(data *requestGrantClientPermissionRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.PermissionType = obj.Attributes()["permission_type"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestGrantClientPermissionRequest(data *requestGrantClientPermissionRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
	data.PermissionType = obj.Attributes()["permission_type"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestGrantGroupOnSystemRequest(data *requestGrantGroupOnSystemRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSRequestGrantGroupOnSystemRequest(data *requestGrantGroupOnSystemRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestGrantGroupOnSystemRequestRequest(data *requestGrantGroupOnSystemRequestRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSRequestGrantGroupOnSystemRequestRequest(data *requestGrantGroupOnSystemRequestRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestGrantServiceAccountGroupRequest(data *requestGrantServiceAccountGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
	data.ServiceAccountUUID = obj.Attributes()["service_account_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestGrantServiceAccountGroupRequest(data *requestGrantServiceAccountGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
	data.ServiceAccount = obj.Attributes()["service_account"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestJoinGroupRequest(data *requestJoinGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestJoinGroupRequest(data *requestJoinGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestJoinVaultRequest(data *requestJoinVaultRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestJoinVaultRequest(data *requestJoinVaultRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestModificationRequest(data *requestModificationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestModificationRequest(data *requestModificationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestModificationRequestLinkableWrapper(data *requestModificationRequestLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSRequestModificationRequestLinkableWrapper(data *requestModificationRequestLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSRequestModificationRequest_additionalObjects(data *requestModificationRequest_additionalObjectsDataRS, obj types.Object) {
	data.AcceptParams = obj.Attributes()["accept_params"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.ResetStatus = obj.Attributes()["reset_status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSRequestModificationRequest_additionalObjects(data *requestModificationRequest_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.ResetStatus = obj.Attributes()["reset_status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestPasswordResetRequest(data *requestPasswordResetRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.NewVaultAndDirectoryPassword = obj.Attributes()["new_vault_and_directory_password"].(basetypes.StringValue)
	data.NewVaultPassword = obj.Attributes()["new_vault_password"].(basetypes.StringValue)
	data.UnsyncedPassword = obj.Attributes()["unsynced_password"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSRequestPasswordResetRequest(data *requestPasswordResetRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestPasswordResetRequestStatus(data *requestPasswordResetRequestStatusDataRS, obj types.Object) {
	data.CooldownEnd = obj.Attributes()["cooldown_end"].(basetypes.StringValue)
	data.Managers = obj.Attributes()["managers"].(basetypes.ListValue)
	data.NrAccepted = obj.Attributes()["nr_accepted"].(basetypes.Int64Value)
	data.ResetViaMail = obj.Attributes()["reset_via_mail"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestPasswordResetRequestStatus(data *requestPasswordResetRequestStatusDataDS, obj types.Object) {
	data.CooldownEnd = obj.Attributes()["cooldown_end"].(basetypes.StringValue)
	data.Managers = obj.Attributes()["managers"].(basetypes.ListValue)
	data.NrAccepted = obj.Attributes()["nr_accepted"].(basetypes.Int64Value)
	data.ResetViaMail = obj.Attributes()["reset_via_mail"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestRemoveGroupRequest(data *requestRemoveGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestRemoveGroupRequest(data *requestRemoveGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestRemoveOrganizationalUnitRequest(data *requestRemoveOrganizationalUnitRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitName = obj.Attributes()["organizational_unit_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestRemoveOrganizationalUnitRequest(data *requestRemoveOrganizationalUnitRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.OrganizationalUnitName = obj.Attributes()["organizational_unit_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestRemoveProvisionedSystemRequest(data *requestRemoveProvisionedSystemRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.SystemName = obj.Attributes()["system_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestRemoveProvisionedSystemRequest(data *requestRemoveProvisionedSystemRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.SystemName = obj.Attributes()["system_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestReviewAuditRequest(data *requestReviewAuditRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestReviewAuditRequest(data *requestReviewAuditRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestRevokeAdminRequest(data *requestRevokeAdminRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AdminUUID = obj.Attributes()["admin_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestRevokeAdminRequest(data *requestRevokeAdminRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestSetupAuthorizingGroupRequest(data *requestSetupAuthorizingGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AuthorizingGroupType = obj.Attributes()["authorizing_group_type"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroupUUID = obj.Attributes()["requesting_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestSetupAuthorizingGroupRequest(data *requestSetupAuthorizingGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AuthorizingGroupType = obj.Attributes()["authorizing_group_type"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroup = obj.Attributes()["requesting_group"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestSetupNestedGroupRequest(data *requestSetupNestedGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountAction = obj.Attributes()["account_action"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroupUUID = obj.Attributes()["requesting_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestSetupNestedGroupRequest(data *requestSetupNestedGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountAction = obj.Attributes()["account_action"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroup = obj.Attributes()["requesting_group"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferApplicationAdministrationRequest(data *requestTransferApplicationAdministrationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferApplicationAdministrationRequest(data *requestTransferApplicationAdministrationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferApplicationOwnershipRequest(data *requestTransferApplicationOwnershipRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferApplicationOwnershipRequest(data *requestTransferApplicationOwnershipRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Application = obj.Attributes()["application"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferAuditorGroupRequest(data *requestTransferAuditorGroupRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferAuditorGroupRequest(data *requestTransferAuditorGroupRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestTransferGroupOnSystemOwnershipRequest(data *requestTransferGroupOnSystemOwnershipRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSRequestTransferGroupOnSystemOwnershipRequest(data *requestTransferGroupOnSystemOwnershipRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferOrganizationalUnitOwnershipRequest(data *requestTransferOrganizationalUnitOwnershipRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferOrganizationalUnitOwnershipRequest(data *requestTransferOrganizationalUnitOwnershipRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferProvisionedSystemAdministrationRequest(data *requestTransferProvisionedSystemAdministrationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferProvisionedSystemAdministrationRequest(data *requestTransferProvisionedSystemAdministrationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferProvisionedSystemContentAdministrationRequest(data *requestTransferProvisionedSystemContentAdministrationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferProvisionedSystemContentAdministrationRequest(data *requestTransferProvisionedSystemContentAdministrationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferProvisionedSystemOwnershipRequest(data *requestTransferProvisionedSystemOwnershipRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferProvisionedSystemOwnershipRequest(data *requestTransferProvisionedSystemOwnershipRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestTransferServiceAccountAdministrationRequest(data *requestTransferServiceAccountAdministrationRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ServiceAccountUUID = obj.Attributes()["service_account_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestTransferServiceAccountAdministrationRequest(data *requestTransferServiceAccountAdministrationRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ServiceAccount = obj.Attributes()["service_account"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSRequestUpdateGroupMembershipRequest(data *requestUpdateGroupMembershipRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountToUpdateUUID = obj.Attributes()["account_to_update_uuid"].(basetypes.StringValue)
	data.CurrentEndDate = obj.Attributes()["current_end_date"].(basetypes.StringValue)
	data.CurrentRights = obj.Attributes()["current_rights"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.UpdateGroupMembershipType = obj.Attributes()["update_group_membership_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestUpdateGroupMembershipRequest(data *requestUpdateGroupMembershipRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountToUpdate = obj.Attributes()["account_to_update"].(basetypes.ObjectValue)
	data.CurrentEndDate = obj.Attributes()["current_end_date"].(basetypes.StringValue)
	data.CurrentRights = obj.Attributes()["current_rights"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.UpdateGroupMembershipType = obj.Attributes()["update_group_membership_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSRequestVerifyInternalAccountRequest(data *requestVerifyInternalAccountRequestDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.InternalAccountName = obj.Attributes()["internal_account_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSRequestVerifyInternalAccountRequest(data *requestVerifyInternalAccountRequestDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.InternalAccountName = obj.Attributes()["internal_account_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccount(data *serviceaccountServiceAccountDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.PasswordUUID = obj.Attributes()["password_uuid"].(basetypes.StringValue)
	data.PasswordRotation = obj.Attributes()["password_rotation"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccount(data *serviceaccountServiceAccountDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.Password = obj.Attributes()["password"].(basetypes.ObjectValue)
	data.PasswordRotation = obj.Attributes()["password_rotation"].(basetypes.StringValue)
	data.TechnicalAdministrator = obj.Attributes()["technical_administrator"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountGroup(data *serviceaccountServiceAccountGroupDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountGroup(data *serviceaccountServiceAccountGroupDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountGroupLinkableWrapper(data *serviceaccountServiceAccountGroupLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountGroupLinkableWrapper(data *serviceaccountServiceAccountGroupLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountGroup_additionalObjects(data *serviceaccountServiceAccountGroup_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(data *serviceaccountServiceAccountGroup_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountLinkableWrapper(data *serviceaccountServiceAccountLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountLinkableWrapper(data *serviceaccountServiceAccountLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountPrimer(data *serviceaccountServiceAccountPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountPrimer(data *serviceaccountServiceAccountPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountPrimerLinkableWrapper(data *serviceaccountServiceAccountPrimerLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountPrimerLinkableWrapper(data *serviceaccountServiceAccountPrimerLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountStatus(data *serviceaccountServiceAccountStatusDataRS, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountStatus(data *serviceaccountServiceAccountStatusDataDS, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccount_additionalObjects(data *serviceaccountServiceAccount_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccount_additionalObjects(data *serviceaccountServiceAccount_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountsAuditStats(data *serviceaccountServiceAccountsAuditStatsDataRS, obj types.Object) {
	data.DisabledCount = obj.Attributes()["disabled_count"].(basetypes.Int64Value)
	data.PasswordSchemeEnabledStats = obj.Attributes()["password_scheme_enabled_stats"].(basetypes.ObjectValue)
	data.SystemStats = obj.Attributes()["system_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountsAuditStats(data *serviceaccountServiceAccountsAuditStatsDataDS, obj types.Object) {
	data.DisabledCount = obj.Attributes()["disabled_count"].(basetypes.Int64Value)
	data.PasswordSchemeEnabledStats = obj.Attributes()["password_scheme_enabled_stats"].(basetypes.ObjectValue)
	data.SystemStats = obj.Attributes()["system_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(data *serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(data *serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSServiceaccountServiceAccountsAuditStats_systemStats(data *serviceaccountServiceAccountsAuditStats_systemStatsDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSServiceaccountServiceAccountsAuditStats_systemStats(data *serviceaccountServiceAccountsAuditStats_systemStatsDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSSimpleStringValue(data *simpleStringValueDataRS, obj types.Object) {
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSSimpleStringValue(data *simpleStringValueDataDS, obj types.Object) {
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSSimpleVersionInfo(data *simpleVersionInfoDataRS, obj types.Object) {
	data.ContractVersions = obj.Attributes()["contract_versions"].(basetypes.ListValue)
	data.KeyHubVersion = obj.Attributes()["key_hub_version"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSSimpleVersionInfo(data *simpleVersionInfoDataDS, obj types.Object) {
	data.ContractVersions = obj.Attributes()["contract_versions"].(basetypes.ListValue)
	data.KeyHubVersion = obj.Attributes()["key_hub_version"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultDeletedVaultHolder(data *vaultDeletedVaultHolderDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.RecordCount = obj.Attributes()["record_count"].(basetypes.Int64Value)
	data.VaultDeletedVaultHolderType = obj.Attributes()["vault_deleted_vault_holder_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultDeletedVaultHolder(data *vaultDeletedVaultHolderDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.RecordCount = obj.Attributes()["record_count"].(basetypes.Int64Value)
	data.VaultDeletedVaultHolderType = obj.Attributes()["vault_deleted_vault_holder_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultDeletedVaultHolderLinkableWrapper(data *vaultDeletedVaultHolderLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSVaultDeletedVaultHolderLinkableWrapper(data *vaultDeletedVaultHolderLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSVaultDeletedVaultHolder_additionalObjects(data *vaultDeletedVaultHolder_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSVaultDeletedVaultHolder_additionalObjects(data *vaultDeletedVaultHolder_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSVaultDeletedVaultRecovery(data *vaultDeletedVaultRecoveryDataRS, obj types.Object) {
	data.Prefix = obj.Attributes()["prefix"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
	data.TargetGroupUUID = obj.Attributes()["target_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultDeletedVaultRecovery(data *vaultDeletedVaultRecoveryDataDS, obj types.Object) {
	data.Prefix = obj.Attributes()["prefix"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
	data.TargetGroup = obj.Attributes()["target_group"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSVaultMoveVaultRecord(data *vaultMoveVaultRecordDataRS, obj types.Object) {
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.ShareDuration = obj.Attributes()["share_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSVaultMoveVaultRecord(data *vaultMoveVaultRecordDataDS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.ShareDuration = obj.Attributes()["share_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSVaultMoveVaultRecord_shareDuration(data *vaultMoveVaultRecord_shareDurationDataRS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectDSVaultMoveVaultRecord_shareDuration(data *vaultMoveVaultRecord_shareDurationDataDS, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRSVaultVault(data *vaultVaultDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccessAvailable = obj.Attributes()["access_available"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Records = obj.Attributes()["records"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSVaultVault(data *vaultVaultDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccessAvailable = obj.Attributes()["access_available"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Records = obj.Attributes()["records"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSVaultVaultHolder(data *vaultVaultHolderDataRS, obj types.Object) {
}

func fillDataStructFromTFObjectDSVaultVaultHolder(data *vaultVaultHolderDataDS, obj types.Object) {
}

func fillDataStructFromTFObjectRSVaultVaultRecord(data *vaultVaultRecordDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Derived = obj.Attributes()["derived"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Filename = obj.Attributes()["filename"].(basetypes.StringValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.WarningPeriod = obj.Attributes()["warning_period"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecord(data *vaultVaultRecordDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Derived = obj.Attributes()["derived"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Filename = obj.Attributes()["filename"].(basetypes.StringValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.WarningPeriod = obj.Attributes()["warning_period"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordLinkableWrapper(data *vaultVaultRecordLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordLinkableWrapper(data *vaultVaultRecordLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordPrimer(data *vaultVaultRecordPrimerDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordPrimer(data *vaultVaultRecordPrimerDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordPrimerLinkableWrapper(data *vaultVaultRecordPrimerLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordPrimerLinkableWrapper(data *vaultVaultRecordPrimerLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordSecrets(data *vaultVaultRecordSecretsDataRS, obj types.Object) {
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.File = obj.Attributes()["file"].(basetypes.StringValue)
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
	data.Totp = obj.Attributes()["totp"].(basetypes.StringValue)
	data.WriteTotp = obj.Attributes()["write_totp"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordSecrets(data *vaultVaultRecordSecretsDataDS, obj types.Object) {
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.File = obj.Attributes()["file"].(basetypes.StringValue)
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
	data.Totp = obj.Attributes()["totp"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordShare(data *vaultVaultRecordShareDataRS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.VaultVaultRecordShareType = obj.Attributes()["vault_vault_record_share_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordShare(data *vaultVaultRecordShareDataDS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.VaultVaultRecordShareType = obj.Attributes()["vault_vault_record_share_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecordShareSummary(data *vaultVaultRecordShareSummaryDataRS, obj types.Object) {
	data.Children = obj.Attributes()["children"].(basetypes.ListValue)
	data.Parent = obj.Attributes()["parent"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecordShareSummary(data *vaultVaultRecordShareSummaryDataDS, obj types.Object) {
	data.Children = obj.Attributes()["children"].(basetypes.ListValue)
	data.Parent = obj.Attributes()["parent"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecord_additionalObjects(data *vaultVaultRecord_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.DeleteTile = obj.Attributes()["delete_tile"].(basetypes.BoolValue)
	data.ParentUUID = obj.Attributes()["parent_uuid"].(basetypes.StringValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
	data.ShareSummary = obj.Attributes()["share_summary"].(basetypes.ObjectValue)
	data.Shares = obj.Attributes()["shares"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Vaultholder = obj.Attributes()["vaultholder"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecord_additionalObjects(data *vaultVaultRecord_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Parent = obj.Attributes()["parent"].(basetypes.ObjectValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
	data.ShareSummary = obj.Attributes()["share_summary"].(basetypes.ObjectValue)
	data.Shares = obj.Attributes()["shares"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Vaultholder = obj.Attributes()["vaultholder"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSVaultVaultRecovery(data *vaultVaultRecoveryDataRS, obj types.Object) {
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultRecovery(data *vaultVaultRecoveryDataDS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultUnlock(data *vaultVaultUnlockDataRS, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultUnlock(data *vaultVaultUnlockDataDS, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSVaultVaultUnlockResponse(data *vaultVaultUnlockResponseDataRS, obj types.Object) {
	data.ExpiresAt = obj.Attributes()["expires_at"].(basetypes.StringValue)
	data.SessionPassword = obj.Attributes()["session_password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSVaultVaultUnlockResponse(data *vaultVaultUnlockResponseDataDS, obj types.Object) {
	data.ExpiresAt = obj.Attributes()["expires_at"].(basetypes.StringValue)
	data.SessionPassword = obj.Attributes()["session_password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSWebhookWebhook(data *webhookWebhookDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AllTypes = obj.Attributes()["all_types"].(basetypes.BoolValue)
	data.AuthenticationScheme = obj.Attributes()["authentication_scheme"].(basetypes.StringValue)
	data.BasicAuthPassword = obj.Attributes()["basic_auth_password"].(basetypes.StringValue)
	data.BasicAuthUsername = obj.Attributes()["basic_auth_username"].(basetypes.StringValue)
	data.BearerToken = obj.Attributes()["bearer_token"].(basetypes.StringValue)
	data.ClientUUID = obj.Attributes()["client_uuid"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.CustomHeaderName = obj.Attributes()["custom_header_name"].(basetypes.StringValue)
	data.CustomHeaderValue = obj.Attributes()["custom_header_value"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.VerbosePayloads = obj.Attributes()["verbose_payloads"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDSWebhookWebhook(data *webhookWebhookDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AllTypes = obj.Attributes()["all_types"].(basetypes.BoolValue)
	data.AuthenticationScheme = obj.Attributes()["authentication_scheme"].(basetypes.StringValue)
	data.BasicAuthPassword = obj.Attributes()["basic_auth_password"].(basetypes.StringValue)
	data.BasicAuthUsername = obj.Attributes()["basic_auth_username"].(basetypes.StringValue)
	data.BearerToken = obj.Attributes()["bearer_token"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
	data.ClientCertificate = obj.Attributes()["client_certificate"].(basetypes.ObjectValue)
	data.CustomHeaderName = obj.Attributes()["custom_header_name"].(basetypes.StringValue)
	data.CustomHeaderValue = obj.Attributes()["custom_header_value"].(basetypes.StringValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificate = obj.Attributes()["trusted_certificate"].(basetypes.ObjectValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.VerbosePayloads = obj.Attributes()["verbose_payloads"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookDelivery(data *webhookWebhookDeliveryDataRS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Payload = obj.Attributes()["payload"].(basetypes.ObjectValue)
	data.ReponseHeaders = obj.Attributes()["reponse_headers"].(basetypes.StringValue)
	data.RequestHeaders = obj.Attributes()["request_headers"].(basetypes.StringValue)
	data.Response = obj.Attributes()["response"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.Int64Value)
	data.Time = obj.Attributes()["time"].(basetypes.Int64Value)
	data.TriggerTime = obj.Attributes()["trigger_time"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookDelivery(data *webhookWebhookDeliveryDataDS, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Payload = obj.Attributes()["payload"].(basetypes.ObjectValue)
	data.ReponseHeaders = obj.Attributes()["reponse_headers"].(basetypes.StringValue)
	data.RequestHeaders = obj.Attributes()["request_headers"].(basetypes.StringValue)
	data.Response = obj.Attributes()["response"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.Int64Value)
	data.Time = obj.Attributes()["time"].(basetypes.Int64Value)
	data.TriggerTime = obj.Attributes()["trigger_time"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookDeliveryLinkableWrapper(data *webhookWebhookDeliveryLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookDeliveryLinkableWrapper(data *webhookWebhookDeliveryLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookDelivery_additionalObjects(data *webhookWebhookDelivery_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookDelivery_additionalObjects(data *webhookWebhookDelivery_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookLinkableWrapper(data *webhookWebhookLinkableWrapperDataRS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookLinkableWrapper(data *webhookWebhookLinkableWrapperDataDS, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookNameUuid(data *webhookWebhookNameUuidDataRS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Object = obj.Attributes()["object"].(basetypes.ObjectValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookNameUuid(data *webhookWebhookNameUuidDataDS, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Object = obj.Attributes()["object"].(basetypes.ObjectValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSWebhookWebhookPush(data *webhookWebhookPushDataRS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.ByParty = obj.Attributes()["by_party"].(basetypes.ObjectValue)
	data.Certificate = obj.Attributes()["certificate"].(basetypes.ObjectValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Group2 = obj.Attributes()["group2"].(basetypes.ObjectValue)
	data.GroupClassification = obj.Attributes()["group_classification"].(basetypes.ObjectValue)
	data.ModificationRequest = obj.Attributes()["modification_request"].(basetypes.ObjectValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
	data.Seq = obj.Attributes()["seq"].(basetypes.Int64Value)
	data.ServiceAccount = obj.Attributes()["service_account"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Timestamp = obj.Attributes()["timestamp"].(basetypes.StringValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
	data.Webhook = obj.Attributes()["webhook"].(basetypes.ObjectValue)
	data.WebhookWebhookPushType = obj.Attributes()["webhook_webhook_push_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDSWebhookWebhookPush(data *webhookWebhookPushDataDS, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.ByParty = obj.Attributes()["by_party"].(basetypes.ObjectValue)
	data.Certificate = obj.Attributes()["certificate"].(basetypes.ObjectValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Group2 = obj.Attributes()["group2"].(basetypes.ObjectValue)
	data.GroupClassification = obj.Attributes()["group_classification"].(basetypes.ObjectValue)
	data.ModificationRequest = obj.Attributes()["modification_request"].(basetypes.ObjectValue)
	data.OrganizationalUnit = obj.Attributes()["organizational_unit"].(basetypes.ObjectValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
	data.Seq = obj.Attributes()["seq"].(basetypes.Int64Value)
	data.ServiceAccount = obj.Attributes()["service_account"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Timestamp = obj.Attributes()["timestamp"].(basetypes.StringValue)
	data.VaultRecord = obj.Attributes()["vault_record"].(basetypes.ObjectValue)
	data.Webhook = obj.Attributes()["webhook"].(basetypes.ObjectValue)
	data.WebhookWebhookPushType = obj.Attributes()["webhook_webhook_push_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRSWebhookWebhook_additionalObjects(data *webhookWebhook_additionalObjectsDataRS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDSWebhookWebhook_additionalObjects(data *webhookWebhook_additionalObjectsDataDS, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func dataSourceSchemaAttrsAuditInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["application_error"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_error_parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse),
		Computed:   true,
	}
	schemaAttrs["code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["error_details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["exception"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["message"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["stacktrace"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsGeneratedSecret(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["generated_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["old_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["regenerate"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNonLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRestLink(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["href"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["rel"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSegmentCount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["audit_audit_record_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["date_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_certificate"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_client"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group_classification"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_organizational_unit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_service_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_vault_record"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_webhook"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["performed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuditAuditRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountBulkUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["exclusive_selection"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["selected_accounts"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountChangeLocale(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["pending2_f_a_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["pending_password_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountSettings(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["default_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["in_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["in_multiple_organizational_units"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["multiple_organizational_units_exist"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["password_mode"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["use_token_password"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["decline_recovery_requests"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_login"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["pending_recovery_requests"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse),
		Computed:   true,
	}
	schemaAttrs["settings"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountSettings(recurse),
		Computed:   true,
	}
	schemaAttrs["stored_attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["directory_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse),
		Computed:   true,
	}
	schemaAttrs["two_f_a_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse),
		Computed:   true,
	}
	schemaAttrs["validity_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["activation_code"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["first_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["telephone"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthInternalAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountStatusObject(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthMoveInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["internal_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryInternalDirectory(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["full"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["instances"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["operations"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttribute(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthStoredAccountAttribute(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsCertificateCertificate_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["key_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificateLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsCertificateCertificate(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificatePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientClientApplication(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupclients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vault_record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientLdapClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["bind_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["used_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client_attributes(false),
		Computed:   true,
	}
	schemaAttrs["callback_u_r_i"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["confidential"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["debug_mode"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["id_token_claims"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["initiate_login_u_r_i"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["resource_u_r_is"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["show_landing_page"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["use_client_credentials"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["for_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["for_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["for_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["for_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientSaml2Client_attributes(false),
		Computed:   true,
	}
	schemaAttrs["metadata"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["metadata_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["subject_format"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["directory_account_directory_summary_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectorySummary(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryInternalDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["dialect"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["search_bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_filter"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryMaintenanceDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["acr_values"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["enforces2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logout_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["send_login_hint"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vendor_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(false),
		Computed:   true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	schemaAttrs["group_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["application_administration"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit_config"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditConfig(false),
		Computed:   true,
	}
	schemaAttrs["audit_requested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["auditor"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_auditing"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_delegation"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_membership"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_provisioning"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["classification"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["extended_access"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["hide_audit_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["nested_under"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["private_group"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["record_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["single_managed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountNesting(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["connected"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAdminMail(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["body"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["accounts"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAuditAccount(false),
		},
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_valid"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditConfig(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit_due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_audit_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_expired_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records_with_end_date"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["authorizing_group_auditing_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_delegation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_membership_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_provisioning_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["default_classification"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["maximum_audit_interval"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["minimum_nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["record_trail_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["required_months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["classificaton"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["info"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClient_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClient(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts_with_vault"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_audits"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_clients"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_provisioned_systems"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	schemaAttrs["segments"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsSegmentCount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["admins"] = dsschema.SingleNestedAttribute{
		Attributes:         dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:           true,
		DeprecationMessage: "This property will be removed in a future version.",
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["authorized_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["client_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["content_administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groupauditinginfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupinfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["helpdesk"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["myaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["mydelegatedaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["nested_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_directories"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_groups_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_organizational_units"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["recent_audits"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["requeststatus"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	schemaAttrs["webhooks"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["classifications"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Computed: true,
	}
	schemaAttrs["overdue_audit_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["overdue_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["unaudited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["valid_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vaults_without_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupProvisioningGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadManualLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["current_license_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_contact"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_domains"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["features"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["issue_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["not_before_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["users_hard_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_pro_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_soft_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mark_item_marker_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarker_parameters(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarkers(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["markers"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsMarkItemMarker(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationCertificateExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificate(recurse),
		Computed:   true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse),
		Computed:   true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ldap_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(recurse),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		Computed:   true,
	}
	schemaAttrs["usage"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["webhook"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhook(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupAuditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["notification_group_audit_required_notification_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse),
		Computed:   true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationLicenseStatusNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["license_info"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationModificationRequestNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["admins"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["groups"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestModificationRequest(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotifications(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsNotificationNotification(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationOldApiVersionUsageNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["api_version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationProvisionConfigRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["systems"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationUpdateAvailableNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["released_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationVaultRecordExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["depth"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["result"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroup(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["number_of_failed_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_not_permitted_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_successful_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["state"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["provgroups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_permission_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status_report"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_on_dashboard"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Computed: true,
	}
	schemaAttrs["unlinked_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["next_u_i_d"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAD(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["sam_account_name_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureTenant(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["idp_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedInternalLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["gid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["hashing_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["numbering"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["issued_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["login_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["management_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["statistics"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse),
		Computed:   true,
	}
	schemaAttrs["supported_group_types"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["create_new_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["create_service_accounts_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["reuse_existing_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse),
		},
		Computed: true,
	}
	schemaAttrs["ignore_errors"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["restricted_by_license"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningTokenPassword(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractApplicationModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["access_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["make_manager"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAddGroupAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["new_admin"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateServiceAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestDisable2FARequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["subject"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestExtendAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["extend_until"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantApplicationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantClientPermissionRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["permission_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantServiceAccountGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinVaultRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequestLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reset_status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["cooldown_end"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["managers"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["nr_accepted"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reset_via_mail"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["organizational_unit_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveProvisionedSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["system_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestReviewAuditRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRevokeAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupAuthorizingGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupNestedGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferAuditorGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestUpdateGroupMembershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_to_update"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["current_end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["update_group_membership_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestVerifyInternalAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["internal_account_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["password_rotation"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["disabled_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["password_scheme_enabled_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse),
		Computed:   true,
	}
	schemaAttrs["system_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleStringValue(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleVersionInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["contract_versions"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	schemaAttrs["key_hub_version"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vault_deleted_vault_holder_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultDeletedVaultHolder(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["target_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["share_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVault(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["access_available"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["records"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["file"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["totp"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShare(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_vault_record_share_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["children"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecordShare(recurse),
		},
		Computed: true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShare(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse),
		Computed:   true,
	}
	schemaAttrs["share_summary"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse),
		Computed:   true,
	}
	schemaAttrs["shares"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vaultholder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultHolder(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlock(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlockResponse(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["expires_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["session_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhook_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["all_types"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authentication_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bearer_token"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["custom_header_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["custom_header_value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["verbose_payloads"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["payload"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookPush(false),
		Computed:   true,
	}
	schemaAttrs["reponse_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["response"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["time"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["trigger_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsWebhookWebhook(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLinkable(recurse),
		Computed:   true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookPush(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["by_party"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group2"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group_classification"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["modification_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["seq"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["timestamp"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["webhook"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["webhook_webhook_push_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["created_by"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_modified_by"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsErrorReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["application_error"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_error_parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsErrorReport_applicationErrorParameters(recurse),
		Optional:   true,
	}
	schemaAttrs["code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["error_details"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["exception"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["message"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["stacktrace"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsErrorReport_applicationErrorParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsGeneratedSecret(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["generated_secret"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["old_secret"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["regenerate"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLinkable(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNonLinkable(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsRestLink(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["href"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["id"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["rel"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["type_escaped"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsSegmentCount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsAuditAuditRecord_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["audit_audit_record_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["date_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_account"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_certificate"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_client"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_directory"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group2"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group_classification"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_organizational_unit"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_service_account"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_system"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_vault_record"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_webhook"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["performed_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecordLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuditAuditRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuditAuditRecord_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsAuthAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["validity"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["email"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["locale"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["valid_in_directory"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountBulkUpdate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["action"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["exclusive_selection"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["selected_accounts"] = rsschema.ListAttribute{
		ElementType: types.Int64Type,
		Required:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountChangeLocale(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["locale"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["validity"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountRecoveryStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["pending2_f_a_recovery_request"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["pending_password_recovery_request"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountSettings(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["default_organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["in_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["in_multiple_organizational_units"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["key_hub_admin"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["multiple_organizational_units_exist"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["password_mode"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["two_factor_authentication"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["use_token_password"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["can_request_groups"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["decline_recovery_requests"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["license_role"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["reregistration_required"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["two_factor_authentication_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["active_login"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["pending_recovery_requests"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountRecoveryStatus(recurse),
		Computed:   true,
	}
	schemaAttrs["settings"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountSettings(recurse),
		Computed:   true,
	}
	schemaAttrs["stored_attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthStoredAccountAttributes(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["directory_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse),
		Optional:   true,
	}
	schemaAttrs["two_f_a_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse),
		Optional:   true,
	}
	schemaAttrs["validity_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["activation_code"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["first_name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["last_name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["telephone"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthInternalAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthInternalAccountStatusObject(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["status"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthMoveInternalAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["internal_directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryInternalDirectory(recurse),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthPermission(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["full"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["instances"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["operations"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["type_escaped"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthStoredAccountAttribute(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsAuthStoredAccountAttributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["attributes"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthStoredAccountAttribute(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsCertificateCertificate_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["alias"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["subject_d_n"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificateLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsCertificateCertificate(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificatePrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["alias"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["certificate_data"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["subject_d_n"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsCertificateCertificate_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplication(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientClientApplication(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplicationPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientClientApplication_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["groupclients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGeneratedSecret(recurse),
		Optional:   true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse),
		Optional:   true,
	}
	schemaAttrs["vault_record_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientLdapClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_dn"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_secret_in_vault"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["shared_secret_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["used_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2Client(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client_attributes(false),
		Optional:   true,
	}
	schemaAttrs["callback_u_r_i"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["confidential"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["debug_mode"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["id_token_claims"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["initiate_login_u_r_i"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["resource_u_r_is"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_secret_in_vault"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["shared_secret_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["show_landing_page"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["use_client_credentials"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermission(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["for_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["for_system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["for_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["for_system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["value"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client(false),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientOAuth2Client_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsClientSaml2Client(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["client_client_application_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["scopes"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["sso_application"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientSaml2Client_attributes(false),
		Optional:   true,
	}
	schemaAttrs["metadata"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["metadata_url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["subject_format"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsClientSaml2Client_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectorySummary(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["directory_account_directory_summary_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["domain_restriction"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["fully_resolved_issuer"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Optional:   true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectorySummary(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryInternalDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["attributes_to_store"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["dialect"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("ACTIVE_DIRECTORY"),
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["password_recovery"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["search_bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["search_bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["search_filter"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryMaintenanceDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsDirectoryOIDCDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_validity_supported"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["directory_account_directory_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["default_directory"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["helpdesk_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["restrict2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_customizable"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["acr_values"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes_to_store"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["domain_restriction"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["enforces2fa"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["fully_resolved_issuer"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["issuer"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["logout_url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["send_login_hint"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vendor_escaped"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(false),
		Optional:   true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupAccountGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAccountGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	schemaAttrs["group_count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["admin"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["application_administration"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["audit_config"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditConfig(false),
		Optional:   true,
	}
	schemaAttrs["audit_requested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["auditor"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_auditing_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_delegation_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_membership_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_provisioning_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["classification_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["extended_access"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NOT_ALLOWED"),
	}
	schemaAttrs["hide_audit_trail"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["nested_under_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_group"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["record_trail"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["rotating_password_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["single_managed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_recovery"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("FULL"),
	}
	schemaAttrs["vault_requires_activation"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["disconnected_nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["two_factor_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountNesting(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["connected"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		Optional:   true,
	}
	schemaAttrs["visible_for_provisioning"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAdminMail(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["body"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAudit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["accounts"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAuditAccount(false),
		},
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["submitted_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_valid"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["disconnected_nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditConfig(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["months"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupAudit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAudit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupAuditingInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit_due_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["last_audit_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["nr_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_disabled_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_disabled_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_expired_vault_records"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_vault_records_with_end_date"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupClassification_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["authorizing_group_auditing_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_delegation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_membership_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authorizing_group_provisioning_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["default_classification"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["maximum_audit_interval"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["minimum_nr_managers"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(1),
	}
	schemaAttrs["record_trail_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["required_months"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["rotating_password_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["vault_requires_activation"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nr_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassificationUpdate(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["classificaton_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClassification_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["info"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClassificationInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClient(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupClient_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["client_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClient(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupClient_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupGroupFolder_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolderLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupFolder_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nr_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_accounts_with_vault"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_audits"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_clients"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_provisioned_systems"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["nr_vault_records"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["admin"] = rsschema.BoolAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.Bool{boolplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroup(recurse),
		},
		Optional: true,
	}
	schemaAttrs["segments"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsSegmentCount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["administered_clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["admins"] = rsschema.SingleNestedAttribute{
		Attributes:         resourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Optional:           true,
		DeprecationMessage: "This property will be removed in a future version.",
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["authorized_groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["client_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["content_administered_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groupauditinginfo"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditingInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupinfo"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["helpdesk"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["myaccount"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["mydelegatedaccount"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["nested_groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_clients"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_directories"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_groups_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_organizational_units"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["recent_audits"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["requeststatus"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	schemaAttrs["webhooks"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupGroupsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audited_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["classifications"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Optional: true,
	}
	schemaAttrs["overdue_audit_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["overdue_vault_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["unaudited_groups"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["valid_vault_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["vaults_without_policies"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsGroupProvisioningGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Computed:      true,
		PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes:    resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:      true,
		PlanModifiers: []planmodifier.Object{objectplanmodifier.UseStateForUnknown()},
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsGroupProvisioningGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsGroupProvisioningGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse),
		Optional:   true,
	}
	schemaAttrs["title"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadManualLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["title"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uri"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["identicon_code"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MANUAL"),
	}
	schemaAttrs["logo"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["vault_record_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["current_license_status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_company"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_contact"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["customer_domains"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["details"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["expiration_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["features"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["issue_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["key_hub_domain"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["license_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["not_before_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["users_hard_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["users_pro_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["users_soft_limit"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["version"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarker(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["level"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mark_item_marker_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarker_parameters(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarker_parameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsMarkItemMarkers(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["markers"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsMarkItemMarker(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationCertificateExpiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["certificate"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsCertificateCertificate(recurse),
		Optional:   true,
	}
	schemaAttrs["directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsDirectoryLDAPDirectory(recurse),
		Optional:   true,
	}
	schemaAttrs["expiration"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ldap_client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientLdapClient(recurse),
		Optional:   true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		Optional:   true,
	}
	schemaAttrs["usage"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["webhook"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhook(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupAuditRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["due_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["notification_group_audit_required_notification_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupEditRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["parameters"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse),
		Optional:   true,
	}
	schemaAttrs["reason"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationLicenseStatusNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["active_accounts"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["license_info"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationModificationRequestNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["admins"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["groups"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["request"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestModificationRequest(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsNotificationNotifications(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsNotificationNotification(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationOldApiVersionUsageNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["api_version"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2Client(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationProvisionConfigRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["systems"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["groups"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationUpdateAvailableNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["released_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsNotificationVaultRecordExpiredNotification(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["record"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnit(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["depth"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["parent_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsOrganizationOrganizationalUnit(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["create_as_parent_of"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAbstractProvisionedLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["result"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroup(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["status"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["number_of_failed_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["number_of_not_permitted_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["number_of_successful_calls"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["state"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystem(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["provgroups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Optional:   true,
	}
	schemaAttrs["service_accounts"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["folder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroupFolder(recurse),
		Optional:   true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGroupGroup(recurse),
		Optional:   true,
	}
	schemaAttrs["provisioning_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse),
		Optional:   true,
	}
	schemaAttrs["provisioning_end_time"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_permission_end_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status_report"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse),
		Optional:   true,
	}
	schemaAttrs["visible_on_dashboard"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Optional: true,
	}
	schemaAttrs["unlinked_count"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequence(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["next_u_i_d"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(2000),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAD(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["sam_account_name_scheme"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uid"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedAzureTenant(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_id"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["client_secret"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["idp_domain"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tenant"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedInternalLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientLdapClient(false),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedLDAP(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["attributes"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Optional:   true,
	}
	schemaAttrs["base_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["bind_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bind_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_host"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["host"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["object_classes"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["port"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["ssh_public_key_supported"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["user_d_n"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["gid"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["hashing_scheme"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["numbering"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionNumberSequence(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedLDAPDirectory(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["group_d_n"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystem(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["external_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["self_service_existing_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_new_groups"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["self_service_service_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["should_destroy_unknown_accounts"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username_prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["created_at"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = rsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["issued_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["login_name"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["management_permissions"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["statistics"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse),
		Computed:   true,
	}
	schemaAttrs["supported_group_types"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["create_new_groups_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["create_service_accounts_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["reuse_existing_groups_allowed"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningProvisioningStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["groups"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse),
		},
		Optional: true,
	}
	schemaAttrs["ignore_errors"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["restricted_by_license"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsProvisioningTokenPassword(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractApplicationModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["access_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["make_manager"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsRequestAddGroupAdminRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_admin_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateGroupOnSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestCreateServiceAccountRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestDisable2FARequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["subject"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestExtendAccessRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["extend_until"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantAccessRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantApplicationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantClientPermissionRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["permission_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantGroupOnSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["activation_required"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestGrantServiceAccountGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	schemaAttrs["service_account_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestJoinGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestJoinVaultRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequestLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRequestModificationRequest(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestModificationRequest_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["accept_params"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse),
		Optional:   true,
	}
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reset_status"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsRequestPasswordResetRequestStatus(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestPasswordResetRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_vault_and_directory_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["new_vault_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["unsynced_password"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestPasswordResetRequestStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["cooldown_end"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["managers"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["nr_accepted"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["reset_via_mail"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["organizational_unit_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRemoveProvisionedSystemRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestReviewAuditRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestRevokeAdminRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["admin_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestSetupAuthorizingGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["authorizing_group_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["connect"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["requesting_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestSetupNestedGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_action"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["connect"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["requesting_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferApplicationAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferApplicationOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["application_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferAuditorGroupRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_on_system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsProvisioningGroupOnSystem(false),
		Required:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["organizational_unit_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["service_account_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestUpdateGroupMembershipRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["account_to_update_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["current_end_date"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_rights"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["rights"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["update_group_membership_type"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsRequestVerifyInternalAccountRequest(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["feedback"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["mail_key"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["internal_account_name"] = rsschema.StringAttribute{
		Required: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccount(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password_rotation"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["technical_administrator_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroup(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["display_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name_in_system"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["short_name_in_system"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroup(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsServiceaccountServiceAccount(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountStatus(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_enabled"] = rsschema.BoolAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsGeneratedSecret(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["disabled_count"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["password_scheme_enabled_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse),
		Optional:   true,
	}
	schemaAttrs["system_stats"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsSimpleStringValue(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["value"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsSimpleVersionInfo(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["contract_versions"] = rsschema.ListAttribute{
		ElementType: types.Int64Type,
		Optional:    true,
	}
	schemaAttrs["key_hub_version"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["record_count"] = rsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vault_deleted_vault_holder_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultDeletedVaultHolder(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultDeletedVaultRecovery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["prefix"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["target_group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultMoveVaultRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["action"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("MOVE"),
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["share_duration"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["nanos"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["seconds"] = rsschema.Int64Attribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVault(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["access_available"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["records"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultHolder(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecord(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["color"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["share_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["derived"] = rsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["filename"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["username"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["warning_period"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordPrimer(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["color"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["share_end_time"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordSecrets(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["comment"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["file"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["totp"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["write_totp"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordShare(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["vault_vault_record_share_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecordShareSummary(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["children"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsVaultVaultRecordShare(recurse),
		},
		Optional: true,
	}
	schemaAttrs["parent"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordShare(recurse),
		Optional:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecord_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = rsschema.BoolAttribute{
		Optional: true,
	}
	schemaAttrs["parent_uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["secret"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordSecrets(recurse),
		Optional:   true,
	}
	schemaAttrs["share_summary"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordShareSummary(recurse),
		Computed:   true,
	}
	schemaAttrs["shares"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse),
		Optional:   true,
	}
	schemaAttrs["vaultholder"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsVaultVaultHolder(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultRecovery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["private_key"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultUnlock(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsVaultVaultUnlockResponse(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["expires_at"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["session_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhook(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsWebhookWebhook_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["account_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["active"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(true),
	}
	schemaAttrs["all_types"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	schemaAttrs["authentication_scheme"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("NONE"),
	}
	schemaAttrs["basic_auth_password"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["basic_auth_username"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["bearer_token"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["client_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["custom_header_name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["custom_header_value"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["directory_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["group_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["system_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["tls"] = rsschema.StringAttribute{
		Computed: true,
		Optional: true,
		Default:  stringdefault.StaticString("SECURE"),
	}
	schemaAttrs["trusted_certificate_uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["types"] = rsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
	}
	schemaAttrs["url"] = rsschema.StringAttribute{
		Required: true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["verbose_payloads"] = rsschema.BoolAttribute{
		Computed: true,
		Optional: true,
		Default:  booldefault.StaticBool(false),
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDelivery(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = rsschema.SingleNestedAttribute{
			Attributes: resourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Optional:   true,
		}
	}
	schemaAttrs["links"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsRestLink(recurse),
		},
		Optional: true,
	}
	schemaAttrs["permissions"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsAuthPermission(recurse),
		},
		Optional: true,
	}
	schemaAttrs["payload"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookPush(false),
		Optional:   true,
	}
	schemaAttrs["reponse_headers"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["request_headers"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["response"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["status"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["time"] = rsschema.Int64Attribute{
		Optional: true,
	}
	schemaAttrs["trigger_time"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsWebhookWebhookDelivery(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["items"] = rsschema.ListNestedAttribute{
		NestedObject: rsschema.NestedAttributeObject{
			Attributes: resourceSchemaAttrsWebhookWebhook(recurse),
		},
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookNameUuid(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["name"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["object"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsLinkable(recurse),
		Optional:   true,
	}
	schemaAttrs["uuid"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhookPush(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["by_party"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["certificate"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["client"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["directory"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group2"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["group_classification"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["modification_request"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["organizational_unit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["parameter1"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameter2"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["parameter3"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["security_level"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["seq"] = rsschema.Int64Attribute{
		Computed: true,
		Optional: true,
		Default:  int64default.StaticInt64(0),
	}
	schemaAttrs["service_account"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["system"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["timestamp"] = rsschema.StringAttribute{
		Optional: true,
	}
	schemaAttrs["vault_record"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["webhook"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Optional:   true,
	}
	schemaAttrs["webhook_webhook_push_type"] = rsschema.StringAttribute{
		Optional: true,
	}
	return schemaAttrs
}
func resourceSchemaAttrsWebhookWebhook_additionalObjects(recurse bool) map[string]rsschema.Attribute {
	schemaAttrs := make(map[string]rsschema.Attribute)
	schemaAttrs["audit"] = rsschema.SingleNestedAttribute{
		Attributes: resourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}

func sliceToTF[T any](elemType attr.Type, vals []T, toValue func(T, *diag.Diagnostics) attr.Value) (attr.Value, diag.Diagnostics) {
	var diags diag.Diagnostics
	ret := make([]attr.Value, 0, len(vals))
	for _, curVal := range vals {
		ret = append(ret, toValue(curVal, &diags))
	}
	return types.ListValue(elemType, ret)
}

func tfToSlice[T any](val basetypes.ListValue, toValue func(attr.Value, *diag.Diagnostics) T) ([]T, diag.Diagnostics) {
	var diags diag.Diagnostics
	vals := val.Elements()
	ret := make([]T, 0, len(vals))
	for _, curVal := range vals {
		ret = append(ret, toValue(curVal, &diags))
	}
	return ret, diags
}

func int32PToInt64P(in *int32) *int64 {
	if in == nil {
		return nil
	}
	ret := int64(*in)
	return &ret
}

func int64PToInt32P(in *int64) *int32 {
	if in == nil {
		return nil
	}
	ret := int32(*in)
	return &ret
}

func stringerToTF[T fmt.Stringer](val *T) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	return types.StringValue((*val).String())
}

func timeToTF(val time.Time) attr.Value {
	ret, _ := val.MarshalText()
	return types.StringValue(string(ret))
}

func timePointerToTF(val *time.Time) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	ret, _ := val.MarshalText()
	return types.StringValue(string(ret))
}

func tfToTime(val basetypes.StringValue) (time.Time, diag.Diagnostics) {
	var diags diag.Diagnostics
	parsed, err := time.Parse(time.RFC3339, val.ValueString())
	if err != nil {
		diags.AddError("Conversion error", fmt.Sprintf("Unable to parse time: %s", err))
	}
	return parsed, diags
}

func tfToTimePointer(val basetypes.StringValue) (*time.Time, diag.Diagnostics) {
	if val.IsNull() || val.IsUnknown() {
		return nil, diag.Diagnostics{}
	}
	parsed, diags := tfToTime(val)
	return &parsed, diags
}

func withUuidToTF(val interface{ GetUuid() *string }) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	return types.StringPointerValue(val.GetUuid())
}

func parsePointer[T any](val basetypes.StringValue, parser func(string) (T, error)) (*T, diag.Diagnostics) {
	if val.IsNull() || val.IsUnknown() {
		return nil, diag.Diagnostics{}
	}
	parsed, diags := parse(val, parser)
	return &parsed, diags
}

func parsePointer2[T any](val basetypes.StringValue, parser func(string) (*T, error)) (*T, diag.Diagnostics) {
	if val.IsNull() || val.IsUnknown() {
		return nil, diag.Diagnostics{}
	}
	parsed, diags := parse(val, parser)
	return parsed, diags
}

func parse[T any](val basetypes.StringValue, parser func(string) (T, error)) (T, diag.Diagnostics) {
	var diags diag.Diagnostics
	parsed, err := parser(val.ValueString())
	if err != nil {
		diags.AddError("Conversion error", fmt.Sprintf("Unable to parse %s: %s", val.ValueString(), err))
	}
	return parsed, diags
}

func parseCastPointer[T any, Z any](val basetypes.StringValue, parser func(string) (Z, error), caster func(Z) T) (*T, diag.Diagnostics) {
	if val.IsNull() || val.IsUnknown() {
		return nil, diag.Diagnostics{}
	}
	parsed, diags := parseCast(val, parser, caster)
	return &parsed, diags
}

func parseCast[T any, Z any](val basetypes.StringValue, parser func(string) (Z, error), caster func(Z) T) (T, diag.Diagnostics) {
	parsed, diags := parse(val, parser)
	var ret T
	if diags.HasError() {
		return ret, diags
	}
	return caster(parsed), diags
}

func findFirst[T keyhubmodel.Linkableable](wrapper interface{ GetItems() []T }, name string, uuid *string, err error) (T, diag.Diagnostics) {
	var diags diag.Diagnostics
	var noVal T
	if err != nil {
		diags.AddError("Client Error", fmt.Sprintf("Unable to read %s, got error: %s", name, err))
		return noVal, diags
	}
	if len(wrapper.GetItems()) == 0 {
		diags.AddError("Client Error", fmt.Sprintf("Unable to find %s with UUID %s", name, *uuid))
		return noVal, diags
	}
	return wrapper.GetItems()[0], nil

}

func findGroupGroupPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Group().Get(ctx, &keyhubgroup.GroupRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubgroup.GroupRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.GroupGroupable](wrapper, "group", uuid, err)
}

func findDirectoryAccountDirectoryPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Directory().Get(ctx, &keyhubdirectory.DirectoryRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubdirectory.DirectoryRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.DirectoryAccountDirectoryable](wrapper, "directory", uuid, err)
}

func findOrganizationOrganizationalUnitPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Organizationalunit().Get(ctx, &keyhuborganizationalunit.OrganizationalunitRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhuborganizationalunit.OrganizationalunitRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.OrganizationOrganizationalUnitable](wrapper, "organizational unit", uuid, err)
}

func findCertificateCertificatePrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Certificate().Get(ctx, &keyhubcertificate.CertificateRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubcertificate.CertificateRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.CertificateCertificateable](wrapper, "certificate", uuid, err)
}

func findProvisioningProvisionedSystemPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.System().Get(ctx, &keyhubsystem.SystemRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubsystem.SystemRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.ProvisioningProvisionedSystemable](wrapper, "provisioned system", uuid, err)
}

func findGroupGroupClassificationPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Groupclassification().Get(ctx, &keyhubgroupclassification.GroupclassificationRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubgroupclassification.GroupclassificationRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.GroupGroupClassificationable](wrapper, "group classification", uuid, err)
}

func findClientClientApplicationPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Client().Get(ctx, &keyhubclient.ClientRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubclient.ClientRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.ClientClientApplicationable](wrapper, "client application", uuid, err)
}

func findAuthAccountPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	account, diag := findAuthAccountByUUID(ctx, uuid)
	if account == nil {
		return account, diag
	}
	return &account.(*keyhubmodel.AuthAccount).AuthAccountPrimer, diag
}

func findAuthAccountByUUID(ctx context.Context, uuid *string) (keyhubmodel.AuthAccountable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Account().Get(ctx, &keyhubaccount.AccountRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubaccount.AccountRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.AuthAccountable](wrapper, "account", uuid, err)
}

func findServiceaccountServiceAccountPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Serviceaccount().Get(ctx, &keyhubserviceaccount.ServiceaccountRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubserviceaccount.ServiceaccountRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.ServiceaccountServiceAccountable](wrapper, "service account", uuid, err)
}

func findVaultVaultRecordPrimerByUUID(ctx context.Context, uuid *string) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	if uuid == nil {
		return nil, diag.Diagnostics{}
	}
	client := ctx.Value("keyhub_client").(*keyhub.KeyHubClient)
	wrapper, err := client.Vaultrecord().Get(ctx, &keyhubvaultrecord.VaultrecordRequestBuilderGetRequestConfiguration{
		QueryParameters: &keyhubvaultrecord.VaultrecordRequestBuilderGetQueryParameters{
			Uuid: []string{*uuid},
		},
	})
	return findFirst[keyhubmodel.VaultVaultRecordable](wrapper, "vault record", uuid, err)
}
