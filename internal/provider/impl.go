package provider

import (
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

var AuditInfoAttrTypes = objectAttrsTypeAuditInfo(false)
var AuditInfoAttrTypesRecurse = objectAttrsTypeAuditInfo(true)

type AuditInfoData struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	CreatedBy      types.String `tfsdk:"created_by"`
	LastModifiedAt types.String `tfsdk:"last_modified_at"`
	LastModifiedBy types.String `tfsdk:"last_modified_by"`
}

var ErrorReportAttrTypes = objectAttrsTypeErrorReport(false)
var ErrorReportAttrTypesRecurse = objectAttrsTypeErrorReport(true)

type ErrorReportData struct {
	ApplicationError           types.String `tfsdk:"application_error"`
	ApplicationErrorParameters types.Object `tfsdk:"application_error_parameters"`
	Code                       types.Int64  `tfsdk:"code"`
	ErrorDetails               types.List   `tfsdk:"error_details"`
	Exception                  types.String `tfsdk:"exception"`
	Message                    types.String `tfsdk:"message"`
	Reason                     types.String `tfsdk:"reason"`
	Stacktrace                 types.List   `tfsdk:"stacktrace"`
}

var ErrorReport_applicationErrorParametersAttrTypes = objectAttrsTypeErrorReport_applicationErrorParameters(false)
var ErrorReport_applicationErrorParametersAttrTypesRecurse = objectAttrsTypeErrorReport_applicationErrorParameters(true)

type ErrorReport_applicationErrorParametersData struct {
}

var GeneratedSecretAttrTypes = objectAttrsTypeGeneratedSecret(false)
var GeneratedSecretAttrTypesRecurse = objectAttrsTypeGeneratedSecret(true)

type GeneratedSecretData struct {
	GeneratedSecret types.String `tfsdk:"generated_secret"`
	OldSecret       types.String `tfsdk:"old_secret"`
	Regenerate      types.Bool   `tfsdk:"regenerate"`
}

var LinkableAttrTypes = objectAttrsTypeLinkable(false)
var LinkableAttrTypesRecurse = objectAttrsTypeLinkable(true)

type LinkableData struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var NonLinkableAttrTypes = objectAttrsTypeNonLinkable(false)
var NonLinkableAttrTypesRecurse = objectAttrsTypeNonLinkable(true)

type NonLinkableData struct {
}

var RestLinkAttrTypes = objectAttrsTypeRestLink(false)
var RestLinkAttrTypesRecurse = objectAttrsTypeRestLink(true)

type RestLinkData struct {
	Href        types.String `tfsdk:"href"`
	ID          types.Int64  `tfsdk:"id"`
	Rel         types.String `tfsdk:"rel"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var SegmentCountAttrTypes = objectAttrsTypeSegmentCount(false)
var SegmentCountAttrTypesRecurse = objectAttrsTypeSegmentCount(true)

type SegmentCountData struct {
	Count types.Int64  `tfsdk:"count"`
	Name  types.String `tfsdk:"name"`
}

var auditAuditRecordAttrTypes = objectAttrsTypeAuditAuditRecord(false)
var auditAuditRecordAttrTypesRecurse = objectAttrsTypeAuditAuditRecord(true)

type auditAuditRecordData struct {
	Links                 types.List   `tfsdk:"links"`
	Permissions           types.List   `tfsdk:"permissions"`
	AdditionalObjects     types.Object `tfsdk:"additional_objects"`
	AuditAuditRecordType  types.String `tfsdk:"audit_audit_record_type"`
	DateTime              types.String `tfsdk:"date_time"`
	OnAccount             types.String `tfsdk:"on_account"`
	OnCertificate         types.String `tfsdk:"on_certificate"`
	OnClient              types.String `tfsdk:"on_client"`
	OnDirectory           types.String `tfsdk:"on_directory"`
	OnGroup               types.String `tfsdk:"on_group"`
	OnGroup2              types.String `tfsdk:"on_group2"`
	OnGroupClassification types.String `tfsdk:"on_group_classification"`
	OnOrganizationalUnit  types.String `tfsdk:"on_organizational_unit"`
	OnServiceAccount      types.String `tfsdk:"on_service_account"`
	OnSystem              types.String `tfsdk:"on_system"`
	OnVaultRecord         types.String `tfsdk:"on_vault_record"`
	OnWebhook             types.String `tfsdk:"on_webhook"`
	Parameter1            types.String `tfsdk:"parameter1"`
	Parameter2            types.String `tfsdk:"parameter2"`
	Parameter3            types.String `tfsdk:"parameter3"`
	PerformedBy           types.String `tfsdk:"performed_by"`
	SecurityLevel         types.String `tfsdk:"security_level"`
}

var auditAuditRecordLinkableWrapperAttrTypes = objectAttrsTypeAuditAuditRecordLinkableWrapper(false)
var auditAuditRecordLinkableWrapperAttrTypesRecurse = objectAttrsTypeAuditAuditRecordLinkableWrapper(true)

type auditAuditRecordLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var auditAuditRecord_additionalObjectsAttrTypes = objectAttrsTypeAuditAuditRecord_additionalObjects(false)
var auditAuditRecord_additionalObjectsAttrTypesRecurse = objectAttrsTypeAuditAuditRecord_additionalObjects(true)

type auditAuditRecord_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var authAccountAttrTypes = objectAttrsTypeAuthAccount(false)
var authAccountAttrTypesRecurse = objectAttrsTypeAuthAccount(true)

type authAccountData struct {
	Links                           types.List   `tfsdk:"links"`
	Permissions                     types.List   `tfsdk:"permissions"`
	DisplayName                     types.String `tfsdk:"display_name"`
	LastActive                      types.String `tfsdk:"last_active"`
	Username                        types.String `tfsdk:"username"`
	UUID                            types.String `tfsdk:"uuid"`
	Validity                        types.String `tfsdk:"validity"`
	AccountPermissions              types.List   `tfsdk:"account_permissions"`
	Active                          types.Bool   `tfsdk:"active"`
	AdditionalObjects               types.Object `tfsdk:"additional_objects"`
	CanRequestGroups                types.Bool   `tfsdk:"can_request_groups"`
	DirectoryUUID                   types.String `tfsdk:"directory_uuid"`
	DirectoryName                   types.String `tfsdk:"directory_name"`
	DirectoryPasswordChangeRequired types.Bool   `tfsdk:"directory_password_change_required"`
	DirectoryRotatingPassword       types.String `tfsdk:"directory_rotating_password"`
	DirectoryType                   types.String `tfsdk:"directory_type"`
	Email                           types.String `tfsdk:"email"`
	IDInDirectory                   types.String `tfsdk:"id_in_directory"`
	KeyHubPasswordChangeRequired    types.Bool   `tfsdk:"key_hub_password_change_required"`
	LastModifiedAt                  types.String `tfsdk:"last_modified_at"`
	LicenseRole                     types.String `tfsdk:"license_role"`
	Locale                          types.String `tfsdk:"locale"`
	ReregistrationRequired          types.Bool   `tfsdk:"reregistration_required"`
	TokenPasswordEnabled            types.Bool   `tfsdk:"token_password_enabled"`
	TwoFactorStatus                 types.String `tfsdk:"two_factor_status"`
	ValidInDirectory                types.Bool   `tfsdk:"valid_in_directory"`
}

var authAccountBulkUpdateAttrTypes = objectAttrsTypeAuthAccountBulkUpdate(false)
var authAccountBulkUpdateAttrTypesRecurse = objectAttrsTypeAuthAccountBulkUpdate(true)

type authAccountBulkUpdateData struct {
	Action             types.String `tfsdk:"action"`
	ExclusiveSelection types.Bool   `tfsdk:"exclusive_selection"`
	SelectedAccounts   types.List   `tfsdk:"selected_accounts"`
}

var authAccountChangeLocaleAttrTypes = objectAttrsTypeAuthAccountChangeLocale(false)
var authAccountChangeLocaleAttrTypesRecurse = objectAttrsTypeAuthAccountChangeLocale(true)

type authAccountChangeLocaleData struct {
	Locale types.String `tfsdk:"locale"`
}

var authAccountLinkableWrapperAttrTypes = objectAttrsTypeAuthAccountLinkableWrapper(false)
var authAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeAuthAccountLinkableWrapper(true)

type authAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var authAccountPrimerAttrTypes = objectAttrsTypeAuthAccountPrimer(false)
var authAccountPrimerAttrTypesRecurse = objectAttrsTypeAuthAccountPrimer(true)

type authAccountPrimerData struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	DisplayName types.String `tfsdk:"display_name"`
	LastActive  types.String `tfsdk:"last_active"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
	Validity    types.String `tfsdk:"validity"`
}

var authAccountRecoveryStatusAttrTypes = objectAttrsTypeAuthAccountRecoveryStatus(false)
var authAccountRecoveryStatusAttrTypesRecurse = objectAttrsTypeAuthAccountRecoveryStatus(true)

type authAccountRecoveryStatusData struct {
	Pending2FARecoveryRequest      types.Bool `tfsdk:"pending2_f_a_recovery_request"`
	PendingPasswordRecoveryRequest types.Bool `tfsdk:"pending_password_recovery_request"`
}

var authAccountSettingsAttrTypes = objectAttrsTypeAuthAccountSettings(false)
var authAccountSettingsAttrTypesRecurse = objectAttrsTypeAuthAccountSettings(true)

type authAccountSettingsData struct {
	DefaultOrganizationalUnitUUID    types.String `tfsdk:"default_organizational_unit_uuid"`
	DirectoryName                    types.String `tfsdk:"directory_name"`
	DirectoryType                    types.String `tfsdk:"directory_type"`
	InGroups                         types.Bool   `tfsdk:"in_groups"`
	InMultipleOrganizationalUnits    types.Bool   `tfsdk:"in_multiple_organizational_units"`
	KeyHubAdmin                      types.Bool   `tfsdk:"key_hub_admin"`
	MultipleOrganizationalUnitsExist types.Bool   `tfsdk:"multiple_organizational_units_exist"`
	PasswordMode                     types.String `tfsdk:"password_mode"`
	SshPublicKey                     types.String `tfsdk:"ssh_public_key"`
	TwoFactorAuthentication          types.String `tfsdk:"two_factor_authentication"`
	UseTokenPassword                 types.Bool   `tfsdk:"use_token_password"`
	VaultStatus                      types.String `tfsdk:"vault_status"`
}

var authAccountStatusAttrTypes = objectAttrsTypeAuthAccountStatus(false)
var authAccountStatusAttrTypesRecurse = objectAttrsTypeAuthAccountStatus(true)

type authAccountStatusData struct {
	AccountEnabled                 types.Bool   `tfsdk:"account_enabled"`
	CanRequestGroups               types.Bool   `tfsdk:"can_request_groups"`
	DeclineRecoveryRequests        types.Bool   `tfsdk:"decline_recovery_requests"`
	LicenseRole                    types.String `tfsdk:"license_role"`
	ReregistrationRequired         types.Bool   `tfsdk:"reregistration_required"`
	TwoFactorAuthenticationEnabled types.Bool   `tfsdk:"two_factor_authentication_enabled"`
}

var authAccount_additionalObjectsAttrTypes = objectAttrsTypeAuthAccount_additionalObjects(false)
var authAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeAuthAccount_additionalObjects(true)

type authAccount_additionalObjectsData struct {
	ActiveLogin             types.Bool   `tfsdk:"active_login"`
	Audit                   types.Object `tfsdk:"audit"`
	Groups                  types.Object `tfsdk:"groups"`
	PendingRecoveryRequests types.Object `tfsdk:"pending_recovery_requests"`
	Settings                types.Object `tfsdk:"settings"`
	StoredAttributes        types.Object `tfsdk:"stored_attributes"`
	Vault                   types.Object `tfsdk:"vault"`
}

var authAccountsAuditStatsAttrTypes = objectAttrsTypeAuthAccountsAuditStats(false)
var authAccountsAuditStatsAttrTypesRecurse = objectAttrsTypeAuthAccountsAuditStats(true)

type authAccountsAuditStatsData struct {
	DirectoryStats types.Object `tfsdk:"directory_stats"`
	TwoFAStats     types.Object `tfsdk:"two_f_a_stats"`
	ValidityStats  types.Object `tfsdk:"validity_stats"`
}

var authAccountsAuditStats_directoryStatsAttrTypes = objectAttrsTypeAuthAccountsAuditStats_directoryStats(false)
var authAccountsAuditStats_directoryStatsAttrTypesRecurse = objectAttrsTypeAuthAccountsAuditStats_directoryStats(true)

type authAccountsAuditStats_directoryStatsData struct {
}

var authAccountsAuditStats_twoFAStatsAttrTypes = objectAttrsTypeAuthAccountsAuditStats_twoFAStats(false)
var authAccountsAuditStats_twoFAStatsAttrTypesRecurse = objectAttrsTypeAuthAccountsAuditStats_twoFAStats(true)

type authAccountsAuditStats_twoFAStatsData struct {
}

var authAccountsAuditStats_validityStatsAttrTypes = objectAttrsTypeAuthAccountsAuditStats_validityStats(false)
var authAccountsAuditStats_validityStatsAttrTypesRecurse = objectAttrsTypeAuthAccountsAuditStats_validityStats(true)

type authAccountsAuditStats_validityStatsData struct {
}

var authInternalAccountAttrTypes = objectAttrsTypeAuthInternalAccount(false)
var authInternalAccountAttrTypesRecurse = objectAttrsTypeAuthInternalAccount(true)

type authInternalAccountData struct {
	Links                           types.List   `tfsdk:"links"`
	Permissions                     types.List   `tfsdk:"permissions"`
	DisplayName                     types.String `tfsdk:"display_name"`
	LastActive                      types.String `tfsdk:"last_active"`
	Username                        types.String `tfsdk:"username"`
	UUID                            types.String `tfsdk:"uuid"`
	Validity                        types.String `tfsdk:"validity"`
	AccountPermissions              types.List   `tfsdk:"account_permissions"`
	Active                          types.Bool   `tfsdk:"active"`
	AdditionalObjects               types.Object `tfsdk:"additional_objects"`
	CanRequestGroups                types.Bool   `tfsdk:"can_request_groups"`
	DirectoryUUID                   types.String `tfsdk:"directory_uuid"`
	DirectoryName                   types.String `tfsdk:"directory_name"`
	DirectoryPasswordChangeRequired types.Bool   `tfsdk:"directory_password_change_required"`
	DirectoryRotatingPassword       types.String `tfsdk:"directory_rotating_password"`
	DirectoryType                   types.String `tfsdk:"directory_type"`
	Email                           types.String `tfsdk:"email"`
	IDInDirectory                   types.String `tfsdk:"id_in_directory"`
	KeyHubPasswordChangeRequired    types.Bool   `tfsdk:"key_hub_password_change_required"`
	LastModifiedAt                  types.String `tfsdk:"last_modified_at"`
	LicenseRole                     types.String `tfsdk:"license_role"`
	Locale                          types.String `tfsdk:"locale"`
	ReregistrationRequired          types.Bool   `tfsdk:"reregistration_required"`
	TokenPasswordEnabled            types.Bool   `tfsdk:"token_password_enabled"`
	TwoFactorStatus                 types.String `tfsdk:"two_factor_status"`
	ValidInDirectory                types.Bool   `tfsdk:"valid_in_directory"`
	ActivationCode                  types.String `tfsdk:"activation_code"`
	ActivationDeadline              types.String `tfsdk:"activation_deadline"`
	Company                         types.String `tfsdk:"company"`
	FirstName                       types.String `tfsdk:"first_name"`
	LastName                        types.String `tfsdk:"last_name"`
	Status                          types.String `tfsdk:"status"`
	Telephone                       types.String `tfsdk:"telephone"`
}

var authInternalAccountLinkableWrapperAttrTypes = objectAttrsTypeAuthInternalAccountLinkableWrapper(false)
var authInternalAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeAuthInternalAccountLinkableWrapper(true)

type authInternalAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var authInternalAccountStatusObjectAttrTypes = objectAttrsTypeAuthInternalAccountStatusObject(false)
var authInternalAccountStatusObjectAttrTypesRecurse = objectAttrsTypeAuthInternalAccountStatusObject(true)

type authInternalAccountStatusObjectData struct {
	Status types.String `tfsdk:"status"`
}

var authInternalAccount_additionalObjectsAttrTypes = objectAttrsTypeAuthInternalAccount_additionalObjects(false)
var authInternalAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeAuthInternalAccount_additionalObjects(true)

type authInternalAccount_additionalObjectsData struct {
	Audit  types.Object `tfsdk:"audit"`
	Reason types.String `tfsdk:"reason"`
}

var authMoveInternalAccountAttrTypes = objectAttrsTypeAuthMoveInternalAccount(false)
var authMoveInternalAccountAttrTypesRecurse = objectAttrsTypeAuthMoveInternalAccount(true)

type authMoveInternalAccountData struct {
	InternalDirectory types.Object `tfsdk:"internal_directory"`
}

var authPermissionAttrTypes = objectAttrsTypeAuthPermission(false)
var authPermissionAttrTypesRecurse = objectAttrsTypeAuthPermission(true)

type authPermissionData struct {
	Full        types.String `tfsdk:"full"`
	Instances   types.List   `tfsdk:"instances"`
	Operations  types.List   `tfsdk:"operations"`
	TypeEscaped types.String `tfsdk:"type_escaped"`
}

var authStoredAccountAttributeAttrTypes = objectAttrsTypeAuthStoredAccountAttribute(false)
var authStoredAccountAttributeAttrTypesRecurse = objectAttrsTypeAuthStoredAccountAttribute(true)

type authStoredAccountAttributeData struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

var authStoredAccountAttributesAttrTypes = objectAttrsTypeAuthStoredAccountAttributes(false)
var authStoredAccountAttributesAttrTypesRecurse = objectAttrsTypeAuthStoredAccountAttributes(true)

type authStoredAccountAttributesData struct {
	Attributes types.List `tfsdk:"attributes"`
}

var certificateCertificateAttrTypes = objectAttrsTypeCertificateCertificate(false)
var certificateCertificateAttrTypesRecurse = objectAttrsTypeCertificateCertificate(true)

type certificateCertificateData struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
	AdditionalObjects                types.Object `tfsdk:"additional_objects"`
	KeyData                          types.List   `tfsdk:"key_data"`
}

var certificateCertificateLinkableWrapperAttrTypes = objectAttrsTypeCertificateCertificateLinkableWrapper(false)
var certificateCertificateLinkableWrapperAttrTypesRecurse = objectAttrsTypeCertificateCertificateLinkableWrapper(true)

type certificateCertificateLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var certificateCertificatePrimerAttrTypes = objectAttrsTypeCertificateCertificatePrimer(false)
var certificateCertificatePrimerAttrTypesRecurse = objectAttrsTypeCertificateCertificatePrimer(true)

type certificateCertificatePrimerData struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Alias                            types.String `tfsdk:"alias"`
	CertificateCertificatePrimerType types.String `tfsdk:"certificate_certificate_primer_type"`
	CertificateData                  types.List   `tfsdk:"certificate_data"`
	Expiration                       types.String `tfsdk:"expiration"`
	FingerprintSha1                  types.String `tfsdk:"fingerprint_sha1"`
	FingerprintSha256                types.String `tfsdk:"fingerprint_sha256"`
	Global                           types.Bool   `tfsdk:"global"`
	SubjectDN                        types.String `tfsdk:"subject_d_n"`
	UUID                             types.String `tfsdk:"uuid"`
}

var certificateCertificate_additionalObjectsAttrTypes = objectAttrsTypeCertificateCertificate_additionalObjects(false)
var certificateCertificate_additionalObjectsAttrTypesRecurse = objectAttrsTypeCertificateCertificate_additionalObjects(true)

type certificateCertificate_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var clientClientApplicationAttrTypes = objectAttrsTypeClientClientApplication(false)
var clientClientApplicationAttrTypesRecurse = objectAttrsTypeClientClientApplication(true)

type clientClientApplicationData struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
}

var clientClientApplicationLinkableWrapperAttrTypes = objectAttrsTypeClientClientApplicationLinkableWrapper(false)
var clientClientApplicationLinkableWrapperAttrTypesRecurse = objectAttrsTypeClientClientApplicationLinkableWrapper(true)

type clientClientApplicationLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var clientClientApplicationPrimerAttrTypes = objectAttrsTypeClientClientApplicationPrimer(false)
var clientClientApplicationPrimerAttrTypesRecurse = objectAttrsTypeClientClientApplicationPrimer(true)

type clientClientApplicationPrimerData struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
}

var clientClientApplication_additionalObjectsAttrTypes = objectAttrsTypeClientClientApplication_additionalObjects(false)
var clientClientApplication_additionalObjectsAttrTypesRecurse = objectAttrsTypeClientClientApplication_additionalObjects(true)

type clientClientApplication_additionalObjectsData struct {
	Audit            types.Object `tfsdk:"audit"`
	DeleteTile       types.Bool   `tfsdk:"delete_tile"`
	Groupclients     types.Object `tfsdk:"groupclients"`
	Groups           types.Object `tfsdk:"groups"`
	Secret           types.Object `tfsdk:"secret"`
	Tile             types.Object `tfsdk:"tile"`
	VaultRecordCount types.Int64  `tfsdk:"vault_record_count"`
}

var clientLdapClientAttrTypes = objectAttrsTypeClientLdapClient(false)
var clientLdapClientAttrTypesRecurse = objectAttrsTypeClientLdapClient(true)

type clientLdapClientData struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	BindDn                            types.String `tfsdk:"bind_dn"`
	ClientCertificateUUID             types.String `tfsdk:"client_certificate_uuid"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecretUUID                  types.String `tfsdk:"shared_secret_uuid"`
	UsedForProvisioning               types.Bool   `tfsdk:"used_for_provisioning"`
}

var clientOAuth2ClientAttrTypes = objectAttrsTypeClientOAuth2Client(false)
var clientOAuth2ClientAttrTypesRecurse = objectAttrsTypeClientOAuth2Client(true)

type clientOAuth2ClientData struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	AccountPermissions                types.List   `tfsdk:"account_permissions"`
	Attributes                        types.Object `tfsdk:"attributes"`
	CallbackURI                       types.String `tfsdk:"callback_u_r_i"`
	Confidential                      types.Bool   `tfsdk:"confidential"`
	DebugMode                         types.Bool   `tfsdk:"debug_mode"`
	IDTokenClaims                     types.String `tfsdk:"id_token_claims"`
	InitiateLoginURI                  types.String `tfsdk:"initiate_login_u_r_i"`
	ResourceURIs                      types.String `tfsdk:"resource_u_r_is"`
	ShareSecretInVault                types.Bool   `tfsdk:"share_secret_in_vault"`
	SharedSecretUUID                  types.String `tfsdk:"shared_secret_uuid"`
	ShowLandingPage                   types.Bool   `tfsdk:"show_landing_page"`
	UseClientCredentials              types.Bool   `tfsdk:"use_client_credentials"`
}

var clientOAuth2ClientPermissionAttrTypes = objectAttrsTypeClientOAuth2ClientPermission(false)
var clientOAuth2ClientPermissionAttrTypesRecurse = objectAttrsTypeClientOAuth2ClientPermission(true)

type clientOAuth2ClientPermissionData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroupUUID      types.String `tfsdk:"for_group_uuid"`
	ForSystemUUID     types.String `tfsdk:"for_system_uuid"`
	Value             types.String `tfsdk:"value"`
}

var clientOAuth2ClientPermissionLinkableWrapperAttrTypes = objectAttrsTypeClientOAuth2ClientPermissionLinkableWrapper(false)
var clientOAuth2ClientPermissionLinkableWrapperAttrTypesRecurse = objectAttrsTypeClientOAuth2ClientPermissionLinkableWrapper(true)

type clientOAuth2ClientPermissionLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermissionWithClientAttrTypes = objectAttrsTypeClientOAuth2ClientPermissionWithClient(false)
var clientOAuth2ClientPermissionWithClientAttrTypesRecurse = objectAttrsTypeClientOAuth2ClientPermissionWithClient(true)

type clientOAuth2ClientPermissionWithClientData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	ForGroupUUID      types.String `tfsdk:"for_group_uuid"`
	ForSystemUUID     types.String `tfsdk:"for_system_uuid"`
	Value             types.String `tfsdk:"value"`
	Client            types.Object `tfsdk:"client"`
}

var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypes = objectAttrsTypeClientOAuth2ClientPermissionWithClientLinkableWrapper(false)
var clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRecurse = objectAttrsTypeClientOAuth2ClientPermissionWithClientLinkableWrapper(true)

type clientOAuth2ClientPermissionWithClientLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var clientOAuth2ClientPermission_additionalObjectsAttrTypes = objectAttrsTypeClientOAuth2ClientPermission_additionalObjects(false)
var clientOAuth2ClientPermission_additionalObjectsAttrTypesRecurse = objectAttrsTypeClientOAuth2ClientPermission_additionalObjects(true)

type clientOAuth2ClientPermission_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var clientOAuth2Client_attributesAttrTypes = objectAttrsTypeClientOAuth2Client_attributes(false)
var clientOAuth2Client_attributesAttrTypesRecurse = objectAttrsTypeClientOAuth2Client_attributes(true)

type clientOAuth2Client_attributesData struct {
}

var clientSaml2ClientAttrTypes = objectAttrsTypeClientSaml2Client(false)
var clientSaml2ClientAttrTypesRecurse = objectAttrsTypeClientSaml2Client(true)

type clientSaml2ClientData struct {
	Links                             types.List   `tfsdk:"links"`
	Permissions                       types.List   `tfsdk:"permissions"`
	ClientClientApplicationPrimerType types.String `tfsdk:"client_client_application_primer_type"`
	ClientID                          types.String `tfsdk:"client_id"`
	Name                              types.String `tfsdk:"name"`
	Scopes                            types.List   `tfsdk:"scopes"`
	SsoApplication                    types.Bool   `tfsdk:"sso_application"`
	UUID                              types.String `tfsdk:"uuid"`
	AdditionalObjects                 types.Object `tfsdk:"additional_objects"`
	LastModifiedAt                    types.String `tfsdk:"last_modified_at"`
	OwnerUUID                         types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID        types.String `tfsdk:"technical_administrator_uuid"`
	Attributes                        types.Object `tfsdk:"attributes"`
	Metadata                          types.String `tfsdk:"metadata"`
	MetadataURL                       types.String `tfsdk:"metadata_url"`
	SubjectFormat                     types.String `tfsdk:"subject_format"`
}

var clientSaml2Client_attributesAttrTypes = objectAttrsTypeClientSaml2Client_attributes(false)
var clientSaml2Client_attributesAttrTypesRecurse = objectAttrsTypeClientSaml2Client_attributes(true)

type clientSaml2Client_attributesData struct {
}

var directoryAccountDirectoryAttrTypes = objectAttrsTypeDirectoryAccountDirectory(false)
var directoryAccountDirectoryAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectory(true)

type directoryAccountDirectoryData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectoryLinkableWrapperAttrTypes = objectAttrsTypeDirectoryAccountDirectoryLinkableWrapper(false)
var directoryAccountDirectoryLinkableWrapperAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectoryLinkableWrapper(true)

type directoryAccountDirectoryLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectoryPrimerAttrTypes = objectAttrsTypeDirectoryAccountDirectoryPrimer(false)
var directoryAccountDirectoryPrimerAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectoryPrimer(true)

type directoryAccountDirectoryPrimerData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
}

var directoryAccountDirectoryStatusReportAttrTypes = objectAttrsTypeDirectoryAccountDirectoryStatusReport(false)
var directoryAccountDirectoryStatusReportAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectoryStatusReport(true)

type directoryAccountDirectoryStatusReportData struct {
	Accounts types.Int64  `tfsdk:"accounts"`
	Reason   types.String `tfsdk:"reason"`
	Status   types.String `tfsdk:"status"`
}

var directoryAccountDirectorySummaryAttrTypes = objectAttrsTypeDirectoryAccountDirectorySummary(false)
var directoryAccountDirectorySummaryAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectorySummary(true)

type directoryAccountDirectorySummaryData struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	DirectoryAccountDirectorySummaryType types.String `tfsdk:"directory_account_directory_summary_type"`
	DomainRestriction                    types.String `tfsdk:"domain_restriction"`
	FullyResolvedIssuer                  types.String `tfsdk:"fully_resolved_issuer"`
	Name                                 types.String `tfsdk:"name"`
	Status                               types.Object `tfsdk:"status"`
	UsernameCustomizable                 types.Bool   `tfsdk:"username_customizable"`
}

var directoryAccountDirectorySummaryLinkableWrapperAttrTypes = objectAttrsTypeDirectoryAccountDirectorySummaryLinkableWrapper(false)
var directoryAccountDirectorySummaryLinkableWrapperAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectorySummaryLinkableWrapper(true)

type directoryAccountDirectorySummaryLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var directoryAccountDirectory_additionalObjectsAttrTypes = objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)
var directoryAccountDirectory_additionalObjectsAttrTypesRecurse = objectAttrsTypeDirectoryAccountDirectory_additionalObjects(true)

type directoryAccountDirectory_additionalObjectsData struct {
	Audit   types.Object `tfsdk:"audit"`
	Markers types.Object `tfsdk:"markers"`
	Status  types.Object `tfsdk:"status"`
}

var directoryInternalDirectoryAttrTypes = objectAttrsTypeDirectoryInternalDirectory(false)
var directoryInternalDirectoryAttrTypesRecurse = objectAttrsTypeDirectoryInternalDirectory(true)

type directoryInternalDirectoryData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	OwnerUUID                           types.String `tfsdk:"owner_uuid"`
}

var directoryLDAPDirectoryAttrTypes = objectAttrsTypeDirectoryLDAPDirectory(false)
var directoryLDAPDirectoryAttrTypesRecurse = objectAttrsTypeDirectoryLDAPDirectory(true)

type directoryLDAPDirectoryData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	BaseDN                              types.String `tfsdk:"base_d_n"`
	ClientCertificateUUID               types.String `tfsdk:"client_certificate_uuid"`
	Dialect                             types.String `tfsdk:"dialect"`
	FailoverHost                        types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID      types.String `tfsdk:"failover_trusted_certificate_uuid"`
	Host                                types.String `tfsdk:"host"`
	PasswordRecovery                    types.String `tfsdk:"password_recovery"`
	Port                                types.Int64  `tfsdk:"port"`
	SearchBindDN                        types.String `tfsdk:"search_bind_d_n"`
	SearchBindPassword                  types.String `tfsdk:"search_bind_password"`
	SearchFilter                        types.String `tfsdk:"search_filter"`
	TLS                                 types.String `tfsdk:"tls"`
	TrustedCertificateUUID              types.String `tfsdk:"trusted_certificate_uuid"`
}

var directoryMaintenanceDirectoryAttrTypes = objectAttrsTypeDirectoryMaintenanceDirectory(false)
var directoryMaintenanceDirectoryAttrTypesRecurse = objectAttrsTypeDirectoryMaintenanceDirectory(true)

type directoryMaintenanceDirectoryData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
}

var directoryOIDCDirectoryAttrTypes = objectAttrsTypeDirectoryOIDCDirectory(false)
var directoryOIDCDirectoryAttrTypesRecurse = objectAttrsTypeDirectoryOIDCDirectory(true)

type directoryOIDCDirectoryData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	AccountValiditySupported            types.Bool   `tfsdk:"account_validity_supported"`
	Active                              types.Bool   `tfsdk:"active"`
	DirectoryAccountDirectoryPrimerType types.String `tfsdk:"directory_account_directory_primer_type"`
	Name                                types.String `tfsdk:"name"`
	UUID                                types.String `tfsdk:"uuid"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	BaseOrganizationalUnitUUID          types.String `tfsdk:"base_organizational_unit_uuid"`
	DefaultDirectory                    types.Bool   `tfsdk:"default_directory"`
	HelpdeskGroupUUID                   types.String `tfsdk:"helpdesk_group_uuid"`
	Restrict2fa                         types.Bool   `tfsdk:"restrict2fa"`
	RotatingPassword                    types.String `tfsdk:"rotating_password"`
	UsernameCustomizable                types.Bool   `tfsdk:"username_customizable"`
	AcrValues                           types.String `tfsdk:"acr_values"`
	AttributesToStore                   types.String `tfsdk:"attributes_to_store"`
	ClientID                            types.String `tfsdk:"client_id"`
	ClientSecret                        types.String `tfsdk:"client_secret"`
	DomainRestriction                   types.String `tfsdk:"domain_restriction"`
	Enforces2fa                         types.Bool   `tfsdk:"enforces2fa"`
	FullyResolvedIssuer                 types.String `tfsdk:"fully_resolved_issuer"`
	Issuer                              types.String `tfsdk:"issuer"`
	LogoutURL                           types.String `tfsdk:"logout_url"`
	SendLoginHint                       types.Bool   `tfsdk:"send_login_hint"`
	VendorEscaped                       types.String `tfsdk:"vendor_escaped"`
}

var groupAccountGroupAttrTypes = objectAttrsTypeGroupAccountGroup(false)
var groupAccountGroupAttrTypesRecurse = objectAttrsTypeGroupAccountGroup(true)

type groupAccountGroupData struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	Admin                  types.Bool   `tfsdk:"admin"`
	Name                   types.String `tfsdk:"name"`
	UUID                   types.String `tfsdk:"uuid"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	EndDate                types.String `tfsdk:"end_date"`
	Folder                 types.Object `tfsdk:"folder"`
	LastUsed               types.String `tfsdk:"last_used"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupAccountGroupLinkableWrapperAttrTypes = objectAttrsTypeGroupAccountGroupLinkableWrapper(false)
var groupAccountGroupLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupAccountGroupLinkableWrapper(true)

type groupAccountGroupLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupAccountGroup_additionalObjectsAttrTypes = objectAttrsTypeGroupAccountGroup_additionalObjects(false)
var groupAccountGroup_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupAccountGroup_additionalObjects(true)

type groupAccountGroup_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var groupAuthorizedGroupsWrapperAttrTypes = objectAttrsTypeGroupAuthorizedGroupsWrapper(false)
var groupAuthorizedGroupsWrapperAttrTypesRecurse = objectAttrsTypeGroupAuthorizedGroupsWrapper(true)

type groupAuthorizedGroupsWrapperData struct {
	Items      types.List  `tfsdk:"items"`
	GroupCount types.Int64 `tfsdk:"group_count"`
}

var groupGroupAttrTypes = objectAttrsTypeGroupGroup(false)
var groupGroupAttrTypesRecurse = objectAttrsTypeGroupGroup(true)

type groupGroupData struct {
	Links                            types.List   `tfsdk:"links"`
	Permissions                      types.List   `tfsdk:"permissions"`
	Admin                            types.Bool   `tfsdk:"admin"`
	Name                             types.String `tfsdk:"name"`
	UUID                             types.String `tfsdk:"uuid"`
	AdditionalObjects                types.Object `tfsdk:"additional_objects"`
	ApplicationAdministration        types.Bool   `tfsdk:"application_administration"`
	AuditConfig                      types.Object `tfsdk:"audit_config"`
	AuditRequested                   types.Bool   `tfsdk:"audit_requested"`
	Auditor                          types.Bool   `tfsdk:"auditor"`
	AuthorizingGroupAuditingUUID     types.String `tfsdk:"authorizing_group_auditing_uuid"`
	AuthorizingGroupDelegationUUID   types.String `tfsdk:"authorizing_group_delegation_uuid"`
	AuthorizingGroupMembershipUUID   types.String `tfsdk:"authorizing_group_membership_uuid"`
	AuthorizingGroupProvisioningUUID types.String `tfsdk:"authorizing_group_provisioning_uuid"`
	AuthorizingGroupTypes            types.List   `tfsdk:"authorizing_group_types"`
	ClassificationUUID               types.String `tfsdk:"classification_uuid"`
	Description                      types.String `tfsdk:"description"`
	ExtendedAccess                   types.String `tfsdk:"extended_access"`
	HideAuditTrail                   types.Bool   `tfsdk:"hide_audit_trail"`
	NestedUnderUUID                  types.String `tfsdk:"nested_under_uuid"`
	OrganizationalUnitUUID           types.String `tfsdk:"organizational_unit_uuid"`
	PrivateGroup                     types.Bool   `tfsdk:"private_group"`
	RecordTrail                      types.Bool   `tfsdk:"record_trail"`
	RotatingPasswordRequired         types.Bool   `tfsdk:"rotating_password_required"`
	SingleManaged                    types.Bool   `tfsdk:"single_managed"`
	VaultRecovery                    types.String `tfsdk:"vault_recovery"`
	VaultRequiresActivation          types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupAccountAttrTypes = objectAttrsTypeGroupGroupAccount(false)
var groupGroupAccountAttrTypesRecurse = objectAttrsTypeGroupGroupAccount(true)

type groupGroupAccountData struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	DisplayName            types.String `tfsdk:"display_name"`
	LastActive             types.String `tfsdk:"last_active"`
	Username               types.String `tfsdk:"username"`
	UUID                   types.String `tfsdk:"uuid"`
	Validity               types.String `tfsdk:"validity"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	DirectoryUUID          types.String `tfsdk:"directory_uuid"`
	DisconnectedNested     types.Bool   `tfsdk:"disconnected_nested"`
	EndDate                types.String `tfsdk:"end_date"`
	LastUsed               types.String `tfsdk:"last_used"`
	Nested                 types.Bool   `tfsdk:"nested"`
	ProvisioningEndTime    types.String `tfsdk:"provisioning_end_time"`
	Rights                 types.String `tfsdk:"rights"`
	TwoFactorStatus        types.String `tfsdk:"two_factor_status"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccountLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupAccountLinkableWrapper(false)
var groupGroupAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupAccountLinkableWrapper(true)

type groupGroupAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAccountNestingAttrTypes = objectAttrsTypeGroupGroupAccountNesting(false)
var groupGroupAccountNestingAttrTypesRecurse = objectAttrsTypeGroupGroupAccountNesting(true)

type groupGroupAccountNestingData struct {
	Connected types.Bool `tfsdk:"connected"`
}

var groupGroupAccountStatusAttrTypes = objectAttrsTypeGroupGroupAccountStatus(false)
var groupGroupAccountStatusAttrTypesRecurse = objectAttrsTypeGroupGroupAccountStatus(true)

type groupGroupAccountStatusData struct {
	Folder                 types.Object `tfsdk:"folder"`
	VisibleForProvisioning types.Bool   `tfsdk:"visible_for_provisioning"`
}

var groupGroupAccount_additionalObjectsAttrTypes = objectAttrsTypeGroupGroupAccount_additionalObjects(false)
var groupGroupAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroupAccount_additionalObjects(true)

type groupGroupAccount_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAdminMailAttrTypes = objectAttrsTypeGroupGroupAdminMail(false)
var groupGroupAdminMailAttrTypesRecurse = objectAttrsTypeGroupGroupAdminMail(true)

type groupGroupAdminMailData struct {
	Body types.String `tfsdk:"body"`
}

var groupGroupAuditAttrTypes = objectAttrsTypeGroupGroupAudit(false)
var groupGroupAuditAttrTypesRecurse = objectAttrsTypeGroupGroupAudit(true)

type groupGroupAuditData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Accounts          types.List   `tfsdk:"accounts"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Comment           types.String `tfsdk:"comment"`
	CreatedAt         types.String `tfsdk:"created_at"`
	CreatedBy         types.String `tfsdk:"created_by"`
	GroupName         types.String `tfsdk:"group_name"`
	NameOnAudit       types.String `tfsdk:"name_on_audit"`
	ReviewedAt        types.String `tfsdk:"reviewed_at"`
	ReviewedBy        types.String `tfsdk:"reviewed_by"`
	Status            types.String `tfsdk:"status"`
	SubmittedAt       types.String `tfsdk:"submitted_at"`
	SubmittedBy       types.String `tfsdk:"submitted_by"`
}

var groupGroupAuditAccountAttrTypes = objectAttrsTypeGroupGroupAuditAccount(false)
var groupGroupAuditAccountAttrTypesRecurse = objectAttrsTypeGroupGroupAuditAccount(true)

type groupGroupAuditAccountData struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	AccountUUID        types.String `tfsdk:"account_uuid"`
	AccountValid       types.Bool   `tfsdk:"account_valid"`
	Action             types.String `tfsdk:"action"`
	Comment            types.String `tfsdk:"comment"`
	DisconnectedNested types.Bool   `tfsdk:"disconnected_nested"`
	DisplayName        types.String `tfsdk:"display_name"`
	EndDate            types.String `tfsdk:"end_date"`
	LastActive         types.String `tfsdk:"last_active"`
	LastUsed           types.String `tfsdk:"last_used"`
	Nested             types.Bool   `tfsdk:"nested"`
	Rights             types.String `tfsdk:"rights"`
	Username           types.String `tfsdk:"username"`
}

var groupGroupAuditConfigAttrTypes = objectAttrsTypeGroupGroupAuditConfig(false)
var groupGroupAuditConfigAttrTypesRecurse = objectAttrsTypeGroupGroupAuditConfig(true)

type groupGroupAuditConfigData struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
	Months      types.List `tfsdk:"months"`
}

var groupGroupAuditLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupAuditLinkableWrapper(false)
var groupGroupAuditLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupAuditLinkableWrapper(true)

type groupGroupAuditLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupAudit_additionalObjectsAttrTypes = objectAttrsTypeGroupGroupAudit_additionalObjects(false)
var groupGroupAudit_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroupAudit_additionalObjects(true)

type groupGroupAudit_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupAuditingInfoAttrTypes = objectAttrsTypeGroupGroupAuditingInfo(false)
var groupGroupAuditingInfoAttrTypesRecurse = objectAttrsTypeGroupGroupAuditingInfo(true)

type groupGroupAuditingInfoData struct {
	AuditDueDate              types.String `tfsdk:"audit_due_date"`
	LastAuditDate             types.String `tfsdk:"last_audit_date"`
	NrAccounts                types.Int64  `tfsdk:"nr_accounts"`
	NrDisabledAccounts        types.Int64  `tfsdk:"nr_disabled_accounts"`
	NrDisabledManagers        types.Int64  `tfsdk:"nr_disabled_managers"`
	NrExpiredVaultRecords     types.Int64  `tfsdk:"nr_expired_vault_records"`
	NrManagers                types.Int64  `tfsdk:"nr_managers"`
	NrVaultRecordsWithEndDate types.Int64  `tfsdk:"nr_vault_records_with_end_date"`
}

var groupGroupClassificationAttrTypes = objectAttrsTypeGroupGroupClassification(false)
var groupGroupClassificationAttrTypesRecurse = objectAttrsTypeGroupGroupClassification(true)

type groupGroupClassificationData struct {
	Links                                types.List   `tfsdk:"links"`
	Permissions                          types.List   `tfsdk:"permissions"`
	Name                                 types.String `tfsdk:"name"`
	UUID                                 types.String `tfsdk:"uuid"`
	AdditionalObjects                    types.Object `tfsdk:"additional_objects"`
	AuthorizingGroupAuditingRequired     types.Bool   `tfsdk:"authorizing_group_auditing_required"`
	AuthorizingGroupDelegationRequired   types.Bool   `tfsdk:"authorizing_group_delegation_required"`
	AuthorizingGroupMembershipRequired   types.Bool   `tfsdk:"authorizing_group_membership_required"`
	AuthorizingGroupProvisioningRequired types.Bool   `tfsdk:"authorizing_group_provisioning_required"`
	DefaultClassification                types.Bool   `tfsdk:"default_classification"`
	Description                          types.String `tfsdk:"description"`
	MaximumAuditInterval                 types.Int64  `tfsdk:"maximum_audit_interval"`
	MinimumNrManagers                    types.Int64  `tfsdk:"minimum_nr_managers"`
	RecordTrailRequired                  types.Bool   `tfsdk:"record_trail_required"`
	RequiredMonths                       types.List   `tfsdk:"required_months"`
	RotatingPasswordRequired             types.Bool   `tfsdk:"rotating_password_required"`
	VaultRequiresActivation              types.Bool   `tfsdk:"vault_requires_activation"`
}

var groupGroupClassificationInfoAttrTypes = objectAttrsTypeGroupGroupClassificationInfo(false)
var groupGroupClassificationInfoAttrTypesRecurse = objectAttrsTypeGroupGroupClassificationInfo(true)

type groupGroupClassificationInfoData struct {
	NrGroups types.Int64 `tfsdk:"nr_groups"`
}

var groupGroupClassificationLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupClassificationLinkableWrapper(false)
var groupGroupClassificationLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupClassificationLinkableWrapper(true)

type groupGroupClassificationLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClassificationPrimerAttrTypes = objectAttrsTypeGroupGroupClassificationPrimer(false)
var groupGroupClassificationPrimerAttrTypesRecurse = objectAttrsTypeGroupGroupClassificationPrimer(true)

type groupGroupClassificationPrimerData struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupClassificationUpdateAttrTypes = objectAttrsTypeGroupGroupClassificationUpdate(false)
var groupGroupClassificationUpdateAttrTypesRecurse = objectAttrsTypeGroupGroupClassificationUpdate(true)

type groupGroupClassificationUpdateData struct {
	ClassificatonUUID types.String `tfsdk:"classificaton_uuid"`
}

var groupGroupClassification_additionalObjectsAttrTypes = objectAttrsTypeGroupGroupClassification_additionalObjects(false)
var groupGroupClassification_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroupClassification_additionalObjects(true)

type groupGroupClassification_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
	Info  types.Object `tfsdk:"info"`
}

var groupGroupClientAttrTypes = objectAttrsTypeGroupGroupClient(false)
var groupGroupClientAttrTypesRecurse = objectAttrsTypeGroupGroupClient(true)

type groupGroupClientData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	ActivationRequired         types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ClientUUID                 types.String `tfsdk:"client_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	OwnerUUID                  types.String `tfsdk:"owner_uuid"`
	TechnicalAdministratorUUID types.String `tfsdk:"technical_administrator_uuid"`
}

var groupGroupClientLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupClientLinkableWrapper(false)
var groupGroupClientLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupClientLinkableWrapper(true)

type groupGroupClientLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupClient_additionalObjectsAttrTypes = objectAttrsTypeGroupGroupClient_additionalObjects(false)
var groupGroupClient_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroupClient_additionalObjects(true)

type groupGroupClient_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupFolderAttrTypes = objectAttrsTypeGroupGroupFolder(false)
var groupGroupFolderAttrTypesRecurse = objectAttrsTypeGroupGroupFolder(true)

type groupGroupFolderData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
}

var groupGroupFolderLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupFolderLinkableWrapper(false)
var groupGroupFolderLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupFolderLinkableWrapper(true)

type groupGroupFolderLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupFolder_additionalObjectsAttrTypes = objectAttrsTypeGroupGroupFolder_additionalObjects(false)
var groupGroupFolder_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroupFolder_additionalObjects(true)

type groupGroupFolder_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var groupGroupInfoAttrTypes = objectAttrsTypeGroupGroupInfo(false)
var groupGroupInfoAttrTypesRecurse = objectAttrsTypeGroupGroupInfo(true)

type groupGroupInfoData struct {
	NrAccounts           types.Int64 `tfsdk:"nr_accounts"`
	NrAccountsWithVault  types.Int64 `tfsdk:"nr_accounts_with_vault"`
	NrAudits             types.Int64 `tfsdk:"nr_audits"`
	NrClients            types.Int64 `tfsdk:"nr_clients"`
	NrProvisionedSystems types.Int64 `tfsdk:"nr_provisioned_systems"`
	NrVaultRecords       types.Int64 `tfsdk:"nr_vault_records"`
}

var groupGroupLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupLinkableWrapper(false)
var groupGroupLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupLinkableWrapper(true)

type groupGroupLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupPrimerAttrTypes = objectAttrsTypeGroupGroupPrimer(false)
var groupGroupPrimerAttrTypesRecurse = objectAttrsTypeGroupGroupPrimer(true)

type groupGroupPrimerData struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Admin       types.Bool   `tfsdk:"admin"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var groupGroupPrimerLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupPrimerLinkableWrapper(false)
var groupGroupPrimerLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupPrimerLinkableWrapper(true)

type groupGroupPrimerLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupGroupSegmentedLinkableWrapperAttrTypes = objectAttrsTypeGroupGroupSegmentedLinkableWrapper(false)
var groupGroupSegmentedLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupGroupSegmentedLinkableWrapper(true)

type groupGroupSegmentedLinkableWrapperData struct {
	Items    types.List `tfsdk:"items"`
	Segments types.List `tfsdk:"segments"`
}

var groupGroup_additionalObjectsAttrTypes = objectAttrsTypeGroupGroup_additionalObjects(false)
var groupGroup_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupGroup_additionalObjects(true)

type groupGroup_additionalObjectsData struct {
	Accounts                   types.Object `tfsdk:"accounts"`
	AdministeredClients        types.Object `tfsdk:"administered_clients"`
	AdministeredSystems        types.Object `tfsdk:"administered_systems"`
	Admins                     types.Object `tfsdk:"admins"`
	Audit                      types.Object `tfsdk:"audit"`
	AuthorizedGroups           types.Object `tfsdk:"authorized_groups"`
	ClientPermissions          types.Object `tfsdk:"client_permissions"`
	Clients                    types.Object `tfsdk:"clients"`
	ContentAdministeredSystems types.Object `tfsdk:"content_administered_systems"`
	Groupauditinginfo          types.Object `tfsdk:"groupauditinginfo"`
	Groupinfo                  types.Object `tfsdk:"groupinfo"`
	Helpdesk                   types.Object `tfsdk:"helpdesk"`
	Markers                    types.Object `tfsdk:"markers"`
	Myaccount                  types.Object `tfsdk:"myaccount"`
	Mydelegatedaccount         types.Object `tfsdk:"mydelegatedaccount"`
	NestedGroups               types.Object `tfsdk:"nested_groups"`
	OwnedClients               types.Object `tfsdk:"owned_clients"`
	OwnedDirectories           types.Object `tfsdk:"owned_directories"`
	OwnedGroupsOnSystem        types.Object `tfsdk:"owned_groups_on_system"`
	OwnedOrganizationalUnits   types.Object `tfsdk:"owned_organizational_units"`
	OwnedSystems               types.Object `tfsdk:"owned_systems"`
	RecentAudits               types.Object `tfsdk:"recent_audits"`
	Requeststatus              types.String `tfsdk:"requeststatus"`
	ServiceAccounts            types.Object `tfsdk:"service_accounts"`
	Systems                    types.Object `tfsdk:"systems"`
	Vault                      types.Object `tfsdk:"vault"`
	Webhooks                   types.Object `tfsdk:"webhooks"`
}

var groupGroupsAuditStatsAttrTypes = objectAttrsTypeGroupGroupsAuditStats(false)
var groupGroupsAuditStatsAttrTypesRecurse = objectAttrsTypeGroupGroupsAuditStats(true)

type groupGroupsAuditStatsData struct {
	AuditedGroups         types.Int64 `tfsdk:"audited_groups"`
	Classifications       types.List  `tfsdk:"classifications"`
	OverdueAuditGroups    types.Int64 `tfsdk:"overdue_audit_groups"`
	OverdueVaultPolicies  types.Int64 `tfsdk:"overdue_vault_policies"`
	UnauditedGroups       types.Int64 `tfsdk:"unaudited_groups"`
	ValidVaultPolicies    types.Int64 `tfsdk:"valid_vault_policies"`
	VaultsWithoutPolicies types.Int64 `tfsdk:"vaults_without_policies"`
}

var groupProvisioningGroupAttrTypes = objectAttrsTypeGroupProvisioningGroup(false)
var groupProvisioningGroupAttrTypesRecurse = objectAttrsTypeGroupProvisioningGroup(true)

type groupProvisioningGroupData struct {
	Links              types.List   `tfsdk:"links"`
	Permissions        types.List   `tfsdk:"permissions"`
	ActivationRequired types.Bool   `tfsdk:"activation_required"`
	AdditionalObjects  types.Object `tfsdk:"additional_objects"`
	GroupUUID          types.String `tfsdk:"group_uuid"`
	GroupOnSystem      types.Object `tfsdk:"group_on_system"`
}

var groupProvisioningGroupLinkableWrapperAttrTypes = objectAttrsTypeGroupProvisioningGroupLinkableWrapper(false)
var groupProvisioningGroupLinkableWrapperAttrTypesRecurse = objectAttrsTypeGroupProvisioningGroupLinkableWrapper(true)

type groupProvisioningGroupLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var groupProvisioningGroup_additionalObjectsAttrTypes = objectAttrsTypeGroupProvisioningGroup_additionalObjects(false)
var groupProvisioningGroup_additionalObjectsAttrTypesRecurse = objectAttrsTypeGroupProvisioningGroup_additionalObjects(true)

type groupProvisioningGroup_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var launchpadDisplayedLaunchpadTileAttrTypes = objectAttrsTypeLaunchpadDisplayedLaunchpadTile(false)
var launchpadDisplayedLaunchpadTileAttrTypesRecurse = objectAttrsTypeLaunchpadDisplayedLaunchpadTile(true)

type launchpadDisplayedLaunchpadTileData struct {
	Links         types.List   `tfsdk:"links"`
	Permissions   types.List   `tfsdk:"permissions"`
	GroupUUID     types.String `tfsdk:"group_uuid"`
	IDenticonCode types.Int64  `tfsdk:"identicon_code"`
	Logo          types.List   `tfsdk:"logo"`
	Tile          types.Object `tfsdk:"tile"`
	Title         types.String `tfsdk:"title"`
	Uri           types.String `tfsdk:"uri"`
}

var launchpadDisplayedLaunchpadTilesAttrTypes = objectAttrsTypeLaunchpadDisplayedLaunchpadTiles(false)
var launchpadDisplayedLaunchpadTilesAttrTypesRecurse = objectAttrsTypeLaunchpadDisplayedLaunchpadTiles(true)

type launchpadDisplayedLaunchpadTilesData struct {
	Items types.List `tfsdk:"items"`
}

var launchpadLaunchpadTileAttrTypes = objectAttrsTypeLaunchpadLaunchpadTile(false)
var launchpadLaunchpadTileAttrTypesRecurse = objectAttrsTypeLaunchpadLaunchpadTile(true)

type launchpadLaunchpadTileData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
}

var launchpadLaunchpadTileLinkableWrapperAttrTypes = objectAttrsTypeLaunchpadLaunchpadTileLinkableWrapper(false)
var launchpadLaunchpadTileLinkableWrapperAttrTypesRecurse = objectAttrsTypeLaunchpadLaunchpadTileLinkableWrapper(true)

type launchpadLaunchpadTileLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var launchpadLaunchpadTilePrimerAttrTypes = objectAttrsTypeLaunchpadLaunchpadTilePrimer(false)
var launchpadLaunchpadTilePrimerAttrTypesRecurse = objectAttrsTypeLaunchpadLaunchpadTilePrimer(true)

type launchpadLaunchpadTilePrimerData struct {
	Links       types.List `tfsdk:"links"`
	Permissions types.List `tfsdk:"permissions"`
}

var launchpadLaunchpadTile_additionalObjectsAttrTypes = objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(false)
var launchpadLaunchpadTile_additionalObjectsAttrTypesRecurse = objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(true)

type launchpadLaunchpadTile_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var launchpadManualLaunchpadTileAttrTypes = objectAttrsTypeLaunchpadManualLaunchpadTile(false)
var launchpadManualLaunchpadTileAttrTypesRecurse = objectAttrsTypeLaunchpadManualLaunchpadTile(true)

type launchpadManualLaunchpadTileData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
	Title                      types.String `tfsdk:"title"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadSsoApplicationLaunchpadTileAttrTypes = objectAttrsTypeLaunchpadSsoApplicationLaunchpadTile(false)
var launchpadSsoApplicationLaunchpadTileAttrTypesRecurse = objectAttrsTypeLaunchpadSsoApplicationLaunchpadTile(true)

type launchpadSsoApplicationLaunchpadTileData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
	Uri                        types.String `tfsdk:"uri"`
}

var launchpadVaultRecordLaunchpadTileAttrTypes = objectAttrsTypeLaunchpadVaultRecordLaunchpadTile(false)
var launchpadVaultRecordLaunchpadTileAttrTypesRecurse = objectAttrsTypeLaunchpadVaultRecordLaunchpadTile(true)

type launchpadVaultRecordLaunchpadTileData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	ApplicationUUID            types.String `tfsdk:"application_uuid"`
	GroupUUID                  types.String `tfsdk:"group_uuid"`
	IDenticonCode              types.Int64  `tfsdk:"identicon_code"`
	LaunchpadLaunchpadTileType types.String `tfsdk:"launchpad_launchpad_tile_type"`
	Logo                       types.List   `tfsdk:"logo"`
	VaultRecordUUID            types.String `tfsdk:"vault_record_uuid"`
}

var licenseKeyHubLicenseInfoAttrTypes = objectAttrsTypeLicenseKeyHubLicenseInfo(false)
var licenseKeyHubLicenseInfoAttrTypesRecurse = objectAttrsTypeLicenseKeyHubLicenseInfo(true)

type licenseKeyHubLicenseInfoData struct {
	CurrentLicenseStatus types.String `tfsdk:"current_license_status"`
	CustomerCompany      types.String `tfsdk:"customer_company"`
	CustomerContact      types.String `tfsdk:"customer_contact"`
	CustomerDomains      types.List   `tfsdk:"customer_domains"`
	Details              types.List   `tfsdk:"details"`
	ExpirationTime       types.String `tfsdk:"expiration_time"`
	Features             types.List   `tfsdk:"features"`
	IssueTime            types.String `tfsdk:"issue_time"`
	KeyHubDomain         types.String `tfsdk:"key_hub_domain"`
	LicenseKey           types.String `tfsdk:"license_key"`
	NotBeforeTime        types.String `tfsdk:"not_before_time"`
	UsersHardLimit       types.Int64  `tfsdk:"users_hard_limit"`
	UsersProLimit        types.Int64  `tfsdk:"users_pro_limit"`
	UsersSoftLimit       types.Int64  `tfsdk:"users_soft_limit"`
	UUID                 types.String `tfsdk:"uuid"`
	Version              types.Int64  `tfsdk:"version"`
}

var markItemMarkerAttrTypes = objectAttrsTypeMarkItemMarker(false)
var markItemMarkerAttrTypesRecurse = objectAttrsTypeMarkItemMarker(true)

type markItemMarkerData struct {
	Level              types.String `tfsdk:"level"`
	MarkItemMarkerType types.String `tfsdk:"mark_item_marker_type"`
	Parameters         types.Object `tfsdk:"parameters"`
}

var markItemMarker_parametersAttrTypes = objectAttrsTypeMarkItemMarker_parameters(false)
var markItemMarker_parametersAttrTypesRecurse = objectAttrsTypeMarkItemMarker_parameters(true)

type markItemMarker_parametersData struct {
}

var markItemMarkersAttrTypes = objectAttrsTypeMarkItemMarkers(false)
var markItemMarkersAttrTypesRecurse = objectAttrsTypeMarkItemMarkers(true)

type markItemMarkersData struct {
	Markers types.List `tfsdk:"markers"`
}

var notificationCertificateExpiredNotificationAttrTypes = objectAttrsTypeNotificationCertificateExpiredNotification(false)
var notificationCertificateExpiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationCertificateExpiredNotification(true)

type notificationCertificateExpiredNotificationData struct {
	Certificate types.Object `tfsdk:"certificate"`
	Directory   types.Object `tfsdk:"directory"`
	Expiration  types.String `tfsdk:"expiration"`
	LdapClient  types.Object `tfsdk:"ldap_client"`
	System      types.Object `tfsdk:"system"`
	Usage       types.String `tfsdk:"usage"`
	WebhookUUID types.String `tfsdk:"webhook_uuid"`
}

var notificationGroupAuditRequiredNotificationAttrTypes = objectAttrsTypeNotificationGroupAuditRequiredNotification(false)
var notificationGroupAuditRequiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationGroupAuditRequiredNotification(true)

type notificationGroupAuditRequiredNotificationData struct {
	DueDate                                        types.String `tfsdk:"due_date"`
	Group                                          types.Object `tfsdk:"group"`
	NotificationGroupAuditRequiredNotificationType types.String `tfsdk:"notification_group_audit_required_notification_type"`
}

var notificationGroupEditRequiredNotificationAttrTypes = objectAttrsTypeNotificationGroupEditRequiredNotification(false)
var notificationGroupEditRequiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationGroupEditRequiredNotification(true)

type notificationGroupEditRequiredNotificationData struct {
	Group      types.Object `tfsdk:"group"`
	Parameters types.Object `tfsdk:"parameters"`
	Reason     types.String `tfsdk:"reason"`
}

var notificationGroupEditRequiredNotification_parametersAttrTypes = objectAttrsTypeNotificationGroupEditRequiredNotification_parameters(false)
var notificationGroupEditRequiredNotification_parametersAttrTypesRecurse = objectAttrsTypeNotificationGroupEditRequiredNotification_parameters(true)

type notificationGroupEditRequiredNotification_parametersData struct {
}

var notificationInvalidSignaturesDetectedNotificationAttrTypes = objectAttrsTypeNotificationInvalidSignaturesDetectedNotification(false)
var notificationInvalidSignaturesDetectedNotificationAttrTypesRecurse = objectAttrsTypeNotificationInvalidSignaturesDetectedNotification(true)

type notificationInvalidSignaturesDetectedNotificationData struct {
}

var notificationLicenseStatusNotificationAttrTypes = objectAttrsTypeNotificationLicenseStatusNotification(false)
var notificationLicenseStatusNotificationAttrTypesRecurse = objectAttrsTypeNotificationLicenseStatusNotification(true)

type notificationLicenseStatusNotificationData struct {
	ActiveAccounts  types.Int64  `tfsdk:"active_accounts"`
	LicenseInfoUUID types.String `tfsdk:"license_info_uuid"`
}

var notificationModificationRequestNotificationAttrTypes = objectAttrsTypeNotificationModificationRequestNotification(false)
var notificationModificationRequestNotificationAttrTypesRecurse = objectAttrsTypeNotificationModificationRequestNotification(true)

type notificationModificationRequestNotificationData struct {
	Admins  types.List   `tfsdk:"admins"`
	Groups  types.List   `tfsdk:"groups"`
	Request types.Object `tfsdk:"request"`
}

var notificationNotificationAttrTypes = objectAttrsTypeNotificationNotification(false)
var notificationNotificationAttrTypesRecurse = objectAttrsTypeNotificationNotification(true)

type notificationNotificationData struct {
}

var notificationNotificationsAttrTypes = objectAttrsTypeNotificationNotifications(false)
var notificationNotificationsAttrTypesRecurse = objectAttrsTypeNotificationNotifications(true)

type notificationNotificationsData struct {
	Items types.List `tfsdk:"items"`
}

var notificationOldApiVersionUsageNotificationAttrTypes = objectAttrsTypeNotificationOldApiVersionUsageNotification(false)
var notificationOldApiVersionUsageNotificationAttrTypesRecurse = objectAttrsTypeNotificationOldApiVersionUsageNotification(true)

type notificationOldApiVersionUsageNotificationData struct {
	ApiVersion types.Int64  `tfsdk:"api_version"`
	Client     types.Object `tfsdk:"client"`
}

var notificationProvisionConfigRequiredNotificationAttrTypes = objectAttrsTypeNotificationProvisionConfigRequiredNotification(false)
var notificationProvisionConfigRequiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationProvisionConfigRequiredNotification(true)

type notificationProvisionConfigRequiredNotificationData struct {
	Systems types.List `tfsdk:"systems"`
}

var notificationRotatingPasswordRequiredNotificationAttrTypes = objectAttrsTypeNotificationRotatingPasswordRequiredNotification(false)
var notificationRotatingPasswordRequiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationRotatingPasswordRequiredNotification(true)

type notificationRotatingPasswordRequiredNotificationData struct {
	Groups types.List `tfsdk:"groups"`
}

var notificationUpdateAvailableNotificationAttrTypes = objectAttrsTypeNotificationUpdateAvailableNotification(false)
var notificationUpdateAvailableNotificationAttrTypesRecurse = objectAttrsTypeNotificationUpdateAvailableNotification(true)

type notificationUpdateAvailableNotificationData struct {
	ReleasedAt types.String `tfsdk:"released_at"`
}

var notificationVaultRecordExpiredNotificationAttrTypes = objectAttrsTypeNotificationVaultRecordExpiredNotification(false)
var notificationVaultRecordExpiredNotificationAttrTypesRecurse = objectAttrsTypeNotificationVaultRecordExpiredNotification(true)

type notificationVaultRecordExpiredNotificationData struct {
	Record types.Object `tfsdk:"record"`
}

var organizationAccountOrganizationalUnitAttrTypes = objectAttrsTypeOrganizationAccountOrganizationalUnit(false)
var organizationAccountOrganizationalUnitAttrTypesRecurse = objectAttrsTypeOrganizationAccountOrganizationalUnit(true)

type organizationAccountOrganizationalUnitData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Name              types.String `tfsdk:"name"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
}

var organizationAccountOrganizationalUnitLinkableWrapperAttrTypes = objectAttrsTypeOrganizationAccountOrganizationalUnitLinkableWrapper(false)
var organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRecurse = objectAttrsTypeOrganizationAccountOrganizationalUnitLinkableWrapper(true)

type organizationAccountOrganizationalUnitLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var organizationAccountOrganizationalUnit_additionalObjectsAttrTypes = objectAttrsTypeOrganizationAccountOrganizationalUnit_additionalObjects(false)
var organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRecurse = objectAttrsTypeOrganizationAccountOrganizationalUnit_additionalObjects(true)

type organizationAccountOrganizationalUnit_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationOrganizationalUnitAttrTypes = objectAttrsTypeOrganizationOrganizationalUnit(false)
var organizationOrganizationalUnitAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnit(true)

type organizationOrganizationalUnitData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Name              types.String `tfsdk:"name"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Depth             types.Int64  `tfsdk:"depth"`
	Description       types.String `tfsdk:"description"`
	OwnerUUID         types.String `tfsdk:"owner_uuid"`
	ParentUUID        types.String `tfsdk:"parent_uuid"`
}

var organizationOrganizationalUnitAccountAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitAccount(false)
var organizationOrganizationalUnitAccountAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitAccount(true)

type organizationOrganizationalUnitAccountData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	DisplayName       types.String `tfsdk:"display_name"`
	LastActive        types.String `tfsdk:"last_active"`
	Username          types.String `tfsdk:"username"`
	UUID              types.String `tfsdk:"uuid"`
	Validity          types.String `tfsdk:"validity"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	DirectoryUUID     types.String `tfsdk:"directory_uuid"`
}

var organizationOrganizationalUnitAccountLinkableWrapperAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitAccountLinkableWrapper(false)
var organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitAccountLinkableWrapper(true)

type organizationOrganizationalUnitAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitAccount_additionalObjectsAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitAccount_additionalObjects(false)
var organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitAccount_additionalObjects(true)

type organizationOrganizationalUnitAccount_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var organizationOrganizationalUnitLinkableWrapperAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitLinkableWrapper(false)
var organizationOrganizationalUnitLinkableWrapperAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitLinkableWrapper(true)

type organizationOrganizationalUnitLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnitPrimerAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitPrimer(false)
var organizationOrganizationalUnitPrimerAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitPrimer(true)

type organizationOrganizationalUnitPrimerData struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Name        types.String `tfsdk:"name"`
	UUID        types.String `tfsdk:"uuid"`
}

var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypes = objectAttrsTypeOrganizationOrganizationalUnitPrimerLinkableWrapper(false)
var organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnitPrimerLinkableWrapper(true)

type organizationOrganizationalUnitPrimerLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var organizationOrganizationalUnit_additionalObjectsAttrTypes = objectAttrsTypeOrganizationOrganizationalUnit_additionalObjects(false)
var organizationOrganizationalUnit_additionalObjectsAttrTypesRecurse = objectAttrsTypeOrganizationOrganizationalUnit_additionalObjects(true)

type organizationOrganizationalUnit_additionalObjectsData struct {
	Audit            types.Object `tfsdk:"audit"`
	CreateAsParentOf types.Object `tfsdk:"create_as_parent_of"`
}

var provisioningAbstractProvisionedLDAPAttrTypes = objectAttrsTypeProvisioningAbstractProvisionedLDAP(false)
var provisioningAbstractProvisionedLDAPAttrTypesRecurse = objectAttrsTypeProvisioningAbstractProvisionedLDAP(true)

type provisioningAbstractProvisionedLDAPData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
}

var provisioningAbstractProvisionedLDAP_attributesAttrTypes = objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(false)
var provisioningAbstractProvisionedLDAP_attributesAttrTypesRecurse = objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(true)

type provisioningAbstractProvisionedLDAP_attributesData struct {
}

var provisioningAccountProvisioningStatusAttrTypes = objectAttrsTypeProvisioningAccountProvisioningStatus(false)
var provisioningAccountProvisioningStatusAttrTypesRecurse = objectAttrsTypeProvisioningAccountProvisioningStatus(true)

type provisioningAccountProvisioningStatusData struct {
	Description types.String `tfsdk:"description"`
	Result      types.String `tfsdk:"result"`
	System      types.Object `tfsdk:"system"`
}

var provisioningAccountProvisioningStatusReportAttrTypes = objectAttrsTypeProvisioningAccountProvisioningStatusReport(false)
var provisioningAccountProvisioningStatusReportAttrTypesRecurse = objectAttrsTypeProvisioningAccountProvisioningStatusReport(true)

type provisioningAccountProvisioningStatusReportData struct {
	Status types.List `tfsdk:"status"`
}

var provisioningCircuitBreakerStatisticsAttrTypes = objectAttrsTypeProvisioningCircuitBreakerStatistics(false)
var provisioningCircuitBreakerStatisticsAttrTypesRecurse = objectAttrsTypeProvisioningCircuitBreakerStatistics(true)

type provisioningCircuitBreakerStatisticsData struct {
	NumberOfFailedCalls       types.Int64  `tfsdk:"number_of_failed_calls"`
	NumberOfNotPermittedCalls types.Int64  `tfsdk:"number_of_not_permitted_calls"`
	NumberOfSuccessfulCalls   types.Int64  `tfsdk:"number_of_successful_calls"`
	State                     types.String `tfsdk:"state"`
}

var provisioningGroupOnSystemAttrTypes = objectAttrsTypeProvisioningGroupOnSystem(false)
var provisioningGroupOnSystemAttrTypesRecurse = objectAttrsTypeProvisioningGroupOnSystem(true)

type provisioningGroupOnSystemData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
	OwnerUUID                           types.String `tfsdk:"owner_uuid"`
	SystemUUID                          types.String `tfsdk:"system_uuid"`
}

var provisioningGroupOnSystemLinkableWrapperAttrTypes = objectAttrsTypeProvisioningGroupOnSystemLinkableWrapper(false)
var provisioningGroupOnSystemLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningGroupOnSystemLinkableWrapper(true)

type provisioningGroupOnSystemLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningGroupOnSystemPrimerAttrTypes = objectAttrsTypeProvisioningGroupOnSystemPrimer(false)
var provisioningGroupOnSystemPrimerAttrTypesRecurse = objectAttrsTypeProvisioningGroupOnSystemPrimer(true)

type provisioningGroupOnSystemPrimerData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
}

var provisioningGroupOnSystemTypesAttrTypes = objectAttrsTypeProvisioningGroupOnSystemTypes(false)
var provisioningGroupOnSystemTypesAttrTypesRecurse = objectAttrsTypeProvisioningGroupOnSystemTypes(true)

type provisioningGroupOnSystemTypesData struct {
	Types types.List `tfsdk:"types"`
}

var provisioningGroupOnSystem_additionalObjectsAttrTypes = objectAttrsTypeProvisioningGroupOnSystem_additionalObjects(false)
var provisioningGroupOnSystem_additionalObjectsAttrTypesRecurse = objectAttrsTypeProvisioningGroupOnSystem_additionalObjects(true)

type provisioningGroupOnSystem_additionalObjectsData struct {
	Audit           types.Object `tfsdk:"audit"`
	Provgroups      types.Object `tfsdk:"provgroups"`
	ServiceAccounts types.Object `tfsdk:"service_accounts"`
}

var provisioningGroupProvisioningStatusAttrTypes = objectAttrsTypeProvisioningGroupProvisioningStatus(false)
var provisioningGroupProvisioningStatusAttrTypesRecurse = objectAttrsTypeProvisioningGroupProvisioningStatus(true)

type provisioningGroupProvisioningStatusData struct {
	Folder                        types.Object `tfsdk:"folder"`
	Group                         types.Object `tfsdk:"group"`
	ProvisioningDuration          types.Object `tfsdk:"provisioning_duration"`
	ProvisioningEndTime           types.String `tfsdk:"provisioning_end_time"`
	ProvisioningPermissionEndTime types.String `tfsdk:"provisioning_permission_end_time"`
	StatusReport                  types.Object `tfsdk:"status_report"`
	VisibleOnDashboard            types.Bool   `tfsdk:"visible_on_dashboard"`
}

var provisioningGroupProvisioningStatus_provisioningDurationAttrTypes = objectAttrsTypeProvisioningGroupProvisioningStatus_provisioningDuration(false)
var provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRecurse = objectAttrsTypeProvisioningGroupProvisioningStatus_provisioningDuration(true)

type provisioningGroupProvisioningStatus_provisioningDurationData struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var provisioningOwnedGroupOnSystemsWrapperAttrTypes = objectAttrsTypeProvisioningOwnedGroupOnSystemsWrapper(false)
var provisioningOwnedGroupOnSystemsWrapperAttrTypesRecurse = objectAttrsTypeProvisioningOwnedGroupOnSystemsWrapper(true)

type provisioningOwnedGroupOnSystemsWrapperData struct {
	Items         types.List  `tfsdk:"items"`
	UnlinkedCount types.Int64 `tfsdk:"unlinked_count"`
}

var provisioningProvisionNumberSequenceAttrTypes = objectAttrsTypeProvisioningProvisionNumberSequence(false)
var provisioningProvisionNumberSequenceAttrTypesRecurse = objectAttrsTypeProvisioningProvisionNumberSequence(true)

type provisioningProvisionNumberSequenceData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AccountCount      types.Int64  `tfsdk:"account_count"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Name              types.String `tfsdk:"name"`
	NextUID           types.Int64  `tfsdk:"next_u_i_d"`
}

var provisioningProvisionNumberSequenceLinkableWrapperAttrTypes = objectAttrsTypeProvisioningProvisionNumberSequenceLinkableWrapper(false)
var provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningProvisionNumberSequenceLinkableWrapper(true)

type provisioningProvisionNumberSequenceLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionNumberSequence_additionalObjectsAttrTypes = objectAttrsTypeProvisioningProvisionNumberSequence_additionalObjects(false)
var provisioningProvisionNumberSequence_additionalObjectsAttrTypesRecurse = objectAttrsTypeProvisioningProvisionNumberSequence_additionalObjects(true)

type provisioningProvisionNumberSequence_additionalObjectsData struct {
	Audit   types.Object `tfsdk:"audit"`
	Systems types.Object `tfsdk:"systems"`
}

var provisioningProvisionedADAttrTypes = objectAttrsTypeProvisioningProvisionedAD(false)
var provisioningProvisionedADAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAD(true)

type provisioningProvisionedADData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	SamAccountNameScheme                    types.String `tfsdk:"sam_account_name_scheme"`
}

var provisioningProvisionedAccountAttrTypes = objectAttrsTypeProvisioningProvisionedAccount(false)
var provisioningProvisionedAccountAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAccount(true)

type provisioningProvisionedAccountData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	DisplayName       types.String `tfsdk:"display_name"`
	LastActive        types.String `tfsdk:"last_active"`
	Username          types.String `tfsdk:"username"`
	UUID              types.String `tfsdk:"uuid"`
	Validity          types.String `tfsdk:"validity"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Uid               types.Int64  `tfsdk:"uid"`
}

var provisioningProvisionedAccountLinkableWrapperAttrTypes = objectAttrsTypeProvisioningProvisionedAccountLinkableWrapper(false)
var provisioningProvisionedAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAccountLinkableWrapper(true)

type provisioningProvisionedAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedAccount_additionalObjectsAttrTypes = objectAttrsTypeProvisioningProvisionedAccount_additionalObjects(false)
var provisioningProvisionedAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAccount_additionalObjects(true)

type provisioningProvisionedAccount_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedAzureOIDCDirectoryAttrTypes = objectAttrsTypeProvisioningProvisionedAzureOIDCDirectory(false)
var provisioningProvisionedAzureOIDCDirectoryAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAzureOIDCDirectory(true)

type provisioningProvisionedAzureOIDCDirectoryData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypes = objectAttrsTypeProvisioningProvisionedAzureSyncLDAPDirectory(false)
var provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAzureSyncLDAPDirectory(true)

type provisioningProvisionedAzureSyncLDAPDirectoryData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedAzureTenantAttrTypes = objectAttrsTypeProvisioningProvisionedAzureTenant(false)
var provisioningProvisionedAzureTenantAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedAzureTenant(true)

type provisioningProvisionedAzureTenantData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	ClientID                                types.String `tfsdk:"client_id"`
	ClientSecret                            types.String `tfsdk:"client_secret"`
	IDpDomain                               types.String `tfsdk:"idp_domain"`
	Tenant                                  types.String `tfsdk:"tenant"`
}

var provisioningProvisionedInternalLDAPAttrTypes = objectAttrsTypeProvisioningProvisionedInternalLDAP(false)
var provisioningProvisionedInternalLDAPAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedInternalLDAP(true)

type provisioningProvisionedInternalLDAPData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Client                                  types.Object `tfsdk:"client"`
}

var provisioningProvisionedLDAPAttrTypes = objectAttrsTypeProvisioningProvisionedLDAP(false)
var provisioningProvisionedLDAPAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedLDAP(true)

type provisioningProvisionedLDAPData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	Attributes                              types.Object `tfsdk:"attributes"`
	BaseDN                                  types.String `tfsdk:"base_d_n"`
	BindDN                                  types.String `tfsdk:"bind_d_n"`
	BindPassword                            types.String `tfsdk:"bind_password"`
	ClientCertificateUUID                   types.String `tfsdk:"client_certificate_uuid"`
	FailoverHost                            types.String `tfsdk:"failover_host"`
	FailoverTrustedCertificateUUID          types.String `tfsdk:"failover_trusted_certificate_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
	Host                                    types.String `tfsdk:"host"`
	ObjectClasses                           types.String `tfsdk:"object_classes"`
	Port                                    types.Int64  `tfsdk:"port"`
	ServiceAccountDN                        types.String `tfsdk:"service_account_d_n"`
	SshPublicKeySupported                   types.Bool   `tfsdk:"ssh_public_key_supported"`
	TLS                                     types.String `tfsdk:"tls"`
	TrustedCertificateUUID                  types.String `tfsdk:"trusted_certificate_uuid"`
	UserDN                                  types.String `tfsdk:"user_d_n"`
	Gid                                     types.Int64  `tfsdk:"gid"`
	HashingScheme                           types.String `tfsdk:"hashing_scheme"`
	Numbering                               types.Object `tfsdk:"numbering"`
}

var provisioningProvisionedLDAPDirectoryAttrTypes = objectAttrsTypeProvisioningProvisionedLDAPDirectory(false)
var provisioningProvisionedLDAPDirectoryAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedLDAPDirectory(true)

type provisioningProvisionedLDAPDirectoryData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
	DirectoryUUID                           types.String `tfsdk:"directory_uuid"`
	GroupDN                                 types.String `tfsdk:"group_d_n"`
}

var provisioningProvisionedSystemAttrTypes = objectAttrsTypeProvisioningProvisionedSystem(false)
var provisioningProvisionedSystemAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystem(true)

type provisioningProvisionedSystemData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
	AccountCount                            types.Int64  `tfsdk:"account_count"`
	AdditionalObjects                       types.Object `tfsdk:"additional_objects"`
	ContentAdministratorUUID                types.String `tfsdk:"content_administrator_uuid"`
	ExternalUUID                            types.String `tfsdk:"external_uuid"`
	OrganizationalUnitUUID                  types.String `tfsdk:"organizational_unit_uuid"`
	OwnerUUID                               types.String `tfsdk:"owner_uuid"`
	SelfServiceExistingGroups               types.Bool   `tfsdk:"self_service_existing_groups"`
	SelfServiceNewGroups                    types.Bool   `tfsdk:"self_service_new_groups"`
	SelfServiceServiceAccounts              types.Bool   `tfsdk:"self_service_service_accounts"`
	ShouldDestroyUnknownAccounts            types.Bool   `tfsdk:"should_destroy_unknown_accounts"`
	TechnicalAdministratorUUID              types.String `tfsdk:"technical_administrator_uuid"`
	UsernamePrefix                          types.String `tfsdk:"username_prefix"`
}

var provisioningProvisionedSystemLinkableWrapperAttrTypes = objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(false)
var provisioningProvisionedSystemLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(true)

type provisioningProvisionedSystemLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemPrimerAttrTypes = objectAttrsTypeProvisioningProvisionedSystemPrimer(false)
var provisioningProvisionedSystemPrimerAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemPrimer(true)

type provisioningProvisionedSystemPrimerData struct {
	Links                                   types.List   `tfsdk:"links"`
	Permissions                             types.List   `tfsdk:"permissions"`
	Active                                  types.Bool   `tfsdk:"active"`
	Name                                    types.String `tfsdk:"name"`
	ProvisioningProvisionedSystemPrimerType types.String `tfsdk:"provisioning_provisioned_system_primer_type"`
	UUID                                    types.String `tfsdk:"uuid"`
}

var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypes = objectAttrsTypeProvisioningProvisionedSystemPrimerLinkableWrapper(false)
var provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemPrimerLinkableWrapper(true)

type provisioningProvisionedSystemPrimerLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemSyncLogAttrTypes = objectAttrsTypeProvisioningProvisionedSystemSyncLog(false)
var provisioningProvisionedSystemSyncLogAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemSyncLog(true)

type provisioningProvisionedSystemSyncLogData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	CreatedAt         types.String `tfsdk:"created_at"`
	Errors            types.Int64  `tfsdk:"errors"`
	Log               types.String `tfsdk:"log"`
	Modifications     types.Int64  `tfsdk:"modifications"`
}

var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypes = objectAttrsTypeProvisioningProvisionedSystemSyncLogLinkableWrapper(false)
var provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemSyncLogLinkableWrapper(true)

type provisioningProvisionedSystemSyncLogLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypes = objectAttrsTypeProvisioningProvisionedSystemSyncLog_additionalObjects(false)
var provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystemSyncLog_additionalObjects(true)

type provisioningProvisionedSystemSyncLog_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var provisioningProvisionedSystem_additionalObjectsAttrTypes = objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)
var provisioningProvisionedSystem_additionalObjectsAttrTypesRecurse = objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(true)

type provisioningProvisionedSystem_additionalObjectsData struct {
	Account               types.Object `tfsdk:"account"`
	Audit                 types.Object `tfsdk:"audit"`
	IssuedPermissions     types.Object `tfsdk:"issued_permissions"`
	LoginName             types.String `tfsdk:"login_name"`
	ManagementPermissions types.Object `tfsdk:"management_permissions"`
	Markers               types.Object `tfsdk:"markers"`
	Statistics            types.Object `tfsdk:"statistics"`
	SupportedGroupTypes   types.Object `tfsdk:"supported_group_types"`
}

var provisioningProvisioningManagementPermissionsAttrTypes = objectAttrsTypeProvisioningProvisioningManagementPermissions(false)
var provisioningProvisioningManagementPermissionsAttrTypesRecurse = objectAttrsTypeProvisioningProvisioningManagementPermissions(true)

type provisioningProvisioningManagementPermissionsData struct {
	CreateNewGroupsAllowed       types.Bool `tfsdk:"create_new_groups_allowed"`
	CreateServiceAccountsAllowed types.Bool `tfsdk:"create_service_accounts_allowed"`
	ReuseExistingGroupsAllowed   types.Bool `tfsdk:"reuse_existing_groups_allowed"`
}

var provisioningProvisioningStatusAttrTypes = objectAttrsTypeProvisioningProvisioningStatus(false)
var provisioningProvisioningStatusAttrTypesRecurse = objectAttrsTypeProvisioningProvisioningStatus(true)

type provisioningProvisioningStatusData struct {
	Groups              types.List `tfsdk:"groups"`
	IgnoreErrors        types.Bool `tfsdk:"ignore_errors"`
	RestrictedByLicense types.Bool `tfsdk:"restricted_by_license"`
}

var provisioningTokenPasswordAttrTypes = objectAttrsTypeProvisioningTokenPassword(false)
var provisioningTokenPasswordAttrTypesRecurse = objectAttrsTypeProvisioningTokenPassword(true)

type provisioningTokenPasswordData struct {
	Password types.String `tfsdk:"password"`
}

var requestAbstractApplicationModificationRequestAttrTypes = objectAttrsTypeRequestAbstractApplicationModificationRequest(false)
var requestAbstractApplicationModificationRequestAttrTypesRecurse = objectAttrsTypeRequestAbstractApplicationModificationRequest(true)

type requestAbstractApplicationModificationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestAbstractOrganizationalUnitModificationRequestAttrTypes = objectAttrsTypeRequestAbstractOrganizationalUnitModificationRequest(false)
var requestAbstractOrganizationalUnitModificationRequestAttrTypesRecurse = objectAttrsTypeRequestAbstractOrganizationalUnitModificationRequest(true)

type requestAbstractOrganizationalUnitModificationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
}

var requestAbstractProvisionedSystemModificationRequestAttrTypes = objectAttrsTypeRequestAbstractProvisionedSystemModificationRequest(false)
var requestAbstractProvisionedSystemModificationRequestAttrTypesRecurse = objectAttrsTypeRequestAbstractProvisionedSystemModificationRequest(true)

type requestAbstractProvisionedSystemModificationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestAcceptGrantAccessRequestParametersAttrTypes = objectAttrsTypeRequestAcceptGrantAccessRequestParameters(false)
var requestAcceptGrantAccessRequestParametersAttrTypesRecurse = objectAttrsTypeRequestAcceptGrantAccessRequestParameters(true)

type requestAcceptGrantAccessRequestParametersData struct {
	AccessDuration types.Object `tfsdk:"access_duration"`
}

var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypes = objectAttrsTypeRequestAcceptGrantAccessRequestParameters_accessDuration(false)
var requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRecurse = objectAttrsTypeRequestAcceptGrantAccessRequestParameters_accessDuration(true)

type requestAcceptGrantAccessRequestParameters_accessDurationData struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var requestAcceptJoinGroupRequestParametersAttrTypes = objectAttrsTypeRequestAcceptJoinGroupRequestParameters(false)
var requestAcceptJoinGroupRequestParametersAttrTypesRecurse = objectAttrsTypeRequestAcceptJoinGroupRequestParameters(true)

type requestAcceptJoinGroupRequestParametersData struct {
	EndDate     types.String `tfsdk:"end_date"`
	MakeManager types.Bool   `tfsdk:"make_manager"`
}

var requestAcceptModificationRequestParametersAttrTypes = objectAttrsTypeRequestAcceptModificationRequestParameters(false)
var requestAcceptModificationRequestParametersAttrTypesRecurse = objectAttrsTypeRequestAcceptModificationRequestParameters(true)

type requestAcceptModificationRequestParametersData struct {
}

var requestAddGroupAdminRequestAttrTypes = objectAttrsTypeRequestAddGroupAdminRequest(false)
var requestAddGroupAdminRequestAttrTypesRecurse = objectAttrsTypeRequestAddGroupAdminRequest(true)

type requestAddGroupAdminRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	NewAdminUUID                   types.String `tfsdk:"new_admin_uuid"`
	PrivateKey                     types.String `tfsdk:"private_key"`
}

var requestCreateGroupOnSystemRequestAttrTypes = objectAttrsTypeRequestCreateGroupOnSystemRequest(false)
var requestCreateGroupOnSystemRequestAttrTypesRecurse = objectAttrsTypeRequestCreateGroupOnSystemRequest(true)

type requestCreateGroupOnSystemRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystemType              types.String `tfsdk:"group_on_system_type"`
	NameInSystem                   types.String `tfsdk:"name_in_system"`
}

var requestCreateGroupRequestAttrTypes = objectAttrsTypeRequestCreateGroupRequest(false)
var requestCreateGroupRequestAttrTypesRecurse = objectAttrsTypeRequestCreateGroupRequest(true)

type requestCreateGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestCreateServiceAccountRequestAttrTypes = objectAttrsTypeRequestCreateServiceAccountRequest(false)
var requestCreateServiceAccountRequestAttrTypesRecurse = objectAttrsTypeRequestCreateServiceAccountRequest(true)

type requestCreateServiceAccountRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	Username                       types.String `tfsdk:"username"`
}

var requestDisable2FARequestAttrTypes = objectAttrsTypeRequestDisable2FARequest(false)
var requestDisable2FARequestAttrTypesRecurse = objectAttrsTypeRequestDisable2FARequest(true)

type requestDisable2FARequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	Subject                        types.String `tfsdk:"subject"`
}

var requestEnableTechnicalAdministrationRequestAttrTypes = objectAttrsTypeRequestEnableTechnicalAdministrationRequest(false)
var requestEnableTechnicalAdministrationRequestAttrTypesRecurse = objectAttrsTypeRequestEnableTechnicalAdministrationRequest(true)

type requestEnableTechnicalAdministrationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestExtendAccessRequestAttrTypes = objectAttrsTypeRequestExtendAccessRequest(false)
var requestExtendAccessRequestAttrTypesRecurse = objectAttrsTypeRequestExtendAccessRequest(true)

type requestExtendAccessRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ExtendUntil                    types.String `tfsdk:"extend_until"`
}

var requestGrantAccessRequestAttrTypes = objectAttrsTypeRequestGrantAccessRequest(false)
var requestGrantAccessRequestAttrTypesRecurse = objectAttrsTypeRequestGrantAccessRequest(true)

type requestGrantAccessRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestGrantApplicationRequestAttrTypes = objectAttrsTypeRequestGrantApplicationRequest(false)
var requestGrantApplicationRequestAttrTypesRecurse = objectAttrsTypeRequestGrantApplicationRequest(true)

type requestGrantApplicationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestGrantClientPermissionRequestAttrTypes = objectAttrsTypeRequestGrantClientPermissionRequest(false)
var requestGrantClientPermissionRequestAttrTypesRecurse = objectAttrsTypeRequestGrantClientPermissionRequest(true)

type requestGrantClientPermissionRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
	PermissionType                 types.String `tfsdk:"permission_type"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestGrantGroupOnSystemRequestAttrTypes = objectAttrsTypeRequestGrantGroupOnSystemRequest(false)
var requestGrantGroupOnSystemRequestAttrTypesRecurse = objectAttrsTypeRequestGrantGroupOnSystemRequest(true)

type requestGrantGroupOnSystemRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantGroupOnSystemRequestRequestAttrTypes = objectAttrsTypeRequestGrantGroupOnSystemRequestRequest(false)
var requestGrantGroupOnSystemRequestRequestAttrTypesRecurse = objectAttrsTypeRequestGrantGroupOnSystemRequestRequest(true)

type requestGrantGroupOnSystemRequestRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ActivationRequired             types.Bool   `tfsdk:"activation_required"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestGrantServiceAccountGroupRequestAttrTypes = objectAttrsTypeRequestGrantServiceAccountGroupRequest(false)
var requestGrantServiceAccountGroupRequestAttrTypesRecurse = objectAttrsTypeRequestGrantServiceAccountGroupRequest(true)

type requestGrantServiceAccountGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
	ServiceAccountUUID             types.String `tfsdk:"service_account_uuid"`
}

var requestJoinGroupRequestAttrTypes = objectAttrsTypeRequestJoinGroupRequest(false)
var requestJoinGroupRequestAttrTypesRecurse = objectAttrsTypeRequestJoinGroupRequest(true)

type requestJoinGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestJoinVaultRequestAttrTypes = objectAttrsTypeRequestJoinVaultRequest(false)
var requestJoinVaultRequestAttrTypesRecurse = objectAttrsTypeRequestJoinVaultRequest(true)

type requestJoinVaultRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestModificationRequestAttrTypes = objectAttrsTypeRequestModificationRequest(false)
var requestModificationRequestAttrTypesRecurse = objectAttrsTypeRequestModificationRequest(true)

type requestModificationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestModificationRequestLinkableWrapperAttrTypes = objectAttrsTypeRequestModificationRequestLinkableWrapper(false)
var requestModificationRequestLinkableWrapperAttrTypesRecurse = objectAttrsTypeRequestModificationRequestLinkableWrapper(true)

type requestModificationRequestLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var requestModificationRequest_additionalObjectsAttrTypes = objectAttrsTypeRequestModificationRequest_additionalObjects(false)
var requestModificationRequest_additionalObjectsAttrTypesRecurse = objectAttrsTypeRequestModificationRequest_additionalObjects(true)

type requestModificationRequest_additionalObjectsData struct {
	AcceptParams types.Object `tfsdk:"accept_params"`
	Audit        types.Object `tfsdk:"audit"`
	ResetStatus  types.Object `tfsdk:"reset_status"`
}

var requestPasswordResetRequestAttrTypes = objectAttrsTypeRequestPasswordResetRequest(false)
var requestPasswordResetRequestAttrTypesRecurse = objectAttrsTypeRequestPasswordResetRequest(true)

type requestPasswordResetRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	NewVaultAndDirectoryPassword   types.String `tfsdk:"new_vault_and_directory_password"`
	NewVaultPassword               types.String `tfsdk:"new_vault_password"`
	UnsyncedPassword               types.Bool   `tfsdk:"unsynced_password"`
}

var requestPasswordResetRequestStatusAttrTypes = objectAttrsTypeRequestPasswordResetRequestStatus(false)
var requestPasswordResetRequestStatusAttrTypesRecurse = objectAttrsTypeRequestPasswordResetRequestStatus(true)

type requestPasswordResetRequestStatusData struct {
	CooldownEnd  types.String `tfsdk:"cooldown_end"`
	Managers     types.List   `tfsdk:"managers"`
	NrAccepted   types.Int64  `tfsdk:"nr_accepted"`
	ResetViaMail types.String `tfsdk:"reset_via_mail"`
}

var requestRemoveGroupRequestAttrTypes = objectAttrsTypeRequestRemoveGroupRequest(false)
var requestRemoveGroupRequestAttrTypesRecurse = objectAttrsTypeRequestRemoveGroupRequest(true)

type requestRemoveGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupName                      types.String `tfsdk:"group_name"`
}

var requestRemoveOrganizationalUnitRequestAttrTypes = objectAttrsTypeRequestRemoveOrganizationalUnitRequest(false)
var requestRemoveOrganizationalUnitRequestAttrTypesRecurse = objectAttrsTypeRequestRemoveOrganizationalUnitRequest(true)

type requestRemoveOrganizationalUnitRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
	OrganizationalUnitName         types.String `tfsdk:"organizational_unit_name"`
}

var requestRemoveProvisionedSystemRequestAttrTypes = objectAttrsTypeRequestRemoveProvisionedSystemRequest(false)
var requestRemoveProvisionedSystemRequestAttrTypesRecurse = objectAttrsTypeRequestRemoveProvisionedSystemRequest(true)

type requestRemoveProvisionedSystemRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
	SystemName                     types.String `tfsdk:"system_name"`
}

var requestReviewAuditRequestAttrTypes = objectAttrsTypeRequestReviewAuditRequest(false)
var requestReviewAuditRequestAttrTypesRecurse = objectAttrsTypeRequestReviewAuditRequest(true)

type requestReviewAuditRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestRevokeAdminRequestAttrTypes = objectAttrsTypeRequestRevokeAdminRequest(false)
var requestRevokeAdminRequestAttrTypesRecurse = objectAttrsTypeRequestRevokeAdminRequest(true)

type requestRevokeAdminRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AdminUUID                      types.String `tfsdk:"admin_uuid"`
}

var requestSetupAuthorizingGroupRequestAttrTypes = objectAttrsTypeRequestSetupAuthorizingGroupRequest(false)
var requestSetupAuthorizingGroupRequestAttrTypesRecurse = objectAttrsTypeRequestSetupAuthorizingGroupRequest(true)

type requestSetupAuthorizingGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AuthorizingGroupType           types.String `tfsdk:"authorizing_group_type"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroupUUID            types.String `tfsdk:"requesting_group_uuid"`
}

var requestSetupNestedGroupRequestAttrTypes = objectAttrsTypeRequestSetupNestedGroupRequest(false)
var requestSetupNestedGroupRequestAttrTypesRecurse = objectAttrsTypeRequestSetupNestedGroupRequest(true)

type requestSetupNestedGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountAction                  types.String `tfsdk:"account_action"`
	Connect                        types.Bool   `tfsdk:"connect"`
	RequestingGroupUUID            types.String `tfsdk:"requesting_group_uuid"`
}

var requestTransferApplicationAdministrationRequestAttrTypes = objectAttrsTypeRequestTransferApplicationAdministrationRequest(false)
var requestTransferApplicationAdministrationRequestAttrTypesRecurse = objectAttrsTypeRequestTransferApplicationAdministrationRequest(true)

type requestTransferApplicationAdministrationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestTransferApplicationOwnershipRequestAttrTypes = objectAttrsTypeRequestTransferApplicationOwnershipRequest(false)
var requestTransferApplicationOwnershipRequestAttrTypesRecurse = objectAttrsTypeRequestTransferApplicationOwnershipRequest(true)

type requestTransferApplicationOwnershipRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ApplicationUUID                types.String `tfsdk:"application_uuid"`
}

var requestTransferAuditorGroupRequestAttrTypes = objectAttrsTypeRequestTransferAuditorGroupRequest(false)
var requestTransferAuditorGroupRequestAttrTypesRecurse = objectAttrsTypeRequestTransferAuditorGroupRequest(true)

type requestTransferAuditorGroupRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
}

var requestTransferGroupOnSystemOwnershipRequestAttrTypes = objectAttrsTypeRequestTransferGroupOnSystemOwnershipRequest(false)
var requestTransferGroupOnSystemOwnershipRequestAttrTypesRecurse = objectAttrsTypeRequestTransferGroupOnSystemOwnershipRequest(true)

type requestTransferGroupOnSystemOwnershipRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	GroupOnSystem                  types.Object `tfsdk:"group_on_system"`
}

var requestTransferOrganizationalUnitOwnershipRequestAttrTypes = objectAttrsTypeRequestTransferOrganizationalUnitOwnershipRequest(false)
var requestTransferOrganizationalUnitOwnershipRequestAttrTypesRecurse = objectAttrsTypeRequestTransferOrganizationalUnitOwnershipRequest(true)

type requestTransferOrganizationalUnitOwnershipRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	OrganizationalUnitUUID         types.String `tfsdk:"organizational_unit_uuid"`
}

var requestTransferProvisionedSystemAdministrationRequestAttrTypes = objectAttrsTypeRequestTransferProvisionedSystemAdministrationRequest(false)
var requestTransferProvisionedSystemAdministrationRequestAttrTypesRecurse = objectAttrsTypeRequestTransferProvisionedSystemAdministrationRequest(true)

type requestTransferProvisionedSystemAdministrationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferProvisionedSystemContentAdministrationRequestAttrTypes = objectAttrsTypeRequestTransferProvisionedSystemContentAdministrationRequest(false)
var requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRecurse = objectAttrsTypeRequestTransferProvisionedSystemContentAdministrationRequest(true)

type requestTransferProvisionedSystemContentAdministrationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferProvisionedSystemOwnershipRequestAttrTypes = objectAttrsTypeRequestTransferProvisionedSystemOwnershipRequest(false)
var requestTransferProvisionedSystemOwnershipRequestAttrTypesRecurse = objectAttrsTypeRequestTransferProvisionedSystemOwnershipRequest(true)

type requestTransferProvisionedSystemOwnershipRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	SystemUUID                     types.String `tfsdk:"system_uuid"`
}

var requestTransferServiceAccountAdministrationRequestAttrTypes = objectAttrsTypeRequestTransferServiceAccountAdministrationRequest(false)
var requestTransferServiceAccountAdministrationRequestAttrTypesRecurse = objectAttrsTypeRequestTransferServiceAccountAdministrationRequest(true)

type requestTransferServiceAccountAdministrationRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	ServiceAccountUUID             types.String `tfsdk:"service_account_uuid"`
}

var requestUpdateGroupMembershipRequestAttrTypes = objectAttrsTypeRequestUpdateGroupMembershipRequest(false)
var requestUpdateGroupMembershipRequestAttrTypesRecurse = objectAttrsTypeRequestUpdateGroupMembershipRequest(true)

type requestUpdateGroupMembershipRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	AccountToUpdateUUID            types.String `tfsdk:"account_to_update_uuid"`
	CurrentEndDate                 types.String `tfsdk:"current_end_date"`
	CurrentRights                  types.String `tfsdk:"current_rights"`
	EndDate                        types.String `tfsdk:"end_date"`
	Rights                         types.String `tfsdk:"rights"`
	UpdateGroupMembershipType      types.String `tfsdk:"update_group_membership_type"`
}

var requestVerifyInternalAccountRequestAttrTypes = objectAttrsTypeRequestVerifyInternalAccountRequest(false)
var requestVerifyInternalAccountRequestAttrTypesRecurse = objectAttrsTypeRequestVerifyInternalAccountRequest(true)

type requestVerifyInternalAccountRequestData struct {
	Links                          types.List   `tfsdk:"links"`
	Permissions                    types.List   `tfsdk:"permissions"`
	AccountUUID                    types.String `tfsdk:"account_uuid"`
	AdditionalObjects              types.Object `tfsdk:"additional_objects"`
	Comment                        types.String `tfsdk:"comment"`
	Feedback                       types.String `tfsdk:"feedback"`
	GroupUUID                      types.String `tfsdk:"group_uuid"`
	MailKey                        types.String `tfsdk:"mail_key"`
	RequestModificationRequestType types.String `tfsdk:"request_modification_request_type"`
	Status                         types.String `tfsdk:"status"`
	InternalAccountName            types.String `tfsdk:"internal_account_name"`
}

var serviceaccountServiceAccountAttrTypes = objectAttrsTypeServiceaccountServiceAccount(false)
var serviceaccountServiceAccountAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccount(true)

type serviceaccountServiceAccountData struct {
	Links                      types.List   `tfsdk:"links"`
	Permissions                types.List   `tfsdk:"permissions"`
	Active                     types.Bool   `tfsdk:"active"`
	Name                       types.String `tfsdk:"name"`
	SystemUUID                 types.String `tfsdk:"system_uuid"`
	Username                   types.String `tfsdk:"username"`
	UUID                       types.String `tfsdk:"uuid"`
	AdditionalObjects          types.Object `tfsdk:"additional_objects"`
	Description                types.String `tfsdk:"description"`
	PasswordUUID               types.String `tfsdk:"password_uuid"`
	PasswordRotation           types.String `tfsdk:"password_rotation"`
	TechnicalAdministratorUUID types.String `tfsdk:"technical_administrator_uuid"`
}

var serviceaccountServiceAccountGroupAttrTypes = objectAttrsTypeServiceaccountServiceAccountGroup(false)
var serviceaccountServiceAccountGroupAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountGroup(true)

type serviceaccountServiceAccountGroupData struct {
	Links                               types.List   `tfsdk:"links"`
	Permissions                         types.List   `tfsdk:"permissions"`
	DisplayName                         types.String `tfsdk:"display_name"`
	NameInSystem                        types.String `tfsdk:"name_in_system"`
	ProvisioningGroupOnSystemPrimerType types.String `tfsdk:"provisioning_group_on_system_primer_type"`
	ShortNameInSystem                   types.String `tfsdk:"short_name_in_system"`
	AdditionalObjects                   types.Object `tfsdk:"additional_objects"`
}

var serviceaccountServiceAccountGroupLinkableWrapperAttrTypes = objectAttrsTypeServiceaccountServiceAccountGroupLinkableWrapper(false)
var serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountGroupLinkableWrapper(true)

type serviceaccountServiceAccountGroupLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountGroup_additionalObjectsAttrTypes = objectAttrsTypeServiceaccountServiceAccountGroup_additionalObjects(false)
var serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountGroup_additionalObjects(true)

type serviceaccountServiceAccountGroup_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var serviceaccountServiceAccountLinkableWrapperAttrTypes = objectAttrsTypeServiceaccountServiceAccountLinkableWrapper(false)
var serviceaccountServiceAccountLinkableWrapperAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountLinkableWrapper(true)

type serviceaccountServiceAccountLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountPrimerAttrTypes = objectAttrsTypeServiceaccountServiceAccountPrimer(false)
var serviceaccountServiceAccountPrimerAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountPrimer(true)

type serviceaccountServiceAccountPrimerData struct {
	Links       types.List   `tfsdk:"links"`
	Permissions types.List   `tfsdk:"permissions"`
	Active      types.Bool   `tfsdk:"active"`
	Name        types.String `tfsdk:"name"`
	SystemUUID  types.String `tfsdk:"system_uuid"`
	Username    types.String `tfsdk:"username"`
	UUID        types.String `tfsdk:"uuid"`
}

var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypes = objectAttrsTypeServiceaccountServiceAccountPrimerLinkableWrapper(false)
var serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountPrimerLinkableWrapper(true)

type serviceaccountServiceAccountPrimerLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var serviceaccountServiceAccountStatusAttrTypes = objectAttrsTypeServiceaccountServiceAccountStatus(false)
var serviceaccountServiceAccountStatusAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountStatus(true)

type serviceaccountServiceAccountStatusData struct {
	AccountEnabled types.Bool `tfsdk:"account_enabled"`
}

var serviceaccountServiceAccount_additionalObjectsAttrTypes = objectAttrsTypeServiceaccountServiceAccount_additionalObjects(false)
var serviceaccountServiceAccount_additionalObjectsAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccount_additionalObjects(true)

type serviceaccountServiceAccount_additionalObjectsData struct {
	Audit  types.Object `tfsdk:"audit"`
	Groups types.Object `tfsdk:"groups"`
	Secret types.Object `tfsdk:"secret"`
}

var serviceaccountServiceAccountsAuditStatsAttrTypes = objectAttrsTypeServiceaccountServiceAccountsAuditStats(false)
var serviceaccountServiceAccountsAuditStatsAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountsAuditStats(true)

type serviceaccountServiceAccountsAuditStatsData struct {
	DisabledCount              types.Int64  `tfsdk:"disabled_count"`
	PasswordSchemeEnabledStats types.Object `tfsdk:"password_scheme_enabled_stats"`
	SystemStats                types.Object `tfsdk:"system_stats"`
}

var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypes = objectAttrsTypeServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(false)
var serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(true)

type serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsData struct {
}

var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypes = objectAttrsTypeServiceaccountServiceAccountsAuditStats_systemStats(false)
var serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRecurse = objectAttrsTypeServiceaccountServiceAccountsAuditStats_systemStats(true)

type serviceaccountServiceAccountsAuditStats_systemStatsData struct {
}

var simpleStringValueAttrTypes = objectAttrsTypeSimpleStringValue(false)
var simpleStringValueAttrTypesRecurse = objectAttrsTypeSimpleStringValue(true)

type simpleStringValueData struct {
	Value types.String `tfsdk:"value"`
}

var simpleVersionInfoAttrTypes = objectAttrsTypeSimpleVersionInfo(false)
var simpleVersionInfoAttrTypesRecurse = objectAttrsTypeSimpleVersionInfo(true)

type simpleVersionInfoData struct {
	ContractVersions types.List   `tfsdk:"contract_versions"`
	KeyHubVersion    types.String `tfsdk:"key_hub_version"`
}

var vaultDeletedVaultHolderAttrTypes = objectAttrsTypeVaultDeletedVaultHolder(false)
var vaultDeletedVaultHolderAttrTypesRecurse = objectAttrsTypeVaultDeletedVaultHolder(true)

type vaultDeletedVaultHolderData struct {
	Links                       types.List   `tfsdk:"links"`
	Permissions                 types.List   `tfsdk:"permissions"`
	AdditionalObjects           types.Object `tfsdk:"additional_objects"`
	Name                        types.String `tfsdk:"name"`
	RecordCount                 types.Int64  `tfsdk:"record_count"`
	VaultDeletedVaultHolderType types.String `tfsdk:"vault_deleted_vault_holder_type"`
}

var vaultDeletedVaultHolderLinkableWrapperAttrTypes = objectAttrsTypeVaultDeletedVaultHolderLinkableWrapper(false)
var vaultDeletedVaultHolderLinkableWrapperAttrTypesRecurse = objectAttrsTypeVaultDeletedVaultHolderLinkableWrapper(true)

type vaultDeletedVaultHolderLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var vaultDeletedVaultHolder_additionalObjectsAttrTypes = objectAttrsTypeVaultDeletedVaultHolder_additionalObjects(false)
var vaultDeletedVaultHolder_additionalObjectsAttrTypesRecurse = objectAttrsTypeVaultDeletedVaultHolder_additionalObjects(true)

type vaultDeletedVaultHolder_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
	Vault types.Object `tfsdk:"vault"`
}

var vaultDeletedVaultRecoveryAttrTypes = objectAttrsTypeVaultDeletedVaultRecovery(false)
var vaultDeletedVaultRecoveryAttrTypesRecurse = objectAttrsTypeVaultDeletedVaultRecovery(true)

type vaultDeletedVaultRecoveryData struct {
	Prefix          types.String `tfsdk:"prefix"`
	PrivateKey      types.String `tfsdk:"private_key"`
	TargetGroupUUID types.String `tfsdk:"target_group_uuid"`
}

var vaultMoveVaultRecordAttrTypes = objectAttrsTypeVaultMoveVaultRecord(false)
var vaultMoveVaultRecordAttrTypesRecurse = objectAttrsTypeVaultMoveVaultRecord(true)

type vaultMoveVaultRecordData struct {
	AccountUUID   types.String `tfsdk:"account_uuid"`
	Action        types.String `tfsdk:"action"`
	GroupUUID     types.String `tfsdk:"group_uuid"`
	ShareDuration types.Object `tfsdk:"share_duration"`
}

var vaultMoveVaultRecord_shareDurationAttrTypes = objectAttrsTypeVaultMoveVaultRecord_shareDuration(false)
var vaultMoveVaultRecord_shareDurationAttrTypesRecurse = objectAttrsTypeVaultMoveVaultRecord_shareDuration(true)

type vaultMoveVaultRecord_shareDurationData struct {
	Nanos   types.Int64 `tfsdk:"nanos"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

var vaultVaultAttrTypes = objectAttrsTypeVaultVault(false)
var vaultVaultAttrTypesRecurse = objectAttrsTypeVaultVault(true)

type vaultVaultData struct {
	Links           types.List   `tfsdk:"links"`
	Permissions     types.List   `tfsdk:"permissions"`
	AccessAvailable types.Bool   `tfsdk:"access_available"`
	Name            types.String `tfsdk:"name"`
	Records         types.List   `tfsdk:"records"`
}

var vaultVaultHolderAttrTypes = objectAttrsTypeVaultVaultHolder(false)
var vaultVaultHolderAttrTypesRecurse = objectAttrsTypeVaultVaultHolder(true)

type vaultVaultHolderData struct {
}

var vaultVaultRecordAttrTypes = objectAttrsTypeVaultVaultRecord(false)
var vaultVaultRecordAttrTypesRecurse = objectAttrsTypeVaultVaultRecord(true)

type vaultVaultRecordData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	Color             types.String `tfsdk:"color"`
	Name              types.String `tfsdk:"name"`
	ShareEndTime      types.String `tfsdk:"share_end_time"`
	UUID              types.String `tfsdk:"uuid"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Derived           types.Bool   `tfsdk:"derived"`
	EndDate           types.String `tfsdk:"end_date"`
	Filename          types.String `tfsdk:"filename"`
	Types             types.List   `tfsdk:"types"`
	URL               types.String `tfsdk:"url"`
	Username          types.String `tfsdk:"username"`
	WarningPeriod     types.String `tfsdk:"warning_period"`
}

var vaultVaultRecordLinkableWrapperAttrTypes = objectAttrsTypeVaultVaultRecordLinkableWrapper(false)
var vaultVaultRecordLinkableWrapperAttrTypesRecurse = objectAttrsTypeVaultVaultRecordLinkableWrapper(true)

type vaultVaultRecordLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordPrimerAttrTypes = objectAttrsTypeVaultVaultRecordPrimer(false)
var vaultVaultRecordPrimerAttrTypesRecurse = objectAttrsTypeVaultVaultRecordPrimer(true)

type vaultVaultRecordPrimerData struct {
	Links        types.List   `tfsdk:"links"`
	Permissions  types.List   `tfsdk:"permissions"`
	Color        types.String `tfsdk:"color"`
	Name         types.String `tfsdk:"name"`
	ShareEndTime types.String `tfsdk:"share_end_time"`
	UUID         types.String `tfsdk:"uuid"`
}

var vaultVaultRecordPrimerLinkableWrapperAttrTypes = objectAttrsTypeVaultVaultRecordPrimerLinkableWrapper(false)
var vaultVaultRecordPrimerLinkableWrapperAttrTypesRecurse = objectAttrsTypeVaultVaultRecordPrimerLinkableWrapper(true)

type vaultVaultRecordPrimerLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var vaultVaultRecordSecretsAttrTypes = objectAttrsTypeVaultVaultRecordSecrets(false)
var vaultVaultRecordSecretsAttrTypesRecurse = objectAttrsTypeVaultVaultRecordSecrets(true)

type vaultVaultRecordSecretsData struct {
	Comment   types.String `tfsdk:"comment"`
	File      types.String `tfsdk:"file"`
	Password  types.String `tfsdk:"password"`
	Totp      types.String `tfsdk:"totp"`
	WriteTotp types.Bool   `tfsdk:"write_totp"`
}

var vaultVaultRecordShareAttrTypes = objectAttrsTypeVaultVaultRecordShare(false)
var vaultVaultRecordShareAttrTypesRecurse = objectAttrsTypeVaultVaultRecordShare(true)

type vaultVaultRecordShareData struct {
	Name                      types.String `tfsdk:"name"`
	VaultVaultRecordShareType types.String `tfsdk:"vault_vault_record_share_type"`
}

var vaultVaultRecordShareSummaryAttrTypes = objectAttrsTypeVaultVaultRecordShareSummary(false)
var vaultVaultRecordShareSummaryAttrTypesRecurse = objectAttrsTypeVaultVaultRecordShareSummary(true)

type vaultVaultRecordShareSummaryData struct {
	Children types.List   `tfsdk:"children"`
	Parent   types.Object `tfsdk:"parent"`
}

var vaultVaultRecord_additionalObjectsAttrTypes = objectAttrsTypeVaultVaultRecord_additionalObjects(false)
var vaultVaultRecord_additionalObjectsAttrTypesRecurse = objectAttrsTypeVaultVaultRecord_additionalObjects(true)

type vaultVaultRecord_additionalObjectsData struct {
	Audit        types.Object `tfsdk:"audit"`
	DeleteTile   types.Bool   `tfsdk:"delete_tile"`
	ParentUUID   types.String `tfsdk:"parent_uuid"`
	Secret       types.Object `tfsdk:"secret"`
	ShareSummary types.Object `tfsdk:"share_summary"`
	Shares       types.Object `tfsdk:"shares"`
	Tile         types.Object `tfsdk:"tile"`
	Vaultholder  types.Object `tfsdk:"vaultholder"`
}

var vaultVaultRecoveryAttrTypes = objectAttrsTypeVaultVaultRecovery(false)
var vaultVaultRecoveryAttrTypesRecurse = objectAttrsTypeVaultVaultRecovery(true)

type vaultVaultRecoveryData struct {
	AccountUUID types.String `tfsdk:"account_uuid"`
	PrivateKey  types.String `tfsdk:"private_key"`
}

var vaultVaultUnlockAttrTypes = objectAttrsTypeVaultVaultUnlock(false)
var vaultVaultUnlockAttrTypesRecurse = objectAttrsTypeVaultVaultUnlock(true)

type vaultVaultUnlockData struct {
	Password types.String `tfsdk:"password"`
}

var vaultVaultUnlockResponseAttrTypes = objectAttrsTypeVaultVaultUnlockResponse(false)
var vaultVaultUnlockResponseAttrTypesRecurse = objectAttrsTypeVaultVaultUnlockResponse(true)

type vaultVaultUnlockResponseData struct {
	ExpiresAt       types.String `tfsdk:"expires_at"`
	SessionPassword types.String `tfsdk:"session_password"`
}

var webhookWebhookAttrTypes = objectAttrsTypeWebhookWebhook(false)
var webhookWebhookAttrTypesRecurse = objectAttrsTypeWebhookWebhook(true)

type webhookWebhookData struct {
	Links                  types.List   `tfsdk:"links"`
	Permissions            types.List   `tfsdk:"permissions"`
	AccountUUID            types.String `tfsdk:"account_uuid"`
	Active                 types.Bool   `tfsdk:"active"`
	AdditionalObjects      types.Object `tfsdk:"additional_objects"`
	AllTypes               types.Bool   `tfsdk:"all_types"`
	AuthenticationScheme   types.String `tfsdk:"authentication_scheme"`
	BasicAuthPassword      types.String `tfsdk:"basic_auth_password"`
	BasicAuthUsername      types.String `tfsdk:"basic_auth_username"`
	BearerToken            types.String `tfsdk:"bearer_token"`
	ClientUUID             types.String `tfsdk:"client_uuid"`
	ClientCertificateUUID  types.String `tfsdk:"client_certificate_uuid"`
	CustomHeaderName       types.String `tfsdk:"custom_header_name"`
	CustomHeaderValue      types.String `tfsdk:"custom_header_value"`
	DirectoryUUID          types.String `tfsdk:"directory_uuid"`
	GroupUUID              types.String `tfsdk:"group_uuid"`
	Name                   types.String `tfsdk:"name"`
	SystemUUID             types.String `tfsdk:"system_uuid"`
	TLS                    types.String `tfsdk:"tls"`
	TrustedCertificateUUID types.String `tfsdk:"trusted_certificate_uuid"`
	Types                  types.List   `tfsdk:"types"`
	URL                    types.String `tfsdk:"url"`
	UUID                   types.String `tfsdk:"uuid"`
	VerbosePayloads        types.Bool   `tfsdk:"verbose_payloads"`
}

var webhookWebhookDeliveryAttrTypes = objectAttrsTypeWebhookWebhookDelivery(false)
var webhookWebhookDeliveryAttrTypesRecurse = objectAttrsTypeWebhookWebhookDelivery(true)

type webhookWebhookDeliveryData struct {
	Links             types.List   `tfsdk:"links"`
	Permissions       types.List   `tfsdk:"permissions"`
	AdditionalObjects types.Object `tfsdk:"additional_objects"`
	Payload           types.Object `tfsdk:"payload"`
	ReponseHeaders    types.String `tfsdk:"reponse_headers"`
	RequestHeaders    types.String `tfsdk:"request_headers"`
	Response          types.String `tfsdk:"response"`
	Status            types.Int64  `tfsdk:"status"`
	Time              types.Int64  `tfsdk:"time"`
	TriggerTime       types.String `tfsdk:"trigger_time"`
}

var webhookWebhookDeliveryLinkableWrapperAttrTypes = objectAttrsTypeWebhookWebhookDeliveryLinkableWrapper(false)
var webhookWebhookDeliveryLinkableWrapperAttrTypesRecurse = objectAttrsTypeWebhookWebhookDeliveryLinkableWrapper(true)

type webhookWebhookDeliveryLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookDelivery_additionalObjectsAttrTypes = objectAttrsTypeWebhookWebhookDelivery_additionalObjects(false)
var webhookWebhookDelivery_additionalObjectsAttrTypesRecurse = objectAttrsTypeWebhookWebhookDelivery_additionalObjects(true)

type webhookWebhookDelivery_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

var webhookWebhookLinkableWrapperAttrTypes = objectAttrsTypeWebhookWebhookLinkableWrapper(false)
var webhookWebhookLinkableWrapperAttrTypesRecurse = objectAttrsTypeWebhookWebhookLinkableWrapper(true)

type webhookWebhookLinkableWrapperData struct {
	Items types.List `tfsdk:"items"`
}

var webhookWebhookNameUuidAttrTypes = objectAttrsTypeWebhookWebhookNameUuid(false)
var webhookWebhookNameUuidAttrTypesRecurse = objectAttrsTypeWebhookWebhookNameUuid(true)

type webhookWebhookNameUuidData struct {
	Name   types.String `tfsdk:"name"`
	Object types.Object `tfsdk:"object"`
	UUID   types.String `tfsdk:"uuid"`
}

var webhookWebhookPushAttrTypes = objectAttrsTypeWebhookWebhookPush(false)
var webhookWebhookPushAttrTypesRecurse = objectAttrsTypeWebhookWebhookPush(true)

type webhookWebhookPushData struct {
	AccountUUID             types.String `tfsdk:"account_uuid"`
	ByPartyUUID             types.String `tfsdk:"by_party_uuid"`
	CertificateUUID         types.String `tfsdk:"certificate_uuid"`
	ClientUUID              types.String `tfsdk:"client_uuid"`
	DirectoryUUID           types.String `tfsdk:"directory_uuid"`
	GroupUUID               types.String `tfsdk:"group_uuid"`
	Group2UUID              types.String `tfsdk:"group2_uuid"`
	GroupClassificationUUID types.String `tfsdk:"group_classification_uuid"`
	ModificationRequestUUID types.String `tfsdk:"modification_request_uuid"`
	OrganizationalUnitUUID  types.String `tfsdk:"organizational_unit_uuid"`
	Parameter1              types.String `tfsdk:"parameter1"`
	Parameter2              types.String `tfsdk:"parameter2"`
	Parameter3              types.String `tfsdk:"parameter3"`
	SecurityLevel           types.String `tfsdk:"security_level"`
	Seq                     types.Int64  `tfsdk:"seq"`
	ServiceAccountUUID      types.String `tfsdk:"service_account_uuid"`
	SystemUUID              types.String `tfsdk:"system_uuid"`
	Timestamp               types.String `tfsdk:"timestamp"`
	VaultRecordUUID         types.String `tfsdk:"vault_record_uuid"`
	WebhookUUID             types.String `tfsdk:"webhook_uuid"`
	WebhookWebhookPushType  types.String `tfsdk:"webhook_webhook_push_type"`
}

var webhookWebhook_additionalObjectsAttrTypes = objectAttrsTypeWebhookWebhook_additionalObjects(false)
var webhookWebhook_additionalObjectsAttrTypesRecurse = objectAttrsTypeWebhookWebhook_additionalObjects(true)

type webhookWebhook_additionalObjectsData struct {
	Audit types.Object `tfsdk:"audit"`
}

func objectAttrsTypeAuditInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["last_modified_by"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeErrorReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["application_error"] = types.StringType
	objectAttrs["application_error_parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeErrorReport_applicationErrorParameters(recurse)}
	objectAttrs["code"] = types.Int64Type
	objectAttrs["error_details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["exception"] = types.StringType
	objectAttrs["message"] = types.StringType
	objectAttrs["reason"] = types.StringType
	objectAttrs["stacktrace"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeErrorReport_applicationErrorParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeGeneratedSecret(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["generated_secret"] = types.StringType
	objectAttrs["old_secret"] = types.StringType
	objectAttrs["regenerate"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	return objectAttrs
}
func objectAttrsTypeNonLinkable(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeRestLink(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["href"] = types.StringType
	objectAttrs["id"] = types.Int64Type
	objectAttrs["rel"] = types.StringType
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeSegmentCount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuditAuditRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditAuditRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["audit_audit_record_type"] = types.StringType
	objectAttrs["date_time"] = types.StringType
	objectAttrs["on_account"] = types.StringType
	objectAttrs["on_certificate"] = types.StringType
	objectAttrs["on_client"] = types.StringType
	objectAttrs["on_directory"] = types.StringType
	objectAttrs["on_group"] = types.StringType
	objectAttrs["on_group2"] = types.StringType
	objectAttrs["on_group_classification"] = types.StringType
	objectAttrs["on_organizational_unit"] = types.StringType
	objectAttrs["on_service_account"] = types.StringType
	objectAttrs["on_system"] = types.StringType
	objectAttrs["on_vault_record"] = types.StringType
	objectAttrs["on_webhook"] = types.StringType
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["performed_by"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuditAuditRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuditAuditRecord(recurse)}}
	return objectAttrs
}
func objectAttrsTypeAuditAuditRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeAuthAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_password_change_required"] = types.BoolType
	objectAttrs["directory_rotating_password"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["email"] = types.StringType
	objectAttrs["id_in_directory"] = types.StringType
	objectAttrs["key_hub_password_change_required"] = types.BoolType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["locale"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["token_password_enabled"] = types.BoolType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["valid_in_directory"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeAuthAccountBulkUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["action"] = types.StringType
	objectAttrs["exclusive_selection"] = types.BoolType
	objectAttrs["selected_accounts"] = types.ListType{ElemType: types.Int64Type}
	return objectAttrs
}
func objectAttrsTypeAuthAccountChangeLocale(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["locale"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeAuthAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthAccountRecoveryStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["pending2_f_a_recovery_request"] = types.BoolType
	objectAttrs["pending_password_recovery_request"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeAuthAccountSettings(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["default_organizational_unit_uuid"] = types.StringType
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["in_groups"] = types.BoolType
	objectAttrs["in_multiple_organizational_units"] = types.BoolType
	objectAttrs["key_hub_admin"] = types.BoolType
	objectAttrs["multiple_organizational_units_exist"] = types.BoolType
	objectAttrs["password_mode"] = types.StringType
	objectAttrs["ssh_public_key"] = types.StringType
	objectAttrs["two_factor_authentication"] = types.StringType
	objectAttrs["use_token_password"] = types.BoolType
	objectAttrs["vault_status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["decline_recovery_requests"] = types.BoolType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["two_factor_authentication_enabled"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeAuthAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_login"] = types.BoolType
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupAccountGroupLinkableWrapper(recurse)}
	objectAttrs["pending_recovery_requests"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccountRecoveryStatus(recurse)}
	objectAttrs["settings"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccountSettings(recurse)}
	objectAttrs["stored_attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthStoredAccountAttributes(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVault(recurse)}
	return objectAttrs
}
func objectAttrsTypeAuthAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["directory_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccountsAuditStats_directoryStats(recurse)}
	objectAttrs["two_f_a_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccountsAuditStats_twoFAStats(recurse)}
	objectAttrs["validity_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccountsAuditStats_validityStats(recurse)}
	return objectAttrs
}
func objectAttrsTypeAuthAccountsAuditStats_directoryStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeAuthAccountsAuditStats_validityStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeAuthInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeAuthAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["can_request_groups"] = types.BoolType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["directory_name"] = types.StringType
	objectAttrs["directory_password_change_required"] = types.BoolType
	objectAttrs["directory_rotating_password"] = types.StringType
	objectAttrs["directory_type"] = types.StringType
	objectAttrs["email"] = types.StringType
	objectAttrs["id_in_directory"] = types.StringType
	objectAttrs["key_hub_password_change_required"] = types.BoolType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["license_role"] = types.StringType
	objectAttrs["locale"] = types.StringType
	objectAttrs["reregistration_required"] = types.BoolType
	objectAttrs["token_password_enabled"] = types.BoolType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["valid_in_directory"] = types.BoolType
	objectAttrs["activation_code"] = types.StringType
	objectAttrs["activation_deadline"] = types.StringType
	objectAttrs["company"] = types.StringType
	objectAttrs["first_name"] = types.StringType
	objectAttrs["last_name"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["telephone"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthInternalAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthInternalAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeAuthInternalAccountStatusObject(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthInternalAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["reason"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthMoveInternalAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["internal_directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryInternalDirectory(recurse)}
	return objectAttrs
}
func objectAttrsTypeAuthPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["full"] = types.StringType
	objectAttrs["instances"] = types.ListType{ElemType: types.StringType}
	objectAttrs["operations"] = types.ListType{ElemType: types.StringType}
	objectAttrs["type_escaped"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthStoredAccountAttribute(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["value"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeAuthStoredAccountAttributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["attributes"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthStoredAccountAttribute(recurse)}}
	return objectAttrs
}
func objectAttrsTypeCertificateCertificate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeCertificateCertificate_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["key_data"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeCertificateCertificateLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeCertificateCertificate(recurse)}}
	return objectAttrs
}
func objectAttrsTypeCertificateCertificatePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["alias"] = types.StringType
	objectAttrs["certificate_certificate_primer_type"] = types.StringType
	objectAttrs["certificate_data"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["fingerprint_sha1"] = types.StringType
	objectAttrs["fingerprint_sha256"] = types.StringType
	objectAttrs["global"] = types.BoolType
	objectAttrs["subject_d_n"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeCertificateCertificate_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeClientClientApplication(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeClientClientApplicationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication(recurse)}}
	return objectAttrs
}
func objectAttrsTypeClientClientApplicationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeClientClientApplication_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["delete_tile"] = types.BoolType
	objectAttrs["groupclients"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupLinkableWrapper(recurse)}
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeGeneratedSecret(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadSsoApplicationLaunchpadTile(recurse)}
	objectAttrs["vault_record_count"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeClientLdapClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["bind_dn"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret_uuid"] = types.StringType
	objectAttrs["used_for_provisioning"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeClientOAuth2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["account_permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)}}
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2Client_attributes(false)}
	objectAttrs["callback_u_r_i"] = types.StringType
	objectAttrs["confidential"] = types.BoolType
	objectAttrs["debug_mode"] = types.BoolType
	objectAttrs["id_token_claims"] = types.StringType
	objectAttrs["initiate_login_u_r_i"] = types.StringType
	objectAttrs["resource_u_r_is"] = types.StringType
	objectAttrs["share_secret_in_vault"] = types.BoolType
	objectAttrs["shared_secret_uuid"] = types.StringType
	objectAttrs["show_landing_page"] = types.BoolType
	objectAttrs["use_client_credentials"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeClientOAuth2ClientPermission(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["for_group_uuid"] = types.StringType
	objectAttrs["for_system_uuid"] = types.StringType
	objectAttrs["value"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermission(recurse)}}
	return objectAttrs
}
func objectAttrsTypeClientOAuth2ClientPermissionWithClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermission_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["for_group_uuid"] = types.StringType
	objectAttrs["for_system_uuid"] = types.StringType
	objectAttrs["value"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2Client(false)}
	return objectAttrs
}
func objectAttrsTypeClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermissionWithClient(recurse)}}
	return objectAttrs
}
func objectAttrsTypeClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeClientOAuth2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeClientSaml2Client(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["client_client_application_primer_type"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["scopes"] = types.ListType{ElemType: types.StringType}
	objectAttrs["sso_application"] = types.BoolType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["last_modified_at"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeClientSaml2Client_attributes(false)}
	objectAttrs["metadata"] = types.StringType
	objectAttrs["metadata_url"] = types.StringType
	objectAttrs["subject_format"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeClientSaml2Client_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory(recurse)}}
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectoryPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectoryStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.Int64Type
	objectAttrs["reason"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectorySummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["directory_account_directory_summary_type"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectoryStatusReport(recurse)}
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectorySummary(recurse)}}
	return objectAttrs
}
func objectAttrsTypeDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarkers(recurse)}
	objectAttrs["status"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectoryStatusReport(recurse)}
	return objectAttrs
}
func objectAttrsTypeDirectoryInternalDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["owner_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeDirectoryLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["dialect"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["password_recovery"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["search_bind_d_n"] = types.StringType
	objectAttrs["search_bind_password"] = types.StringType
	objectAttrs["search_filter"] = types.StringType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeDirectoryMaintenanceDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeDirectoryOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_validity_supported"] = types.BoolType
	objectAttrs["active"] = types.BoolType
	objectAttrs["directory_account_directory_primer_type"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["base_organizational_unit_uuid"] = types.StringType
	objectAttrs["default_directory"] = types.BoolType
	objectAttrs["helpdesk_group_uuid"] = types.StringType
	objectAttrs["restrict2fa"] = types.BoolType
	objectAttrs["rotating_password"] = types.StringType
	objectAttrs["username_customizable"] = types.BoolType
	objectAttrs["acr_values"] = types.StringType
	objectAttrs["attributes_to_store"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["domain_restriction"] = types.StringType
	objectAttrs["enforces2fa"] = types.BoolType
	objectAttrs["fully_resolved_issuer"] = types.StringType
	objectAttrs["issuer"] = types.StringType
	objectAttrs["logout_url"] = types.StringType
	objectAttrs["send_login_hint"] = types.BoolType
	objectAttrs["vendor_escaped"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupAccountGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder(false)}
	objectAttrs["last_used"] = types.StringType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupAccountGroup(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVault(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupAuthorizedGroupsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}}
	objectAttrs["group_count"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeGroupGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["application_administration"] = types.BoolType
	objectAttrs["audit_config"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAuditConfig(false)}
	objectAttrs["audit_requested"] = types.BoolType
	objectAttrs["auditor"] = types.BoolType
	objectAttrs["authorizing_group_auditing_uuid"] = types.StringType
	objectAttrs["authorizing_group_delegation_uuid"] = types.StringType
	objectAttrs["authorizing_group_membership_uuid"] = types.StringType
	objectAttrs["authorizing_group_provisioning_uuid"] = types.StringType
	objectAttrs["authorizing_group_types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["classification_uuid"] = types.StringType
	objectAttrs["description"] = types.StringType
	objectAttrs["extended_access"] = types.StringType
	objectAttrs["hide_audit_trail"] = types.BoolType
	objectAttrs["nested_under_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["private_group"] = types.BoolType
	objectAttrs["record_trail"] = types.BoolType
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["single_managed"] = types.BoolType
	objectAttrs["vault_recovery"] = types.StringType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["two_factor_status"] = types.StringType
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupAccountNesting(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["connected"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder(recurse)}
	objectAttrs["visible_for_provisioning"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupAdminMail(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["body"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAudit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAudit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["accounts"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAuditAccount(false)}}
	objectAttrs["comment"] = types.StringType
	objectAttrs["created_at"] = types.StringType
	objectAttrs["created_by"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	objectAttrs["name_on_audit"] = types.StringType
	objectAttrs["reviewed_at"] = types.StringType
	objectAttrs["reviewed_by"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["submitted_at"] = types.StringType
	objectAttrs["submitted_by"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAuditAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["account_valid"] = types.BoolType
	objectAttrs["action"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["disconnected_nested"] = types.BoolType
	objectAttrs["display_name"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["last_used"] = types.StringType
	objectAttrs["nested"] = types.BoolType
	objectAttrs["rights"] = types.StringType
	objectAttrs["username"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupAuditConfig(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["months"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeGroupGroupAuditLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAudit(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupAudit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupAuditingInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit_due_date"] = types.StringType
	objectAttrs["last_audit_date"] = types.StringType
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_accounts"] = types.Int64Type
	objectAttrs["nr_disabled_managers"] = types.Int64Type
	objectAttrs["nr_expired_vault_records"] = types.Int64Type
	objectAttrs["nr_managers"] = types.Int64Type
	objectAttrs["nr_vault_records_with_end_date"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassification_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["authorizing_group_auditing_required"] = types.BoolType
	objectAttrs["authorizing_group_delegation_required"] = types.BoolType
	objectAttrs["authorizing_group_membership_required"] = types.BoolType
	objectAttrs["authorizing_group_provisioning_required"] = types.BoolType
	objectAttrs["default_classification"] = types.BoolType
	objectAttrs["description"] = types.StringType
	objectAttrs["maximum_audit_interval"] = types.Int64Type
	objectAttrs["minimum_nr_managers"] = types.Int64Type
	objectAttrs["record_trail_required"] = types.BoolType
	objectAttrs["required_months"] = types.ListType{ElemType: types.StringType}
	objectAttrs["rotating_password_required"] = types.BoolType
	objectAttrs["vault_requires_activation"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassificationInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_groups"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassificationLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassification(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassificationPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassificationUpdate(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["classificaton_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupClassification_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["info"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassificationInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupClient(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClient_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["client_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupClientLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClient(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupClient_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupFolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupFolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupFolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nr_accounts"] = types.Int64Type
	objectAttrs["nr_accounts_with_vault"] = types.Int64Type
	objectAttrs["nr_audits"] = types.Int64Type
	objectAttrs["nr_clients"] = types.Int64Type
	objectAttrs["nr_provisioned_systems"] = types.Int64Type
	objectAttrs["nr_vault_records"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeGroupGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroupPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["admin"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeGroupGroupPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}}
	objectAttrs["segments"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeSegmentCount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["administered_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["admins"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccountLinkableWrapper(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["authorized_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupAuthorizedGroupsWrapper(recurse)}
	objectAttrs["client_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["clients"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClientLinkableWrapper(recurse)}
	objectAttrs["content_administered_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["groupauditinginfo"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAuditingInfo(recurse)}
	objectAttrs["groupinfo"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupInfo(recurse)}
	objectAttrs["helpdesk"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectorySummaryLinkableWrapper(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarkers(recurse)}
	objectAttrs["myaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccount(recurse)}
	objectAttrs["mydelegatedaccount"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccount(recurse)}
	objectAttrs["nested_groups"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupPrimerLinkableWrapper(recurse)}
	objectAttrs["owned_clients"] = types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplicationLinkableWrapper(recurse)}
	objectAttrs["owned_directories"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectoryLinkableWrapper(recurse)}
	objectAttrs["owned_groups_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningOwnedGroupOnSystemsWrapper(recurse)}
	objectAttrs["owned_organizational_units"] = types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnitLinkableWrapper(recurse)}
	objectAttrs["owned_systems"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(recurse)}
	objectAttrs["recent_audits"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAuditLinkableWrapper(recurse)}
	objectAttrs["requeststatus"] = types.StringType
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountLinkableWrapper(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVault(recurse)}
	objectAttrs["webhooks"] = types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhookLinkableWrapper(recurse)}
	return objectAttrs
}
func objectAttrsTypeGroupGroupsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audited_groups"] = types.Int64Type
	objectAttrs["classifications"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassification(recurse)}}
	objectAttrs["overdue_audit_groups"] = types.Int64Type
	objectAttrs["overdue_vault_policies"] = types.Int64Type
	objectAttrs["unaudited_groups"] = types.Int64Type
	objectAttrs["valid_vault_policies"] = types.Int64Type
	objectAttrs["vaults_without_policies"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeGroupProvisioningGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(false)}
	return objectAttrs
}
func objectAttrsTypeGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroup(recurse)}}
	return objectAttrs
}
func objectAttrsTypeGroupProvisioningGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTilePrimer(recurse)}
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadDisplayedLaunchpadTile(recurse)}}
	return objectAttrs
}
func objectAttrsTypeLaunchpadLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile(recurse)}}
	return objectAttrs
}
func objectAttrsTypeLaunchpadLaunchpadTilePrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	return objectAttrs
}
func objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeLaunchpadManualLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	objectAttrs["title"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	objectAttrs["uri"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["identicon_code"] = types.Int64Type
	objectAttrs["launchpad_launchpad_tile_type"] = types.StringType
	objectAttrs["logo"] = types.ListType{ElemType: types.StringType}
	objectAttrs["vault_record_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeLicenseKeyHubLicenseInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["current_license_status"] = types.StringType
	objectAttrs["customer_company"] = types.StringType
	objectAttrs["customer_contact"] = types.StringType
	objectAttrs["customer_domains"] = types.ListType{ElemType: types.StringType}
	objectAttrs["details"] = types.ListType{ElemType: types.StringType}
	objectAttrs["expiration_time"] = types.StringType
	objectAttrs["features"] = types.ListType{ElemType: types.StringType}
	objectAttrs["issue_time"] = types.StringType
	objectAttrs["key_hub_domain"] = types.StringType
	objectAttrs["license_key"] = types.StringType
	objectAttrs["not_before_time"] = types.StringType
	objectAttrs["users_hard_limit"] = types.Int64Type
	objectAttrs["users_pro_limit"] = types.Int64Type
	objectAttrs["users_soft_limit"] = types.Int64Type
	objectAttrs["uuid"] = types.StringType
	objectAttrs["version"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeMarkItemMarker(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["level"] = types.StringType
	objectAttrs["mark_item_marker_type"] = types.StringType
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarker_parameters(recurse)}
	return objectAttrs
}
func objectAttrsTypeMarkItemMarker_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeMarkItemMarkers(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["markers"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarker(recurse)}}
	return objectAttrs
}
func objectAttrsTypeNotificationCertificateExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["certificate"] = types.ObjectType{AttrTypes: objectAttrsTypeCertificateCertificate(recurse)}
	objectAttrs["directory"] = types.ObjectType{AttrTypes: objectAttrsTypeDirectoryLDAPDirectory(recurse)}
	objectAttrs["expiration"] = types.StringType
	objectAttrs["ldap_client"] = types.ObjectType{AttrTypes: objectAttrsTypeClientLdapClient(recurse)}
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem(recurse)}
	objectAttrs["usage"] = types.StringType
	objectAttrs["webhook_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeNotificationGroupAuditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["due_date"] = types.StringType
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}
	objectAttrs["notification_group_audit_required_notification_type"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeNotificationGroupEditRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}
	objectAttrs["parameters"] = types.ObjectType{AttrTypes: objectAttrsTypeNotificationGroupEditRequiredNotification_parameters(recurse)}
	objectAttrs["reason"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeNotificationLicenseStatusNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["active_accounts"] = types.Int64Type
	objectAttrs["license_info_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeNotificationModificationRequestNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["admins"] = types.ListType{ElemType: types.StringType}
	objectAttrs["groups"] = types.ListType{ElemType: types.StringType}
	objectAttrs["request"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest(recurse)}
	return objectAttrs
}
func objectAttrsTypeNotificationNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeNotificationNotifications(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeNotificationNotification(recurse)}}
	return objectAttrs
}
func objectAttrsTypeNotificationOldApiVersionUsageNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["api_version"] = types.Int64Type
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2Client(recurse)}
	return objectAttrs
}
func objectAttrsTypeNotificationProvisionConfigRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["systems"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeNotificationUpdateAvailableNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["released_at"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeNotificationVaultRecordExpiredNotification(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["record"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord(recurse)}
	return objectAttrs
}
func objectAttrsTypeOrganizationAccountOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeOrganizationAccountOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationAccountOrganizationalUnit(recurse)}}
	return objectAttrs
}
func objectAttrsTypeOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnit(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnit_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["depth"] = types.Int64Type
	objectAttrs["description"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["parent_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnitAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnitAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnit(recurse)}}
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["create_as_parent_of"] = types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningAbstractProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeProvisioningAccountProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["description"] = types.StringType
	objectAttrs["result"] = types.StringType
	objectAttrs["system"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroup(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningAccountProvisioningStatusReport(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["status"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAccountProvisioningStatus(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningCircuitBreakerStatistics(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["number_of_failed_calls"] = types.Int64Type
	objectAttrs["number_of_not_permitted_calls"] = types.Int64Type
	objectAttrs["number_of_successful_calls"] = types.Int64Type
	objectAttrs["state"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupOnSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupOnSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupOnSystemTypes(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["provgroups"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroupLinkableWrapper(recurse)}
	objectAttrs["service_accounts"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountPrimerLinkableWrapper(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["folder"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder(recurse)}
	objectAttrs["group"] = types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)}
	objectAttrs["provisioning_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupProvisioningStatus_provisioningDuration(recurse)}
	objectAttrs["provisioning_end_time"] = types.StringType
	objectAttrs["provisioning_permission_end_time"] = types.StringType
	objectAttrs["status_report"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAccountProvisioningStatusReport(recurse)}
	objectAttrs["visible_on_dashboard"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(recurse)}}
	objectAttrs["unlinked_count"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionNumberSequence(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionNumberSequence_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["name"] = types.StringType
	objectAttrs["next_u_i_d"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionNumberSequence(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["systems"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemPrimerLinkableWrapper(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAD(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["sam_account_name_scheme"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["last_active"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["validity"] = types.StringType
	objectAttrs["uid"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedAzureTenant(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client_id"] = types.StringType
	objectAttrs["client_secret"] = types.StringType
	objectAttrs["idp_domain"] = types.StringType
	objectAttrs["tenant"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedInternalLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["client"] = types.ObjectType{AttrTypes: objectAttrsTypeClientLdapClient(false)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedLDAP(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["attributes"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAbstractProvisionedLDAP_attributes(false)}
	objectAttrs["base_d_n"] = types.StringType
	objectAttrs["bind_d_n"] = types.StringType
	objectAttrs["bind_password"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["failover_host"] = types.StringType
	objectAttrs["failover_trusted_certificate_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	objectAttrs["host"] = types.StringType
	objectAttrs["object_classes"] = types.StringType
	objectAttrs["port"] = types.Int64Type
	objectAttrs["service_account_d_n"] = types.StringType
	objectAttrs["ssh_public_key_supported"] = types.BoolType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["user_d_n"] = types.StringType
	objectAttrs["gid"] = types.Int64Type
	objectAttrs["hashing_scheme"] = types.StringType
	objectAttrs["numbering"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionNumberSequence(false)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedLDAPDirectory(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["group_d_n"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystem(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["account_count"] = types.Int64Type
	objectAttrs["content_administrator_uuid"] = types.StringType
	objectAttrs["external_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["owner_uuid"] = types.StringType
	objectAttrs["self_service_existing_groups"] = types.BoolType
	objectAttrs["self_service_new_groups"] = types.BoolType
	objectAttrs["self_service_service_accounts"] = types.BoolType
	objectAttrs["should_destroy_unknown_accounts"] = types.BoolType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	objectAttrs["username_prefix"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["provisioning_provisioned_system_primer_type"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemSyncLog(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemSyncLog_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["created_at"] = types.StringType
	objectAttrs["errors"] = types.Int64Type
	objectAttrs["log"] = types.StringType
	objectAttrs["modifications"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemSyncLog(recurse)}}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedAccount(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["issued_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse)}
	objectAttrs["login_name"] = types.StringType
	objectAttrs["management_permissions"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisioningManagementPermissions(recurse)}
	objectAttrs["markers"] = types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarkers(recurse)}
	objectAttrs["statistics"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningCircuitBreakerStatistics(recurse)}
	objectAttrs["supported_group_types"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystemTypes(recurse)}
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisioningManagementPermissions(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["create_new_groups_allowed"] = types.BoolType
	objectAttrs["create_service_accounts_allowed"] = types.BoolType
	objectAttrs["reuse_existing_groups_allowed"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeProvisioningProvisioningStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["groups"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupProvisioningStatus(recurse)}}
	objectAttrs["ignore_errors"] = types.BoolType
	objectAttrs["restricted_by_license"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeProvisioningTokenPassword(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestAbstractApplicationModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["access_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestAcceptGrantAccessRequestParameters_accessDuration(recurse)}
	return objectAttrs
}
func objectAttrsTypeRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["end_date"] = types.StringType
	objectAttrs["make_manager"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeRequestAcceptModificationRequestParameters(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeRequestAddGroupAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["new_admin_uuid"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestCreateGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system_type"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestCreateGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestCreateServiceAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestDisable2FARequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["subject"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestExtendAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["extend_until"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestGrantAccessRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestGrantApplicationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestGrantClientPermissionRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	objectAttrs["permission_type"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestGrantGroupOnSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(false)}
	return objectAttrs
}
func objectAttrsTypeRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["activation_required"] = types.BoolType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(false)}
	return objectAttrs
}
func objectAttrsTypeRequestGrantServiceAccountGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(false)}
	objectAttrs["service_account_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestJoinGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestJoinVaultRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestModificationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestModificationRequestLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest(recurse)}}
	return objectAttrs
}
func objectAttrsTypeRequestModificationRequest_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["accept_params"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestAcceptModificationRequestParameters(recurse)}
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["reset_status"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestPasswordResetRequestStatus(recurse)}
	return objectAttrs
}
func objectAttrsTypeRequestPasswordResetRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["new_vault_and_directory_password"] = types.StringType
	objectAttrs["new_vault_password"] = types.StringType
	objectAttrs["unsynced_password"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeRequestPasswordResetRequestStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["cooldown_end"] = types.StringType
	objectAttrs["managers"] = types.ListType{ElemType: types.StringType}
	objectAttrs["nr_accepted"] = types.Int64Type
	objectAttrs["reset_via_mail"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestRemoveGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["organizational_unit_name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestRemoveProvisionedSystemRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["system_name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestReviewAuditRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestRevokeAdminRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["admin_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestSetupAuthorizingGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["authorizing_group_type"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestSetupNestedGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_action"] = types.StringType
	objectAttrs["connect"] = types.BoolType
	objectAttrs["requesting_group_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferApplicationAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferApplicationOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["application_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferAuditorGroupRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["group_on_system"] = types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(false)}
	return objectAttrs
}
func objectAttrsTypeRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["service_account_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestUpdateGroupMembershipRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["account_to_update_uuid"] = types.StringType
	objectAttrs["current_end_date"] = types.StringType
	objectAttrs["current_rights"] = types.StringType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["rights"] = types.StringType
	objectAttrs["update_group_membership_type"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeRequestVerifyInternalAccountRequest(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["comment"] = types.StringType
	objectAttrs["feedback"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["mail_key"] = types.StringType
	objectAttrs["request_modification_request_type"] = types.StringType
	objectAttrs["status"] = types.StringType
	objectAttrs["internal_account_name"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccount(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccount_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["description"] = types.StringType
	objectAttrs["password_uuid"] = types.StringType
	objectAttrs["password_rotation"] = types.StringType
	objectAttrs["technical_administrator_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountGroup(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountGroup_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["display_name"] = types.StringType
	objectAttrs["name_in_system"] = types.StringType
	objectAttrs["provisioning_group_on_system_primer_type"] = types.StringType
	objectAttrs["short_name_in_system"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountGroup(recurse)}}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccount(recurse)}}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["active"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountStatus(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_enabled"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["groups"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountGroupLinkableWrapper(recurse)}
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeGeneratedSecret(recurse)}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountsAuditStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["disabled_count"] = types.Int64Type
	objectAttrs["password_scheme_enabled_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse)}
	objectAttrs["system_stats"] = types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountsAuditStats_systemStats(recurse)}
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeSimpleStringValue(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["value"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeSimpleVersionInfo(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["contract_versions"] = types.ListType{ElemType: types.Int64Type}
	objectAttrs["key_hub_version"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultDeletedVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultDeletedVaultHolder_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["name"] = types.StringType
	objectAttrs["record_count"] = types.Int64Type
	objectAttrs["vault_deleted_vault_holder_type"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeVaultDeletedVaultHolder(recurse)}}
	return objectAttrs
}
func objectAttrsTypeVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["vault"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVault(recurse)}
	return objectAttrs
}
func objectAttrsTypeVaultDeletedVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["prefix"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	objectAttrs["target_group_uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultMoveVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["action"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["share_duration"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultMoveVaultRecord_shareDuration(recurse)}
	return objectAttrs
}
func objectAttrsTypeVaultMoveVaultRecord_shareDuration(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["nanos"] = types.Int64Type
	objectAttrs["seconds"] = types.Int64Type
	return objectAttrs
}
func objectAttrsTypeVaultVault(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["access_available"] = types.BoolType
	objectAttrs["name"] = types.StringType
	objectAttrs["records"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord(recurse)}}
	return objectAttrs
}
func objectAttrsTypeVaultVaultHolder(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecord(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["derived"] = types.BoolType
	objectAttrs["end_date"] = types.StringType
	objectAttrs["filename"] = types.StringType
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["username"] = types.StringType
	objectAttrs["warning_period"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord(recurse)}}
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordPrimer(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["color"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["share_end_time"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordSecrets(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["comment"] = types.StringType
	objectAttrs["file"] = types.StringType
	objectAttrs["password"] = types.StringType
	objectAttrs["totp"] = types.StringType
	objectAttrs["write_totp"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordShare(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["vault_vault_record_share_type"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecordShareSummary(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["children"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordShare(recurse)}}
	objectAttrs["parent"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordShare(recurse)}
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecord_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	objectAttrs["delete_tile"] = types.BoolType
	objectAttrs["parent_uuid"] = types.StringType
	objectAttrs["secret"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordSecrets(recurse)}
	objectAttrs["share_summary"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordShareSummary(recurse)}
	objectAttrs["shares"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordPrimerLinkableWrapper(recurse)}
	objectAttrs["tile"] = types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadVaultRecordLaunchpadTile(recurse)}
	objectAttrs["vaultholder"] = types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultHolder(recurse)}
	return objectAttrs
}
func objectAttrsTypeVaultVaultRecovery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["private_key"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultVaultUnlock(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["password"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeVaultVaultUnlockResponse(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["expires_at"] = types.StringType
	objectAttrs["session_password"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeWebhookWebhook(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhook_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["active"] = types.BoolType
	objectAttrs["all_types"] = types.BoolType
	objectAttrs["authentication_scheme"] = types.StringType
	objectAttrs["basic_auth_password"] = types.StringType
	objectAttrs["basic_auth_username"] = types.StringType
	objectAttrs["bearer_token"] = types.StringType
	objectAttrs["client_uuid"] = types.StringType
	objectAttrs["client_certificate_uuid"] = types.StringType
	objectAttrs["custom_header_name"] = types.StringType
	objectAttrs["custom_header_value"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["name"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["tls"] = types.StringType
	objectAttrs["trusted_certificate_uuid"] = types.StringType
	objectAttrs["types"] = types.ListType{ElemType: types.StringType}
	objectAttrs["url"] = types.StringType
	objectAttrs["uuid"] = types.StringType
	objectAttrs["verbose_payloads"] = types.BoolType
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookDelivery(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	if recurse {
		objectAttrs["additional_objects"] = types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhookDelivery_additionalObjects(false)}
	}
	objectAttrs["links"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)}}
	objectAttrs["permissions"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)}}
	objectAttrs["payload"] = types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhookPush(false)}
	objectAttrs["reponse_headers"] = types.StringType
	objectAttrs["request_headers"] = types.StringType
	objectAttrs["response"] = types.StringType
	objectAttrs["status"] = types.Int64Type
	objectAttrs["time"] = types.Int64Type
	objectAttrs["trigger_time"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhookDelivery(recurse)}}
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookLinkableWrapper(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["items"] = types.ListType{ElemType: types.StringType}
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookNameUuid(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["name"] = types.StringType
	objectAttrs["object"] = types.ObjectType{AttrTypes: objectAttrsTypeLinkable(recurse)}
	objectAttrs["uuid"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeWebhookWebhookPush(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["account_uuid"] = types.StringType
	objectAttrs["by_party_uuid"] = types.StringType
	objectAttrs["certificate_uuid"] = types.StringType
	objectAttrs["client_uuid"] = types.StringType
	objectAttrs["directory_uuid"] = types.StringType
	objectAttrs["group_uuid"] = types.StringType
	objectAttrs["group2_uuid"] = types.StringType
	objectAttrs["group_classification_uuid"] = types.StringType
	objectAttrs["modification_request_uuid"] = types.StringType
	objectAttrs["organizational_unit_uuid"] = types.StringType
	objectAttrs["parameter1"] = types.StringType
	objectAttrs["parameter2"] = types.StringType
	objectAttrs["parameter3"] = types.StringType
	objectAttrs["security_level"] = types.StringType
	objectAttrs["seq"] = types.Int64Type
	objectAttrs["service_account_uuid"] = types.StringType
	objectAttrs["system_uuid"] = types.StringType
	objectAttrs["timestamp"] = types.StringType
	objectAttrs["vault_record_uuid"] = types.StringType
	objectAttrs["webhook_uuid"] = types.StringType
	objectAttrs["webhook_webhook_push_type"] = types.StringType
	return objectAttrs
}
func objectAttrsTypeWebhookWebhook_additionalObjects(recurse bool) map[string]attr.Type {
	objectAttrs := make(map[string]attr.Type)
	objectAttrs["audit"] = types.ObjectType{AttrTypes: objectAttrsTypeAuditInfo(recurse)}
	return objectAttrs
}

func tkhToTFObjectAuditInfo(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = AuditInfoAttrTypesRecurse
	} else {
		attrs = AuditInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = TimePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectErrorReport(recurse bool, tkh keyhubmodel.ErrorReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = ErrorReportAttrTypesRecurse
	} else {
		attrs = ErrorReportAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["application_error"] = types.StringPointerValue(tkh.GetApplicationError())
	{
		val, d := tkhToTFObjectErrorReport_applicationErrorParameters(false, tkh.GetApplicationErrorParameters())
		diags.Append(d...)
		obj["application_error_parameters"] = val
	}
	obj["code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetCode()))
	{
		elemType := attrs["error_details"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetErrorDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["error_details"] = val
	}
	obj["exception"] = types.StringPointerValue(tkh.GetException())
	obj["message"] = types.StringPointerValue(tkh.GetMessage())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	{
		elemType := attrs["stacktrace"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetStacktrace(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["stacktrace"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectErrorReport_applicationErrorParameters(recurse bool, tkh keyhubmodel.ErrorReport_applicationErrorParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = ErrorReport_applicationErrorParametersAttrTypesRecurse
	} else {
		attrs = ErrorReport_applicationErrorParametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = GeneratedSecretAttrTypesRecurse
	} else {
		attrs = GeneratedSecretAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = LinkableAttrTypesRecurse
	} else {
		attrs = LinkableAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = NonLinkableAttrTypesRecurse
	} else {
		attrs = NonLinkableAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = RestLinkAttrTypesRecurse
	} else {
		attrs = RestLinkAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectSegmentCount(recurse bool, tkh keyhubmodel.SegmentCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = SegmentCountAttrTypesRecurse
	} else {
		attrs = SegmentCountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuditAuditRecord(recurse bool, tkh keyhubmodel.AuditAuditRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordAttrTypesRecurse
	} else {
		attrs = auditAuditRecordAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectAuditAuditRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["audit_audit_record_type"] = StringerToTF(tkh.GetAuditAuditRecordType())
	obj["date_time"] = TimePointerToTF(tkh.GetDateTime())
	obj["on_account"] = types.StringPointerValue(tkh.GetOnAccount())
	obj["on_certificate"] = types.StringPointerValue(tkh.GetOnCertificate())
	obj["on_client"] = types.StringPointerValue(tkh.GetOnClient())
	obj["on_directory"] = types.StringPointerValue(tkh.GetOnDirectory())
	obj["on_group"] = types.StringPointerValue(tkh.GetOnGroup())
	obj["on_group2"] = types.StringPointerValue(tkh.GetOnGroup2())
	obj["on_group_classification"] = types.StringPointerValue(tkh.GetOnGroupClassification())
	obj["on_organizational_unit"] = types.StringPointerValue(tkh.GetOnOrganizationalUnit())
	obj["on_service_account"] = types.StringPointerValue(tkh.GetOnServiceAccount())
	obj["on_system"] = types.StringPointerValue(tkh.GetOnSystem())
	obj["on_vault_record"] = types.StringPointerValue(tkh.GetOnVaultRecord())
	obj["on_webhook"] = types.StringPointerValue(tkh.GetOnWebhook())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["performed_by"] = types.StringPointerValue(tkh.GetPerformedBy())
	obj["security_level"] = StringerToTF(tkh.GetSecurityLevel())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuditAuditRecordLinkableWrapper(recurse bool, tkh keyhubmodel.AuditAuditRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordLinkableWrapperAttrTypesRecurse
	} else {
		attrs = auditAuditRecordLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditAuditRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuditAuditRecord(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuditAuditRecord_additionalObjects(recurse bool, tkh keyhubmodel.AuditAuditRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecord_additionalObjectsAttrTypesRecurse
	} else {
		attrs = auditAuditRecord_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccount(recurse bool, tkh keyhubmodel.AuthAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountAttrTypesRecurse
	} else {
		attrs = authAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = StringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = StringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = StringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = StringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountBulkUpdate(recurse bool, tkh keyhubmodel.AuthAccountBulkUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountBulkUpdateAttrTypesRecurse
	} else {
		attrs = authAccountBulkUpdateAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["action"] = StringerToTF(tkh.GetAction())
	obj["exclusive_selection"] = types.BoolPointerValue(tkh.GetExclusiveSelection())
	{
		elemType := attrs["selected_accounts"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetSelectedAccounts(), func(tkh int64, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(tkh)
		})
		diags.Append(d...)
		obj["selected_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountChangeLocale(recurse bool, tkh keyhubmodel.AuthAccountChangeLocaleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountChangeLocaleAttrTypesRecurse
	} else {
		attrs = authAccountChangeLocaleAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = authAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesRecurse
	} else {
		attrs = authAccountPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountRecoveryStatus(recurse bool, tkh keyhubmodel.AuthAccountRecoveryStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountRecoveryStatusAttrTypesRecurse
	} else {
		attrs = authAccountRecoveryStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["pending2_f_a_recovery_request"] = types.BoolPointerValue(tkh.GetPending2FARecoveryRequest())
	obj["pending_password_recovery_request"] = types.BoolPointerValue(tkh.GetPendingPasswordRecoveryRequest())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountSettings(recurse bool, tkh keyhubmodel.AuthAccountSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountSettingsAttrTypesRecurse
	} else {
		attrs = authAccountSettingsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["default_organizational_unit_uuid"] = WithUuidToTF(tkh.GetDefaultOrganizationalUnit())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_type"] = StringerToTF(tkh.GetDirectoryType())
	obj["in_groups"] = types.BoolPointerValue(tkh.GetInGroups())
	obj["in_multiple_organizational_units"] = types.BoolPointerValue(tkh.GetInMultipleOrganizationalUnits())
	obj["key_hub_admin"] = types.BoolPointerValue(tkh.GetKeyHubAdmin())
	obj["multiple_organizational_units_exist"] = types.BoolPointerValue(tkh.GetMultipleOrganizationalUnitsExist())
	obj["password_mode"] = StringerToTF(tkh.GetPasswordMode())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["two_factor_authentication"] = StringerToTF(tkh.GetTwoFactorAuthentication())
	obj["use_token_password"] = types.BoolPointerValue(tkh.GetUseTokenPassword())
	obj["vault_status"] = StringerToTF(tkh.GetVaultStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountStatus(recurse bool, tkh keyhubmodel.AuthAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountStatusAttrTypesRecurse
	} else {
		attrs = authAccountStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["decline_recovery_requests"] = types.BoolPointerValue(tkh.GetDeclineRecoveryRequests())
	obj["license_role"] = StringerToTF(tkh.GetLicenseRole())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["two_factor_authentication_enabled"] = types.BoolPointerValue(tkh.GetTwoFactorAuthenticationEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = authAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_login"] = types.BoolPointerValue(tkh.GetActiveLogin())
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectGroupAccountGroupLinkableWrapper(false, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectAuthAccountRecoveryStatus(false, tkh.GetPendingRecoveryRequests())
		diags.Append(d...)
		obj["pending_recovery_requests"] = val
	}
	{
		val, d := tkhToTFObjectAuthAccountSettings(false, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}
	{
		val, d := tkhToTFObjectAuthStoredAccountAttributes(false, tkh.GetStoredAttributes())
		diags.Append(d...)
		obj["stored_attributes"] = val
	}
	{
		val, d := tkhToTFObjectVaultVault(false, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountsAuditStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStatsAttrTypesRecurse
	} else {
		attrs = authAccountsAuditStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuthAccountsAuditStats_directoryStats(false, tkh.GetDirectoryStats())
		diags.Append(d...)
		obj["directory_stats"] = val
	}
	{
		val, d := tkhToTFObjectAuthAccountsAuditStats_twoFAStats(false, tkh.GetTwoFAStats())
		diags.Append(d...)
		obj["two_f_a_stats"] = val
	}
	{
		val, d := tkhToTFObjectAuthAccountsAuditStats_validityStats(false, tkh.GetValidityStats())
		diags.Append(d...)
		obj["validity_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountsAuditStats_directoryStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesRecurse
	} else {
		attrs = authAccountsAuditStats_directoryStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountsAuditStats_twoFAStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesRecurse
	} else {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthAccountsAuditStats_validityStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_validityStatsAttrTypesRecurse
	} else {
		attrs = authAccountsAuditStats_validityStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountAttrTypesRecurse
	} else {
		attrs = authInternalAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = StringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = StringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = StringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = StringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = TimePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthInternalAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthInternalAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = authInternalAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthInternalAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthInternalAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthInternalAccountStatusObject(recurse bool, tkh keyhubmodel.AuthInternalAccountStatusObjectable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountStatusObjectAttrTypesRecurse
	} else {
		attrs = authInternalAccountStatusObjectAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthInternalAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthInternalAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = authInternalAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["reason"] = types.StringPointerValue(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthMoveInternalAccount(recurse bool, tkh keyhubmodel.AuthMoveInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authMoveInternalAccountAttrTypesRecurse
	} else {
		attrs = authMoveInternalAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDirectoryInternalDirectory(false, tkh.GetInternalDirectory())
		diags.Append(d...)
		obj["internal_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesRecurse
	} else {
		attrs = authPermissionAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthStoredAccountAttribute(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributeable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributeAttrTypesRecurse
	} else {
		attrs = authStoredAccountAttributeAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectAuthStoredAccountAttributes(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributesAttrTypesRecurse
	} else {
		attrs = authStoredAccountAttributesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.AuthStoredAccountAttributeable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthStoredAccountAttribute(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectCertificateCertificate(recurse bool, tkh keyhubmodel.CertificateCertificateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateAttrTypesRecurse
	} else {
		attrs = certificateCertificateAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectCertificateCertificate_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = StringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = TimePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	{
		elemType := attrs["key_data"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetKeyData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["key_data"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectCertificateCertificateLinkableWrapper(recurse bool, tkh keyhubmodel.CertificateCertificateLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateLinkableWrapperAttrTypesRecurse
	} else {
		attrs = certificateCertificateLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.CertificateCertificateable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectCertificateCertificate(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = StringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = TimePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_d_n"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectCertificateCertificate_additionalObjects(recurse bool, tkh keyhubmodel.CertificateCertificate_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificate_additionalObjectsAttrTypesRecurse
	} else {
		attrs = certificateCertificate_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesRecurse
	} else {
		attrs = clientClientApplicationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = StringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientClientApplicationLinkableWrapper(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesRecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectClientClientApplication(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = StringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	{
		val, d := tkhToTFObjectGroupGroupClientLinkableWrapper(false, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupLinkableWrapper(false, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectGeneratedSecret(false, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectLaunchpadSsoApplicationLaunchpadTile(false, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesRecurse
	} else {
		attrs = clientLdapClientAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = StringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = WithUuidToTF(tkh.GetSharedSecret())
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = StringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		val, d := tkhToTFObjectClientOAuth2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_u_r_i"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["confidential"] = types.BoolPointerValue(tkh.GetConfidential())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_u_r_i"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["resource_u_r_is"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	obj["shared_secret_uuid"] = WithUuidToTF(tkh.GetSharedSecret())
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = WithUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = WithUuidToTF(tkh.GetForSystem())
	obj["value"] = StringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2ClientPermissionLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectClientOAuth2ClientPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["for_group_uuid"] = WithUuidToTF(tkh.GetForGroup())
	obj["for_system_uuid"] = WithUuidToTF(tkh.GetForSystem())
	obj["value"] = StringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectClientOAuth2ClientPermissionWithClient(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientOAuth2Client_attributes(recurse bool, tkh keyhubmodel.ClientOAuth2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2Client_attributesAttrTypesRecurse
	} else {
		attrs = clientOAuth2Client_attributesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesRecurse
	} else {
		attrs = clientSaml2ClientAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = StringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["last_modified_at"] = TimePointerToTF(tkh.GetLastModifiedAt())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	{
		val, d := tkhToTFObjectClientSaml2Client_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = StringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectClientSaml2Client_attributes(recurse bool, tkh keyhubmodel.ClientSaml2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2Client_attributesAttrTypesRecurse
	} else {
		attrs = clientSaml2Client_attributesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectory(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = WithUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = WithUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = StringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectoryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDirectoryAccountDirectory(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectoryPrimer(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectoryStatusReport(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectorySummary(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["directory_account_directory_summary_type"] = StringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDirectoryAccountDirectoryStatusReport(false, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDirectoryAccountDirectorySummary(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryAccountDirectory_additionalObjects(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesRecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectMarkItemMarkers(false, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDirectoryAccountDirectoryStatusReport(false, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryInternalDirectory(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesRecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = WithUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = WithUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = StringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryLDAPDirectory(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesRecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = WithUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = WithUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = StringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["dialect"] = StringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = WithUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = StringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetPort()))
	obj["search_bind_d_n"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = StringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = WithUuidToTF(tkh.GetTrustedCertificate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryMaintenanceDirectory(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesRecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = WithUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = WithUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = StringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDirectoryOIDCDirectory(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesRecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = StringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["base_organizational_unit_uuid"] = WithUuidToTF(tkh.GetBaseOrganizationalUnit())
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	obj["helpdesk_group_uuid"] = WithUuidToTF(tkh.GetHelpdeskGroup())
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = StringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = StringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupAttrTypesRecurse
	} else {
		attrs = groupAccountGroupAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = StringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = TimePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = StringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupAccountGroupLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupAccountGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroup_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupAccountGroup_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectVaultVault(false, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupAuthorizedGroupsWrapper(recurse bool, tkh keyhubmodel.GroupAuthorizedGroupsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAuthorizedGroupsWrapperAttrTypesRecurse
	} else {
		attrs = groupAuthorizedGroupsWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["group_count"] = types.Int64PointerValue(tkh.GetGroupCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesRecurse
	} else {
		attrs = groupGroupAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["auditor"] = types.BoolPointerValue(tkh.GetAuditor())
	obj["authorizing_group_auditing_uuid"] = WithUuidToTF(tkh.GetAuthorizingGroupAuditing())
	obj["authorizing_group_delegation_uuid"] = WithUuidToTF(tkh.GetAuthorizingGroupDelegation())
	obj["authorizing_group_membership_uuid"] = WithUuidToTF(tkh.GetAuthorizingGroupMembership())
	obj["authorizing_group_provisioning_uuid"] = WithUuidToTF(tkh.GetAuthorizingGroupProvisioning())
	{
		elemType := attrs["authorizing_group_types"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	obj["classification_uuid"] = WithUuidToTF(tkh.GetClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = StringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	obj["nested_under_uuid"] = WithUuidToTF(tkh.GetNestedUnder())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = StringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesRecurse
	} else {
		attrs = groupGroupAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	obj["last_used"] = StringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = TimePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = StringerToTF(tkh.GetRights())
	obj["two_factor_status"] = StringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAccountNesting(recurse bool, tkh keyhubmodel.GroupGroupAccountNestingable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountNestingAttrTypesRecurse
	} else {
		attrs = groupGroupAccountNestingAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["connected"] = types.BoolPointerValue(tkh.GetConnected())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAccountStatus(recurse bool, tkh keyhubmodel.GroupGroupAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountStatusAttrTypesRecurse
	} else {
		attrs = groupGroupAccountStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAdminMail(recurse bool, tkh keyhubmodel.GroupGroupAdminMailable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAdminMailAttrTypesRecurse
	} else {
		attrs = groupGroupAdminMailAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["body"] = types.StringPointerValue(tkh.GetBody())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAttrTypesRecurse
	} else {
		attrs = groupGroupAuditAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = TimePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = TimePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["submitted_at"] = TimePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAuditAccount(recurse bool, tkh keyhubmodel.GroupGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAccountAttrTypesRecurse
	} else {
		attrs = groupGroupAuditAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = StringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["last_used"] = StringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = StringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAuditLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupAuditLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupAudit(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAudit_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAudit_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroupAudit_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupAuditingInfo(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesRecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = StringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = StringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassification(recurse bool, tkh keyhubmodel.GroupGroupClassificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationAttrTypesRecurse
	} else {
		attrs = groupGroupClassificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroupClassification_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["authorizing_group_auditing_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupAuditingRequired())
	obj["authorizing_group_delegation_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupDelegationRequired())
	obj["authorizing_group_membership_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupMembershipRequired())
	obj["authorizing_group_provisioning_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupProvisioningRequired())
	obj["default_classification"] = types.BoolPointerValue(tkh.GetDefaultClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["maximum_audit_interval"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetMaximumAuditInterval()))
	obj["minimum_nr_managers"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetMinimumNrManagers()))
	obj["record_trail_required"] = types.BoolPointerValue(tkh.GetRecordTrailRequired())
	{
		elemType := attrs["required_months"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetRequiredMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["required_months"] = val
	}
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassificationInfo(recurse bool, tkh keyhubmodel.GroupGroupClassificationInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationInfoAttrTypesRecurse
	} else {
		attrs = groupGroupClassificationInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_groups"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrGroups()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassificationLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupClassificationLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupClassification(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassificationUpdate(recurse bool, tkh keyhubmodel.GroupGroupClassificationUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationUpdateAttrTypesRecurse
	} else {
		attrs = groupGroupClassificationUpdateAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["classificaton_uuid"] = WithUuidToTF(tkh.GetClassificaton())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClassification_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClassification_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassification_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroupClassification_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupClassificationInfo(false, tkh.GetInfo())
		diags.Append(d...)
		obj["info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesRecurse
	} else {
		attrs = groupGroupClientAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["client_uuid"] = WithUuidToTF(tkh.GetClient())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClientLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupClient(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupFolder(recurse bool, tkh keyhubmodel.GroupGroupFolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderAttrTypesRecurse
	} else {
		attrs = groupGroupFolderAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupGroupFolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupFolderLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupFolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupFolderLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupFolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupFolder(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupFolder_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupFolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolder_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroupFolder_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupInfo(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesRecurse
	} else {
		attrs = groupGroupInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesRecurse
	} else {
		attrs = groupGroupPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupSegmentedLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	{
		elemType := attrs["segments"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetSegments(), func(tkh keyhubmodel.SegmentCountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectSegmentCount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["segments"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectGroupGroupAccountLinkableWrapper(false, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = val
	}
	{
		val, d := tkhToTFObjectClientClientApplicationLinkableWrapper(false, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningProvisionedSystemLinkableWrapper(false, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupAccountLinkableWrapper(false, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectGroupAuthorizedGroupsWrapper(false, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = val
	}
	{
		val, d := tkhToTFObjectClientOAuth2ClientPermissionWithClientLinkableWrapper(false, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupClientLinkableWrapper(false, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningProvisionedSystemLinkableWrapper(false, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupAuditingInfo(false, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupInfo(false, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectDirectoryAccountDirectorySummaryLinkableWrapper(false, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = val
	}
	{
		val, d := tkhToTFObjectMarkItemMarkers(false, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupAccount(false, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupAccount(false, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupPrimerLinkableWrapper(false, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	{
		val, d := tkhToTFObjectClientClientApplicationLinkableWrapper(false, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = val
	}
	{
		val, d := tkhToTFObjectDirectoryAccountDirectoryLinkableWrapper(false, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningOwnedGroupOnSystemsWrapper(false, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectOrganizationOrganizationalUnitLinkableWrapper(false, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningProvisionedSystemLinkableWrapper(false, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroupAuditLinkableWrapper(false, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = val
	}
	obj["requeststatus"] = StringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectServiceaccountServiceAccountLinkableWrapper(false, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}
	{
		val, d := tkhToTFObjectGroupProvisioningGroupLinkableWrapper(false, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}
	{
		val, d := tkhToTFObjectVaultVault(false, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectWebhookWebhookLinkableWrapper(false, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupGroupsAuditStats(recurse bool, tkh keyhubmodel.GroupGroupsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupsAuditStatsAttrTypesRecurse
	} else {
		attrs = groupGroupsAuditStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audited_groups"] = types.Int64PointerValue(tkh.GetAuditedGroups())
	{
		elemType := attrs["classifications"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetClassifications(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupGroupClassification(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["classifications"] = val
	}
	obj["overdue_audit_groups"] = types.Int64PointerValue(tkh.GetOverdueAuditGroups())
	obj["overdue_vault_policies"] = types.Int64PointerValue(tkh.GetOverdueVaultPolicies())
	obj["unaudited_groups"] = types.Int64PointerValue(tkh.GetUnauditedGroups())
	obj["valid_vault_policies"] = types.Int64PointerValue(tkh.GetValidVaultPolicies())
	obj["vaults_without_policies"] = types.Int64PointerValue(tkh.GetVaultsWithoutPolicies())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupProvisioningGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectGroupProvisioningGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadDisplayedLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTileAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetIdenticonCode()))
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectLaunchpadLaunchpadTilePrimer(false, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadDisplayedLaunchpadTiles(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectLaunchpadDisplayedLaunchpadTile(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileAttrTypesRecurse
	} else {
		attrs = launchpadLaunchpadTileAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = StringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = WithUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadLaunchpadTileLinkableWrapper(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesRecurse
	} else {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectLaunchpadLaunchpadTile(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadLaunchpadTilePrimer(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTilePrimerAttrTypesRecurse
	} else {
		attrs = launchpadLaunchpadTilePrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadLaunchpadTile_additionalObjects(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesRecurse
	} else {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadManualLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadManualLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadManualLaunchpadTileAttrTypesRecurse
	} else {
		attrs = launchpadManualLaunchpadTileAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = StringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = WithUuidToTF(tkh.GetVaultRecord())
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = StringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = WithUuidToTF(tkh.GetVaultRecord())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["identicon_code"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = StringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	obj["vault_record_uuid"] = WithUuidToTF(tkh.GetVaultRecord())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectLicenseKeyHubLicenseInfo(recurse bool, tkh keyhubmodel.LicenseKeyHubLicenseInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = licenseKeyHubLicenseInfoAttrTypesRecurse
	} else {
		attrs = licenseKeyHubLicenseInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["current_license_status"] = StringerToTF(tkh.GetCurrentLicenseStatus())
	obj["customer_company"] = types.StringPointerValue(tkh.GetCustomerCompany())
	obj["customer_contact"] = types.StringPointerValue(tkh.GetCustomerContact())
	{
		elemType := attrs["customer_domains"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetCustomerDomains(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["customer_domains"] = val
	}
	{
		elemType := attrs["details"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["details"] = val
	}
	obj["expiration_time"] = TimePointerToTF(tkh.GetExpirationTime())
	{
		elemType := attrs["features"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetFeatures(), func(tkh keyhubmodel.LicenseLicenseFeature, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["features"] = val
	}
	obj["issue_time"] = TimePointerToTF(tkh.GetIssueTime())
	obj["key_hub_domain"] = types.StringPointerValue(tkh.GetKeyHubDomain())
	obj["license_key"] = types.StringPointerValue(tkh.GetLicenseKey())
	obj["not_before_time"] = TimePointerToTF(tkh.GetNotBeforeTime())
	obj["users_hard_limit"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetUsersHardLimit()))
	obj["users_pro_limit"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetUsersProLimit()))
	obj["users_soft_limit"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetUsersSoftLimit()))
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["version"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetVersion()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectMarkItemMarker(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesRecurse
	} else {
		attrs = markItemMarkerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = StringerToTF(tkh.GetLevel())
	obj["mark_item_marker_type"] = StringerToTF(tkh.GetMarkItemMarkerType())
	{
		val, d := tkhToTFObjectMarkItemMarker_parameters(false, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectMarkItemMarker_parameters(recurse bool, tkh keyhubmodel.MarkItemMarker_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarker_parametersAttrTypesRecurse
	} else {
		attrs = markItemMarker_parametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectMarkItemMarkers(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesRecurse
	} else {
		attrs = markItemMarkersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectMarkItemMarker(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationCertificateExpiredNotification(recurse bool, tkh keyhubmodel.NotificationCertificateExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationCertificateExpiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationCertificateExpiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectCertificateCertificate(false, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectDirectoryLDAPDirectory(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["expiration"] = TimePointerToTF(tkh.GetExpiration())
	{
		val, d := tkhToTFObjectClientLdapClient(false, tkh.GetLdapClient())
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningProvisionedSystem(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["usage"] = StringerToTF(tkh.GetUsage())
	obj["webhook_uuid"] = WithUuidToTF(tkh.GetWebhook())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationGroupAuditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationGroupAuditRequiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["due_date"] = TimePointerToTF(tkh.GetDueDate())
	{
		val, d := tkhToTFObjectGroupGroup(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["notification_group_audit_required_notification_type"] = StringerToTF(tkh.GetNotificationGroupAuditRequiredNotificationType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationGroupEditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationGroupEditRequiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectGroupGroup(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectNotificationGroupEditRequiredNotification_parameters(false, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}
	obj["reason"] = StringerToTF(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationGroupEditRequiredNotification_parameters(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesRecurse
	} else {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationInvalidSignaturesDetectedNotification(recurse bool, tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesRecurse
	} else {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationLicenseStatusNotification(recurse bool, tkh keyhubmodel.NotificationLicenseStatusNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationLicenseStatusNotificationAttrTypesRecurse
	} else {
		attrs = notificationLicenseStatusNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_accounts"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetActiveAccounts()))
	obj["license_info_uuid"] = WithUuidToTF(tkh.GetLicenseInfo())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationModificationRequestNotification(recurse bool, tkh keyhubmodel.NotificationModificationRequestNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationModificationRequestNotificationAttrTypesRecurse
	} else {
		attrs = notificationModificationRequestNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["admins"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetAdmins(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetGroups(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectRequestModificationRequest(false, tkh.GetRequest())
		diags.Append(d...)
		obj["request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationNotification(recurse bool, tkh keyhubmodel.NotificationNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationAttrTypesRecurse
	} else {
		attrs = notificationNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationNotifications(recurse bool, tkh keyhubmodel.NotificationNotificationsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationsAttrTypesRecurse
	} else {
		attrs = notificationNotificationsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.NotificationNotificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectNotificationNotification(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationOldApiVersionUsageNotification(recurse bool, tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesRecurse
	} else {
		attrs = notificationOldApiVersionUsageNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["api_version"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetApiVersion()))
	{
		val, d := tkhToTFObjectClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationProvisionConfigRequiredNotification(recurse bool, tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["systems"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetSystems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationRotatingPasswordRequiredNotification(recurse bool, tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationUpdateAvailableNotification(recurse bool, tkh keyhubmodel.NotificationUpdateAvailableNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationUpdateAvailableNotificationAttrTypesRecurse
	} else {
		attrs = notificationUpdateAvailableNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["released_at"] = StringerToTF(tkh.GetReleasedAt())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectNotificationVaultRecordExpiredNotification(recurse bool, tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesRecurse
	} else {
		attrs = notificationVaultRecordExpiredNotificationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectVaultVaultRecord(false, tkh.GetRecord())
		diags.Append(d...)
		obj["record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitAttrTypesRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationAccountOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectOrganizationAccountOrganizationalUnit(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesRecurse
	} else {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectOrganizationOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["depth"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["parent_uuid"] = WithUuidToTF(tkh.GetParent())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectOrganizationOrganizationalUnitAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectOrganizationOrganizationalUnit(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectOrganizationOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesRecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectOrganizationOrganizationalUnitPrimerLinkableWrapper(false, tkh.GetCreateAsParentOf())
		diags.Append(d...)
		obj["create_as_parent_of"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningAbstractProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = WithUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = StringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = WithUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningAbstractProvisionedLDAP_attributes(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningAccountProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusAttrTypesRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["result"] = StringerToTF(tkh.GetResult())
	{
		val, d := tkhToTFObjectGroupProvisioningGroup(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningAccountProvisioningStatusReport(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusReportAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["status"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetStatus(), func(tkh keyhubmodel.ProvisioningAccountProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningAccountProvisioningStatus(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningCircuitBreakerStatistics(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesRecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = StringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesRecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = StringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupOnSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = StringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupOnSystemTypes(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesRecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectGroupProvisioningGroupLinkableWrapper(false, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = val
	}
	{
		val, d := tkhToTFObjectServiceaccountServiceAccountPrimerLinkableWrapper(false, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatusAttrTypesRecurse
	} else {
		attrs = provisioningGroupProvisioningStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	{
		val, d := tkhToTFObjectGroupGroup(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningGroupProvisioningStatus_provisioningDuration(false, tkh.GetProvisioningDuration())
		diags.Append(d...)
		obj["provisioning_duration"] = val
	}
	obj["provisioning_end_time"] = TimePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = TimePointerToTF(tkh.GetProvisioningPermissionEndTime())
	{
		val, d := tkhToTFObjectProvisioningAccountProvisioningStatusReport(false, tkh.GetStatusReport())
		diags.Append(d...)
		obj["status_report"] = val
	}
	obj["visible_on_dashboard"] = types.BoolPointerValue(tkh.GetVisibleOnDashboard())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesRecurse
	} else {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningOwnedGroupOnSystemsWrapper(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesRecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionNumberSequence(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionNumberSequence_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_u_i_d"] = types.Int64PointerValue(tkh.GetNextUID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionNumberSequenceable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningProvisionNumberSequence(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionNumberSequence_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesRecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningProvisionedSystemPrimerLinkableWrapper(false, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAD(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedADAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = WithUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = StringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = WithUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["sam_account_name_scheme"] = StringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = TimePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = StringerToTF(tkh.GetValidity())
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningProvisionedAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAccount_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAzureOIDCDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedAzureTenant(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedInternalLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectClientLdapClient(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		val, d := tkhToTFObjectProvisioningAbstractProvisionedLDAP_attributes(false, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_d_n"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_d_n"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	obj["failover_trusted_certificate_uuid"] = WithUuidToTF(tkh.GetFailoverTrustedCertificate())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetPort()))
	obj["service_account_d_n"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = StringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = WithUuidToTF(tkh.GetTrustedCertificate())
	obj["user_d_n"] = types.StringPointerValue(tkh.GetUserDN())
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	obj["hashing_scheme"] = StringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectProvisioningProvisionNumberSequence(false, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["group_d_n"] = types.StringPointerValue(tkh.GetGroupDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystem(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["account_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetAccountCount()))
	obj["content_administrator_uuid"] = WithUuidToTF(tkh.GetContentAdministrator())
	obj["external_uuid"] = StringerToTF(tkh.GetExternalUuid())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["owner_uuid"] = WithUuidToTF(tkh.GetOwner())
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningProvisionedSystem(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["provisioning_provisioned_system_primer_type"] = StringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["created_at"] = TimePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningProvisionedSystemSyncLog(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisionedSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesRecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectProvisioningProvisionedAccount(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectClientOAuth2ClientPermissionWithClientLinkableWrapper(false, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = val
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectProvisioningProvisioningManagementPermissions(false, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectMarkItemMarkers(false, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningCircuitBreakerStatistics(false, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystemTypes(false, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisioningManagementPermissions(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesRecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningStatusAttrTypesRecurse
	} else {
		attrs = provisioningProvisioningStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.ProvisioningGroupProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectProvisioningGroupProvisioningStatus(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	obj["ignore_errors"] = types.BoolPointerValue(tkh.GetIgnoreErrors())
	obj["restricted_by_license"] = types.BoolPointerValue(tkh.GetRestrictedByLicense())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectProvisioningTokenPassword(recurse bool, tkh keyhubmodel.ProvisioningTokenPasswordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningTokenPasswordAttrTypesRecurse
	} else {
		attrs = provisioningTokenPasswordAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAbstractApplicationModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractApplicationModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractApplicationModificationRequestAttrTypesRecurse
	} else {
		attrs = requestAbstractApplicationModificationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAbstractOrganizationalUnitModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesRecurse
	} else {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAbstractProvisionedSystemModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesRecurse
	} else {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAcceptGrantAccessRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRequestAcceptGrantAccessRequestParameters_accessDuration(false, tkh.GetAccessDuration())
		diags.Append(d...)
		obj["access_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAcceptJoinGroupRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesRecurse
	} else {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	obj["make_manager"] = types.BoolPointerValue(tkh.GetMakeManager())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAcceptModificationRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptModificationRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptModificationRequestParametersAttrTypesRecurse
	} else {
		attrs = requestAcceptModificationRequestParametersAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestAddGroupAdminRequest(recurse bool, tkh keyhubmodel.RequestAddGroupAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAddGroupAdminRequestAttrTypesRecurse
	} else {
		attrs = requestAddGroupAdminRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["new_admin_uuid"] = WithUuidToTF(tkh.GetNewAdmin())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestCreateGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupOnSystemRequestAttrTypesRecurse
	} else {
		attrs = requestCreateGroupOnSystemRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_on_system_type"] = StringerToTF(tkh.GetGroupOnSystemType())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestCreateGroupRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupRequestAttrTypesRecurse
	} else {
		attrs = requestCreateGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestCreateServiceAccountRequest(recurse bool, tkh keyhubmodel.RequestCreateServiceAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateServiceAccountRequestAttrTypesRecurse
	} else {
		attrs = requestCreateServiceAccountRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestDisable2FARequest(recurse bool, tkh keyhubmodel.RequestDisable2FARequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestDisable2FARequestAttrTypesRecurse
	} else {
		attrs = requestDisable2FARequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["subject"] = types.StringPointerValue(tkh.GetSubject())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestEnableTechnicalAdministrationRequest(recurse bool, tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesRecurse
	} else {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestExtendAccessRequest(recurse bool, tkh keyhubmodel.RequestExtendAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestExtendAccessRequestAttrTypesRecurse
	} else {
		attrs = requestExtendAccessRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["extend_until"] = TimePointerToTF(tkh.GetExtendUntil())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantAccessRequest(recurse bool, tkh keyhubmodel.RequestGrantAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantAccessRequestAttrTypesRecurse
	} else {
		attrs = requestGrantAccessRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantApplicationRequest(recurse bool, tkh keyhubmodel.RequestGrantApplicationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantApplicationRequestAttrTypesRecurse
	} else {
		attrs = requestGrantApplicationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantClientPermissionRequest(recurse bool, tkh keyhubmodel.RequestGrantClientPermissionRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantClientPermissionRequestAttrTypesRecurse
	} else {
		attrs = requestGrantClientPermissionRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())
	obj["permission_type"] = StringerToTF(tkh.GetPermissionType())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestAttrTypesRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantGroupOnSystemRequestRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestGrantServiceAccountGroupRequest(recurse bool, tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesRecurse
	} else {
		attrs = requestGrantServiceAccountGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}
	obj["service_account_uuid"] = WithUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestJoinGroupRequest(recurse bool, tkh keyhubmodel.RequestJoinGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinGroupRequestAttrTypesRecurse
	} else {
		attrs = requestJoinGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestJoinVaultRequest(recurse bool, tkh keyhubmodel.RequestJoinVaultRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinVaultRequestAttrTypesRecurse
	} else {
		attrs = requestJoinVaultRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestModificationRequest(recurse bool, tkh keyhubmodel.RequestModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestAttrTypesRecurse
	} else {
		attrs = requestModificationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestModificationRequestLinkableWrapper(recurse bool, tkh keyhubmodel.RequestModificationRequestLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestLinkableWrapperAttrTypesRecurse
	} else {
		attrs = requestModificationRequestLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.RequestModificationRequestable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRequestModificationRequest(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestModificationRequest_additionalObjects(recurse bool, tkh keyhubmodel.RequestModificationRequest_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequest_additionalObjectsAttrTypesRecurse
	} else {
		attrs = requestModificationRequest_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectRequestAcceptModificationRequestParameters(false, tkh.GetAcceptParams())
		diags.Append(d...)
		obj["accept_params"] = val
	}
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectRequestPasswordResetRequestStatus(false, tkh.GetResetStatus())
		diags.Append(d...)
		obj["reset_status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestPasswordResetRequest(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestAttrTypesRecurse
	} else {
		attrs = requestPasswordResetRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["new_vault_and_directory_password"] = types.StringPointerValue(tkh.GetNewVaultAndDirectoryPassword())
	obj["new_vault_password"] = types.StringPointerValue(tkh.GetNewVaultPassword())
	obj["unsynced_password"] = types.BoolPointerValue(tkh.GetUnsyncedPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestPasswordResetRequestStatus(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestStatusAttrTypesRecurse
	} else {
		attrs = requestPasswordResetRequestStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["cooldown_end"] = TimePointerToTF(tkh.GetCooldownEnd())
	{
		elemType := attrs["managers"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetManagers(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["managers"] = val
	}
	obj["nr_accepted"] = types.Int64PointerValue(tkh.GetNrAccepted())
	obj["reset_via_mail"] = StringerToTF(tkh.GetResetViaMail())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestRemoveGroupRequest(recurse bool, tkh keyhubmodel.RequestRemoveGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveGroupRequestAttrTypesRecurse
	} else {
		attrs = requestRemoveGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestRemoveOrganizationalUnitRequest(recurse bool, tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesRecurse
	} else {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["organizational_unit_name"] = types.StringPointerValue(tkh.GetOrganizationalUnitName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestRemoveProvisionedSystemRequest(recurse bool, tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesRecurse
	} else {
		attrs = requestRemoveProvisionedSystemRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["system_name"] = types.StringPointerValue(tkh.GetSystemName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestReviewAuditRequest(recurse bool, tkh keyhubmodel.RequestReviewAuditRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestReviewAuditRequestAttrTypesRecurse
	} else {
		attrs = requestReviewAuditRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestRevokeAdminRequest(recurse bool, tkh keyhubmodel.RequestRevokeAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRevokeAdminRequestAttrTypesRecurse
	} else {
		attrs = requestRevokeAdminRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["admin_uuid"] = WithUuidToTF(tkh.GetAdmin())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestSetupAuthorizingGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesRecurse
	} else {
		attrs = requestSetupAuthorizingGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["authorizing_group_type"] = StringerToTF(tkh.GetAuthorizingGroupType())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = WithUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestSetupNestedGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupNestedGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupNestedGroupRequestAttrTypesRecurse
	} else {
		attrs = requestSetupNestedGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["account_action"] = StringerToTF(tkh.GetAccountAction())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	obj["requesting_group_uuid"] = WithUuidToTF(tkh.GetRequestingGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferApplicationAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesRecurse
	} else {
		attrs = requestTransferApplicationAdministrationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferApplicationOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesRecurse
	} else {
		attrs = requestTransferApplicationOwnershipRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["application_uuid"] = WithUuidToTF(tkh.GetApplication())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferAuditorGroupRequest(recurse bool, tkh keyhubmodel.RequestTransferAuditorGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferAuditorGroupRequestAttrTypesRecurse
	} else {
		attrs = requestTransferAuditorGroupRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferGroupOnSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesRecurse
	} else {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	{
		val, d := tkhToTFObjectProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferOrganizationalUnitOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesRecurse
	} else {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferProvisionedSystemAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesRecurse
	} else {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesRecurse
	} else {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferProvisionedSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesRecurse
	} else {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestTransferServiceAccountAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesRecurse
	} else {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["service_account_uuid"] = WithUuidToTF(tkh.GetServiceAccount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestUpdateGroupMembershipRequest(recurse bool, tkh keyhubmodel.RequestUpdateGroupMembershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestUpdateGroupMembershipRequestAttrTypesRecurse
	} else {
		attrs = requestUpdateGroupMembershipRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["account_to_update_uuid"] = WithUuidToTF(tkh.GetAccountToUpdate())
	obj["current_end_date"] = StringerToTF(tkh.GetCurrentEndDate())
	obj["current_rights"] = StringerToTF(tkh.GetCurrentRights())
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	obj["rights"] = StringerToTF(tkh.GetRights())
	obj["update_group_membership_type"] = StringerToTF(tkh.GetUpdateGroupMembershipType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectRequestVerifyInternalAccountRequest(recurse bool, tkh keyhubmodel.RequestVerifyInternalAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestVerifyInternalAccountRequestAttrTypesRecurse
	} else {
		attrs = requestVerifyInternalAccountRequestAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = StringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = StringerToTF(tkh.GetStatus())
	obj["internal_account_name"] = types.StringPointerValue(tkh.GetInternalAccountName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["password_uuid"] = WithUuidToTF(tkh.GetPassword())
	obj["password_rotation"] = StringerToTF(tkh.GetPasswordRotation())
	obj["technical_administrator_uuid"] = WithUuidToTF(tkh.GetTechnicalAdministrator())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = StringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectServiceaccountServiceAccountGroup(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectServiceaccountServiceAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountStatus(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountStatusAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountStatusAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectServiceaccountServiceAccountGroupLinkableWrapper(false, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectGeneratedSecret(false, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountsAuditStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["disabled_count"] = types.Int64PointerValue(tkh.GetDisabledCount())
	{
		val, d := tkhToTFObjectServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(false, tkh.GetPasswordSchemeEnabledStats())
		diags.Append(d...)
		obj["password_scheme_enabled_stats"] = val
	}
	{
		val, d := tkhToTFObjectServiceaccountServiceAccountsAuditStats_systemStats(false, tkh.GetSystemStats())
		diags.Append(d...)
		obj["system_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectServiceaccountServiceAccountsAuditStats_systemStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectSimpleStringValue(recurse bool, tkh keyhubmodel.SimpleStringValueable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleStringValueAttrTypesRecurse
	} else {
		attrs = simpleStringValueAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectSimpleVersionInfo(recurse bool, tkh keyhubmodel.SimpleVersionInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleVersionInfoAttrTypesRecurse
	} else {
		attrs = simpleVersionInfoAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["contract_versions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetContractVersions(), func(tkh int32, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(int64(tkh))
		})
		diags.Append(d...)
		obj["contract_versions"] = val
	}
	obj["key_hub_version"] = types.StringPointerValue(tkh.GetKeyHubVersion())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultDeletedVaultHolder(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderAttrTypesRecurse
	} else {
		attrs = vaultDeletedVaultHolderAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectVaultDeletedVaultHolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["record_count"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetRecordCount()))
	obj["vault_deleted_vault_holder_type"] = StringerToTF(tkh.GetVaultDeletedVaultHolderType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultDeletedVaultHolderLinkableWrapper(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesRecurse
	} else {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultDeletedVaultHolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectVaultDeletedVaultHolder(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultDeletedVaultHolder_additionalObjects(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesRecurse
	} else {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectVaultVault(false, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultDeletedVaultRecovery(recurse bool, tkh keyhubmodel.VaultDeletedVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultRecoveryAttrTypesRecurse
	} else {
		attrs = vaultDeletedVaultRecoveryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["prefix"] = types.StringPointerValue(tkh.GetPrefix())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())
	obj["target_group_uuid"] = WithUuidToTF(tkh.GetTargetGroup())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultMoveVaultRecord(recurse bool, tkh keyhubmodel.VaultMoveVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecordAttrTypesRecurse
	} else {
		attrs = vaultMoveVaultRecordAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["action"] = StringerToTF(tkh.GetAction())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	{
		val, d := tkhToTFObjectVaultMoveVaultRecord_shareDuration(false, tkh.GetShareDuration())
		diags.Append(d...)
		obj["share_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultMoveVaultRecord_shareDuration(recurse bool, tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesRecurse
	} else {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVault(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesRecurse
	} else {
		attrs = vaultVaultAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectVaultVaultRecord(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultHolder(recurse bool, tkh keyhubmodel.VaultVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultHolderAttrTypesRecurse
	} else {
		attrs = vaultVaultHolderAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = StringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = TimePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = StringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = StringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectVaultVaultRecord(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = StringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = TimePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())
	obj["write_totp"] = types.BoolPointerValue(tkh.GetWriteTotp())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordShare(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["vault_vault_record_share_type"] = StringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecordShareSummary(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesRecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectVaultVaultRecordShare(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectVaultVaultRecordShare(false, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	obj["delete_tile"] = types.BoolPointerValue(tkh.GetDeleteTile())
	obj["parent_uuid"] = WithUuidToTF(tkh.GetParent())
	{
		val, d := tkhToTFObjectVaultVaultRecordSecrets(false, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectVaultVaultRecordShareSummary(false, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectVaultVaultRecordPrimerLinkableWrapper(false, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = val
	}
	{
		val, d := tkhToTFObjectLaunchpadVaultRecordLaunchpadTile(false, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectVaultVaultHolder(false, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultRecovery(recurse bool, tkh keyhubmodel.VaultVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecoveryAttrTypesRecurse
	} else {
		attrs = vaultVaultRecoveryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultUnlock(recurse bool, tkh keyhubmodel.VaultVaultUnlockable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockAttrTypesRecurse
	} else {
		attrs = vaultVaultUnlockAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectVaultVaultUnlockResponse(recurse bool, tkh keyhubmodel.VaultVaultUnlockResponseable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockResponseAttrTypesRecurse
	} else {
		attrs = vaultVaultUnlockResponseAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["expires_at"] = TimePointerToTF(tkh.GetExpiresAt())
	obj["session_password"] = types.StringPointerValue(tkh.GetSessionPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhook(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesRecurse
	} else {
		attrs = webhookWebhookAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectWebhookWebhook_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = StringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	obj["client_uuid"] = WithUuidToTF(tkh.GetClient())
	obj["client_certificate_uuid"] = WithUuidToTF(tkh.GetClientCertificate())
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["tls"] = StringerToTF(tkh.GetTls())
	obj["trusted_certificate_uuid"] = WithUuidToTF(tkh.GetTrustedCertificate())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryAttrTypesRecurse
	} else {
		attrs = webhookWebhookDeliveryAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectRestLink(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(Int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = TimePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookDeliveryLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesRecurse
	} else {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookDeliveryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectWebhookWebhookDelivery(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookDelivery_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesRecurse
	} else {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesRecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := SliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			return WithUuidToTF(tkh)
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookNameUuid(recurse bool, tkh keyhubmodel.WebhookWebhookNameUuidable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookNameUuidAttrTypesRecurse
	} else {
		attrs = webhookWebhookNameUuidAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectLinkable(false, tkh.GetObject())
		diags.Append(d...)
		obj["object"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhookPush(recurse bool, tkh keyhubmodel.WebhookWebhookPushable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookPushAttrTypesRecurse
	} else {
		attrs = webhookWebhookPushAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_uuid"] = WithUuidToTF(tkh.GetAccount())
	obj["by_party_uuid"] = WithUuidToTF(tkh.GetByParty())
	obj["certificate_uuid"] = WithUuidToTF(tkh.GetCertificate())
	obj["client_uuid"] = WithUuidToTF(tkh.GetClient())
	obj["directory_uuid"] = WithUuidToTF(tkh.GetDirectory())
	obj["group_uuid"] = WithUuidToTF(tkh.GetGroup())
	obj["group2_uuid"] = WithUuidToTF(tkh.GetGroup2())
	obj["group_classification_uuid"] = WithUuidToTF(tkh.GetGroupClassification())
	obj["modification_request_uuid"] = WithUuidToTF(tkh.GetModificationRequest())
	obj["organizational_unit_uuid"] = WithUuidToTF(tkh.GetOrganizationalUnit())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["security_level"] = StringerToTF(tkh.GetSecurityLevel())
	obj["seq"] = types.Int64PointerValue(tkh.GetSeq())
	obj["service_account_uuid"] = WithUuidToTF(tkh.GetServiceAccount())
	obj["system_uuid"] = WithUuidToTF(tkh.GetSystem())
	obj["timestamp"] = TimePointerToTF(tkh.GetTimestamp())
	obj["vault_record_uuid"] = WithUuidToTF(tkh.GetVaultRecord())
	obj["webhook_uuid"] = WithUuidToTF(tkh.GetWebhook())
	obj["webhook_webhook_push_type"] = StringerToTF(tkh.GetWebhookWebhookPushType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectWebhookWebhook_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesRecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypes
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectAuditInfo(false, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func fillDataStructFromTFObjectAuditInfo(data *AuditInfoData, obj types.Object) {
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LastModifiedBy = obj.Attributes()["last_modified_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectErrorReport(data *ErrorReportData, obj types.Object) {
	data.ApplicationError = obj.Attributes()["application_error"].(basetypes.StringValue)
	data.ApplicationErrorParameters = obj.Attributes()["application_error_parameters"].(basetypes.ObjectValue)
	data.Code = obj.Attributes()["code"].(basetypes.Int64Value)
	data.ErrorDetails = obj.Attributes()["error_details"].(basetypes.ListValue)
	data.Exception = obj.Attributes()["exception"].(basetypes.StringValue)
	data.Message = obj.Attributes()["message"].(basetypes.StringValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Stacktrace = obj.Attributes()["stacktrace"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectErrorReport_applicationErrorParameters(data *ErrorReport_applicationErrorParametersData, obj types.Object) {
}

func fillDataStructFromTFObjectGeneratedSecret(data *GeneratedSecretData, obj types.Object) {
	data.GeneratedSecret = obj.Attributes()["generated_secret"].(basetypes.StringValue)
	data.OldSecret = obj.Attributes()["old_secret"].(basetypes.StringValue)
	data.Regenerate = obj.Attributes()["regenerate"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectLinkable(data *LinkableData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectNonLinkable(data *NonLinkableData, obj types.Object) {
}

func fillDataStructFromTFObjectRestLink(data *RestLinkData, obj types.Object) {
	data.Href = obj.Attributes()["href"].(basetypes.StringValue)
	data.ID = obj.Attributes()["id"].(basetypes.Int64Value)
	data.Rel = obj.Attributes()["rel"].(basetypes.StringValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectSegmentCount(data *SegmentCountData, obj types.Object) {
	data.Count = obj.Attributes()["count"].(basetypes.Int64Value)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuditAuditRecord(data *auditAuditRecordData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuditAuditRecordType = obj.Attributes()["audit_audit_record_type"].(basetypes.StringValue)
	data.DateTime = obj.Attributes()["date_time"].(basetypes.StringValue)
	data.OnAccount = obj.Attributes()["on_account"].(basetypes.StringValue)
	data.OnCertificate = obj.Attributes()["on_certificate"].(basetypes.StringValue)
	data.OnClient = obj.Attributes()["on_client"].(basetypes.StringValue)
	data.OnDirectory = obj.Attributes()["on_directory"].(basetypes.StringValue)
	data.OnGroup = obj.Attributes()["on_group"].(basetypes.StringValue)
	data.OnGroup2 = obj.Attributes()["on_group2"].(basetypes.StringValue)
	data.OnGroupClassification = obj.Attributes()["on_group_classification"].(basetypes.StringValue)
	data.OnOrganizationalUnit = obj.Attributes()["on_organizational_unit"].(basetypes.StringValue)
	data.OnServiceAccount = obj.Attributes()["on_service_account"].(basetypes.StringValue)
	data.OnSystem = obj.Attributes()["on_system"].(basetypes.StringValue)
	data.OnVaultRecord = obj.Attributes()["on_vault_record"].(basetypes.StringValue)
	data.OnWebhook = obj.Attributes()["on_webhook"].(basetypes.StringValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.PerformedBy = obj.Attributes()["performed_by"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuditAuditRecordLinkableWrapper(data *auditAuditRecordLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectAuditAuditRecord_additionalObjects(data *auditAuditRecord_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectAuthAccount(data *authAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryPasswordChangeRequired = obj.Attributes()["directory_password_change_required"].(basetypes.BoolValue)
	data.DirectoryRotatingPassword = obj.Attributes()["directory_rotating_password"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.Email = obj.Attributes()["email"].(basetypes.StringValue)
	data.IDInDirectory = obj.Attributes()["id_in_directory"].(basetypes.StringValue)
	data.KeyHubPasswordChangeRequired = obj.Attributes()["key_hub_password_change_required"].(basetypes.BoolValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TokenPasswordEnabled = obj.Attributes()["token_password_enabled"].(basetypes.BoolValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.ValidInDirectory = obj.Attributes()["valid_in_directory"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectAuthAccountBulkUpdate(data *authAccountBulkUpdateData, obj types.Object) {
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.ExclusiveSelection = obj.Attributes()["exclusive_selection"].(basetypes.BoolValue)
	data.SelectedAccounts = obj.Attributes()["selected_accounts"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectAuthAccountChangeLocale(data *authAccountChangeLocaleData, obj types.Object) {
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthAccountLinkableWrapper(data *authAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectAuthAccountPrimer(data *authAccountPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthAccountRecoveryStatus(data *authAccountRecoveryStatusData, obj types.Object) {
	data.Pending2FARecoveryRequest = obj.Attributes()["pending2_f_a_recovery_request"].(basetypes.BoolValue)
	data.PendingPasswordRecoveryRequest = obj.Attributes()["pending_password_recovery_request"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectAuthAccountSettings(data *authAccountSettingsData, obj types.Object) {
	data.DefaultOrganizationalUnitUUID = obj.Attributes()["default_organizational_unit_uuid"].(basetypes.StringValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.InGroups = obj.Attributes()["in_groups"].(basetypes.BoolValue)
	data.InMultipleOrganizationalUnits = obj.Attributes()["in_multiple_organizational_units"].(basetypes.BoolValue)
	data.KeyHubAdmin = obj.Attributes()["key_hub_admin"].(basetypes.BoolValue)
	data.MultipleOrganizationalUnitsExist = obj.Attributes()["multiple_organizational_units_exist"].(basetypes.BoolValue)
	data.PasswordMode = obj.Attributes()["password_mode"].(basetypes.StringValue)
	data.SshPublicKey = obj.Attributes()["ssh_public_key"].(basetypes.StringValue)
	data.TwoFactorAuthentication = obj.Attributes()["two_factor_authentication"].(basetypes.StringValue)
	data.UseTokenPassword = obj.Attributes()["use_token_password"].(basetypes.BoolValue)
	data.VaultStatus = obj.Attributes()["vault_status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthAccountStatus(data *authAccountStatusData, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DeclineRecoveryRequests = obj.Attributes()["decline_recovery_requests"].(basetypes.BoolValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TwoFactorAuthenticationEnabled = obj.Attributes()["two_factor_authentication_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectAuthAccount_additionalObjects(data *authAccount_additionalObjectsData, obj types.Object) {
	data.ActiveLogin = obj.Attributes()["active_login"].(basetypes.BoolValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.PendingRecoveryRequests = obj.Attributes()["pending_recovery_requests"].(basetypes.ObjectValue)
	data.Settings = obj.Attributes()["settings"].(basetypes.ObjectValue)
	data.StoredAttributes = obj.Attributes()["stored_attributes"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectAuthAccountsAuditStats(data *authAccountsAuditStatsData, obj types.Object) {
	data.DirectoryStats = obj.Attributes()["directory_stats"].(basetypes.ObjectValue)
	data.TwoFAStats = obj.Attributes()["two_f_a_stats"].(basetypes.ObjectValue)
	data.ValidityStats = obj.Attributes()["validity_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectAuthAccountsAuditStats_directoryStats(data *authAccountsAuditStats_directoryStatsData, obj types.Object) {
}

func fillDataStructFromTFObjectAuthAccountsAuditStats_twoFAStats(data *authAccountsAuditStats_twoFAStatsData, obj types.Object) {
}

func fillDataStructFromTFObjectAuthAccountsAuditStats_validityStats(data *authAccountsAuditStats_validityStatsData, obj types.Object) {
}

func fillDataStructFromTFObjectAuthInternalAccount(data *authInternalAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CanRequestGroups = obj.Attributes()["can_request_groups"].(basetypes.BoolValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.DirectoryName = obj.Attributes()["directory_name"].(basetypes.StringValue)
	data.DirectoryPasswordChangeRequired = obj.Attributes()["directory_password_change_required"].(basetypes.BoolValue)
	data.DirectoryRotatingPassword = obj.Attributes()["directory_rotating_password"].(basetypes.StringValue)
	data.DirectoryType = obj.Attributes()["directory_type"].(basetypes.StringValue)
	data.Email = obj.Attributes()["email"].(basetypes.StringValue)
	data.IDInDirectory = obj.Attributes()["id_in_directory"].(basetypes.StringValue)
	data.KeyHubPasswordChangeRequired = obj.Attributes()["key_hub_password_change_required"].(basetypes.BoolValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.LicenseRole = obj.Attributes()["license_role"].(basetypes.StringValue)
	data.Locale = obj.Attributes()["locale"].(basetypes.StringValue)
	data.ReregistrationRequired = obj.Attributes()["reregistration_required"].(basetypes.BoolValue)
	data.TokenPasswordEnabled = obj.Attributes()["token_password_enabled"].(basetypes.BoolValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.ValidInDirectory = obj.Attributes()["valid_in_directory"].(basetypes.BoolValue)
	data.ActivationCode = obj.Attributes()["activation_code"].(basetypes.StringValue)
	data.ActivationDeadline = obj.Attributes()["activation_deadline"].(basetypes.StringValue)
	data.Company = obj.Attributes()["company"].(basetypes.StringValue)
	data.FirstName = obj.Attributes()["first_name"].(basetypes.StringValue)
	data.LastName = obj.Attributes()["last_name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Telephone = obj.Attributes()["telephone"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthInternalAccountLinkableWrapper(data *authInternalAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectAuthInternalAccountStatusObject(data *authInternalAccountStatusObjectData, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthInternalAccount_additionalObjects(data *authInternalAccount_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthMoveInternalAccount(data *authMoveInternalAccountData, obj types.Object) {
	data.InternalDirectory = obj.Attributes()["internal_directory"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectAuthPermission(data *authPermissionData, obj types.Object) {
	data.Full = obj.Attributes()["full"].(basetypes.StringValue)
	data.Instances = obj.Attributes()["instances"].(basetypes.ListValue)
	data.Operations = obj.Attributes()["operations"].(basetypes.ListValue)
	data.TypeEscaped = obj.Attributes()["type_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthStoredAccountAttribute(data *authStoredAccountAttributeData, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectAuthStoredAccountAttributes(data *authStoredAccountAttributesData, obj types.Object) {
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectCertificateCertificate(data *certificateCertificateData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.KeyData = obj.Attributes()["key_data"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectCertificateCertificateLinkableWrapper(data *certificateCertificateLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectCertificateCertificatePrimer(data *certificateCertificatePrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Alias = obj.Attributes()["alias"].(basetypes.StringValue)
	data.CertificateCertificatePrimerType = obj.Attributes()["certificate_certificate_primer_type"].(basetypes.StringValue)
	data.CertificateData = obj.Attributes()["certificate_data"].(basetypes.ListValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.FingerprintSha1 = obj.Attributes()["fingerprint_sha1"].(basetypes.StringValue)
	data.FingerprintSha256 = obj.Attributes()["fingerprint_sha256"].(basetypes.StringValue)
	data.Global = obj.Attributes()["global"].(basetypes.BoolValue)
	data.SubjectDN = obj.Attributes()["subject_d_n"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectCertificateCertificate_additionalObjects(data *certificateCertificate_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectClientClientApplication(data *clientClientApplicationData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectClientClientApplicationLinkableWrapper(data *clientClientApplicationLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectClientClientApplicationPrimer(data *clientClientApplicationPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectClientClientApplication_additionalObjects(data *clientClientApplication_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.DeleteTile = obj.Attributes()["delete_tile"].(basetypes.BoolValue)
	data.Groupclients = obj.Attributes()["groupclients"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.VaultRecordCount = obj.Attributes()["vault_record_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectClientLdapClient(data *clientLdapClientData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.BindDn = obj.Attributes()["bind_dn"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecretUUID = obj.Attributes()["shared_secret_uuid"].(basetypes.StringValue)
	data.UsedForProvisioning = obj.Attributes()["used_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectClientOAuth2Client(data *clientOAuth2ClientData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.AccountPermissions = obj.Attributes()["account_permissions"].(basetypes.ListValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.CallbackURI = obj.Attributes()["callback_u_r_i"].(basetypes.StringValue)
	data.Confidential = obj.Attributes()["confidential"].(basetypes.BoolValue)
	data.DebugMode = obj.Attributes()["debug_mode"].(basetypes.BoolValue)
	data.IDTokenClaims = obj.Attributes()["id_token_claims"].(basetypes.StringValue)
	data.InitiateLoginURI = obj.Attributes()["initiate_login_u_r_i"].(basetypes.StringValue)
	data.ResourceURIs = obj.Attributes()["resource_u_r_is"].(basetypes.StringValue)
	data.ShareSecretInVault = obj.Attributes()["share_secret_in_vault"].(basetypes.BoolValue)
	data.SharedSecretUUID = obj.Attributes()["shared_secret_uuid"].(basetypes.StringValue)
	data.ShowLandingPage = obj.Attributes()["show_landing_page"].(basetypes.BoolValue)
	data.UseClientCredentials = obj.Attributes()["use_client_credentials"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectClientOAuth2ClientPermission(data *clientOAuth2ClientPermissionData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroupUUID = obj.Attributes()["for_group_uuid"].(basetypes.StringValue)
	data.ForSystemUUID = obj.Attributes()["for_system_uuid"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectClientOAuth2ClientPermissionLinkableWrapper(data *clientOAuth2ClientPermissionLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectClientOAuth2ClientPermissionWithClient(data *clientOAuth2ClientPermissionWithClientData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ForGroupUUID = obj.Attributes()["for_group_uuid"].(basetypes.StringValue)
	data.ForSystemUUID = obj.Attributes()["for_system_uuid"].(basetypes.StringValue)
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectClientOAuth2ClientPermissionWithClientLinkableWrapper(data *clientOAuth2ClientPermissionWithClientLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectClientOAuth2ClientPermission_additionalObjects(data *clientOAuth2ClientPermission_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectClientOAuth2Client_attributes(data *clientOAuth2Client_attributesData, obj types.Object) {
}

func fillDataStructFromTFObjectClientSaml2Client(data *clientSaml2ClientData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ClientClientApplicationPrimerType = obj.Attributes()["client_client_application_primer_type"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Scopes = obj.Attributes()["scopes"].(basetypes.ListValue)
	data.SsoApplication = obj.Attributes()["sso_application"].(basetypes.BoolValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.LastModifiedAt = obj.Attributes()["last_modified_at"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.Metadata = obj.Attributes()["metadata"].(basetypes.StringValue)
	data.MetadataURL = obj.Attributes()["metadata_url"].(basetypes.StringValue)
	data.SubjectFormat = obj.Attributes()["subject_format"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectClientSaml2Client_attributes(data *clientSaml2Client_attributesData, obj types.Object) {
}

func fillDataStructFromTFObjectDirectoryAccountDirectory(data *directoryAccountDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectoryLinkableWrapper(data *directoryAccountDirectoryLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectoryPrimer(data *directoryAccountDirectoryPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectoryStatusReport(data *directoryAccountDirectoryStatusReportData, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.Int64Value)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectorySummary(data *directoryAccountDirectorySummaryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DirectoryAccountDirectorySummaryType = obj.Attributes()["directory_account_directory_summary_type"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectorySummaryLinkableWrapper(data *directoryAccountDirectorySummaryLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectDirectoryAccountDirectory_additionalObjects(data *directoryAccountDirectory_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Status = obj.Attributes()["status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectDirectoryInternalDirectory(data *directoryInternalDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDirectoryLDAPDirectory(data *directoryLDAPDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.Dialect = obj.Attributes()["dialect"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.PasswordRecovery = obj.Attributes()["password_recovery"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.SearchBindDN = obj.Attributes()["search_bind_d_n"].(basetypes.StringValue)
	data.SearchBindPassword = obj.Attributes()["search_bind_password"].(basetypes.StringValue)
	data.SearchFilter = obj.Attributes()["search_filter"].(basetypes.StringValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectDirectoryMaintenanceDirectory(data *directoryMaintenanceDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectDirectoryOIDCDirectory(data *directoryOIDCDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountValiditySupported = obj.Attributes()["account_validity_supported"].(basetypes.BoolValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.DirectoryAccountDirectoryPrimerType = obj.Attributes()["directory_account_directory_primer_type"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.BaseOrganizationalUnitUUID = obj.Attributes()["base_organizational_unit_uuid"].(basetypes.StringValue)
	data.DefaultDirectory = obj.Attributes()["default_directory"].(basetypes.BoolValue)
	data.HelpdeskGroupUUID = obj.Attributes()["helpdesk_group_uuid"].(basetypes.StringValue)
	data.Restrict2fa = obj.Attributes()["restrict2fa"].(basetypes.BoolValue)
	data.RotatingPassword = obj.Attributes()["rotating_password"].(basetypes.StringValue)
	data.UsernameCustomizable = obj.Attributes()["username_customizable"].(basetypes.BoolValue)
	data.AcrValues = obj.Attributes()["acr_values"].(basetypes.StringValue)
	data.AttributesToStore = obj.Attributes()["attributes_to_store"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.DomainRestriction = obj.Attributes()["domain_restriction"].(basetypes.StringValue)
	data.Enforces2fa = obj.Attributes()["enforces2fa"].(basetypes.BoolValue)
	data.FullyResolvedIssuer = obj.Attributes()["fully_resolved_issuer"].(basetypes.StringValue)
	data.Issuer = obj.Attributes()["issuer"].(basetypes.StringValue)
	data.LogoutURL = obj.Attributes()["logout_url"].(basetypes.StringValue)
	data.SendLoginHint = obj.Attributes()["send_login_hint"].(basetypes.BoolValue)
	data.VendorEscaped = obj.Attributes()["vendor_escaped"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupAccountGroup(data *groupAccountGroupData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupAccountGroupLinkableWrapper(data *groupAccountGroupLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupAccountGroup_additionalObjects(data *groupAccountGroup_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupAuthorizedGroupsWrapper(data *groupAuthorizedGroupsWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.GroupCount = obj.Attributes()["group_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectGroupGroup(data *groupGroupData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationAdministration = obj.Attributes()["application_administration"].(basetypes.BoolValue)
	data.AuditConfig = obj.Attributes()["audit_config"].(basetypes.ObjectValue)
	data.AuditRequested = obj.Attributes()["audit_requested"].(basetypes.BoolValue)
	data.Auditor = obj.Attributes()["auditor"].(basetypes.BoolValue)
	data.AuthorizingGroupAuditingUUID = obj.Attributes()["authorizing_group_auditing_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupDelegationUUID = obj.Attributes()["authorizing_group_delegation_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupMembershipUUID = obj.Attributes()["authorizing_group_membership_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupProvisioningUUID = obj.Attributes()["authorizing_group_provisioning_uuid"].(basetypes.StringValue)
	data.AuthorizingGroupTypes = obj.Attributes()["authorizing_group_types"].(basetypes.ListValue)
	data.ClassificationUUID = obj.Attributes()["classification_uuid"].(basetypes.StringValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.ExtendedAccess = obj.Attributes()["extended_access"].(basetypes.StringValue)
	data.HideAuditTrail = obj.Attributes()["hide_audit_trail"].(basetypes.BoolValue)
	data.NestedUnderUUID = obj.Attributes()["nested_under_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.PrivateGroup = obj.Attributes()["private_group"].(basetypes.BoolValue)
	data.RecordTrail = obj.Attributes()["record_trail"].(basetypes.BoolValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.SingleManaged = obj.Attributes()["single_managed"].(basetypes.BoolValue)
	data.VaultRecovery = obj.Attributes()["vault_recovery"].(basetypes.StringValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupGroupAccount(data *groupGroupAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.TwoFactorStatus = obj.Attributes()["two_factor_status"].(basetypes.StringValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupGroupAccountLinkableWrapper(data *groupGroupAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupAccountNesting(data *groupGroupAccountNestingData, obj types.Object) {
	data.Connected = obj.Attributes()["connected"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupGroupAccountStatus(data *groupGroupAccountStatusData, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.VisibleForProvisioning = obj.Attributes()["visible_for_provisioning"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupGroupAccount_additionalObjects(data *groupGroupAccount_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupAdminMail(data *groupGroupAdminMailData, obj types.Object) {
	data.Body = obj.Attributes()["body"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupAudit(data *groupGroupAuditData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.CreatedBy = obj.Attributes()["created_by"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
	data.NameOnAudit = obj.Attributes()["name_on_audit"].(basetypes.StringValue)
	data.ReviewedAt = obj.Attributes()["reviewed_at"].(basetypes.StringValue)
	data.ReviewedBy = obj.Attributes()["reviewed_by"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SubmittedAt = obj.Attributes()["submitted_at"].(basetypes.StringValue)
	data.SubmittedBy = obj.Attributes()["submitted_by"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupAuditAccount(data *groupGroupAuditAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AccountValid = obj.Attributes()["account_valid"].(basetypes.BoolValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.DisconnectedNested = obj.Attributes()["disconnected_nested"].(basetypes.BoolValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.LastUsed = obj.Attributes()["last_used"].(basetypes.StringValue)
	data.Nested = obj.Attributes()["nested"].(basetypes.BoolValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupAuditConfig(data *groupGroupAuditConfigData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Months = obj.Attributes()["months"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupAuditLinkableWrapper(data *groupGroupAuditLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupAudit_additionalObjects(data *groupGroupAudit_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupAuditingInfo(data *groupGroupAuditingInfoData, obj types.Object) {
	data.AuditDueDate = obj.Attributes()["audit_due_date"].(basetypes.StringValue)
	data.LastAuditDate = obj.Attributes()["last_audit_date"].(basetypes.StringValue)
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrDisabledAccounts = obj.Attributes()["nr_disabled_accounts"].(basetypes.Int64Value)
	data.NrDisabledManagers = obj.Attributes()["nr_disabled_managers"].(basetypes.Int64Value)
	data.NrExpiredVaultRecords = obj.Attributes()["nr_expired_vault_records"].(basetypes.Int64Value)
	data.NrManagers = obj.Attributes()["nr_managers"].(basetypes.Int64Value)
	data.NrVaultRecordsWithEndDate = obj.Attributes()["nr_vault_records_with_end_date"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectGroupGroupClassification(data *groupGroupClassificationData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AuthorizingGroupAuditingRequired = obj.Attributes()["authorizing_group_auditing_required"].(basetypes.BoolValue)
	data.AuthorizingGroupDelegationRequired = obj.Attributes()["authorizing_group_delegation_required"].(basetypes.BoolValue)
	data.AuthorizingGroupMembershipRequired = obj.Attributes()["authorizing_group_membership_required"].(basetypes.BoolValue)
	data.AuthorizingGroupProvisioningRequired = obj.Attributes()["authorizing_group_provisioning_required"].(basetypes.BoolValue)
	data.DefaultClassification = obj.Attributes()["default_classification"].(basetypes.BoolValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.MaximumAuditInterval = obj.Attributes()["maximum_audit_interval"].(basetypes.Int64Value)
	data.MinimumNrManagers = obj.Attributes()["minimum_nr_managers"].(basetypes.Int64Value)
	data.RecordTrailRequired = obj.Attributes()["record_trail_required"].(basetypes.BoolValue)
	data.RequiredMonths = obj.Attributes()["required_months"].(basetypes.ListValue)
	data.RotatingPasswordRequired = obj.Attributes()["rotating_password_required"].(basetypes.BoolValue)
	data.VaultRequiresActivation = obj.Attributes()["vault_requires_activation"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectGroupGroupClassificationInfo(data *groupGroupClassificationInfoData, obj types.Object) {
	data.NrGroups = obj.Attributes()["nr_groups"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectGroupGroupClassificationLinkableWrapper(data *groupGroupClassificationLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupClassificationPrimer(data *groupGroupClassificationPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupClassificationUpdate(data *groupGroupClassificationUpdateData, obj types.Object) {
	data.ClassificatonUUID = obj.Attributes()["classificaton_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupClassification_additionalObjects(data *groupGroupClassification_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Info = obj.Attributes()["info"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupClient(data *groupGroupClientData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ClientUUID = obj.Attributes()["client_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupClientLinkableWrapper(data *groupGroupClientLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupClient_additionalObjects(data *groupGroupClient_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupFolder(data *groupGroupFolderData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupFolderLinkableWrapper(data *groupGroupFolderLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupFolder_additionalObjects(data *groupGroupFolder_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupInfo(data *groupGroupInfoData, obj types.Object) {
	data.NrAccounts = obj.Attributes()["nr_accounts"].(basetypes.Int64Value)
	data.NrAccountsWithVault = obj.Attributes()["nr_accounts_with_vault"].(basetypes.Int64Value)
	data.NrAudits = obj.Attributes()["nr_audits"].(basetypes.Int64Value)
	data.NrClients = obj.Attributes()["nr_clients"].(basetypes.Int64Value)
	data.NrProvisionedSystems = obj.Attributes()["nr_provisioned_systems"].(basetypes.Int64Value)
	data.NrVaultRecords = obj.Attributes()["nr_vault_records"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectGroupGroupLinkableWrapper(data *groupGroupLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupPrimer(data *groupGroupPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Admin = obj.Attributes()["admin"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectGroupGroupPrimerLinkableWrapper(data *groupGroupPrimerLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroupSegmentedLinkableWrapper(data *groupGroupSegmentedLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.Segments = obj.Attributes()["segments"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupGroup_additionalObjects(data *groupGroup_additionalObjectsData, obj types.Object) {
	data.Accounts = obj.Attributes()["accounts"].(basetypes.ObjectValue)
	data.AdministeredClients = obj.Attributes()["administered_clients"].(basetypes.ObjectValue)
	data.AdministeredSystems = obj.Attributes()["administered_systems"].(basetypes.ObjectValue)
	data.Admins = obj.Attributes()["admins"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.AuthorizedGroups = obj.Attributes()["authorized_groups"].(basetypes.ObjectValue)
	data.ClientPermissions = obj.Attributes()["client_permissions"].(basetypes.ObjectValue)
	data.Clients = obj.Attributes()["clients"].(basetypes.ObjectValue)
	data.ContentAdministeredSystems = obj.Attributes()["content_administered_systems"].(basetypes.ObjectValue)
	data.Groupauditinginfo = obj.Attributes()["groupauditinginfo"].(basetypes.ObjectValue)
	data.Groupinfo = obj.Attributes()["groupinfo"].(basetypes.ObjectValue)
	data.Helpdesk = obj.Attributes()["helpdesk"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Myaccount = obj.Attributes()["myaccount"].(basetypes.ObjectValue)
	data.Mydelegatedaccount = obj.Attributes()["mydelegatedaccount"].(basetypes.ObjectValue)
	data.NestedGroups = obj.Attributes()["nested_groups"].(basetypes.ObjectValue)
	data.OwnedClients = obj.Attributes()["owned_clients"].(basetypes.ObjectValue)
	data.OwnedDirectories = obj.Attributes()["owned_directories"].(basetypes.ObjectValue)
	data.OwnedGroupsOnSystem = obj.Attributes()["owned_groups_on_system"].(basetypes.ObjectValue)
	data.OwnedOrganizationalUnits = obj.Attributes()["owned_organizational_units"].(basetypes.ObjectValue)
	data.OwnedSystems = obj.Attributes()["owned_systems"].(basetypes.ObjectValue)
	data.RecentAudits = obj.Attributes()["recent_audits"].(basetypes.ObjectValue)
	data.Requeststatus = obj.Attributes()["requeststatus"].(basetypes.StringValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
	data.Webhooks = obj.Attributes()["webhooks"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupGroupsAuditStats(data *groupGroupsAuditStatsData, obj types.Object) {
	data.AuditedGroups = obj.Attributes()["audited_groups"].(basetypes.Int64Value)
	data.Classifications = obj.Attributes()["classifications"].(basetypes.ListValue)
	data.OverdueAuditGroups = obj.Attributes()["overdue_audit_groups"].(basetypes.Int64Value)
	data.OverdueVaultPolicies = obj.Attributes()["overdue_vault_policies"].(basetypes.Int64Value)
	data.UnauditedGroups = obj.Attributes()["unaudited_groups"].(basetypes.Int64Value)
	data.ValidVaultPolicies = obj.Attributes()["valid_vault_policies"].(basetypes.Int64Value)
	data.VaultsWithoutPolicies = obj.Attributes()["vaults_without_policies"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectGroupProvisioningGroup(data *groupProvisioningGroupData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectGroupProvisioningGroupLinkableWrapper(data *groupProvisioningGroupLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectGroupProvisioningGroup_additionalObjects(data *groupProvisioningGroup_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectLaunchpadDisplayedLaunchpadTile(data *launchpadDisplayedLaunchpadTileData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectLaunchpadDisplayedLaunchpadTiles(data *launchpadDisplayedLaunchpadTilesData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectLaunchpadLaunchpadTile(data *launchpadLaunchpadTileData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectLaunchpadLaunchpadTileLinkableWrapper(data *launchpadLaunchpadTileLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectLaunchpadLaunchpadTilePrimer(data *launchpadLaunchpadTilePrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectLaunchpadLaunchpadTile_additionalObjects(data *launchpadLaunchpadTile_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectLaunchpadManualLaunchpadTile(data *launchpadManualLaunchpadTileData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
	data.Title = obj.Attributes()["title"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectLaunchpadSsoApplicationLaunchpadTile(data *launchpadSsoApplicationLaunchpadTileData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
	data.Uri = obj.Attributes()["uri"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectLaunchpadVaultRecordLaunchpadTile(data *launchpadVaultRecordLaunchpadTileData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.IDenticonCode = obj.Attributes()["identicon_code"].(basetypes.Int64Value)
	data.LaunchpadLaunchpadTileType = obj.Attributes()["launchpad_launchpad_tile_type"].(basetypes.StringValue)
	data.Logo = obj.Attributes()["logo"].(basetypes.ListValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectLicenseKeyHubLicenseInfo(data *licenseKeyHubLicenseInfoData, obj types.Object) {
	data.CurrentLicenseStatus = obj.Attributes()["current_license_status"].(basetypes.StringValue)
	data.CustomerCompany = obj.Attributes()["customer_company"].(basetypes.StringValue)
	data.CustomerContact = obj.Attributes()["customer_contact"].(basetypes.StringValue)
	data.CustomerDomains = obj.Attributes()["customer_domains"].(basetypes.ListValue)
	data.Details = obj.Attributes()["details"].(basetypes.ListValue)
	data.ExpirationTime = obj.Attributes()["expiration_time"].(basetypes.StringValue)
	data.Features = obj.Attributes()["features"].(basetypes.ListValue)
	data.IssueTime = obj.Attributes()["issue_time"].(basetypes.StringValue)
	data.KeyHubDomain = obj.Attributes()["key_hub_domain"].(basetypes.StringValue)
	data.LicenseKey = obj.Attributes()["license_key"].(basetypes.StringValue)
	data.NotBeforeTime = obj.Attributes()["not_before_time"].(basetypes.StringValue)
	data.UsersHardLimit = obj.Attributes()["users_hard_limit"].(basetypes.Int64Value)
	data.UsersProLimit = obj.Attributes()["users_pro_limit"].(basetypes.Int64Value)
	data.UsersSoftLimit = obj.Attributes()["users_soft_limit"].(basetypes.Int64Value)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Version = obj.Attributes()["version"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectMarkItemMarker(data *markItemMarkerData, obj types.Object) {
	data.Level = obj.Attributes()["level"].(basetypes.StringValue)
	data.MarkItemMarkerType = obj.Attributes()["mark_item_marker_type"].(basetypes.StringValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectMarkItemMarker_parameters(data *markItemMarker_parametersData, obj types.Object) {
}

func fillDataStructFromTFObjectMarkItemMarkers(data *markItemMarkersData, obj types.Object) {
	data.Markers = obj.Attributes()["markers"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectNotificationCertificateExpiredNotification(data *notificationCertificateExpiredNotificationData, obj types.Object) {
	data.Certificate = obj.Attributes()["certificate"].(basetypes.ObjectValue)
	data.Directory = obj.Attributes()["directory"].(basetypes.ObjectValue)
	data.Expiration = obj.Attributes()["expiration"].(basetypes.StringValue)
	data.LdapClient = obj.Attributes()["ldap_client"].(basetypes.ObjectValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
	data.Usage = obj.Attributes()["usage"].(basetypes.StringValue)
	data.WebhookUUID = obj.Attributes()["webhook_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectNotificationGroupAuditRequiredNotification(data *notificationGroupAuditRequiredNotificationData, obj types.Object) {
	data.DueDate = obj.Attributes()["due_date"].(basetypes.StringValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.NotificationGroupAuditRequiredNotificationType = obj.Attributes()["notification_group_audit_required_notification_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectNotificationGroupEditRequiredNotification(data *notificationGroupEditRequiredNotificationData, obj types.Object) {
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.Parameters = obj.Attributes()["parameters"].(basetypes.ObjectValue)
	data.Reason = obj.Attributes()["reason"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectNotificationGroupEditRequiredNotification_parameters(data *notificationGroupEditRequiredNotification_parametersData, obj types.Object) {
}

func fillDataStructFromTFObjectNotificationInvalidSignaturesDetectedNotification(data *notificationInvalidSignaturesDetectedNotificationData, obj types.Object) {
}

func fillDataStructFromTFObjectNotificationLicenseStatusNotification(data *notificationLicenseStatusNotificationData, obj types.Object) {
	data.ActiveAccounts = obj.Attributes()["active_accounts"].(basetypes.Int64Value)
	data.LicenseInfoUUID = obj.Attributes()["license_info_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectNotificationModificationRequestNotification(data *notificationModificationRequestNotificationData, obj types.Object) {
	data.Admins = obj.Attributes()["admins"].(basetypes.ListValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.Request = obj.Attributes()["request"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectNotificationNotification(data *notificationNotificationData, obj types.Object) {
}

func fillDataStructFromTFObjectNotificationNotifications(data *notificationNotificationsData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectNotificationOldApiVersionUsageNotification(data *notificationOldApiVersionUsageNotificationData, obj types.Object) {
	data.ApiVersion = obj.Attributes()["api_version"].(basetypes.Int64Value)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectNotificationProvisionConfigRequiredNotification(data *notificationProvisionConfigRequiredNotificationData, obj types.Object) {
	data.Systems = obj.Attributes()["systems"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectNotificationRotatingPasswordRequiredNotification(data *notificationRotatingPasswordRequiredNotificationData, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectNotificationUpdateAvailableNotification(data *notificationUpdateAvailableNotificationData, obj types.Object) {
	data.ReleasedAt = obj.Attributes()["released_at"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectNotificationVaultRecordExpiredNotification(data *notificationVaultRecordExpiredNotificationData, obj types.Object) {
	data.Record = obj.Attributes()["record"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectOrganizationAccountOrganizationalUnit(data *organizationAccountOrganizationalUnitData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectOrganizationAccountOrganizationalUnitLinkableWrapper(data *organizationAccountOrganizationalUnitLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectOrganizationAccountOrganizationalUnit_additionalObjects(data *organizationAccountOrganizationalUnit_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnit(data *organizationOrganizationalUnitData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Depth = obj.Attributes()["depth"].(basetypes.Int64Value)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.ParentUUID = obj.Attributes()["parent_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitAccount(data *organizationOrganizationalUnitAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitAccountLinkableWrapper(data *organizationOrganizationalUnitAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitAccount_additionalObjects(data *organizationOrganizationalUnitAccount_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitLinkableWrapper(data *organizationOrganizationalUnitLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitPrimer(data *organizationOrganizationalUnitPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnitPrimerLinkableWrapper(data *organizationOrganizationalUnitPrimerLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectOrganizationOrganizationalUnit_additionalObjects(data *organizationOrganizationalUnit_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.CreateAsParentOf = obj.Attributes()["create_as_parent_of"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningAbstractProvisionedLDAP(data *provisioningAbstractProvisionedLDAPData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningAbstractProvisionedLDAP_attributes(data *provisioningAbstractProvisionedLDAP_attributesData, obj types.Object) {
}

func fillDataStructFromTFObjectProvisioningAccountProvisioningStatus(data *provisioningAccountProvisioningStatusData, obj types.Object) {
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.Result = obj.Attributes()["result"].(basetypes.StringValue)
	data.System = obj.Attributes()["system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningAccountProvisioningStatusReport(data *provisioningAccountProvisioningStatusReportData, obj types.Object) {
	data.Status = obj.Attributes()["status"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningCircuitBreakerStatistics(data *provisioningCircuitBreakerStatisticsData, obj types.Object) {
	data.NumberOfFailedCalls = obj.Attributes()["number_of_failed_calls"].(basetypes.Int64Value)
	data.NumberOfNotPermittedCalls = obj.Attributes()["number_of_not_permitted_calls"].(basetypes.Int64Value)
	data.NumberOfSuccessfulCalls = obj.Attributes()["number_of_successful_calls"].(basetypes.Int64Value)
	data.State = obj.Attributes()["state"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningGroupOnSystem(data *provisioningGroupOnSystemData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningGroupOnSystemLinkableWrapper(data *provisioningGroupOnSystemLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningGroupOnSystemPrimer(data *provisioningGroupOnSystemPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningGroupOnSystemTypes(data *provisioningGroupOnSystemTypesData, obj types.Object) {
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningGroupOnSystem_additionalObjects(data *provisioningGroupOnSystem_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Provgroups = obj.Attributes()["provgroups"].(basetypes.ObjectValue)
	data.ServiceAccounts = obj.Attributes()["service_accounts"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningGroupProvisioningStatus(data *provisioningGroupProvisioningStatusData, obj types.Object) {
	data.Folder = obj.Attributes()["folder"].(basetypes.ObjectValue)
	data.Group = obj.Attributes()["group"].(basetypes.ObjectValue)
	data.ProvisioningDuration = obj.Attributes()["provisioning_duration"].(basetypes.ObjectValue)
	data.ProvisioningEndTime = obj.Attributes()["provisioning_end_time"].(basetypes.StringValue)
	data.ProvisioningPermissionEndTime = obj.Attributes()["provisioning_permission_end_time"].(basetypes.StringValue)
	data.StatusReport = obj.Attributes()["status_report"].(basetypes.ObjectValue)
	data.VisibleOnDashboard = obj.Attributes()["visible_on_dashboard"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectProvisioningGroupProvisioningStatus_provisioningDuration(data *provisioningGroupProvisioningStatus_provisioningDurationData, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectProvisioningOwnedGroupOnSystemsWrapper(data *provisioningOwnedGroupOnSystemsWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
	data.UnlinkedCount = obj.Attributes()["unlinked_count"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectProvisioningProvisionNumberSequence(data *provisioningProvisionNumberSequenceData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.NextUID = obj.Attributes()["next_u_i_d"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectProvisioningProvisionNumberSequenceLinkableWrapper(data *provisioningProvisionNumberSequenceLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningProvisionNumberSequence_additionalObjects(data *provisioningProvisionNumberSequence_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Systems = obj.Attributes()["systems"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAD(data *provisioningProvisionedADData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.SamAccountNameScheme = obj.Attributes()["sam_account_name_scheme"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAccount(data *provisioningProvisionedAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.LastActive = obj.Attributes()["last_active"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.Validity = obj.Attributes()["validity"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Uid = obj.Attributes()["uid"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectProvisioningProvisionedAccountLinkableWrapper(data *provisioningProvisionedAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAccount_additionalObjects(data *provisioningProvisionedAccount_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAzureOIDCDirectory(data *provisioningProvisionedAzureOIDCDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAzureSyncLDAPDirectory(data *provisioningProvisionedAzureSyncLDAPDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedAzureTenant(data *provisioningProvisionedAzureTenantData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.ClientID = obj.Attributes()["client_id"].(basetypes.StringValue)
	data.ClientSecret = obj.Attributes()["client_secret"].(basetypes.StringValue)
	data.IDpDomain = obj.Attributes()["idp_domain"].(basetypes.StringValue)
	data.Tenant = obj.Attributes()["tenant"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedInternalLDAP(data *provisioningProvisionedInternalLDAPData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Client = obj.Attributes()["client"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedLDAP(data *provisioningProvisionedLDAPData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.Attributes = obj.Attributes()["attributes"].(basetypes.ObjectValue)
	data.BaseDN = obj.Attributes()["base_d_n"].(basetypes.StringValue)
	data.BindDN = obj.Attributes()["bind_d_n"].(basetypes.StringValue)
	data.BindPassword = obj.Attributes()["bind_password"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.FailoverHost = obj.Attributes()["failover_host"].(basetypes.StringValue)
	data.FailoverTrustedCertificateUUID = obj.Attributes()["failover_trusted_certificate_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
	data.Host = obj.Attributes()["host"].(basetypes.StringValue)
	data.ObjectClasses = obj.Attributes()["object_classes"].(basetypes.StringValue)
	data.Port = obj.Attributes()["port"].(basetypes.Int64Value)
	data.ServiceAccountDN = obj.Attributes()["service_account_d_n"].(basetypes.StringValue)
	data.SshPublicKeySupported = obj.Attributes()["ssh_public_key_supported"].(basetypes.BoolValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.UserDN = obj.Attributes()["user_d_n"].(basetypes.StringValue)
	data.Gid = obj.Attributes()["gid"].(basetypes.Int64Value)
	data.HashingScheme = obj.Attributes()["hashing_scheme"].(basetypes.StringValue)
	data.Numbering = obj.Attributes()["numbering"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedLDAPDirectory(data *provisioningProvisionedLDAPDirectoryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.GroupDN = obj.Attributes()["group_d_n"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystem(data *provisioningProvisionedSystemData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AccountCount = obj.Attributes()["account_count"].(basetypes.Int64Value)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.ContentAdministratorUUID = obj.Attributes()["content_administrator_uuid"].(basetypes.StringValue)
	data.ExternalUUID = obj.Attributes()["external_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OwnerUUID = obj.Attributes()["owner_uuid"].(basetypes.StringValue)
	data.SelfServiceExistingGroups = obj.Attributes()["self_service_existing_groups"].(basetypes.BoolValue)
	data.SelfServiceNewGroups = obj.Attributes()["self_service_new_groups"].(basetypes.BoolValue)
	data.SelfServiceServiceAccounts = obj.Attributes()["self_service_service_accounts"].(basetypes.BoolValue)
	data.ShouldDestroyUnknownAccounts = obj.Attributes()["should_destroy_unknown_accounts"].(basetypes.BoolValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
	data.UsernamePrefix = obj.Attributes()["username_prefix"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemLinkableWrapper(data *provisioningProvisionedSystemLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemPrimer(data *provisioningProvisionedSystemPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ProvisioningProvisionedSystemPrimerType = obj.Attributes()["provisioning_provisioned_system_primer_type"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemPrimerLinkableWrapper(data *provisioningProvisionedSystemPrimerLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemSyncLog(data *provisioningProvisionedSystemSyncLogData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.CreatedAt = obj.Attributes()["created_at"].(basetypes.StringValue)
	data.Errors = obj.Attributes()["errors"].(basetypes.Int64Value)
	data.Log = obj.Attributes()["log"].(basetypes.StringValue)
	data.Modifications = obj.Attributes()["modifications"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemSyncLogLinkableWrapper(data *provisioningProvisionedSystemSyncLogLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystemSyncLog_additionalObjects(data *provisioningProvisionedSystemSyncLog_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisionedSystem_additionalObjects(data *provisioningProvisionedSystem_additionalObjectsData, obj types.Object) {
	data.Account = obj.Attributes()["account"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.IssuedPermissions = obj.Attributes()["issued_permissions"].(basetypes.ObjectValue)
	data.LoginName = obj.Attributes()["login_name"].(basetypes.StringValue)
	data.ManagementPermissions = obj.Attributes()["management_permissions"].(basetypes.ObjectValue)
	data.Markers = obj.Attributes()["markers"].(basetypes.ObjectValue)
	data.Statistics = obj.Attributes()["statistics"].(basetypes.ObjectValue)
	data.SupportedGroupTypes = obj.Attributes()["supported_group_types"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectProvisioningProvisioningManagementPermissions(data *provisioningProvisioningManagementPermissionsData, obj types.Object) {
	data.CreateNewGroupsAllowed = obj.Attributes()["create_new_groups_allowed"].(basetypes.BoolValue)
	data.CreateServiceAccountsAllowed = obj.Attributes()["create_service_accounts_allowed"].(basetypes.BoolValue)
	data.ReuseExistingGroupsAllowed = obj.Attributes()["reuse_existing_groups_allowed"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectProvisioningProvisioningStatus(data *provisioningProvisioningStatusData, obj types.Object) {
	data.Groups = obj.Attributes()["groups"].(basetypes.ListValue)
	data.IgnoreErrors = obj.Attributes()["ignore_errors"].(basetypes.BoolValue)
	data.RestrictedByLicense = obj.Attributes()["restricted_by_license"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectProvisioningTokenPassword(data *provisioningTokenPasswordData, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestAbstractApplicationModificationRequest(data *requestAbstractApplicationModificationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestAbstractOrganizationalUnitModificationRequest(data *requestAbstractOrganizationalUnitModificationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestAbstractProvisionedSystemModificationRequest(data *requestAbstractProvisionedSystemModificationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestAcceptGrantAccessRequestParameters(data *requestAcceptGrantAccessRequestParametersData, obj types.Object) {
	data.AccessDuration = obj.Attributes()["access_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRequestAcceptGrantAccessRequestParameters_accessDuration(data *requestAcceptGrantAccessRequestParameters_accessDurationData, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectRequestAcceptJoinGroupRequestParameters(data *requestAcceptJoinGroupRequestParametersData, obj types.Object) {
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.MakeManager = obj.Attributes()["make_manager"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRequestAcceptModificationRequestParameters(data *requestAcceptModificationRequestParametersData, obj types.Object) {
}

func fillDataStructFromTFObjectRequestAddGroupAdminRequest(data *requestAddGroupAdminRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.NewAdminUUID = obj.Attributes()["new_admin_uuid"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestCreateGroupOnSystemRequest(data *requestCreateGroupOnSystemRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystemType = obj.Attributes()["group_on_system_type"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestCreateGroupRequest(data *requestCreateGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestCreateServiceAccountRequest(data *requestCreateServiceAccountRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestDisable2FARequest(data *requestDisable2FARequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.Subject = obj.Attributes()["subject"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestEnableTechnicalAdministrationRequest(data *requestEnableTechnicalAdministrationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestExtendAccessRequest(data *requestExtendAccessRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ExtendUntil = obj.Attributes()["extend_until"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestGrantAccessRequest(data *requestGrantAccessRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestGrantApplicationRequest(data *requestGrantApplicationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestGrantClientPermissionRequest(data *requestGrantClientPermissionRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
	data.PermissionType = obj.Attributes()["permission_type"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestGrantGroupOnSystemRequest(data *requestGrantGroupOnSystemRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRequestGrantGroupOnSystemRequestRequest(data *requestGrantGroupOnSystemRequestRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ActivationRequired = obj.Attributes()["activation_required"].(basetypes.BoolValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRequestGrantServiceAccountGroupRequest(data *requestGrantServiceAccountGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
	data.ServiceAccountUUID = obj.Attributes()["service_account_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestJoinGroupRequest(data *requestJoinGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestJoinVaultRequest(data *requestJoinVaultRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestModificationRequest(data *requestModificationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestModificationRequestLinkableWrapper(data *requestModificationRequestLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectRequestModificationRequest_additionalObjects(data *requestModificationRequest_additionalObjectsData, obj types.Object) {
	data.AcceptParams = obj.Attributes()["accept_params"].(basetypes.ObjectValue)
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.ResetStatus = obj.Attributes()["reset_status"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRequestPasswordResetRequest(data *requestPasswordResetRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.NewVaultAndDirectoryPassword = obj.Attributes()["new_vault_and_directory_password"].(basetypes.StringValue)
	data.NewVaultPassword = obj.Attributes()["new_vault_password"].(basetypes.StringValue)
	data.UnsyncedPassword = obj.Attributes()["unsynced_password"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectRequestPasswordResetRequestStatus(data *requestPasswordResetRequestStatusData, obj types.Object) {
	data.CooldownEnd = obj.Attributes()["cooldown_end"].(basetypes.StringValue)
	data.Managers = obj.Attributes()["managers"].(basetypes.ListValue)
	data.NrAccepted = obj.Attributes()["nr_accepted"].(basetypes.Int64Value)
	data.ResetViaMail = obj.Attributes()["reset_via_mail"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestRemoveGroupRequest(data *requestRemoveGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupName = obj.Attributes()["group_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestRemoveOrganizationalUnitRequest(data *requestRemoveOrganizationalUnitRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitName = obj.Attributes()["organizational_unit_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestRemoveProvisionedSystemRequest(data *requestRemoveProvisionedSystemRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.SystemName = obj.Attributes()["system_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestReviewAuditRequest(data *requestReviewAuditRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestRevokeAdminRequest(data *requestRevokeAdminRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AdminUUID = obj.Attributes()["admin_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestSetupAuthorizingGroupRequest(data *requestSetupAuthorizingGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AuthorizingGroupType = obj.Attributes()["authorizing_group_type"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroupUUID = obj.Attributes()["requesting_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestSetupNestedGroupRequest(data *requestSetupNestedGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountAction = obj.Attributes()["account_action"].(basetypes.StringValue)
	data.Connect = obj.Attributes()["connect"].(basetypes.BoolValue)
	data.RequestingGroupUUID = obj.Attributes()["requesting_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferApplicationAdministrationRequest(data *requestTransferApplicationAdministrationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferApplicationOwnershipRequest(data *requestTransferApplicationOwnershipRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ApplicationUUID = obj.Attributes()["application_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferAuditorGroupRequest(data *requestTransferAuditorGroupRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferGroupOnSystemOwnershipRequest(data *requestTransferGroupOnSystemOwnershipRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.GroupOnSystem = obj.Attributes()["group_on_system"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectRequestTransferOrganizationalUnitOwnershipRequest(data *requestTransferOrganizationalUnitOwnershipRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferProvisionedSystemAdministrationRequest(data *requestTransferProvisionedSystemAdministrationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferProvisionedSystemContentAdministrationRequest(data *requestTransferProvisionedSystemContentAdministrationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferProvisionedSystemOwnershipRequest(data *requestTransferProvisionedSystemOwnershipRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestTransferServiceAccountAdministrationRequest(data *requestTransferServiceAccountAdministrationRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.ServiceAccountUUID = obj.Attributes()["service_account_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestUpdateGroupMembershipRequest(data *requestUpdateGroupMembershipRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.AccountToUpdateUUID = obj.Attributes()["account_to_update_uuid"].(basetypes.StringValue)
	data.CurrentEndDate = obj.Attributes()["current_end_date"].(basetypes.StringValue)
	data.CurrentRights = obj.Attributes()["current_rights"].(basetypes.StringValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Rights = obj.Attributes()["rights"].(basetypes.StringValue)
	data.UpdateGroupMembershipType = obj.Attributes()["update_group_membership_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectRequestVerifyInternalAccountRequest(data *requestVerifyInternalAccountRequestData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.Feedback = obj.Attributes()["feedback"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.MailKey = obj.Attributes()["mail_key"].(basetypes.StringValue)
	data.RequestModificationRequestType = obj.Attributes()["request_modification_request_type"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.StringValue)
	data.InternalAccountName = obj.Attributes()["internal_account_name"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccount(data *serviceaccountServiceAccountData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Description = obj.Attributes()["description"].(basetypes.StringValue)
	data.PasswordUUID = obj.Attributes()["password_uuid"].(basetypes.StringValue)
	data.PasswordRotation = obj.Attributes()["password_rotation"].(basetypes.StringValue)
	data.TechnicalAdministratorUUID = obj.Attributes()["technical_administrator_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountGroup(data *serviceaccountServiceAccountGroupData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.DisplayName = obj.Attributes()["display_name"].(basetypes.StringValue)
	data.NameInSystem = obj.Attributes()["name_in_system"].(basetypes.StringValue)
	data.ProvisioningGroupOnSystemPrimerType = obj.Attributes()["provisioning_group_on_system_primer_type"].(basetypes.StringValue)
	data.ShortNameInSystem = obj.Attributes()["short_name_in_system"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountGroupLinkableWrapper(data *serviceaccountServiceAccountGroupLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountGroup_additionalObjects(data *serviceaccountServiceAccountGroup_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountLinkableWrapper(data *serviceaccountServiceAccountLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountPrimer(data *serviceaccountServiceAccountPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountPrimerLinkableWrapper(data *serviceaccountServiceAccountPrimerLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountStatus(data *serviceaccountServiceAccountStatusData, obj types.Object) {
	data.AccountEnabled = obj.Attributes()["account_enabled"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccount_additionalObjects(data *serviceaccountServiceAccount_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Groups = obj.Attributes()["groups"].(basetypes.ObjectValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountsAuditStats(data *serviceaccountServiceAccountsAuditStatsData, obj types.Object) {
	data.DisabledCount = obj.Attributes()["disabled_count"].(basetypes.Int64Value)
	data.PasswordSchemeEnabledStats = obj.Attributes()["password_scheme_enabled_stats"].(basetypes.ObjectValue)
	data.SystemStats = obj.Attributes()["system_stats"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(data *serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsData, obj types.Object) {
}

func fillDataStructFromTFObjectServiceaccountServiceAccountsAuditStats_systemStats(data *serviceaccountServiceAccountsAuditStats_systemStatsData, obj types.Object) {
}

func fillDataStructFromTFObjectSimpleStringValue(data *simpleStringValueData, obj types.Object) {
	data.Value = obj.Attributes()["value"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectSimpleVersionInfo(data *simpleVersionInfoData, obj types.Object) {
	data.ContractVersions = obj.Attributes()["contract_versions"].(basetypes.ListValue)
	data.KeyHubVersion = obj.Attributes()["key_hub_version"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultDeletedVaultHolder(data *vaultDeletedVaultHolderData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.RecordCount = obj.Attributes()["record_count"].(basetypes.Int64Value)
	data.VaultDeletedVaultHolderType = obj.Attributes()["vault_deleted_vault_holder_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultDeletedVaultHolderLinkableWrapper(data *vaultDeletedVaultHolderLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectVaultDeletedVaultHolder_additionalObjects(data *vaultDeletedVaultHolder_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.Vault = obj.Attributes()["vault"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectVaultDeletedVaultRecovery(data *vaultDeletedVaultRecoveryData, obj types.Object) {
	data.Prefix = obj.Attributes()["prefix"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
	data.TargetGroupUUID = obj.Attributes()["target_group_uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultMoveVaultRecord(data *vaultMoveVaultRecordData, obj types.Object) {
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.Action = obj.Attributes()["action"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.ShareDuration = obj.Attributes()["share_duration"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectVaultMoveVaultRecord_shareDuration(data *vaultMoveVaultRecord_shareDurationData, obj types.Object) {
	data.Nanos = obj.Attributes()["nanos"].(basetypes.Int64Value)
	data.Seconds = obj.Attributes()["seconds"].(basetypes.Int64Value)
}

func fillDataStructFromTFObjectVaultVault(data *vaultVaultData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccessAvailable = obj.Attributes()["access_available"].(basetypes.BoolValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Records = obj.Attributes()["records"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectVaultVaultHolder(data *vaultVaultHolderData, obj types.Object) {
}

func fillDataStructFromTFObjectVaultVaultRecord(data *vaultVaultRecordData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Derived = obj.Attributes()["derived"].(basetypes.BoolValue)
	data.EndDate = obj.Attributes()["end_date"].(basetypes.StringValue)
	data.Filename = obj.Attributes()["filename"].(basetypes.StringValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.Username = obj.Attributes()["username"].(basetypes.StringValue)
	data.WarningPeriod = obj.Attributes()["warning_period"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultVaultRecordLinkableWrapper(data *vaultVaultRecordLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectVaultVaultRecordPrimer(data *vaultVaultRecordPrimerData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.Color = obj.Attributes()["color"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.ShareEndTime = obj.Attributes()["share_end_time"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultVaultRecordPrimerLinkableWrapper(data *vaultVaultRecordPrimerLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectVaultVaultRecordSecrets(data *vaultVaultRecordSecretsData, obj types.Object) {
	data.Comment = obj.Attributes()["comment"].(basetypes.StringValue)
	data.File = obj.Attributes()["file"].(basetypes.StringValue)
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
	data.Totp = obj.Attributes()["totp"].(basetypes.StringValue)
	data.WriteTotp = obj.Attributes()["write_totp"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectVaultVaultRecordShare(data *vaultVaultRecordShareData, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.VaultVaultRecordShareType = obj.Attributes()["vault_vault_record_share_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultVaultRecordShareSummary(data *vaultVaultRecordShareSummaryData, obj types.Object) {
	data.Children = obj.Attributes()["children"].(basetypes.ListValue)
	data.Parent = obj.Attributes()["parent"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectVaultVaultRecord_additionalObjects(data *vaultVaultRecord_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
	data.DeleteTile = obj.Attributes()["delete_tile"].(basetypes.BoolValue)
	data.ParentUUID = obj.Attributes()["parent_uuid"].(basetypes.StringValue)
	data.Secret = obj.Attributes()["secret"].(basetypes.ObjectValue)
	data.ShareSummary = obj.Attributes()["share_summary"].(basetypes.ObjectValue)
	data.Shares = obj.Attributes()["shares"].(basetypes.ObjectValue)
	data.Tile = obj.Attributes()["tile"].(basetypes.ObjectValue)
	data.Vaultholder = obj.Attributes()["vaultholder"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectVaultVaultRecovery(data *vaultVaultRecoveryData, obj types.Object) {
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.PrivateKey = obj.Attributes()["private_key"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultVaultUnlock(data *vaultVaultUnlockData, obj types.Object) {
	data.Password = obj.Attributes()["password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectVaultVaultUnlockResponse(data *vaultVaultUnlockResponseData, obj types.Object) {
	data.ExpiresAt = obj.Attributes()["expires_at"].(basetypes.StringValue)
	data.SessionPassword = obj.Attributes()["session_password"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectWebhookWebhook(data *webhookWebhookData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.Active = obj.Attributes()["active"].(basetypes.BoolValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.AllTypes = obj.Attributes()["all_types"].(basetypes.BoolValue)
	data.AuthenticationScheme = obj.Attributes()["authentication_scheme"].(basetypes.StringValue)
	data.BasicAuthPassword = obj.Attributes()["basic_auth_password"].(basetypes.StringValue)
	data.BasicAuthUsername = obj.Attributes()["basic_auth_username"].(basetypes.StringValue)
	data.BearerToken = obj.Attributes()["bearer_token"].(basetypes.StringValue)
	data.ClientUUID = obj.Attributes()["client_uuid"].(basetypes.StringValue)
	data.ClientCertificateUUID = obj.Attributes()["client_certificate_uuid"].(basetypes.StringValue)
	data.CustomHeaderName = obj.Attributes()["custom_header_name"].(basetypes.StringValue)
	data.CustomHeaderValue = obj.Attributes()["custom_header_value"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.TLS = obj.Attributes()["tls"].(basetypes.StringValue)
	data.TrustedCertificateUUID = obj.Attributes()["trusted_certificate_uuid"].(basetypes.StringValue)
	data.Types = obj.Attributes()["types"].(basetypes.ListValue)
	data.URL = obj.Attributes()["url"].(basetypes.StringValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
	data.VerbosePayloads = obj.Attributes()["verbose_payloads"].(basetypes.BoolValue)
}

func fillDataStructFromTFObjectWebhookWebhookDelivery(data *webhookWebhookDeliveryData, obj types.Object) {
	data.Links = obj.Attributes()["links"].(basetypes.ListValue)
	data.Permissions = obj.Attributes()["permissions"].(basetypes.ListValue)
	data.AdditionalObjects = obj.Attributes()["additional_objects"].(basetypes.ObjectValue)
	data.Payload = obj.Attributes()["payload"].(basetypes.ObjectValue)
	data.ReponseHeaders = obj.Attributes()["reponse_headers"].(basetypes.StringValue)
	data.RequestHeaders = obj.Attributes()["request_headers"].(basetypes.StringValue)
	data.Response = obj.Attributes()["response"].(basetypes.StringValue)
	data.Status = obj.Attributes()["status"].(basetypes.Int64Value)
	data.Time = obj.Attributes()["time"].(basetypes.Int64Value)
	data.TriggerTime = obj.Attributes()["trigger_time"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectWebhookWebhookDeliveryLinkableWrapper(data *webhookWebhookDeliveryLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectWebhookWebhookDelivery_additionalObjects(data *webhookWebhookDelivery_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func fillDataStructFromTFObjectWebhookWebhookLinkableWrapper(data *webhookWebhookLinkableWrapperData, obj types.Object) {
	data.Items = obj.Attributes()["items"].(basetypes.ListValue)
}

func fillDataStructFromTFObjectWebhookWebhookNameUuid(data *webhookWebhookNameUuidData, obj types.Object) {
	data.Name = obj.Attributes()["name"].(basetypes.StringValue)
	data.Object = obj.Attributes()["object"].(basetypes.ObjectValue)
	data.UUID = obj.Attributes()["uuid"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectWebhookWebhookPush(data *webhookWebhookPushData, obj types.Object) {
	data.AccountUUID = obj.Attributes()["account_uuid"].(basetypes.StringValue)
	data.ByPartyUUID = obj.Attributes()["by_party_uuid"].(basetypes.StringValue)
	data.CertificateUUID = obj.Attributes()["certificate_uuid"].(basetypes.StringValue)
	data.ClientUUID = obj.Attributes()["client_uuid"].(basetypes.StringValue)
	data.DirectoryUUID = obj.Attributes()["directory_uuid"].(basetypes.StringValue)
	data.GroupUUID = obj.Attributes()["group_uuid"].(basetypes.StringValue)
	data.Group2UUID = obj.Attributes()["group2_uuid"].(basetypes.StringValue)
	data.GroupClassificationUUID = obj.Attributes()["group_classification_uuid"].(basetypes.StringValue)
	data.ModificationRequestUUID = obj.Attributes()["modification_request_uuid"].(basetypes.StringValue)
	data.OrganizationalUnitUUID = obj.Attributes()["organizational_unit_uuid"].(basetypes.StringValue)
	data.Parameter1 = obj.Attributes()["parameter1"].(basetypes.StringValue)
	data.Parameter2 = obj.Attributes()["parameter2"].(basetypes.StringValue)
	data.Parameter3 = obj.Attributes()["parameter3"].(basetypes.StringValue)
	data.SecurityLevel = obj.Attributes()["security_level"].(basetypes.StringValue)
	data.Seq = obj.Attributes()["seq"].(basetypes.Int64Value)
	data.ServiceAccountUUID = obj.Attributes()["service_account_uuid"].(basetypes.StringValue)
	data.SystemUUID = obj.Attributes()["system_uuid"].(basetypes.StringValue)
	data.Timestamp = obj.Attributes()["timestamp"].(basetypes.StringValue)
	data.VaultRecordUUID = obj.Attributes()["vault_record_uuid"].(basetypes.StringValue)
	data.WebhookUUID = obj.Attributes()["webhook_uuid"].(basetypes.StringValue)
	data.WebhookWebhookPushType = obj.Attributes()["webhook_webhook_push_type"].(basetypes.StringValue)
}

func fillDataStructFromTFObjectWebhookWebhook_additionalObjects(data *webhookWebhook_additionalObjectsData, obj types.Object) {
	data.Audit = obj.Attributes()["audit"].(basetypes.ObjectValue)
}

func dataSourceSchemaAttrsAuditInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["application_error"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_error_parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse),
		Computed:   true,
	}
	schemaAttrs["code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["error_details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["exception"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["message"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["stacktrace"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsGeneratedSecret(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["generated_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["old_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["regenerate"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNonLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRestLink(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["href"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["rel"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSegmentCount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["audit_audit_record_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["date_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_certificate"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_client"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group_classification"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_organizational_unit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_service_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_vault_record"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_webhook"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["performed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuditAuditRecord(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountBulkUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["exclusive_selection"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["selected_accounts"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountChangeLocale(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["pending2_f_a_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["pending_password_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountSettings(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["default_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["in_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["in_multiple_organizational_units"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["multiple_organizational_units_exist"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["password_mode"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["use_token_password"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["decline_recovery_requests"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_login"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["pending_recovery_requests"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse),
		Computed:   true,
	}
	schemaAttrs["settings"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountSettings(recurse),
		Computed:   true,
	}
	schemaAttrs["stored_attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["directory_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse),
		Computed:   true,
	}
	schemaAttrs["two_f_a_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse),
		Computed:   true,
	}
	schemaAttrs["validity_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["activation_code"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["first_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["telephone"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthInternalAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountStatusObject(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthMoveInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["internal_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryInternalDirectory(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["full"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["instances"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["operations"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttribute(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthStoredAccountAttribute(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsCertificateCertificate_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["key_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificateLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeCertificateCertificate(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificatePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeClientClientApplication(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["groupclients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGeneratedSecret(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vault_record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientLdapClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["used_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(false)},
		Computed:    true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client_attributes(false),
		Computed:   true,
	}
	schemaAttrs["callback_u_r_i"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["confidential"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["debug_mode"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["id_token_claims"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["initiate_login_u_r_i"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["resource_u_r_is"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["show_landing_page"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["use_client_credentials"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["for_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["for_system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermission(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["for_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["for_system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeClientOAuth2ClientPermissionWithClient(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientSaml2Client_attributes(false),
		Computed:   true,
	}
	schemaAttrs["metadata"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["metadata_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["subject_format"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectory(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["directory_account_directory_summary_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeDirectoryAccountDirectorySummary(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryInternalDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["dialect"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["search_bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_filter"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryMaintenanceDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["base_organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["acr_values"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["enforces2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logout_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["send_login_hint"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vendor_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(false),
		Computed:   true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupAccountGroup(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)},
		Computed:    true,
	}
	schemaAttrs["group_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["application_administration"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit_config"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditConfig(false),
		Computed:   true,
	}
	schemaAttrs["audit_requested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["auditor"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_auditing_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_delegation_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_membership_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_provisioning_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["classification_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["extended_access"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["hide_audit_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["nested_under_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_group"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["record_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["single_managed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountNesting(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["connected"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAdminMail(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["body"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["accounts"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAuditAccount(false)},
		Computed:    true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_valid"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditConfig(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupAudit(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit_due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_audit_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_expired_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records_with_end_date"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["authorizing_group_auditing_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_delegation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_membership_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_provisioning_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["default_classification"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["maximum_audit_interval"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["minimum_nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["record_trail_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["required_months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassification(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["classificaton_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["info"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClient_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["client_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClient(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupFolder(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts_with_vault"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_audits"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_clients"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_provisioned_systems"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroup(recurse)},
		Computed:    true,
	}
	schemaAttrs["segments"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeSegmentCount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["admins"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["authorized_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["client_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["content_administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groupauditinginfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupinfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["helpdesk"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["myaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["mydelegatedaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["nested_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_directories"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_groups_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_organizational_units"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["recent_audits"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["requeststatus"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	schemaAttrs["webhooks"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["classifications"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupGroupClassification(recurse)},
		Computed:    true,
	}
	schemaAttrs["overdue_audit_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["overdue_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["unaudited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["valid_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vaults_without_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeGroupProvisioningGroup(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadDisplayedLaunchpadTile(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeLaunchpadLaunchpadTile(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadManualLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["current_license_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_contact"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_domains"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["features"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["issue_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["not_before_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["users_hard_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_pro_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_soft_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mark_item_marker_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarker_parameters(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarkers(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["markers"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeMarkItemMarker(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationCertificateExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificate(recurse),
		Computed:   true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse),
		Computed:   true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ldap_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(recurse),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		Computed:   true,
	}
	schemaAttrs["usage"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["webhook_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupAuditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["notification_group_audit_required_notification_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse),
		Computed:   true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationLicenseStatusNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["license_info_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationModificationRequestNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["admins"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["groups"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestModificationRequest(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotifications(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeNotificationNotification(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationOldApiVersionUsageNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["api_version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationProvisionConfigRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["systems"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationUpdateAvailableNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["released_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationVaultRecordExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationAccountOrganizationalUnit(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["depth"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parent_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnitAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeOrganizationOrganizationalUnit(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["create_as_parent_of"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["result"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroup(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningAccountProvisioningStatus(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["number_of_failed_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_not_permitted_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_successful_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["state"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["provgroups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_permission_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status_report"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_on_dashboard"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupOnSystem(recurse)},
		Computed:    true,
	}
	schemaAttrs["unlinked_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["next_u_i_d"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionNumberSequence(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAD(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["sam_account_name_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureTenant(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["idp_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedInternalLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(false),
		Computed:   true,
	}
	schemaAttrs["base_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["user_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["gid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["hashing_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["numbering"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_d_n"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystem(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningProvisionedSystemSyncLog(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["issued_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["login_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["management_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["statistics"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse),
		Computed:   true,
	}
	schemaAttrs["supported_group_types"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["create_new_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["create_service_accounts_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["reuse_existing_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeProvisioningGroupProvisioningStatus(recurse)},
		Computed:    true,
	}
	schemaAttrs["ignore_errors"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["restricted_by_license"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningTokenPassword(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractApplicationModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["access_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["make_manager"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAddGroupAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["new_admin_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateServiceAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestDisable2FARequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["subject"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestExtendAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["extend_until"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantApplicationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantClientPermissionRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["permission_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantServiceAccountGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	schemaAttrs["service_account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinVaultRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequestLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRequestModificationRequest(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accept_params"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reset_status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["new_vault_and_directory_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["new_vault_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["unsynced_password"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["cooldown_end"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["managers"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["nr_accepted"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reset_via_mail"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveProvisionedSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestReviewAuditRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRevokeAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["admin_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupAuthorizingGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupNestedGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferAuditorGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestUpdateGroupMembershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_to_update_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["update_group_membership_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestVerifyInternalAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["internal_account_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password_rotation"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccountGroup(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeServiceaccountServiceAccount(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGeneratedSecret(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["disabled_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["password_scheme_enabled_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse),
		Computed:   true,
	}
	schemaAttrs["system_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleStringValue(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleVersionInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["contract_versions"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	schemaAttrs["key_hub_version"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vault_deleted_vault_holder_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeVaultDeletedVaultHolder(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["target_group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVault(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["access_available"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["records"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecord(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["file"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["totp"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["write_totp"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShare(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_vault_record_share_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["children"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeVaultVaultRecordShare(recurse)},
		Computed:    true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShare(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["delete_tile"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["parent_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse),
		Computed:   true,
	}
	schemaAttrs["share_summary"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse),
		Computed:   true,
	}
	schemaAttrs["shares"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vaultholder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultHolder(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlock(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlockResponse(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["expires_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["session_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhook_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["all_types"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authentication_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bearer_token"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["custom_header_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["custom_header_value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["verbose_payloads"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeRestLink(recurse)},
		Computed:    true,
	}
	schemaAttrs["permissions"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeAuthPermission(recurse)},
		Computed:    true,
	}
	schemaAttrs["payload"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookPush(false),
		Computed:   true,
	}
	schemaAttrs["reponse_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["response"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["time"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["trigger_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.ObjectType{AttrTypes: objectAttrsTypeWebhookWebhookDelivery(recurse)},
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLinkable(recurse),
		Computed:   true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookPush(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["by_party_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group2_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_classification_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modification_request_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["seq"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["timestamp"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_record_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["webhook_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["webhook_webhook_push_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}

func SliceToTF[T interface{}](elemType attr.Type, vals []T, toValue func(T, *diag.Diagnostics) attr.Value) (attr.Value, diag.Diagnostics) {
	var diags diag.Diagnostics
	ret := make([]attr.Value, 0, len(vals))
	for _, curVal := range vals {
		ret = append(ret, toValue(curVal, &diags))
	}
	return types.ListValue(elemType, ret)
}

func Int32PToInt64P(in *int32) *int64 {
	if in == nil {
		return nil
	}
	ret := int64(*in)
	return &ret
}

func StringerToTF[T fmt.Stringer](val *T) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	return types.StringValue((*val).String())
}

func TimeToTF(val time.Time) attr.Value {
	ret, _ := val.MarshalText()
	return types.StringValue(string(ret))
}

func TimePointerToTF(val *time.Time) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	ret, _ := val.MarshalText()
	return types.StringValue(string(ret))
}

func WithUuidToTF(val interface{ GetUuid() *string }) attr.Value {
	if val == nil {
		return types.StringNull()
	}
	return types.StringPointerValue(val.GetUuid())
}
