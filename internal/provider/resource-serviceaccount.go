// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	keyhub "github.com/topicuskeyhub/sdk-go"
	keyhubmodels "github.com/topicuskeyhub/sdk-go/models"
	keyhubreq "github.com/topicuskeyhub/sdk-go/serviceaccount"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ resource.Resource                = &serviceaccountResource{}
	_ resource.ResourceWithImportState = &serviceaccountResource{}
	_ resource.ResourceWithConfigure   = &serviceaccountResource{}
)

func NewServiceaccountResource() resource.Resource {
	return &serviceaccountResource{}
}

type serviceaccountResource struct {
	client *keyhub.KeyHubClient
}

func (r *serviceaccountResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = ProviderName + "_serviceaccount"
	tflog.Info(ctx, "Registred resource "+resp.TypeName)
}

func (r *serviceaccountResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: resourceSchemaAttrsServiceaccountServiceAccount(true),
	}
}

func (r *serviceaccountResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*keyhub.KeyHubClient)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *keyhub.KeyHubClient, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *serviceaccountResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data serviceaccountServiceAccountDataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	obj, diags := types.ObjectValueFrom(ctx, serviceaccountServiceAccountAttrTypesRSRecurse, data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRSServiceaccountServiceAccount(ctx, true, obj)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Info(ctx, "Creating Topicus KeyHub serviceaccount")
	newWrapper := keyhubmodels.NewServiceaccountServiceAccountLinkableWrapper()
	newWrapper.SetItems([]keyhubmodels.ServiceaccountServiceAccountable{newTkh})
	wrapper, err := r.client.Serviceaccount().Post(
		ctx, newWrapper, &keyhubreq.ServiceaccountRequestBuilderPostRequestConfiguration{
			QueryParameters: &keyhubreq.ServiceaccountRequestBuilderPostQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})
	tkh, diags := findFirst[keyhubmodels.ServiceaccountServiceAccountable](ctx, wrapper, "serviceaccount", nil, err)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tf, diags := tkhToTFObjectRSServiceaccountServiceAccount(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	fillDataStructFromTFObjectRSServiceaccountServiceAccount(&data, tf)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)

	tflog.Info(ctx, "Created a new Topicus KeyHub serviceaccount")
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceaccountResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data serviceaccountServiceAccountDataRS
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	tflog.Info(ctx, "Reading serviceaccount from Topicus KeyHub")
	tkh, err := r.client.Serviceaccount().ByServiceaccountidInt64(getSelfLink(data.Links).ID.ValueInt64()).Get(
		ctx, &keyhubreq.WithServiceaccountItemRequestBuilderGetRequestConfiguration{
			QueryParameters: &keyhubreq.WithServiceaccountItemRequestBuilderGetQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	tf, diags := tkhToTFObjectRSServiceaccountServiceAccount(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	fillDataStructFromTFObjectRSServiceaccountServiceAccount(&data, tf)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceaccountResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data serviceaccountServiceAccountDataRS
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	ctx = context.WithValue(ctx, keyHubClientKey, r.client)
	obj, diags := types.ObjectValueFrom(ctx, serviceaccountServiceAccountAttrTypesRSRecurse, data)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	newTkh, diags := tfObjectToTKHRSServiceaccountServiceAccount(ctx, true, obj)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Info(ctx, "Updating Topicus KeyHub serviceaccount")
	tkh, err := r.client.Serviceaccount().ByServiceaccountidInt64(getSelfLink(data.Links).ID.ValueInt64()).Put(
		ctx, newTkh, &keyhubreq.WithServiceaccountItemRequestBuilderPutRequestConfiguration{
			QueryParameters: &keyhubreq.WithServiceaccountItemRequestBuilderPutQueryParameters{
				Additional: collectAdditional(data.AdditionalObjects),
			},
		})

	if !isHttpStatusCodeOk(ctx, -1, err, &resp.Diagnostics) {
		return
	}

	tf, diags := tkhToTFObjectRSServiceaccountServiceAccount(true, tkh)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	fillDataStructFromTFObjectRSServiceaccountServiceAccount(&data, tf)

	tflog.Info(ctx, "Updated a Topicus KeyHub serviceaccount")
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *serviceaccountResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	resp.Diagnostics.AddError("Cannot delete a serviceaccount", "Topicus KeyHub does not support deleting a serviceaccount via Terraform. The requested changes are not applied.")
}

func (r *serviceaccountResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("uuid"), req, resp)
}
