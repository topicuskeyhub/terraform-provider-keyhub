// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func dataSourceSchemaAttrsAuditInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["application_error"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["application_error_parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse),
		Computed:   true,
	}
	schemaAttrs["code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["error_details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["exception"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["message"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["stacktrace"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsErrorReport_applicationErrorParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsGeneratedSecret(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["generated_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["old_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["regenerate"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNonLinkable(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRestLink(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["href"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["rel"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSegmentCount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAccountVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"parent",
					"passwordMetadata",
					"secret",
					"shareSummary",
					"shares",
					"tile",
					"vaultholder",
				),
			),
		},
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["audit_audit_record_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["date_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_certificate"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_client"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_group_classification"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_organizational_unit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_service_account"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_vault_record"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["on_webhook"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["performed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuditAuditRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuditAuditRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"activeLogin",
					"audit",
					"groups",
					"pendingRecoveryRequests",
					"settings",
					"storedAttributes",
					"vault",
				),
			),
		},
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountBulkUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["exclusive_selection"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["selected_accounts"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountChangeLocale(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["pending2fa_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["pending_password_recovery_request"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountSettings(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["default_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["in_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["in_multiple_organizational_units"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["multiple_organizational_units_exist"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["password_mode"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["use_token_password"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["decline_recovery_requests"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_authentication_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_login"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["pending_recovery_requests"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountRecoveryStatus(recurse),
		Computed:   true,
	}
	schemaAttrs["settings"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountSettings(recurse),
		Computed:   true,
	}
	schemaAttrs["stored_attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["directory_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse),
		Computed:   true,
	}
	schemaAttrs["two_fa_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse),
		Computed:   true,
	}
	schemaAttrs["validity_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_directoryStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_twoFAStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthAccountsAuditStats_validityStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"activeLogin",
					"audit",
					"groups",
					"pendingRecoveryRequests",
					"settings",
					"storedAttributes",
					"vault",
				),
			),
		},
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["activation_code"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["first_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["telephone"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthInternalAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthInternalAccountStatusObject(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthMoveInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["internal_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryInternalDirectory(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["full"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["instances"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["operations"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["type_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttribute(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsAuthStoredAccountAttributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthStoredAccountAttribute(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsCertificateCertificate_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["key_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificateLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsCertificateCertificate(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificatePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["alias"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_certificate_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["certificate_data"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fingerprint_sha256"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["global"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["subject_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsCertificateCertificate_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientApplicationVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["client_application_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"parent",
					"passwordMetadata",
					"secret",
					"shareSummary",
					"shares",
					"tile",
					"vaultholder",
				),
			),
		},
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientClientApplication_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"groupclients",
					"groups",
					"secret",
					"tile",
					"vaultRecordCount",
				),
			),
		},
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["o_auth2_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(false),
		Computed:   true,
	}
	schemaAttrs["ldap_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(false),
		Computed:   true,
	}
	schemaAttrs["saml2_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientSaml2Client(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientClientApplication(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplicationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["client_client_application_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["scopes"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["sso_application"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientClientApplication_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupclients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGeneratedSecret(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vault_record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientLdapClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["bind_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["used_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client_attributes(recurse),
		Computed:   true,
	}
	schemaAttrs["callback_uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["confidential"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["debug_mode"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["id_token_claims"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["initiate_login_uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["resource_uris"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_secret_in_vault"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["shared_secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["show_landing_page"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["use_client_credentials"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["for_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["for_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["for_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["for_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClient(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientOAuth2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientSaml2Client_attributes(recurse),
		Computed:   true,
	}
	schemaAttrs["metadata"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["metadata_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["subject_format"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsClientSaml2Client_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsDeletedVaultHolderVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["deleted_vault_holder_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"parent",
					"passwordMetadata",
					"secret",
					"shareSummary",
					"shares",
					"tile",
					"vaultholder",
				),
			),
		},
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"markers",
					"status",
				),
			),
		},
	}
	schemaAttrs["base_organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["default_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["helpdesk_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["restrict2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["internal_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryInternalDirectory(false),
		Computed:   true,
	}
	schemaAttrs["o_id_c_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryOIDCDirectory(false),
		Computed:   true,
	}
	schemaAttrs["l_d_a_p_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryLDAPDirectory(false),
		Computed:   true,
	}
	schemaAttrs["maintenance_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryMaintenanceDirectory(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectory(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_validity_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_account_directory_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["directory_account_directory_summary_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["username_customizable"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsDirectoryAccountDirectorySummary(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryAccountDirectory_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryStatusReport(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryInternalDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["base_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["dialect"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["search_bind_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["search_filter"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryMaintenanceDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsDirectoryOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["acr_values"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["attributes_to_store"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["domain_restriction"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["enforces2fa"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["fully_resolved_issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["issuer"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logout_url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["send_login_hint"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vendor_escaped"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"vault",
				),
			),
		},
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(false),
		Computed:   true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	schemaAttrs["group_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"accounts",
					"administeredClients",
					"administeredSystems",
					"admins",
					"audit",
					"authorizedGroups",
					"clientPermissions",
					"clients",
					"contentAdministeredSystems",
					"groupauditinginfo",
					"groupinfo",
					"helpdesk",
					"markers",
					"myaccount",
					"mydelegatedaccount",
					"nestedGroups",
					"ownedClients",
					"ownedDirectories",
					"ownedGroupsOnSystem",
					"ownedOrganizationalUnits",
					"ownedSystems",
					"recentAudits",
					"requeststatus",
					"serviceAccounts",
					"systems",
					"vault",
					"webhooks",
				),
			),
		},
	}
	schemaAttrs["application_administration"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["audit_config"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditConfig(false),
		Computed:   true,
	}
	schemaAttrs["audit_requested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["auditor"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_auditing"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_delegation"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_membership"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_provisioning"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["authorizing_group_types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["classification"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["extended_access"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["hide_audit_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["nested_under"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	schemaAttrs["private_group"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["record_trail"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["single_managed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_recovery"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountNesting(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["connected"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAdminMail(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["body"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["accounts"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAuditAccount(false),
		},
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["account_valid"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditConfig(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit_due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_audit_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_disabled_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_expired_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records_with_end_date"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"info",
				),
			),
		},
	}
	schemaAttrs["authorizing_group_auditing_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_delegation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_membership_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authorizing_group_provisioning_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["default_classification"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["maximum_audit_interval"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["minimum_nr_managers"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["record_trail_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["required_months"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["rotating_password_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["vault_requires_activation"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassificationUpdate(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["classificaton"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClassification_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["info"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClassificationInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupClient_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClient(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupClient_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupFolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nr_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_accounts_with_vault"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_audits"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_clients"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_provisioned_systems"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["nr_vault_records"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupSegmentedLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		},
		Computed: true,
	}
	schemaAttrs["segments"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsSegmentCount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["admins"] = dsschema.SingleNestedAttribute{
		Attributes:         dataSourceSchemaAttrsGroupGroupAccountLinkableWrapper(recurse),
		Computed:           true,
		DeprecationMessage: "This property will be removed in a future version.",
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["authorized_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupAuthorizedGroupsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["client_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["content_administered_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["groupauditinginfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditingInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groupinfo"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["helpdesk"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectorySummaryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["myaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["mydelegatedaccount"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["nested_groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_clients"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_directories"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_groups_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_organizational_units"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["owned_systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["recent_audits"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupAuditLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["requeststatus"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	schemaAttrs["webhooks"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupGroupsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["classifications"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupClassification(recurse),
		},
		Computed: true,
	}
	schemaAttrs["overdue_audit_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["overdue_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["unaudited_groups"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["valid_vault_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vaults_without_policies"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupProvisioningGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupProvisioningGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsGroupVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"parent",
					"passwordMetadata",
					"secret",
					"shareSummary",
					"shares",
					"tile",
					"vaultholder",
				),
			),
		},
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTiles(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsLaunchpadDisplayedLaunchpadTile(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["identicon_code"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["launchpad_launchpad_tile_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["logo"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["vault_record_launchpad_tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(false),
		Computed:   true,
	}
	schemaAttrs["sso_application_launchpad_tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(false),
		Computed:   true,
	}
	schemaAttrs["manual_launchpad_tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadManualLaunchpadTile(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTileLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsLaunchpadLaunchpadTile(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTilePrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadLaunchpadTile_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadManualLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["title"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadSsoApplicationLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["uri"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["current_license_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_contact"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["customer_domains"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["details"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["expiration_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["features"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["issue_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["not_before_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["users_hard_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_pro_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["users_soft_limit"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["mark_item_marker_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarker_parameters(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarker_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsMarkItemMarkers(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["markers"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsMarkItemMarker(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedAuthInternalAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsAuthAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["account_directory_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"activeLogin",
					"audit",
					"groups",
					"pendingRecoveryRequests",
					"settings",
					"storedAttributes",
					"vault",
				),
			),
		},
	}
	schemaAttrs["account_permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(false),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["can_request_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["directory_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["directory_rotating_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["email"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["id_in_directory"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["key_hub_password_change_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["last_modified_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["license_role"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["locale"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reregistration_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["token_password_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["valid_in_directory"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["activation_code"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["activation_deadline"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["company"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["first_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["telephone"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedClientOAuth2ClientPermission(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermission_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["client_application_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["for_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["for_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedGroupAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["admin"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"vault",
				),
			),
		},
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(false),
		Computed:   true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedGroupGroupAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["disconnected_nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_used"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["nested"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["two_factor_status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["visible_for_provisioning"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedGroupGroupAudit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsGroupGroupAudit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["group_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["accounts"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupAuditAccount(false),
		},
		Computed: true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["created_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_on_audit"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["reviewed_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["submitted_by"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedOrganizationAccountOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["account_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedOrganizationOrganizationalUnitAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["organizational_unit_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedProvisioningGroupOnSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["provisioned_system_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"provgroups",
					"serviceAccounts",
				),
			),
		},
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedProvisioningProvisionedAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["provisioned_system_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["uid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedProvisioningProvisionedSystemSyncLog(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["provisioned_system_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedServiceaccountServiceAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["service_account_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNestedWebhookWebhookDelivery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["webhook_uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["payload"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookPush(false),
		Computed:   true,
	}
	schemaAttrs["reponse_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["response"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["time"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["trigger_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationCertificateExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificate(recurse),
		Computed:   true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryLDAPDirectory(recurse),
		Computed:   true,
	}
	schemaAttrs["expiration"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ldap_client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(recurse),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		Computed:   true,
	}
	schemaAttrs["usage"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["webhook"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhook(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupAuditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["due_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["notification_group_audit_required_notification_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["parameters"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse),
		Computed:   true,
	}
	schemaAttrs["reason"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationGroupEditRequiredNotification_parameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationInvalidSignaturesDetectedNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationLicenseStatusNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["active_accounts"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["license_info"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLicenseKeyHubLicenseInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationModificationRequestNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["admins"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["groups"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestModificationRequest(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationNotifications(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsNotificationNotification(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationOldApiVersionUsageNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["api_version"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2Client(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationProvisionConfigRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["systems"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationRotatingPasswordRequiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationUpdateAvailableNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["released_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsNotificationVaultRecordExpiredNotification(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["depth"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnit(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsOrganizationOrganizationalUnit_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["attributes"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse),
		Computed:   true,
	}
	schemaAttrs["base_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bind_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["failover_host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["failover_trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["group_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["host"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object_classes"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["port"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["ssh_public_key_supported"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["user_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP_attributes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["result"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroup(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["status"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningAccountProvisioningStatus(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["number_of_failed_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_not_permitted_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_of_successful_calls"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["state"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"provgroups",
					"serviceAccounts",
				),
			),
		},
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupOnSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["provgroups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupProvisioningGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["service_accounts"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["folder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupFolder(recurse),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroup(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_permission_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status_report"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAccountProvisioningStatusReport(recurse),
		Computed:   true,
	}
	schemaAttrs["visible_on_dashboard"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningOwnedGroupOnSystemsWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		},
		Computed: true,
	}
	schemaAttrs["unlinked_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"systems",
				),
			),
		},
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["next_uid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionNumberSequence_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["systems"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAD(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["sam_account_name_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["last_active"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["validity"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["uid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedAzureTenant(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["client_id"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client_secret"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["idp_domain"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["tenant"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedInternalLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientLdapClient(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAP(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["gid"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["hashing_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["numbering"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionNumberSequence(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedLDAPDirectory(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["group_dn"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"account",
					"audit",
					"issuedPermissions",
					"loginName",
					"managementPermissions",
					"markers",
					"statistics",
					"supportedGroupTypes",
				),
			),
		},
	}
	schemaAttrs["account_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["content_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["external_uuid"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["owner"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["self_service_existing_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_new_groups"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["self_service_service_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["should_destroy_unknown_accounts"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["username_prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["abstract_provisioned_ldap"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningAbstractProvisionedLDAP(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_ldap"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedLDAP(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_azure_tenant"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAzureTenant(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_internal_ldap"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedInternalLDAP(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_azure_oidc_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAzureOIDCDirectory(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_ldap_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedLDAPDirectory(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_a_d"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAD(false),
		Computed:   true,
	}
	schemaAttrs["provisioned_azure_sync_ldap_directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAzureSyncLDAPDirectory(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystem(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["provisioning_provisioned_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["created_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["errors"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["log"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["modifications"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisionedSystem_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedAccount(recurse),
		Computed:   true,
	}
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["issued_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["login_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["management_permissions"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse),
		Computed:   true,
	}
	schemaAttrs["markers"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsMarkItemMarkers(recurse),
		Computed:   true,
	}
	schemaAttrs["statistics"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningCircuitBreakerStatistics(recurse),
		Computed:   true,
	}
	schemaAttrs["supported_group_types"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystemTypes(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningManagementPermissions(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["create_new_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["create_service_accounts_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["reuse_existing_groups_allowed"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningProvisioningStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["groups"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsProvisioningGroupProvisioningStatus(recurse),
		},
		Computed: true,
	}
	schemaAttrs["ignore_errors"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["restricted_by_license"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsProvisioningTokenPassword(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractApplicationModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["application"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsOrganizationOrganizationalUnitPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["access_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptJoinGroupRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["make_manager"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAcceptModificationRequestParameters(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestAddGroupAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["new_admin"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestCreateServiceAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestDisable2FARequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["subject"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestExtendAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["extend_until"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantAccessRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantApplicationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantClientPermissionRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["permission_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["activation_required"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestGrantServiceAccountGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		Computed:   true,
	}
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestJoinVaultRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"resetStatus",
				),
			),
		},
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["feedback"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["mail_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_modification_request_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["abstract_provisioned_system_modification_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAbstractProvisionedSystemModificationRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_provisioned_system_administration_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_provisioned_system_ownership_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(false),
		Computed:   true,
	}
	schemaAttrs["password_reset_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestPasswordResetRequest(false),
		Computed:   true,
	}
	schemaAttrs["revoke_admin_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestRevokeAdminRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_group_on_system_request_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantGroupOnSystemRequestRequest(false),
		Computed:   true,
	}
	schemaAttrs["abstract_application_modification_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAbstractApplicationModificationRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_application_administration_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferApplicationAdministrationRequest(false),
		Computed:   true,
	}
	schemaAttrs["create_service_account_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestCreateServiceAccountRequest(false),
		Computed:   true,
	}
	schemaAttrs["remove_provisioned_system_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestRemoveProvisionedSystemRequest(false),
		Computed:   true,
	}
	schemaAttrs["review_audit_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestReviewAuditRequest(false),
		Computed:   true,
	}
	schemaAttrs["abstract_organizational_unit_modification_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAbstractOrganizationalUnitModificationRequest(false),
		Computed:   true,
	}
	schemaAttrs["create_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestCreateGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_group_on_system_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantGroupOnSystemRequest(false),
		Computed:   true,
	}
	schemaAttrs["verify_internal_account_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestVerifyInternalAccountRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_client_permission_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantClientPermissionRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_organizational_unit_ownership_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(false),
		Computed:   true,
	}
	schemaAttrs["setup_nested_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestSetupNestedGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["join_vault_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestJoinVaultRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_service_account_administration_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_application_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantApplicationRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_access_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantAccessRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_group_on_system_ownership_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(false),
		Computed:   true,
	}
	schemaAttrs["add_group_admin_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestAddGroupAdminRequest(false),
		Computed:   true,
	}
	schemaAttrs["extend_access_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestExtendAccessRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_provisioned_system_content_administration_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(false),
		Computed:   true,
	}
	schemaAttrs["update_group_membership_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestUpdateGroupMembershipRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_auditor_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferAuditorGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["transfer_application_ownership_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestTransferApplicationOwnershipRequest(false),
		Computed:   true,
	}
	schemaAttrs["remove_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestRemoveGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["setup_authorizing_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestSetupAuthorizingGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["create_group_on_system_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestCreateGroupOnSystemRequest(false),
		Computed:   true,
	}
	schemaAttrs["remove_organizational_unit_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(false),
		Computed:   true,
	}
	schemaAttrs["grant_service_account_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestGrantServiceAccountGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["disable2fa_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestDisable2FARequest(false),
		Computed:   true,
	}
	schemaAttrs["join_group_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestJoinGroupRequest(false),
		Computed:   true,
	}
	schemaAttrs["enable_technical_administration_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestEnableTechnicalAdministrationRequest(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequestLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRequestModificationRequest(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestModificationRequest_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["reset_status"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestPasswordResetRequestStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["cooldown_end"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["managers"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["nr_accepted"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["reset_via_mail"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveOrganizationalUnitRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["organizational_unit_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRemoveProvisionedSystemRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["system_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestReviewAuditRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestRevokeAdminRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["admin"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupAuthorizingGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["authorizing_group_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestSetupNestedGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["connect"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["requesting_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferApplicationOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferAuditorGroupRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferGroupOnSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["group_on_system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningGroupOnSystem(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferOrganizationalUnitOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferProvisionedSystemOwnershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestTransferServiceAccountAdministrationRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestUpdateGroupMembershipRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_to_update"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["current_end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["current_rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["rights"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["update_group_membership_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsRequestVerifyInternalAccountRequest(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["internal_account_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"groups",
					"secret",
				),
			),
		},
	}
	schemaAttrs["description"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(false),
		Computed:   true,
	}
	schemaAttrs["password_rotation"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["technical_administrator"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["display_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["provisioning_group_on_system_primer_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["short_name_in_system"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroup(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountGroup_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccount(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountStatus(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account_enabled"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccount_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["groups"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountGroupLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGeneratedSecret(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["disabled_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["password_scheme_enabled_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse),
		Computed:   true,
	}
	schemaAttrs["system_stats"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsServiceaccountServiceAccountsAuditStats_systemStats(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleStringValue(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["value"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsSimpleVersionInfo(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["contract_versions"] = dsschema.ListAttribute{
		ElementType: types.Int64Type,
		Computed:    true,
	}
	schemaAttrs["key_hub_version"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"vault",
				),
			),
		},
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["record_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["vault_deleted_vault_holder_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolderLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultDeletedVaultHolder(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultHolder_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["vault"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVault(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultDeletedVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["prefix"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["target_group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["action"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["share_duration"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultMoveVaultRecord_shareDuration(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["nanos"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["seconds"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultPasswordMetadata(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["dictionary"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["duplicate"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["hash"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["length"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["lower_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["number_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["special_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["strength"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["upper_count"] = dsschema.Int64Attribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVault(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["access_available"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["records"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultHolder(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
					"parent",
					"passwordMetadata",
					"secret",
					"shareSummary",
					"shares",
					"tile",
					"vaultholder",
				),
			),
		},
	}
	schemaAttrs["derived"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["end_date"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["filename"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["warning_period"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecord(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["color"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["share_end_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["comment"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["file"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["totp"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShare(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_vault_record_share_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["children"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsVaultVaultRecordShare(recurse),
		},
		Computed: true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShare(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecord_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	schemaAttrs["parent"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["password_metadata"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultPasswordMetadata(recurse),
		Computed:   true,
	}
	schemaAttrs["secret"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordSecrets(recurse),
		Computed:   true,
	}
	schemaAttrs["share_summary"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordShareSummary(recurse),
		Computed:   true,
	}
	schemaAttrs["shares"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultRecordPrimerLinkableWrapper(recurse),
		Computed:   true,
	}
	schemaAttrs["tile"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLaunchpadVaultRecordLaunchpadTile(recurse),
		Computed:   true,
	}
	schemaAttrs["vaultholder"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsVaultVaultHolder(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultRecovery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(recurse),
		Computed:   true,
	}
	schemaAttrs["private_key"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlock(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsVaultVaultUnlockResponse(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["expires_at"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["session_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhook_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuthAccountPrimer(false),
		Computed:   true,
	}
	schemaAttrs["active"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["all_types"] = dsschema.BoolAttribute{
		Computed: true,
	}
	schemaAttrs["authentication_scheme"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_password"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["basic_auth_username"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["bearer_token"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsClientClientApplicationPrimer(false),
		Computed:   true,
	}
	schemaAttrs["client_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["custom_header_name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["custom_header_value"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsDirectoryAccountDirectoryPrimer(false),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsGroupGroupPrimer(false),
		Computed:   true,
	}
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsProvisioningProvisionedSystemPrimer(false),
		Computed:   true,
	}
	schemaAttrs["tls"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["trusted_certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsCertificateCertificatePrimer(false),
		Computed:   true,
	}
	schemaAttrs["types"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Computed:    true,
	}
	schemaAttrs["url"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	schemaAttrs["verbose_payloads"] = dsschema.BoolAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	if recurse {
		schemaAttrs["additional_objects"] = dsschema.SingleNestedAttribute{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(false),
			Computed:   true,
		}
	}
	schemaAttrs["links"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsRestLink(recurse),
		},
		Computed: true,
	}
	schemaAttrs["permissions"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsAuthPermission(recurse),
		},
		Computed: true,
	}
	schemaAttrs["additional"] = dsschema.ListAttribute{
		ElementType: types.StringType,
		Optional:    true,
		Validators: []validator.List{
			listvalidator.ValueStringsAre(
				stringvalidator.OneOf(
					"audit",
				),
			),
		},
	}
	schemaAttrs["payload"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookPush(false),
		Computed:   true,
	}
	schemaAttrs["reponse_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["request_headers"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["response"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["status"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["time"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["trigger_time"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDeliveryLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsWebhookWebhookDelivery(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookDelivery_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookLinkableWrapper(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["items"] = dsschema.ListNestedAttribute{
		NestedObject: dsschema.NestedAttributeObject{
			Attributes: dataSourceSchemaAttrsWebhookWebhook(recurse),
		},
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["name"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["object"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsLinkable(recurse),
		Computed:   true,
	}
	schemaAttrs["uuid"] = dsschema.StringAttribute{
		Required: recurse,
		Computed: !recurse,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhookPush(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["by_party"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["certificate"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["client"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["directory"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group2"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["group_classification"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["modification_request"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["organizational_unit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["parameter1"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter2"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["parameter3"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["security_level"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["seq"] = dsschema.Int64Attribute{
		Computed: true,
	}
	schemaAttrs["service_account"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["system"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["timestamp"] = dsschema.StringAttribute{
		Computed: true,
	}
	schemaAttrs["vault_record"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["webhook"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsWebhookWebhookNameUuid(recurse),
		Computed:   true,
	}
	schemaAttrs["webhook_webhook_push_type"] = dsschema.StringAttribute{
		Computed: true,
	}
	return schemaAttrs
}
func dataSourceSchemaAttrsWebhookWebhook_additionalObjects(recurse bool) map[string]dsschema.Attribute {
	schemaAttrs := make(map[string]dsschema.Attribute)
	schemaAttrs["audit"] = dsschema.SingleNestedAttribute{
		Attributes: dataSourceSchemaAttrsAuditInfo(recurse),
		Computed:   true,
	}
	return schemaAttrs
}
