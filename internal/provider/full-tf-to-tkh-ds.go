// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.
// Copyright (c) Topicus Security B.V.
// SPDX-License-Identifier: APSL-2.0

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"context"
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/microsoft/kiota-abstractions-go/serialization"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tfObjectToTKHDSAuditInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditInfoable
	tkh = keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	tkh.SetLastModifiedBy(objAttrs["last_modified_by"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGeneratedSecret(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GeneratedSecretable
	tkh = keyhubmodel.NewGeneratedSecret()
	tkh.SetGeneratedSecret(objAttrs["generated_secret"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.Linkableable
	tkh = keyhubmodel.NewLinkable()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSNonLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NonLinkableable
	tkh = keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHDSRestLink(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RestLinkable
	tkh = keyhubmodel.NewRestLink()
	tkh.SetHref(objAttrs["href"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetId(objAttrs["id"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetRel(objAttrs["rel"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuditGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditable
	tkh = keyhubmodel.NewAuditGroupAudit()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["accounts"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditAccountable {
			tkh, d := tfObjectToTKHDSAuditGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameOnAudit(objAttrs["name_on_audit"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["nested_groups"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditNestedGroupAuditable {
			tkh, d := tfObjectToTKHDSAuditNestedGroupAudit(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(objAttrs["reviewed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuditGroupAuditStatus, func(val any) keyhubmodel.AuditGroupAuditStatus { return *val.(*keyhubmodel.AuditGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(objAttrs["submitted_by"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSAuditGroupAudit_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditGroupAuditAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditAccountable
	tkh = keyhubmodel.NewAuditGroupAuditAccount()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountUuid(objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountValid(objAttrs["account_valid"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuditGroupAuditLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditLinkableWrapperable
	tkh = keyhubmodel.NewAuditGroupAuditLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditable {
			tkh, d := tfObjectToTKHDSAuditGroupAudit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditGroupAudit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAudit_additionalObjectsable
	tkh = keyhubmodel.NewAuditGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuditNestedGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditNestedGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditNestedGroupAuditable
	tkh = keyhubmodel.NewAuditNestedGroupAudit()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditNestedGroupAction, func(val any) keyhubmodel.AuditAuditNestedGroupAction {
			return *val.(*keyhubmodel.AuditAuditNestedGroupAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupUuid(objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountable
	tkh = keyhubmodel.NewAuthAccount()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["account_permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDirectoryPasswordChangeRequired(objAttrs["directory_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetDirectoryRotatingPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetEmail(objAttrs["email"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdInDirectory(objAttrs["id_in_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyHubPasswordChangeRequired(objAttrs["key_hub_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTokenPasswordEnabled(objAttrs["token_password_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetValidInDirectory(objAttrs["valid_in_directory"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSAuthAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountPrimerable
	tkh = keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountRecoveryStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountRecoveryStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountRecoveryStatusable
	tkh = keyhubmodel.NewAuthAccountRecoveryStatus()
	tkh.SetPending2FARecoveryRequest(objAttrs["pending2fa_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetPendingPasswordRecoveryRequest(objAttrs["pending_password_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthAccountSettings(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountSettingsable
	tkh = keyhubmodel.NewAuthAccountSettings()
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["default_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDefaultOrganizationalUnit(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetInGroups(objAttrs["in_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetInMultipleOrganizationalUnits(objAttrs["in_multiple_organizational_units"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetKeyHubAdmin(objAttrs["key_hub_admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetMultipleOrganizationalUnitsExist(objAttrs["multiple_organizational_units_exist"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["password_mode"].(basetypes.StringValue), keyhubmodel.ParseAuthPasswordMode, func(val any) keyhubmodel.AuthPasswordMode { return *val.(*keyhubmodel.AuthPasswordMode) })
		diags.Append(d...)
		tkh.SetPasswordMode(val)
	}
	tkh.SetSshPublicKey(objAttrs["ssh_public_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_authentication"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorAuthentication(val)
	}
	tkh.SetUseTokenPassword(objAttrs["use_token_password"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_status"].(basetypes.StringValue), keyhubmodel.ParseVaultAccountVaultStatus, func(val any) keyhubmodel.VaultAccountVaultStatus { return *val.(*keyhubmodel.VaultAccountVaultStatus) })
		diags.Append(d...)
		tkh.SetVaultStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccount_additionalObjectsable
	tkh = keyhubmodel.NewAuthAccount_additionalObjects()
	tkh.SetActiveLogin(objAttrs["active_login"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupAccountGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountRecoveryStatus(ctx, recurse, objAttrs["pending_recovery_requests"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPendingRecoveryRequests(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountSettings(ctx, recurse, objAttrs["settings"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSettings(val)
	}
	{
		val, d := tfObjectToTKHDSAuthStoredAccountAttributes(ctx, recurse, objAttrs["stored_attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStoredAttributes(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSAuthPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthPermissionable
	tkh = keyhubmodel.NewAuthPermission()
	tkh.SetFull(objAttrs["full"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["instances"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["operations"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetOperations(val)
	}
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthStoredAccountAttribute(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributeable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthStoredAccountAttributeable
	tkh = keyhubmodel.NewAuthStoredAccountAttribute()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSAuthStoredAccountAttributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthStoredAccountAttributesable
	tkh = keyhubmodel.NewAuthStoredAccountAttributes()
	{
		val, d := tfToSliceSet(objAttrs["attributes"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthStoredAccountAttributeable {
			tkh, d := tfObjectToTKHDSAuthStoredAccountAttribute(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificateable
	tkh = keyhubmodel.NewCertificateCertificate()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	tkh.SetCertificateData(objAttrs["certificate_data"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyData(objAttrs["key_data"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSCertificateCertificate_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificatePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificatePrimerable
	tkh = keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	tkh.SetCertificateData(objAttrs["certificate_data"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSCertificateCertificate_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificate_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificate_additionalObjectsable
	tkh = keyhubmodel.NewCertificateCertificate_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplication(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationable
	tkh = keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["scopes"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if !objAttrs["ldap_client"].IsNull() {
		val, d := tfObjectToTKHDSClientLdapClient(ctx, false, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientLdapClient)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["oauth2_client"].IsNull() {
		val, d := tfObjectToTKHDSClientOAuth2Client(ctx, false, objAttrs["oauth2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientOAuth2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["saml2_client"].IsNull() {
		val, d := tfObjectToTKHDSClientSaml2Client(ctx, false, objAttrs["saml2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientSaml2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientClientApplication_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationLinkableWrapperable
	tkh = keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHDSClientClientApplication(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplicationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationPrimerable
	tkh = keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["scopes"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplication_additionalObjectsable
	tkh = keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groupclients"]))
		diags.Append(d...)
		tkh.SetGroupclients(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHDSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetVaultRecordCount(int64PToInt32P(objAttrs["vault_record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSClientLdapClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientLdapClientable
	tkh = keyhubmodel.NewClientLdapClient()
	tkh.SetBindDn(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, objAttrs["shared_secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetUsedForProvisioning(objAttrs["used_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2Clientable
	tkh = keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSliceSet(objAttrs["account_permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientOAuth2Client_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetCallbackURI(objAttrs["callback_uri"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDebugMode(objAttrs["debug_mode"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetIdTokenClaims(objAttrs["id_token_claims"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetInitiateLoginURI(objAttrs["initiate_login_uri"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["profile"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientProfile, func(val any) keyhubmodel.ClientOAuth2ClientProfile {
			return *val.(*keyhubmodel.ClientOAuth2ClientProfile)
		})
		diags.Append(d...)
		tkh.SetProfile(val)
	}
	tkh.SetResourceURIs(objAttrs["resource_uris"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, objAttrs["shared_secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetShowLandingPage(objAttrs["show_landing_page"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUseClientCredentials(objAttrs["use_client_credentials"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["for_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["for_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["for_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["for_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2Client(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSClientSaml2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientSaml2Clientable
	tkh = keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientSaml2Client_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetMetadata(objAttrs["metadata"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMetadataUrl(objAttrs["metadata_url"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tkh.SetSubjectFormat(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryable
	tkh = keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["base_organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["helpdesk_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if !objAttrs["internal_directory"].IsNull() {
		val, d := tfObjectToTKHDSDirectoryInternalDirectory(ctx, false, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryInternalDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["ldap_directory"].IsNull() {
		val, d := tfObjectToTKHDSDirectoryLDAPDirectory(ctx, false, objAttrs["ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryLDAPDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["maintenance_directory"].IsNull() {
		val, d := tfObjectToTKHDSDirectoryMaintenanceDirectory(ctx, false, objAttrs["maintenance_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryMaintenanceDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["oidc_directory"].IsNull() {
		val, d := tfObjectToTKHDSDirectoryOIDCDirectory(ctx, false, objAttrs["oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryOIDCDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHDSDirectoryAccountDirectory(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryPrimerable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tkh.SetAccounts(objAttrs["accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectorySummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectorySummaryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHDSDirectoryAccountDirectorySummary(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryAccountDirectory_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable
	tkh = keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryInternalDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryInternalDirectoryable
	tkh = keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryLDAPDirectoryable
	tkh = keyhubmodel.NewDirectoryLDAPDirectory()
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBaseDN(objAttrs["base_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tkh.SetDialect(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tkh.SetPasswordRecovery(val)
	}
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSearchBindDN(objAttrs["search_bind_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchBindPassword(objAttrs["search_bind_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchFilter(objAttrs["search_filter"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSDirectoryMaintenanceDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryMaintenanceDirectoryable
	tkh = keyhubmodel.NewDirectoryMaintenanceDirectory()
	return tkh, diags
}

func tfObjectToTKHDSDirectoryOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryOIDCDirectoryable
	tkh = keyhubmodel.NewDirectoryOIDCDirectory()
	tkh.SetAcrValues(objAttrs["acr_values"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetEnforces2fa(objAttrs["enforces2fa"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIssuer(objAttrs["issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLogoutUrl(objAttrs["logout_url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSendLoginHint(objAttrs["send_login_hint"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroupable
	tkh = keyhubmodel.NewGroupAccountGroup()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupFolder(ctx, false, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupAccountGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupAccountGroupLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupAccountGroupable {
			tkh, d := tfObjectToTKHDSGroupAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupAuthorizedGroupsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAuthorizedGroupsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAuthorizedGroupsWrapperable
	tkh = keyhubmodel.NewGroupAuthorizedGroupsWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHDSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetGroupCount(objAttrs["group_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupable
	tkh = keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetApplicationAdministration(objAttrs["application_administration"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupAuditConfig(ctx, false, objAttrs["audit_config"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuditConfig(val)
	}
	tkh.SetAuditRequested(objAttrs["audit_requested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuditor(objAttrs["auditor"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_auditing"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_delegation"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_membership"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["authorizing_group_provisioning"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["authorizing_group_types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClassificationPrimer(ctx, false, objAttrs["classification"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClassification(val)
	}
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tkh.SetExtendedAccess(val)
	}
	tkh.SetHideAuditTrail(objAttrs["hide_audit_trail"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["nested_under"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNestedUnder(val)
	}
	tkh.SetPrivateGroup(objAttrs["private_group"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRecordTrail(objAttrs["record_trail"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSingleManaged(objAttrs["single_managed"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tkh.SetVaultRecovery(val)
	}
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccount_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditConfig(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditConfigable
	tkh = keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["months"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupAuditingInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditingInfoable
	tkh = keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(objAttrs["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastAuditDate(val)
	}
	tkh.SetNrAccounts(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledAccounts(objAttrs["nr_disabled_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledManagers(objAttrs["nr_disabled_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrExpiredVaultRecords(objAttrs["nr_expired_vault_records"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrManagers(objAttrs["nr_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrVaultRecordsWithEndDate(objAttrs["nr_vault_records_with_end_date"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationable
	tkh = keyhubmodel.NewGroupGroupClassification()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAuthorizingGroupAuditingRequired(objAttrs["authorizing_group_auditing_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupDelegationRequired(objAttrs["authorizing_group_delegation_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupMembershipRequired(objAttrs["authorizing_group_membership_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupProvisioningRequired(objAttrs["authorizing_group_provisioning_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDefaultClassification(objAttrs["default_classification"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMaximumAuditInterval(int64PToInt32P(objAttrs["maximum_audit_interval"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetMinimumNrManagers(int64PToInt32P(objAttrs["minimum_nr_managers"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetRecordTrailRequired(objAttrs["record_trail_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSliceSet(objAttrs["required_months"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRequiredMonths(val)
	}
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupClassification_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationInfoable
	tkh = keyhubmodel.NewGroupGroupClassificationInfo()
	tkh.SetNrGroups(int64PToInt32P(objAttrs["nr_groups"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationPrimerable
	tkh = keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClassification_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassification_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassification_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClassification_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClassificationInfo(ctx, recurse, objAttrs["info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientable
	tkh = keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupClient_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHDSGroupGroupClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClient_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupFolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupFolderable
	tkh = keyhubmodel.NewGroupGroupFolder()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupGroupFolder_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupFolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupFolder_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupFolder_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupInfoable
	tkh = keyhubmodel.NewGroupGroupInfo()
	tkh.SetNrAccounts(int64PToInt32P(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAccountsWithVault(int64PToInt32P(objAttrs["nr_accounts_with_vault"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAudits(int64PToInt32P(objAttrs["nr_audits"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrClients(int64PToInt32P(objAttrs["nr_clients"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrProvisionedSystems(int64PToInt32P(objAttrs["nr_provisioned_systems"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrVaultRecords(int64PToInt32P(objAttrs["nr_vault_records"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHDSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerable
	tkh = keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSGroupGroupPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := tfObjectToTKHDSGroupGroupPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["accounts"]))
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_clients"]))
		diags.Append(d...)
		tkh.SetAdministeredClients(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_systems"]))
		diags.Append(d...)
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["admins"]))
		diags.Append(d...)
		tkh.SetAdmins(val)
	}
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupAuthorizedGroupsWrapper(ctx, recurse, objAttrs["authorized_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizedGroups(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["client_permissions"]))
		diags.Append(d...)
		tkh.SetClientPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["clients"]))
		diags.Append(d...)
		tkh.SetClients(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["content_administered_systems"]))
		diags.Append(d...)
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAuditingInfo(ctx, recurse, objAttrs["groupauditinginfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupInfo(ctx, recurse, objAttrs["groupinfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectorySummaryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["helpdesk"]))
		diags.Append(d...)
		tkh.SetHelpdesk(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, objAttrs["myaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupAccount(ctx, recurse, objAttrs["mydelegatedaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["nested_groups"]))
		diags.Append(d...)
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfObjectToTKHDSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_clients"]))
		diags.Append(d...)
		tkh.SetOwnedClients(val)
	}
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_directories"]))
		diags.Append(d...)
		tkh.SetOwnedDirectories(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningOwnedGroupOnSystemsWrapper(ctx, recurse, objAttrs["owned_groups_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedGroupsOnSystem(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_organizational_units"]))
		diags.Append(d...)
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_systems"]))
		diags.Append(d...)
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHDSAuditGroupAuditLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["recent_audits"]))
		diags.Append(d...)
		tkh.SetRecentAudits(val)
	}
	{
		val, d := parseCastPointer(objAttrs["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHDSWebhookWebhookLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["webhooks"]))
		diags.Append(d...)
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupable
	tkh = keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSGroupProvisioningGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHDSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	return tkh, diags
}

func tfObjectToTKHDSMarkItemMarker(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkerable
	tkh = keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(objAttrs["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfToMap(objAttrs["parameters"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewMarkItemMarker_parameters())
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSMarkItemMarkers(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkersable
	tkh = keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSliceSet(objAttrs["markers"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHDSMarkItemMarker(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDepth(int64PToInt32P(objAttrs["depth"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, false, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSOrganizationOrganizationalUnit_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHDSOrganizationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSOrganizationOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningAbstractProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewProvisioningAbstractProvisionedLDAP_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["failover_trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, recurse, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_dn"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningCircuitBreakerStatistics(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable
	tkh = keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tkh.SetNumberOfFailedCalls(objAttrs["number_of_failed_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfNotPermittedCalls(objAttrs["number_of_not_permitted_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfSuccessfulCalls(objAttrs["number_of_successful_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningGroupOnSystem_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystemTypes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemTypesable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSGroupProvisioningGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["provgroups"]))
		diags.Append(d...)
		tkh.SetProvgroups(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningOwnedGroupOnSystemsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable
	tkh = keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHDSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetUnlinkedCount(objAttrs["unlinked_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionNumberSequence(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequenceable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNextUID(objAttrs["next_uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionNumberSequence_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionNumberSequence_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAD(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedADable
	tkh = keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccountable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	tkh.SetUid(objAttrs["uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureSyncLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedAzureTenant(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureTenantable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureTenant()
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdpDomain(objAttrs["idp_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedInternalLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := tfObjectToTKHDSClientLdapClient(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAP()
	tkh.SetGid(objAttrs["gid"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetGroupDN(objAttrs["group_dn"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedNamespace(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedNamespaceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedNamespaceable
	tkh = keyhubmodel.NewProvisioningProvisionedNamespace()
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, objAttrs["base_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetBaseSystem(val)
	}
	tkh.SetGroupDN(objAttrs["group_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetServiceAccountDN(objAttrs["service_account_dn"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSCIM(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSCIMable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSCIMable
	tkh = keyhubmodel.NewProvisioningProvisionedSCIM()
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(objAttrs["basic_auth_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBasicAuthUsername(objAttrs["basic_auth_username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBearerToken(objAttrs["bearer_token"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderName(objAttrs["custom_header_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderValue(objAttrs["custom_header_value"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSCIMVendor, func(val any) keyhubmodel.ProvisioningProvisionedSCIMVendor {
			return *val.(*keyhubmodel.ProvisioningProvisionedSCIMVendor)
		})
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["content_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["owner"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewNamespaces(objAttrs["self_service_new_namespaces"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	if !objAttrs["abstract_provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningAbstractProvisionedLDAP(ctx, false, objAttrs["abstract_provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningAbstractProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_a_d"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedAD(ctx, false, objAttrs["provisioned_a_d"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAD)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_oidc_directory"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedAzureOIDCDirectory(ctx, false, objAttrs["provisioned_azure_oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureOIDCDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_sync_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedAzureSyncLDAPDirectory(ctx, false, objAttrs["provisioned_azure_sync_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_tenant"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedAzureTenant(ctx, false, objAttrs["provisioned_azure_tenant"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureTenant)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_internal_ldap"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedInternalLDAP(ctx, false, objAttrs["provisioned_internal_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedInternalLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedLDAP(ctx, false, objAttrs["provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedLDAPDirectory(ctx, false, objAttrs["provisioned_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_namespace"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedNamespace(ctx, false, objAttrs["provisioned_namespace"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedNamespace)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_scim"].IsNull() {
		val, d := tfObjectToTKHDSProvisioningProvisionedSCIM(ctx, false, objAttrs["provisioned_scim"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedSCIM)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSOrganizationOrganizationalUnitPrimer(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisionedSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedAccount(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["issued_permissions"]))
		diags.Append(d...)
		tkh.SetIssuedPermissions(val)
	}
	tkh.SetLoginName(objAttrs["login_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisioningManagementPermissions(ctx, recurse, objAttrs["management_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningCircuitBreakerStatistics(ctx, recurse, objAttrs["statistics"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHDSProvisioningGroupOnSystemTypes(ctx, recurse, objAttrs["supported_group_types"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSProvisioningProvisioningManagementPermissions(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable
	tkh = keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tkh.SetCreateNewGroupsAllowed(objAttrs["create_new_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCreateServiceAccountsAllowed(objAttrs["create_service_accounts_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetReuseExistingGroupsAllowed(objAttrs["reuse_existing_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountable
	tkh = keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, false, objAttrs["password"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tkh.SetPasswordRotation(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["technical_administrator"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSServiceaccountServiceAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccountPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := tfObjectToTKHDSServiceaccountServiceAccountPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSServiceaccountServiceAccountGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHDSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultPasswordMetadata(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultPasswordMetadataable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultPasswordMetadataable
	tkh = keyhubmodel.NewVaultPasswordMetadata()
	tkh.SetDictionary(objAttrs["dictionary"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDuplicate(objAttrs["duplicate"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetHash(objAttrs["hash"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLength(int64PToInt32P(objAttrs["length"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLowerCount(int64PToInt32P(objAttrs["lower_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNumberCount(int64PToInt32P(objAttrs["number_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSpecialCount(int64PToInt32P(objAttrs["special_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetStrength(int64PToInt32P(objAttrs["strength"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUpperCount(int64PToInt32P(objAttrs["upper_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHDSVaultVault(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultable
	tkh = keyhubmodel.NewVaultVault()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccessAvailable(objAttrs["access_available"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["records"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHDSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.VaultVaultHolderable
	tkh = keyhubmodel.NewVaultVaultHolder()
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHDSVaultVaultRecord_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerable
	tkh = keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable
	tkh = keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordSecrets(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordSecretsable
	tkh = keyhubmodel.NewVaultVaultRecordSecrets()
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFile(objAttrs["file"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTotp(objAttrs["totp"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordShare(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareable
	tkh = keyhubmodel.NewVaultVaultRecordShare()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecordShareSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareSummaryable
	tkh = keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSliceSet(objAttrs["children"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHDSVaultVaultRecordShare(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordShare(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecord_additionalObjectsable
	tkh = keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimer(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHDSVaultPasswordMetadata(ctx, recurse, objAttrs["password_metadata"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordMetadata(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordSecrets(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordShareSummary(ctx, recurse, objAttrs["share_summary"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultRecordPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["shares"]))
		diags.Append(d...)
		tkh.SetShares(val)
	}
	{
		val, d := tfObjectToTKHDSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHDSVaultVaultHolder(ctx, recurse, objAttrs["vaultholder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhook(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookable
	tkh = keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSliceSet(objAttrs["links"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHDSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["permissions"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHDSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHDSAuthAccountPrimer(ctx, false, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAllTypes(objAttrs["all_types"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(objAttrs["basic_auth_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBasicAuthUsername(objAttrs["basic_auth_username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBearerToken(objAttrs["bearer_token"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSClientClientApplicationPrimer(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["client_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetCustomHeaderName(objAttrs["custom_header_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderValue(objAttrs["custom_header_value"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSDirectoryAccountDirectoryPrimer(ctx, false, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHDSGroupGroupPrimer(ctx, false, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHDSProvisioningProvisionedSystemPrimer(ctx, false, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHDSCertificateCertificatePrimer(ctx, false, objAttrs["trusted_certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVerbosePayloads(objAttrs["verbose_payloads"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHDSWebhookWebhook_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhookLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookLinkableWrapperable
	tkh = keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSliceSet(objAttrs["items"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHDSWebhookWebhook(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHDSWebhookWebhook_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhook_additionalObjectsable
	tkh = keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHDSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}
