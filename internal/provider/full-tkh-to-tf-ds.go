// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tkhToTFObjectDSAuditInfo(recurse bool, tkh keyhubmodel.AuditInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditInfoAttrTypesDSRecurse
	} else {
		attrs = auditInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["last_modified_by"] = types.StringPointerValue(tkh.GetLastModifiedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSErrorReport(recurse bool, tkh keyhubmodel.ErrorReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReportAttrTypesDSRecurse
	} else {
		attrs = errorReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["application_error"] = types.StringPointerValue(tkh.GetApplicationError())
	{
		val, d := tkhToTFObjectDSErrorReport_applicationErrorParameters(recurse, tkh.GetApplicationErrorParameters())
		diags.Append(d...)
		obj["application_error_parameters"] = val
	}
	obj["code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetCode()))
	{
		elemType := attrs["error_details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetErrorDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["error_details"] = val
	}
	obj["exception"] = types.StringPointerValue(tkh.GetException())
	obj["message"] = types.StringPointerValue(tkh.GetMessage())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	{
		elemType := attrs["stacktrace"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStacktrace(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["stacktrace"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSErrorReport_applicationErrorParameters(recurse bool, tkh keyhubmodel.ErrorReport_applicationErrorParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = errorReport_applicationErrorParametersAttrTypesDSRecurse
	} else {
		attrs = errorReport_applicationErrorParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGeneratedSecret(recurse bool, tkh keyhubmodel.GeneratedSecretable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = generatedSecretAttrTypesDSRecurse
	} else {
		attrs = generatedSecretAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["generated_secret"] = types.StringPointerValue(tkh.GetGeneratedSecret())
	obj["old_secret"] = types.StringPointerValue(tkh.GetOldSecret())
	obj["regenerate"] = types.BoolPointerValue(tkh.GetRegenerate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLinkable(recurse bool, tkh keyhubmodel.Linkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = linkableAttrTypesDSRecurse
	} else {
		attrs = linkableAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNonLinkable(recurse bool, tkh keyhubmodel.NonLinkableable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nonLinkableAttrTypesDSRecurse
	} else {
		attrs = nonLinkableAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRestLink(recurse bool, tkh keyhubmodel.RestLinkable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = restLinkAttrTypesDSRecurse
	} else {
		attrs = restLinkAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["href"] = types.StringPointerValue(tkh.GetHref())
	obj["id"] = types.Int64PointerValue(tkh.GetId())
	obj["rel"] = types.StringPointerValue(tkh.GetRel())
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSegmentCount(recurse bool, tkh keyhubmodel.SegmentCountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = segmentCountAttrTypesDSRecurse
	} else {
		attrs = segmentCountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["count"] = types.Int64PointerValue(tkh.GetCount())
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAccountVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = accountVaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = accountVaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["account_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecord(recurse bool, tkh keyhubmodel.AuditAuditRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuditAuditRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["audit_audit_record_type"] = stringerToTF(tkh.GetAuditAuditRecordType())
	obj["date_time"] = timePointerToTF(tkh.GetDateTime())
	obj["on_account"] = types.StringPointerValue(tkh.GetOnAccount())
	obj["on_certificate"] = types.StringPointerValue(tkh.GetOnCertificate())
	obj["on_client"] = types.StringPointerValue(tkh.GetOnClient())
	obj["on_directory"] = types.StringPointerValue(tkh.GetOnDirectory())
	obj["on_group"] = types.StringPointerValue(tkh.GetOnGroup())
	obj["on_group2"] = types.StringPointerValue(tkh.GetOnGroup2())
	obj["on_group_classification"] = types.StringPointerValue(tkh.GetOnGroupClassification())
	obj["on_organizational_unit"] = types.StringPointerValue(tkh.GetOnOrganizationalUnit())
	obj["on_service_account"] = types.StringPointerValue(tkh.GetOnServiceAccount())
	obj["on_system"] = types.StringPointerValue(tkh.GetOnSystem())
	obj["on_vault_record"] = types.StringPointerValue(tkh.GetOnVaultRecord())
	obj["on_webhook"] = types.StringPointerValue(tkh.GetOnWebhook())
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["performed_by"] = types.StringPointerValue(tkh.GetPerformedBy())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecordLinkableWrapper(recurse bool, tkh keyhubmodel.AuditAuditRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecordLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecordLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuditAuditRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuditAuditRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuditAuditRecord_additionalObjects(recurse bool, tkh keyhubmodel.AuditAuditRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = auditAuditRecord_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = auditAuditRecord_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccount(recurse bool, tkh keyhubmodel.AuthAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountAttrTypesDSRecurse
	} else {
		attrs = authAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountBulkUpdate(recurse bool, tkh keyhubmodel.AuthAccountBulkUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountBulkUpdateAttrTypesDSRecurse
	} else {
		attrs = authAccountBulkUpdateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["exclusive_selection"] = types.BoolPointerValue(tkh.GetExclusiveSelection())
	{
		elemType := attrs["selected_accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSelectedAccounts(), func(tkh int64, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(tkh)
		})
		diags.Append(d...)
		obj["selected_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountChangeLocale(recurse bool, tkh keyhubmodel.AuthAccountChangeLocaleable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountChangeLocaleAttrTypesDSRecurse
	} else {
		attrs = authAccountChangeLocaleAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = authAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountPrimer(recurse bool, tkh keyhubmodel.AuthAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountPrimerAttrTypesDSRecurse
	} else {
		attrs = authAccountPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountRecoveryStatus(recurse bool, tkh keyhubmodel.AuthAccountRecoveryStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountRecoveryStatusAttrTypesDSRecurse
	} else {
		attrs = authAccountRecoveryStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["pending2fa_recovery_request"] = types.BoolPointerValue(tkh.GetPending2FARecoveryRequest())
	obj["pending_password_recovery_request"] = types.BoolPointerValue(tkh.GetPendingPasswordRecoveryRequest())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountSettings(recurse bool, tkh keyhubmodel.AuthAccountSettingsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountSettingsAttrTypesDSRecurse
	} else {
		attrs = authAccountSettingsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetDefaultOrganizationalUnit())
		diags.Append(d...)
		obj["default_organizational_unit"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["in_groups"] = types.BoolPointerValue(tkh.GetInGroups())
	obj["in_multiple_organizational_units"] = types.BoolPointerValue(tkh.GetInMultipleOrganizationalUnits())
	obj["key_hub_admin"] = types.BoolPointerValue(tkh.GetKeyHubAdmin())
	obj["multiple_organizational_units_exist"] = types.BoolPointerValue(tkh.GetMultipleOrganizationalUnitsExist())
	obj["password_mode"] = stringerToTF(tkh.GetPasswordMode())
	obj["ssh_public_key"] = types.StringPointerValue(tkh.GetSshPublicKey())
	obj["two_factor_authentication"] = stringerToTF(tkh.GetTwoFactorAuthentication())
	obj["use_token_password"] = types.BoolPointerValue(tkh.GetUseTokenPassword())
	obj["vault_status"] = stringerToTF(tkh.GetVaultStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountStatus(recurse bool, tkh keyhubmodel.AuthAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountStatusAttrTypesDSRecurse
	} else {
		attrs = authAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	obj["decline_recovery_requests"] = types.BoolPointerValue(tkh.GetDeclineRecoveryRequests())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["two_factor_authentication_enabled"] = types.BoolPointerValue(tkh.GetTwoFactorAuthenticationEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccount_additionalObjects(recurse bool, tkh keyhubmodel.AuthAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = authAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_login"] = types.BoolPointerValue(tkh.GetActiveLogin())
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountRecoveryStatus(recurse, tkh.GetPendingRecoveryRequests())
		diags.Append(d...)
		obj["pending_recovery_requests"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountSettings(recurse, tkh.GetSettings())
		diags.Append(d...)
		obj["settings"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthStoredAccountAttributes(recurse, tkh.GetStoredAttributes())
		diags.Append(d...)
		obj["stored_attributes"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_directoryStats(recurse, tkh.GetDirectoryStats())
		diags.Append(d...)
		obj["directory_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_twoFAStats(recurse, tkh.GetTwoFAStats())
		diags.Append(d...)
		obj["two_fa_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSAuthAccountsAuditStats_validityStats(recurse, tkh.GetValidityStats())
		diags.Append(d...)
		obj["validity_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_directoryStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_directoryStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_twoFAStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_twoFAStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthAccountsAuditStats_validityStats(recurse bool, tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authAccountsAuditStats_validityStatsAttrTypesDSRecurse
	} else {
		attrs = authAccountsAuditStats_validityStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = timePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccountLinkableWrapper(recurse bool, tkh keyhubmodel.AuthInternalAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.AuthInternalAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthInternalAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthInternalAccountStatusObject(recurse bool, tkh keyhubmodel.AuthInternalAccountStatusObjectable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authInternalAccountStatusObjectAttrTypesDSRecurse
	} else {
		attrs = authInternalAccountStatusObjectAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthMoveInternalAccount(recurse bool, tkh keyhubmodel.AuthMoveInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authMoveInternalAccountAttrTypesDSRecurse
	} else {
		attrs = authMoveInternalAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSDirectoryInternalDirectory(recurse, tkh.GetInternalDirectory())
		diags.Append(d...)
		obj["internal_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthPermission(recurse bool, tkh keyhubmodel.AuthPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authPermissionAttrTypesDSRecurse
	} else {
		attrs = authPermissionAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["full"] = types.StringPointerValue(tkh.GetFull())
	{
		elemType := attrs["instances"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetInstances(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["instances"] = val
	}
	{
		elemType := attrs["operations"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetOperations(), func(tkh keyhubmodel.AuthPermittedOperation, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["operations"] = val
	}
	obj["type_escaped"] = types.StringPointerValue(tkh.GetTypeEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthStoredAccountAttribute(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributeable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributeAttrTypesDSRecurse
	} else {
		attrs = authStoredAccountAttributeAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSAuthStoredAccountAttributes(recurse bool, tkh keyhubmodel.AuthStoredAccountAttributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = authStoredAccountAttributesAttrTypesDSRecurse
	} else {
		attrs = authStoredAccountAttributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["attributes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAttributes(), func(tkh keyhubmodel.AuthStoredAccountAttributeable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthStoredAccountAttribute(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["attributes"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificate(recurse bool, tkh keyhubmodel.CertificateCertificateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateAttrTypesDSRecurse
	} else {
		attrs = certificateCertificateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSCertificateCertificate_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["key_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetKeyData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["key_data"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificateLinkableWrapper(recurse bool, tkh keyhubmodel.CertificateCertificateLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificateLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = certificateCertificateLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.CertificateCertificateable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSCertificateCertificate(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificatePrimer(recurse bool, tkh keyhubmodel.CertificateCertificatePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificatePrimerAttrTypesDSRecurse
	} else {
		attrs = certificateCertificatePrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["alias"] = types.StringPointerValue(tkh.GetAlias())
	obj["certificate_certificate_primer_type"] = stringerToTF(tkh.GetCertificateCertificatePrimerType())
	{
		elemType := attrs["certificate_data"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCertificateData(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["certificate_data"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	obj["fingerprint_sha1"] = types.StringPointerValue(tkh.GetFingerprintSha1())
	obj["fingerprint_sha256"] = types.StringPointerValue(tkh.GetFingerprintSha256())
	obj["global"] = types.BoolPointerValue(tkh.GetGlobal())
	obj["subject_dn"] = types.StringPointerValue(tkh.GetSubjectDN())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSCertificateCertificate_additionalObjects(recurse bool, tkh keyhubmodel.CertificateCertificate_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = certificateCertificate_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = certificateCertificate_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientApplicationVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientApplicationVaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = clientApplicationVaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["client_application_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplication(recurse bool, tkh keyhubmodel.ClientClientApplicationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientClientApplication_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientOAuth2Clientable)
		val, d := tkhToTFObjectDSClientOAuth2Client(false, tkhCast)
		diags.Append(d...)
		obj["o_auth2_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientLdapClientable)
		val, d := tkhToTFObjectDSClientLdapClient(false, tkhCast)
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ClientSaml2Clientable)
		val, d := tkhToTFObjectDSClientSaml2Client(false, tkhCast)
		diags.Append(d...)
		obj["saml2_client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse bool, tkh keyhubmodel.ClientClientApplicationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientClientApplicationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientClientApplication(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplicationPrimer(recurse bool, tkh keyhubmodel.ClientClientApplicationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplicationPrimerAttrTypesDSRecurse
	} else {
		attrs = clientClientApplicationPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["client_client_application_primer_type"] = stringerToTF(tkh.GetClientClientApplicationPrimerType())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["scopes"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetScopes(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["scopes"] = val
	}
	obj["sso_application"] = types.BoolPointerValue(tkh.GetSsoApplication())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientClientApplication_additionalObjects(recurse bool, tkh keyhubmodel.ClientClientApplication_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientClientApplication_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = clientClientApplication_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse, tkh.GetGroupclients())
		diags.Append(d...)
		obj["groupclients"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadSsoApplicationLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["vault_record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVaultRecordCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientLdapClient(recurse bool, tkh keyhubmodel.ClientLdapClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientLdapClientAttrTypesDSRecurse
	} else {
		attrs = clientLdapClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDn())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["used_for_provisioning"] = types.BoolPointerValue(tkh.GetUsedForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2Client(recurse bool, tkh keyhubmodel.ClientOAuth2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2Client_attributes(recurse, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["callback_uri"] = types.StringPointerValue(tkh.GetCallbackURI())
	obj["confidential"] = types.BoolPointerValue(tkh.GetConfidential())
	obj["debug_mode"] = types.BoolPointerValue(tkh.GetDebugMode())
	obj["id_token_claims"] = types.StringPointerValue(tkh.GetIdTokenClaims())
	obj["initiate_login_uri"] = types.StringPointerValue(tkh.GetInitiateLoginURI())
	obj["resource_uris"] = types.StringPointerValue(tkh.GetResourceURIs())
	obj["share_secret_in_vault"] = types.BoolPointerValue(tkh.GetShareSecretInVault())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh.GetSharedSecret())
		diags.Append(d...)
		obj["shared_secret"] = val
	}
	obj["show_landing_page"] = types.BoolPointerValue(tkh.GetShowLandingPage())
	obj["use_client_credentials"] = types.BoolPointerValue(tkh.GetUseClientCredentials())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionWithClient(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())
	{
		val, d := tkhToTFObjectDSClientOAuth2Client(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermissionWithClientLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2ClientPermission_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientOAuth2Client_attributes(recurse bool, tkh keyhubmodel.ClientOAuth2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientOAuth2Client_attributesAttrTypesDSRecurse
	} else {
		attrs = clientOAuth2Client_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientSaml2Client(recurse bool, tkh keyhubmodel.ClientSaml2Clientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2ClientAttrTypesDSRecurse
	} else {
		attrs = clientSaml2ClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSClientSaml2Client_attributes(recurse, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["metadata"] = types.StringPointerValue(tkh.GetMetadata())
	obj["metadata_url"] = types.StringPointerValue(tkh.GetMetadataUrl())
	obj["subject_format"] = stringerToTF(tkh.GetSubjectFormat())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSClientSaml2Client_attributes(recurse bool, tkh keyhubmodel.ClientSaml2Client_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = clientSaml2Client_attributesAttrTypesDSRecurse
	} else {
		attrs = clientSaml2Client_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDeletedVaultHolderVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = deletedVaultHolderVaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = deletedVaultHolderVaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["deleted_vault_holder_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectory(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetBaseOrganizationalUnit())
		diags.Append(d...)
		obj["base_organizational_unit"] = val
	}
	obj["default_directory"] = types.BoolPointerValue(tkh.GetDefaultDirectory())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetHelpdeskGroup())
		diags.Append(d...)
		obj["helpdesk_group"] = val
	}
	obj["restrict2fa"] = types.BoolPointerValue(tkh.GetRestrict2fa())
	obj["rotating_password"] = stringerToTF(tkh.GetRotatingPassword())
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryInternalDirectoryable)
		val, d := tkhToTFObjectDSDirectoryInternalDirectory(false, tkhCast)
		diags.Append(d...)
		obj["internal_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryOIDCDirectoryable)
		val, d := tkhToTFObjectDSDirectoryOIDCDirectory(false, tkhCast)
		diags.Append(d...)
		obj["o_id_c_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryLDAPDirectoryable)
		val, d := tkhToTFObjectDSDirectoryLDAPDirectory(false, tkhCast)
		diags.Append(d...)
		obj["l_d_a_p_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.DirectoryMaintenanceDirectoryable)
		val, d := tkhToTFObjectDSDirectoryMaintenanceDirectory(false, tkhCast)
		diags.Append(d...)
		obj["maintenance_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectoryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSDirectoryAccountDirectory(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryPrimer(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryPrimerAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_validity_supported"] = types.BoolPointerValue(tkh.GetAccountValiditySupported())
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["directory_account_directory_primer_type"] = stringerToTF(tkh.GetDirectoryAccountDirectoryPrimerType())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse bool, tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectoryStatusReportAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectoryStatusReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["accounts"] = types.Int64PointerValue(tkh.GetAccounts())
	obj["reason"] = types.StringPointerValue(tkh.GetReason())
	obj["status"] = stringerToTF(tkh.GetStatus())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectorySummary(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["directory_account_directory_summary_type"] = stringerToTF(tkh.GetDirectoryAccountDirectorySummaryType())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}
	obj["username_customizable"] = types.BoolPointerValue(tkh.GetUsernameCustomizable())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse bool, tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectorySummaryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.DirectoryAccountDirectorySummaryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSDirectoryAccountDirectorySummary(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryAccountDirectory_additionalObjects(recurse bool, tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = directoryAccountDirectory_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryStatusReport(recurse, tkh.GetStatus())
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryInternalDirectory(recurse bool, tkh keyhubmodel.DirectoryInternalDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryInternalDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryInternalDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryLDAPDirectory(recurse bool, tkh keyhubmodel.DirectoryLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["dialect"] = stringerToTF(tkh.GetDialect())
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["password_recovery"] = stringerToTF(tkh.GetPasswordRecovery())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["search_bind_dn"] = types.StringPointerValue(tkh.GetSearchBindDN())
	obj["search_bind_password"] = types.StringPointerValue(tkh.GetSearchBindPassword())
	obj["search_filter"] = types.StringPointerValue(tkh.GetSearchFilter())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryMaintenanceDirectory(recurse bool, tkh keyhubmodel.DirectoryMaintenanceDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryMaintenanceDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryMaintenanceDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSDirectoryOIDCDirectory(recurse bool, tkh keyhubmodel.DirectoryOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = directoryOIDCDirectoryAttrTypesDSRecurse
	} else {
		attrs = directoryOIDCDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["acr_values"] = types.StringPointerValue(tkh.GetAcrValues())
	obj["attributes_to_store"] = types.StringPointerValue(tkh.GetAttributesToStore())
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["domain_restriction"] = types.StringPointerValue(tkh.GetDomainRestriction())
	obj["enforces2fa"] = types.BoolPointerValue(tkh.GetEnforces2fa())
	obj["fully_resolved_issuer"] = types.StringPointerValue(tkh.GetFullyResolvedIssuer())
	obj["issuer"] = types.StringPointerValue(tkh.GetIssuer())
	obj["logout_url"] = types.StringPointerValue(tkh.GetLogoutUrl())
	obj["send_login_hint"] = types.BoolPointerValue(tkh.GetSendLoginHint())
	obj["vendor_escaped"] = stringerToTF(tkh.GetVendorEscaped())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAccountGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupAccountGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupAuthorizedGroupsWrapper(recurse bool, tkh keyhubmodel.GroupAuthorizedGroupsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupAuthorizedGroupsWrapperAttrTypesDSRecurse
	} else {
		attrs = groupAuthorizedGroupsWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["group_count"] = types.Int64PointerValue(tkh.GetGroupCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroup(recurse bool, tkh keyhubmodel.GroupGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAttrTypesDSRecurse
	} else {
		attrs = groupGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["application_administration"] = types.BoolPointerValue(tkh.GetApplicationAdministration())
	{
		val, d := tkhToTFObjectDSGroupGroupAuditConfig(false, tkh.GetAuditConfig())
		diags.Append(d...)
		obj["audit_config"] = val
	}
	obj["audit_requested"] = types.BoolPointerValue(tkh.GetAuditRequested())
	obj["auditor"] = types.BoolPointerValue(tkh.GetAuditor())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupAuditing())
		diags.Append(d...)
		obj["authorizing_group_auditing"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupDelegation())
		diags.Append(d...)
		obj["authorizing_group_delegation"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupMembership())
		diags.Append(d...)
		obj["authorizing_group_membership"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetAuthorizingGroupProvisioning())
		diags.Append(d...)
		obj["authorizing_group_provisioning"] = val
	}
	{
		elemType := attrs["authorizing_group_types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAuthorizingGroupTypes(), func(tkh keyhubmodel.RequestAuthorizingGroupType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["authorizing_group_types"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationPrimer(false, tkh.GetClassification())
		diags.Append(d...)
		obj["classification"] = val
	}
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["extended_access"] = stringerToTF(tkh.GetExtendedAccess())
	obj["hide_audit_trail"] = types.BoolPointerValue(tkh.GetHideAuditTrail())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetNestedUnder())
		diags.Append(d...)
		obj["nested_under"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["private_group"] = types.BoolPointerValue(tkh.GetPrivateGroup())
	obj["record_trail"] = types.BoolPointerValue(tkh.GetRecordTrail())
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["single_managed"] = types.BoolPointerValue(tkh.GetSingleManaged())
	obj["vault_recovery"] = stringerToTF(tkh.GetVaultRecovery())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountNesting(recurse bool, tkh keyhubmodel.GroupGroupAccountNestingable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountNestingAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountNestingAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["connected"] = types.BoolPointerValue(tkh.GetConnected())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccountStatus(recurse bool, tkh keyhubmodel.GroupGroupAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccountStatusAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAccount_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAdminMail(recurse bool, tkh keyhubmodel.GroupGroupAdminMailable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAdminMailAttrTypesDSRecurse
	} else {
		attrs = groupGroupAdminMailAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["body"] = types.StringPointerValue(tkh.GetBody())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditAccount(recurse bool, tkh keyhubmodel.GroupGroupAuditAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditAccountAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["account_uuid"] = types.StringPointerValue(tkh.GetAccountUuid())
	obj["account_valid"] = types.BoolPointerValue(tkh.GetAccountValid())
	obj["action"] = stringerToTF(tkh.GetAction())
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditConfig(recurse bool, tkh keyhubmodel.GroupGroupAuditConfigable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditConfigAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditConfigAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		elemType := attrs["months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["months"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupAuditLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupAuditable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAudit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAudit_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupAudit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAudit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupAudit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupAuditingInfo(recurse bool, tkh keyhubmodel.GroupGroupAuditingInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupAuditingInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupAuditingInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audit_due_date"] = stringerToTF(tkh.GetAuditDueDate())
	obj["last_audit_date"] = stringerToTF(tkh.GetLastAuditDate())
	obj["nr_accounts"] = types.Int64PointerValue(tkh.GetNrAccounts())
	obj["nr_disabled_accounts"] = types.Int64PointerValue(tkh.GetNrDisabledAccounts())
	obj["nr_disabled_managers"] = types.Int64PointerValue(tkh.GetNrDisabledManagers())
	obj["nr_expired_vault_records"] = types.Int64PointerValue(tkh.GetNrExpiredVaultRecords())
	obj["nr_managers"] = types.Int64PointerValue(tkh.GetNrManagers())
	obj["nr_vault_records_with_end_date"] = types.Int64PointerValue(tkh.GetNrVaultRecordsWithEndDate())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassification(recurse bool, tkh keyhubmodel.GroupGroupClassificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupClassification_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["authorizing_group_auditing_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupAuditingRequired())
	obj["authorizing_group_delegation_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupDelegationRequired())
	obj["authorizing_group_membership_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupMembershipRequired())
	obj["authorizing_group_provisioning_required"] = types.BoolPointerValue(tkh.GetAuthorizingGroupProvisioningRequired())
	obj["default_classification"] = types.BoolPointerValue(tkh.GetDefaultClassification())
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["maximum_audit_interval"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMaximumAuditInterval()))
	obj["minimum_nr_managers"] = types.Int64PointerValue(int32PToInt64P(tkh.GetMinimumNrManagers()))
	obj["record_trail_required"] = types.BoolPointerValue(tkh.GetRecordTrailRequired())
	{
		elemType := attrs["required_months"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRequiredMonths(), func(tkh keyhubmodel.Month, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["required_months"] = val
	}
	obj["rotating_password_required"] = types.BoolPointerValue(tkh.GetRotatingPasswordRequired())
	obj["vault_requires_activation"] = types.BoolPointerValue(tkh.GetVaultRequiresActivation())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationInfo(recurse bool, tkh keyhubmodel.GroupGroupClassificationInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_groups"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrGroups()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationPrimer(recurse bool, tkh keyhubmodel.GroupGroupClassificationPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationPrimerAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassificationUpdate(recurse bool, tkh keyhubmodel.GroupGroupClassificationUpdateable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassificationUpdateAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassificationUpdateAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationPrimer(recurse, tkh.GetClassificaton())
		diags.Append(d...)
		obj["classificaton"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClassification_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClassification_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClassification_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupClassification_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClassificationInfo(recurse, tkh.GetInfo())
		diags.Append(d...)
		obj["info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClient(recurse bool, tkh keyhubmodel.GroupGroupClientable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientAttrTypesDSRecurse
	} else {
		attrs = groupGroupClientAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupClient_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupClientLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClientLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupClientLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupClientable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClient(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupClient_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupClient_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupClient_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupClient_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolder(recurse bool, tkh keyhubmodel.GroupGroupFolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupFolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["name"] = types.StringPointerValue(tkh.GetName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolderLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupFolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolderLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolderLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupFolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupFolder_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroupFolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupFolder_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroupFolder_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupInfo(recurse bool, tkh keyhubmodel.GroupGroupInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupInfoAttrTypesDSRecurse
	} else {
		attrs = groupGroupInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nr_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccounts()))
	obj["nr_accounts_with_vault"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAccountsWithVault()))
	obj["nr_audits"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrAudits()))
	obj["nr_clients"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrClients()))
	obj["nr_provisioned_systems"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrProvisionedSystems()))
	obj["nr_vault_records"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNrVaultRecords()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupPrimer(recurse bool, tkh keyhubmodel.GroupGroupPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerAttrTypesDSRecurse
	} else {
		attrs = groupGroupPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupSegmentedLinkableWrapper(recurse bool, tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupGroupSegmentedLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	{
		elemType := attrs["segments"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSegments(), func(tkh keyhubmodel.SegmentCountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSSegmentCount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["segments"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAccounts())
		diags.Append(d...)
		obj["accounts"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse, tkh.GetAdministeredClients())
		diags.Append(d...)
		obj["administered_clients"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetAdministeredSystems())
		diags.Append(d...)
		obj["administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccountLinkableWrapper(recurse, tkh.GetAdmins())
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupAuthorizedGroupsWrapper(recurse, tkh.GetAuthorizedGroups())
		diags.Append(d...)
		obj["authorized_groups"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetClientPermissions())
		diags.Append(d...)
		obj["client_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupClientLinkableWrapper(recurse, tkh.GetClients())
		diags.Append(d...)
		obj["clients"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetContentAdministeredSystems())
		diags.Append(d...)
		obj["content_administered_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAuditingInfo(recurse, tkh.GetGroupauditinginfo())
		diags.Append(d...)
		obj["groupauditinginfo"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupInfo(recurse, tkh.GetGroupinfo())
		diags.Append(d...)
		obj["groupinfo"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectorySummaryLinkableWrapper(recurse, tkh.GetHelpdesk())
		diags.Append(d...)
		obj["helpdesk"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh.GetMyaccount())
		diags.Append(d...)
		obj["myaccount"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAccount(recurse, tkh.GetMydelegatedaccount())
		diags.Append(d...)
		obj["mydelegatedaccount"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimerLinkableWrapper(recurse, tkh.GetNestedGroups())
		diags.Append(d...)
		obj["nested_groups"] = val
	}
	{
		val, d := tkhToTFObjectDSClientClientApplicationLinkableWrapper(recurse, tkh.GetOwnedClients())
		diags.Append(d...)
		obj["owned_clients"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryLinkableWrapper(recurse, tkh.GetOwnedDirectories())
		diags.Append(d...)
		obj["owned_directories"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningOwnedGroupOnSystemsWrapper(recurse, tkh.GetOwnedGroupsOnSystem())
		diags.Append(d...)
		obj["owned_groups_on_system"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitLinkableWrapper(recurse, tkh.GetOwnedOrganizationalUnits())
		diags.Append(d...)
		obj["owned_organizational_units"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse, tkh.GetOwnedSystems())
		diags.Append(d...)
		obj["owned_systems"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupAuditLinkableWrapper(recurse, tkh.GetRecentAudits())
		diags.Append(d...)
		obj["recent_audits"] = val
	}
	obj["requeststatus"] = stringerToTF(tkh.GetRequeststatus())
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookLinkableWrapper(recurse, tkh.GetWebhooks())
		diags.Append(d...)
		obj["webhooks"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupGroupsAuditStats(recurse bool, tkh keyhubmodel.GroupGroupsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupGroupsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = groupGroupsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["audited_groups"] = types.Int64PointerValue(tkh.GetAuditedGroups())
	{
		elemType := attrs["classifications"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetClassifications(), func(tkh keyhubmodel.GroupGroupClassificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupClassification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["classifications"] = val
	}
	obj["overdue_audit_groups"] = types.Int64PointerValue(tkh.GetOverdueAuditGroups())
	obj["overdue_vault_policies"] = types.Int64PointerValue(tkh.GetOverdueVaultPolicies())
	obj["unaudited_groups"] = types.Int64PointerValue(tkh.GetUnauditedGroups())
	obj["valid_vault_policies"] = types.Int64PointerValue(tkh.GetValidVaultPolicies())
	obj["vaults_without_policies"] = types.Int64PointerValue(tkh.GetVaultsWithoutPolicies())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroup(recurse bool, tkh keyhubmodel.GroupProvisioningGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupProvisioningGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(false, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse bool, tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.GroupProvisioningGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupProvisioningGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupProvisioningGroup_additionalObjects(recurse bool, tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = groupProvisioningGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSGroupVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = groupVaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = groupVaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["group_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadDisplayedLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadLaunchpadTilePrimer(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadDisplayedLaunchpadTiles(recurse bool, tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesDSRecurse
	} else {
		attrs = launchpadDisplayedLaunchpadTilesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSLaunchpadDisplayedLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["identicon_code"] = types.Int64PointerValue(int32PToInt64P(tkh.GetIdenticonCode()))
	obj["launchpad_launchpad_tile_type"] = stringerToTF(tkh.GetLaunchpadLaunchpadTileType())
	{
		elemType := attrs["logo"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLogo(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["logo"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.LaunchpadVaultRecordLaunchpadTileable)
		val, d := tkhToTFObjectDSLaunchpadVaultRecordLaunchpadTile(false, tkhCast)
		diags.Append(d...)
		obj["vault_record_launchpad_tile"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.LaunchpadManualLaunchpadTileable)
		val, d := tkhToTFObjectDSLaunchpadManualLaunchpadTile(false, tkhCast)
		diags.Append(d...)
		obj["manual_launchpad_tile"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable)
		val, d := tkhToTFObjectDSLaunchpadSsoApplicationLaunchpadTile(false, tkhCast)
		diags.Append(d...)
		obj["sso_application_launchpad_tile"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTileLinkableWrapper(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTileLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.LaunchpadLaunchpadTileable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSLaunchpadLaunchpadTile(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTilePrimer(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTilePrimerAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTilePrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadLaunchpadTile_additionalObjects(recurse bool, tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = launchpadLaunchpadTile_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadManualLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadManualLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadManualLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadManualLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["title"] = types.StringPointerValue(tkh.GetTitle())
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadSsoApplicationLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadSsoApplicationLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["uri"] = types.StringPointerValue(tkh.GetUri())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLaunchpadVaultRecordLaunchpadTile(recurse bool, tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesDSRecurse
	} else {
		attrs = launchpadVaultRecordLaunchpadTileAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSLicenseKeyHubLicenseInfo(recurse bool, tkh keyhubmodel.LicenseKeyHubLicenseInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = licenseKeyHubLicenseInfoAttrTypesDSRecurse
	} else {
		attrs = licenseKeyHubLicenseInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["current_license_status"] = stringerToTF(tkh.GetCurrentLicenseStatus())
	obj["customer_company"] = types.StringPointerValue(tkh.GetCustomerCompany())
	obj["customer_contact"] = types.StringPointerValue(tkh.GetCustomerContact())
	{
		elemType := attrs["customer_domains"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetCustomerDomains(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["customer_domains"] = val
	}
	{
		elemType := attrs["details"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetDetails(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["details"] = val
	}
	obj["expiration_time"] = timePointerToTF(tkh.GetExpirationTime())
	{
		elemType := attrs["features"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetFeatures(), func(tkh keyhubmodel.LicenseLicenseFeature, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["features"] = val
	}
	obj["issue_time"] = timePointerToTF(tkh.GetIssueTime())
	obj["key_hub_domain"] = types.StringPointerValue(tkh.GetKeyHubDomain())
	obj["license_key"] = types.StringPointerValue(tkh.GetLicenseKey())
	obj["not_before_time"] = timePointerToTF(tkh.GetNotBeforeTime())
	obj["users_hard_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersHardLimit()))
	obj["users_pro_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersProLimit()))
	obj["users_soft_limit"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUsersSoftLimit()))
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetVersion()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarker(recurse bool, tkh keyhubmodel.MarkItemMarkerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkerAttrTypesDSRecurse
	} else {
		attrs = markItemMarkerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["level"] = stringerToTF(tkh.GetLevel())
	obj["mark_item_marker_type"] = stringerToTF(tkh.GetMarkItemMarkerType())
	{
		val, d := tkhToTFObjectDSMarkItemMarker_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarker_parameters(recurse bool, tkh keyhubmodel.MarkItemMarker_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarker_parametersAttrTypesDSRecurse
	} else {
		attrs = markItemMarker_parametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSMarkItemMarkers(recurse bool, tkh keyhubmodel.MarkItemMarkersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = markItemMarkersAttrTypesDSRecurse
	} else {
		attrs = markItemMarkersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["markers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetMarkers(), func(tkh keyhubmodel.MarkItemMarkerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSMarkItemMarker(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["markers"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedAuthInternalAccount(recurse bool, tkh keyhubmodel.AuthInternalAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedAuthInternalAccountAttrTypesDSRecurse
	} else {
		attrs = nestedAuthInternalAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSAuthAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["account_directory_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["account_permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccountPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["account_permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["can_request_groups"] = types.BoolPointerValue(tkh.GetCanRequestGroups())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["directory_name"] = types.StringPointerValue(tkh.GetDirectoryName())
	obj["directory_password_change_required"] = types.BoolPointerValue(tkh.GetDirectoryPasswordChangeRequired())
	obj["directory_rotating_password"] = stringerToTF(tkh.GetDirectoryRotatingPassword())
	obj["directory_type"] = stringerToTF(tkh.GetDirectoryType())
	obj["email"] = types.StringPointerValue(tkh.GetEmail())
	obj["id_in_directory"] = types.StringPointerValue(tkh.GetIdInDirectory())
	obj["key_hub_password_change_required"] = types.BoolPointerValue(tkh.GetKeyHubPasswordChangeRequired())
	obj["last_modified_at"] = timePointerToTF(tkh.GetLastModifiedAt())
	obj["license_role"] = stringerToTF(tkh.GetLicenseRole())
	obj["locale"] = types.StringPointerValue(tkh.GetLocale())
	obj["reregistration_required"] = types.BoolPointerValue(tkh.GetReregistrationRequired())
	obj["token_password_enabled"] = types.BoolPointerValue(tkh.GetTokenPasswordEnabled())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["valid_in_directory"] = types.BoolPointerValue(tkh.GetValidInDirectory())
	obj["activation_code"] = types.StringPointerValue(tkh.GetActivationCode())
	obj["activation_deadline"] = timePointerToTF(tkh.GetActivationDeadline())
	obj["company"] = types.StringPointerValue(tkh.GetCompany())
	obj["first_name"] = types.StringPointerValue(tkh.GetFirstName())
	obj["last_name"] = types.StringPointerValue(tkh.GetLastName())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["telephone"] = types.StringPointerValue(tkh.GetTelephone())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedClientOAuth2ClientPermission(recurse bool, tkh keyhubmodel.ClientOAuth2ClientPermissionable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedClientOAuth2ClientPermissionAttrTypesDSRecurse
	} else {
		attrs = nestedClientOAuth2ClientPermissionAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSClientOAuth2ClientPermission_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["client_application_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetForGroup())
		diags.Append(d...)
		obj["for_group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetForSystem())
		diags.Append(d...)
		obj["for_system"] = val
	}
	obj["value"] = stringerToTF(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedGroupAccountGroup(recurse bool, tkh keyhubmodel.GroupAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedGroupAccountGroupAttrTypesDSRecurse
	} else {
		attrs = nestedGroupAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["account_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["admin"] = types.BoolPointerValue(tkh.GetAdmin())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(false, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedGroupGroupAccount(recurse bool, tkh keyhubmodel.GroupGroupAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedGroupGroupAccountAttrTypesDSRecurse
	} else {
		attrs = nestedGroupGroupAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["group_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["disconnected_nested"] = types.BoolPointerValue(tkh.GetDisconnectedNested())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["last_used"] = stringerToTF(tkh.GetLastUsed())
	obj["nested"] = types.BoolPointerValue(tkh.GetNested())
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["two_factor_status"] = stringerToTF(tkh.GetTwoFactorStatus())
	obj["visible_for_provisioning"] = types.BoolPointerValue(tkh.GetVisibleForProvisioning())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedGroupGroupAudit(recurse bool, tkh keyhubmodel.GroupGroupAuditable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedGroupGroupAuditAttrTypesDSRecurse
	} else {
		attrs = nestedGroupGroupAuditAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSGroupGroupAudit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["group_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		elemType := attrs["accounts"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAccounts(), func(tkh keyhubmodel.GroupGroupAuditAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupAuditAccount(false, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["accounts"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["created_by"] = types.StringPointerValue(tkh.GetCreatedBy())
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())
	obj["name_on_audit"] = types.StringPointerValue(tkh.GetNameOnAudit())
	obj["reviewed_at"] = timePointerToTF(tkh.GetReviewedAt())
	obj["reviewed_by"] = types.StringPointerValue(tkh.GetReviewedBy())
	obj["status"] = stringerToTF(tkh.GetStatus())
	obj["submitted_at"] = timePointerToTF(tkh.GetSubmittedAt())
	obj["submitted_by"] = types.StringPointerValue(tkh.GetSubmittedBy())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedOrganizationAccountOrganizationalUnitAttrTypesDSRecurse
	} else {
		attrs = nestedOrganizationAccountOrganizationalUnitAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["account_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedOrganizationOrganizationalUnitAccountAttrTypesDSRecurse
	} else {
		attrs = nestedOrganizationOrganizationalUnitAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["organizational_unit_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedProvisioningGroupOnSystemAttrTypesDSRecurse
	} else {
		attrs = nestedProvisioningGroupOnSystemAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["provisioned_system_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedProvisioningProvisionedAccountAttrTypesDSRecurse
	} else {
		attrs = nestedProvisioningProvisionedAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["provisioned_system_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedProvisioningProvisionedSystemSyncLogAttrTypesDSRecurse
	} else {
		attrs = nestedProvisioningProvisionedSystemSyncLogAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["provisioned_system_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedServiceaccountServiceAccountGroupAttrTypesDSRecurse
	} else {
		attrs = nestedServiceaccountServiceAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["service_account_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["additional"] = types.ListNull(types.StringType)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNestedWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = nestedWebhookWebhookDeliveryAttrTypesDSRecurse
	} else {
		attrs = nestedWebhookWebhookDeliveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	obj["webhook_uuid"] = types.StringNull()
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = timePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationCertificateExpiredNotification(recurse bool, tkh keyhubmodel.NotificationCertificateExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationCertificateExpiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationCertificateExpiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSCertificateCertificate(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectDSDirectoryLDAPDirectory(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["expiration"] = timePointerToTF(tkh.GetExpiration())
	{
		val, d := tkhToTFObjectDSClientLdapClient(recurse, tkh.GetLdapClient())
		diags.Append(d...)
		obj["ldap_client"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystem(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["usage"] = stringerToTF(tkh.GetUsage())
	{
		val, d := tkhToTFObjectDSWebhookWebhook(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupAuditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationGroupAuditRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["due_date"] = timePointerToTF(tkh.GetDueDate())
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["notification_group_audit_required_notification_type"] = stringerToTF(tkh.GetNotificationGroupAuditRequiredNotificationType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupEditRequiredNotification(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSNotificationGroupEditRequiredNotification_parameters(recurse, tkh.GetParameters())
		diags.Append(d...)
		obj["parameters"] = val
	}
	obj["reason"] = stringerToTF(tkh.GetReason())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationGroupEditRequiredNotification_parameters(recurse bool, tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesDSRecurse
	} else {
		attrs = notificationGroupEditRequiredNotification_parametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationInvalidSignaturesDetectedNotification(recurse bool, tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationInvalidSignaturesDetectedNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationLicenseStatusNotification(recurse bool, tkh keyhubmodel.NotificationLicenseStatusNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationLicenseStatusNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationLicenseStatusNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["active_accounts"] = types.Int64PointerValue(int32PToInt64P(tkh.GetActiveAccounts()))
	{
		val, d := tkhToTFObjectDSLicenseKeyHubLicenseInfo(recurse, tkh.GetLicenseInfo())
		diags.Append(d...)
		obj["license_info"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationModificationRequestNotification(recurse bool, tkh keyhubmodel.NotificationModificationRequestNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationModificationRequestNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationModificationRequestNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["admins"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetAdmins(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["admins"] = val
	}
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSRequestModificationRequest(recurse, tkh.GetRequest())
		diags.Append(d...)
		obj["request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationNotification(recurse bool, tkh keyhubmodel.NotificationNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationNotifications(recurse bool, tkh keyhubmodel.NotificationNotificationsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationNotificationsAttrTypesDSRecurse
	} else {
		attrs = notificationNotificationsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.NotificationNotificationable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSNotificationNotification(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationOldApiVersionUsageNotification(recurse bool, tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationOldApiVersionUsageNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["api_version"] = types.Int64PointerValue(int32PToInt64P(tkh.GetApiVersion()))
	{
		val, d := tkhToTFObjectDSClientOAuth2Client(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationProvisionConfigRequiredNotification(recurse bool, tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationProvisionConfigRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["systems"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetSystems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationRotatingPasswordRequiredNotification(recurse bool, tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationRotatingPasswordRequiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.GroupGroupPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationUpdateAvailableNotification(recurse bool, tkh keyhubmodel.NotificationUpdateAvailableNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationUpdateAvailableNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationUpdateAvailableNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["released_at"] = stringerToTF(tkh.GetReleasedAt())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSNotificationVaultRecordExpiredNotification(recurse bool, tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesDSRecurse
	} else {
		attrs = notificationVaultRecordExpiredNotificationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh.GetRecord())
		diags.Append(d...)
		obj["record"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnitLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationAccountOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationAccountOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationAccountOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationAccountOrganizationalUnit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnit(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnit_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["depth"] = types.Int64PointerValue(int32PToInt64P(tkh.GetDepth()))
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(false, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccount(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccountLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitAccount_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnit(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnitPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnitPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSOrganizationOrganizationalUnit_additionalObjects(recurse bool, tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = organizationOrganizationalUnit_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAbstractProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(recurse, tkh.GetAttributes())
		diags.Append(d...)
		obj["attributes"] = val
	}
	obj["base_dn"] = types.StringPointerValue(tkh.GetBaseDN())
	obj["bind_dn"] = types.StringPointerValue(tkh.GetBindDN())
	obj["bind_password"] = types.StringPointerValue(tkh.GetBindPassword())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["failover_host"] = types.StringPointerValue(tkh.GetFailoverHost())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetFailoverTrustedCertificate())
		diags.Append(d...)
		obj["failover_trusted_certificate"] = val
	}
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())
	obj["host"] = types.StringPointerValue(tkh.GetHost())
	obj["object_classes"] = types.StringPointerValue(tkh.GetObjectClasses())
	obj["port"] = types.Int64PointerValue(int32PToInt64P(tkh.GetPort()))
	obj["service_account_dn"] = types.StringPointerValue(tkh.GetServiceAccountDN())
	obj["ssh_public_key_supported"] = types.BoolPointerValue(tkh.GetSshPublicKeySupported())
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(recurse, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	obj["user_dn"] = types.StringPointerValue(tkh.GetUserDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAbstractProvisionedLDAP_attributes(recurse bool, tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesDSRecurse
	} else {
		attrs = provisioningAbstractProvisionedLDAP_attributesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAccountProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	obj["result"] = stringerToTF(tkh.GetResult())
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroup(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningAccountProvisioningStatusReport(recurse bool, tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesDSRecurse
	} else {
		attrs = provisioningAccountProvisioningStatusReportAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["status"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetStatus(), func(tkh keyhubmodel.ProvisioningAccountProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningAccountProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningCircuitBreakerStatistics(recurse bool, tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesDSRecurse
	} else {
		attrs = provisioningCircuitBreakerStatisticsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["number_of_failed_calls"] = types.Int64PointerValue(tkh.GetNumberOfFailedCalls())
	obj["number_of_not_permitted_calls"] = types.Int64PointerValue(tkh.GetNumberOfNotPermittedCalls())
	obj["number_of_successful_calls"] = types.Int64PointerValue(tkh.GetNumberOfSuccessfulCalls())
	obj["state"] = stringerToTF(tkh.GetState())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystem(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemPrimerAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystemTypes(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystemTypesable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystemTypesAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystemTypesAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.ProvisioningGroupOnSystemType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupOnSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupOnSystem_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupProvisioningGroupLinkableWrapper(recurse, tkh.GetProvgroups())
		diags.Append(d...)
		obj["provgroups"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse, tkh.GetServiceAccounts())
		diags.Append(d...)
		obj["service_accounts"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSGroupGroupFolder(recurse, tkh.GetFolder())
		diags.Append(d...)
		obj["folder"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroup(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse, tkh.GetProvisioningDuration())
		diags.Append(d...)
		obj["provisioning_duration"] = val
	}
	obj["provisioning_end_time"] = timePointerToTF(tkh.GetProvisioningEndTime())
	obj["provisioning_permission_end_time"] = timePointerToTF(tkh.GetProvisioningPermissionEndTime())
	{
		val, d := tkhToTFObjectDSProvisioningAccountProvisioningStatusReport(recurse, tkh.GetStatusReport())
		diags.Append(d...)
		obj["status_report"] = val
	}
	obj["visible_on_dashboard"] = types.BoolPointerValue(tkh.GetVisibleOnDashboard())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningGroupProvisioningStatus_provisioningDuration(recurse bool, tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDSRecurse
	} else {
		attrs = provisioningGroupProvisioningStatus_provisioningDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningOwnedGroupOnSystemsWrapper(recurse bool, tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningOwnedGroupOnSystemsWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningGroupOnSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}
	obj["unlinked_count"] = types.Int64PointerValue(tkh.GetUnlinkedCount())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequence(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["next_uid"] = types.Int64PointerValue(tkh.GetNextUID())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequenceLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequenceLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionNumberSequenceable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionNumberSequence_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionNumberSequence_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse, tkh.GetSystems())
		diags.Append(d...)
		obj["systems"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAD(recurse bool, tkh keyhubmodel.ProvisioningProvisionedADable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedADAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedADAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["sam_account_name_scheme"] = stringerToTF(tkh.GetSamAccountNameScheme())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccount(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["last_active"] = timePointerToTF(tkh.GetLastActive())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["validity"] = stringerToTF(tkh.GetValidity())
	obj["additional"] = types.ListNull(types.StringType)
	obj["uid"] = types.Int64PointerValue(tkh.GetUid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAccount_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureOIDCDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureOIDCDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureSyncLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureSyncLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedAzureTenant(recurse bool, tkh keyhubmodel.ProvisioningProvisionedAzureTenantable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedAzureTenantAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedAzureTenantAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["client_id"] = types.StringPointerValue(tkh.GetClientId())
	obj["client_secret"] = types.StringPointerValue(tkh.GetClientSecret())
	obj["idp_domain"] = types.StringPointerValue(tkh.GetIdpDomain())
	obj["tenant"] = types.StringPointerValue(tkh.GetTenant())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedInternalLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedInternalLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedInternalLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSClientLdapClient(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedLDAP(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedLDAPAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["gid"] = types.Int64PointerValue(tkh.GetGid())
	obj["hashing_scheme"] = stringerToTF(tkh.GetHashingScheme())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionNumberSequence(recurse, tkh.GetNumbering())
		diags.Append(d...)
		obj["numbering"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedLDAPDirectory(recurse bool, tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedLDAPDirectoryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	obj["group_dn"] = types.StringPointerValue(tkh.GetGroupDN())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystem(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["account_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetAccountCount()))
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetContentAdministrator())
		diags.Append(d...)
		obj["content_administrator"] = val
	}
	obj["external_uuid"] = stringerToTF(tkh.GetExternalUuid())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetOwner())
		diags.Append(d...)
		obj["owner"] = val
	}
	obj["self_service_existing_groups"] = types.BoolPointerValue(tkh.GetSelfServiceExistingGroups())
	obj["self_service_new_groups"] = types.BoolPointerValue(tkh.GetSelfServiceNewGroups())
	obj["self_service_service_accounts"] = types.BoolPointerValue(tkh.GetSelfServiceServiceAccounts())
	obj["should_destroy_unknown_accounts"] = types.BoolPointerValue(tkh.GetShouldDestroyUnknownAccounts())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}
	obj["username_prefix"] = types.StringPointerValue(tkh.GetUsernamePrefix())
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedInternalLDAPable)
		val, d := tkhToTFObjectDSProvisioningProvisionedInternalLDAP(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_internal_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningAbstractProvisionedLDAPable)
		val, d := tkhToTFObjectDSProvisioningAbstractProvisionedLDAP(false, tkhCast)
		diags.Append(d...)
		obj["abstract_provisioned_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedLDAPable)
		val, d := tkhToTFObjectDSProvisioningProvisionedLDAP(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_ldap"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedLDAPDirectoryable)
		val, d := tkhToTFObjectDSProvisioningProvisionedLDAPDirectory(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_ldap_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureTenantable)
		val, d := tkhToTFObjectDSProvisioningProvisionedAzureTenant(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_tenant"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedADable)
		val, d := tkhToTFObjectDSProvisioningProvisionedAD(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_a_d"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable)
		val, d := tkhToTFObjectDSProvisioningProvisionedAzureOIDCDirectory(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_oidc_directory"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable)
		val, d := tkhToTFObjectDSProvisioningProvisionedAzureSyncLDAPDirectory(false, tkhCast)
		diags.Append(d...)
		obj["provisioned_azure_sync_ldap_directory"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystem(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["provisioning_provisioned_system_primer_type"] = stringerToTF(tkh.GetProvisioningProvisionedSystemPrimerType())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLog(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["created_at"] = timePointerToTF(tkh.GetCreatedAt())
	obj["errors"] = types.Int64PointerValue(int32PToInt64P(tkh.GetErrors()))
	obj["log"] = types.StringPointerValue(tkh.GetLog())
	obj["modifications"] = types.Int64PointerValue(int32PToInt64P(tkh.GetModifications()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLogLinkableWrapper(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLogLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningProvisionedSystemSyncLog(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystemSyncLog_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystemSyncLog_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisionedSystem_additionalObjects(recurse bool, tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisionedSystem_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedAccount(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSClientOAuth2ClientPermissionWithClientLinkableWrapper(recurse, tkh.GetIssuedPermissions())
		diags.Append(d...)
		obj["issued_permissions"] = val
	}
	obj["login_name"] = types.StringPointerValue(tkh.GetLoginName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisioningManagementPermissions(recurse, tkh.GetManagementPermissions())
		diags.Append(d...)
		obj["management_permissions"] = val
	}
	{
		val, d := tkhToTFObjectDSMarkItemMarkers(recurse, tkh.GetMarkers())
		diags.Append(d...)
		obj["markers"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningCircuitBreakerStatistics(recurse, tkh.GetStatistics())
		diags.Append(d...)
		obj["statistics"] = val
	}
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystemTypes(recurse, tkh.GetSupportedGroupTypes())
		diags.Append(d...)
		obj["supported_group_types"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisioningManagementPermissions(recurse bool, tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisioningManagementPermissionsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["create_new_groups_allowed"] = types.BoolPointerValue(tkh.GetCreateNewGroupsAllowed())
	obj["create_service_accounts_allowed"] = types.BoolPointerValue(tkh.GetCreateServiceAccountsAllowed())
	obj["reuse_existing_groups_allowed"] = types.BoolPointerValue(tkh.GetReuseExistingGroupsAllowed())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningProvisioningStatus(recurse bool, tkh keyhubmodel.ProvisioningProvisioningStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningProvisioningStatusAttrTypesDSRecurse
	} else {
		attrs = provisioningProvisioningStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["groups"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetGroups(), func(tkh keyhubmodel.ProvisioningGroupProvisioningStatusable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSProvisioningGroupProvisioningStatus(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["groups"] = val
	}
	obj["ignore_errors"] = types.BoolPointerValue(tkh.GetIgnoreErrors())
	obj["restricted_by_license"] = types.BoolPointerValue(tkh.GetRestrictedByLicense())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSProvisioningTokenPassword(recurse bool, tkh keyhubmodel.ProvisioningTokenPasswordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = provisioningTokenPasswordAttrTypesDSRecurse
	} else {
		attrs = provisioningTokenPasswordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractApplicationModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractApplicationModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractApplicationModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractApplicationModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(recurse, tkh.GetApplication())
		diags.Append(d...)
		obj["application"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractOrganizationalUnitModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractOrganizationalUnitModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSOrganizationOrganizationalUnitPrimer(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAbstractProvisionedSystemModificationRequest(recurse bool, tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestAbstractProvisionedSystemModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse, tkh.GetAccessDuration())
		diags.Append(d...)
		obj["access_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptGrantAccessRequestParameters_accessDuration(recurse bool, tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDSRecurse
	} else {
		attrs = requestAcceptGrantAccessRequestParameters_accessDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptJoinGroupRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptJoinGroupRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["make_manager"] = types.BoolPointerValue(tkh.GetMakeManager())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAcceptModificationRequestParameters(recurse bool, tkh keyhubmodel.RequestAcceptModificationRequestParametersable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAcceptModificationRequestParametersAttrTypesDSRecurse
	} else {
		attrs = requestAcceptModificationRequestParametersAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestAddGroupAdminRequest(recurse bool, tkh keyhubmodel.RequestAddGroupAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestAddGroupAdminRequestAttrTypesDSRecurse
	} else {
		attrs = requestAddGroupAdminRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetNewAdmin())
		diags.Append(d...)
		obj["new_admin"] = val
	}
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupOnSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateGroupOnSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	obj["group_on_system_type"] = stringerToTF(tkh.GetGroupOnSystemType())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateGroupRequest(recurse bool, tkh keyhubmodel.RequestCreateGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestCreateServiceAccountRequest(recurse bool, tkh keyhubmodel.RequestCreateServiceAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestCreateServiceAccountRequestAttrTypesDSRecurse
	} else {
		attrs = requestCreateServiceAccountRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["username"] = types.StringPointerValue(tkh.GetUsername())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestDisable2FARequest(recurse bool, tkh keyhubmodel.RequestDisable2FARequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestDisable2FARequestAttrTypesDSRecurse
	} else {
		attrs = requestDisable2FARequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["subject"] = types.StringPointerValue(tkh.GetSubject())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestEnableTechnicalAdministrationRequest(recurse bool, tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestEnableTechnicalAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestExtendAccessRequest(recurse bool, tkh keyhubmodel.RequestExtendAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestExtendAccessRequestAttrTypesDSRecurse
	} else {
		attrs = requestExtendAccessRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["extend_until"] = timePointerToTF(tkh.GetExtendUntil())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantAccessRequest(recurse bool, tkh keyhubmodel.RequestGrantAccessRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantAccessRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantAccessRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantApplicationRequest(recurse bool, tkh keyhubmodel.RequestGrantApplicationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantApplicationRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantApplicationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantClientPermissionRequest(recurse bool, tkh keyhubmodel.RequestGrantClientPermissionRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantClientPermissionRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantClientPermissionRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["permission_type"] = stringerToTF(tkh.GetPermissionType())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantGroupOnSystemRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantGroupOnSystemRequestRequest(recurse bool, tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantGroupOnSystemRequestRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["activation_required"] = types.BoolPointerValue(tkh.GetActivationRequired())
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestGrantServiceAccountGroupRequest(recurse bool, tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestGrantServiceAccountGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestJoinGroupRequest(recurse bool, tkh keyhubmodel.RequestJoinGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestJoinGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestJoinVaultRequest(recurse bool, tkh keyhubmodel.RequestJoinVaultRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestJoinVaultRequestAttrTypesDSRecurse
	} else {
		attrs = requestJoinVaultRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequest(recurse bool, tkh keyhubmodel.RequestModificationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSRequestModificationRequest_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["feedback"] = types.StringPointerValue(tkh.GetFeedback())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["mail_key"] = types.StringPointerValue(tkh.GetMailKey())
	obj["request_modification_request_type"] = stringerToTF(tkh.GetRequestModificationRequestType())
	obj["status"] = stringerToTF(tkh.GetStatus())
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable)
		val, d := tkhToTFObjectDSRequestAbstractOrganizationalUnitModificationRequest(false, tkhCast)
		diags.Append(d...)
		obj["abstract_organizational_unit_modification_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable)
		val, d := tkhToTFObjectDSRequestTransferOrganizationalUnitOwnershipRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_organizational_unit_ownership_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable)
		val, d := tkhToTFObjectDSRequestAbstractProvisionedSystemModificationRequest(false, tkhCast)
		diags.Append(d...)
		obj["abstract_provisioned_system_modification_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestCreateServiceAccountRequestable)
		val, d := tkhToTFObjectDSRequestCreateServiceAccountRequest(false, tkhCast)
		diags.Append(d...)
		obj["create_service_account_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestSetupAuthorizingGroupRequestable)
		val, d := tkhToTFObjectDSRequestSetupAuthorizingGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["setup_authorizing_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantServiceAccountGroupRequestable)
		val, d := tkhToTFObjectDSRequestGrantServiceAccountGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_service_account_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantGroupOnSystemRequestRequestable)
		val, d := tkhToTFObjectDSRequestGrantGroupOnSystemRequestRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_group_on_system_request_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferAuditorGroupRequestable)
		val, d := tkhToTFObjectDSRequestTransferAuditorGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_auditor_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestAbstractApplicationModificationRequestable)
		val, d := tkhToTFObjectDSRequestAbstractApplicationModificationRequest(false, tkhCast)
		diags.Append(d...)
		obj["abstract_application_modification_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferApplicationOwnershipRequestable)
		val, d := tkhToTFObjectDSRequestTransferApplicationOwnershipRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_application_ownership_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferServiceAccountAdministrationRequestable)
		val, d := tkhToTFObjectDSRequestTransferServiceAccountAdministrationRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_service_account_administration_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable)
		val, d := tkhToTFObjectDSRequestTransferProvisionedSystemContentAdministrationRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_provisioned_system_content_administration_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestRemoveGroupRequestable)
		val, d := tkhToTFObjectDSRequestRemoveGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["remove_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestJoinGroupRequestable)
		val, d := tkhToTFObjectDSRequestJoinGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["join_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantAccessRequestable)
		val, d := tkhToTFObjectDSRequestGrantAccessRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_access_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestReviewAuditRequestable)
		val, d := tkhToTFObjectDSRequestReviewAuditRequest(false, tkhCast)
		diags.Append(d...)
		obj["review_audit_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantClientPermissionRequestable)
		val, d := tkhToTFObjectDSRequestGrantClientPermissionRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_client_permission_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable)
		val, d := tkhToTFObjectDSRequestTransferGroupOnSystemOwnershipRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_group_on_system_ownership_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable)
		val, d := tkhToTFObjectDSRequestTransferProvisionedSystemOwnershipRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_provisioned_system_ownership_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantApplicationRequestable)
		val, d := tkhToTFObjectDSRequestGrantApplicationRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_application_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable)
		val, d := tkhToTFObjectDSRequestTransferProvisionedSystemAdministrationRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_provisioned_system_administration_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestExtendAccessRequestable)
		val, d := tkhToTFObjectDSRequestExtendAccessRequest(false, tkhCast)
		diags.Append(d...)
		obj["extend_access_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestCreateGroupOnSystemRequestable)
		val, d := tkhToTFObjectDSRequestCreateGroupOnSystemRequest(false, tkhCast)
		diags.Append(d...)
		obj["create_group_on_system_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestAddGroupAdminRequestable)
		val, d := tkhToTFObjectDSRequestAddGroupAdminRequest(false, tkhCast)
		diags.Append(d...)
		obj["add_group_admin_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestJoinVaultRequestable)
		val, d := tkhToTFObjectDSRequestJoinVaultRequest(false, tkhCast)
		diags.Append(d...)
		obj["join_vault_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestGrantGroupOnSystemRequestable)
		val, d := tkhToTFObjectDSRequestGrantGroupOnSystemRequest(false, tkhCast)
		diags.Append(d...)
		obj["grant_group_on_system_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestRemoveProvisionedSystemRequestable)
		val, d := tkhToTFObjectDSRequestRemoveProvisionedSystemRequest(false, tkhCast)
		diags.Append(d...)
		obj["remove_provisioned_system_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestSetupNestedGroupRequestable)
		val, d := tkhToTFObjectDSRequestSetupNestedGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["setup_nested_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestTransferApplicationAdministrationRequestable)
		val, d := tkhToTFObjectDSRequestTransferApplicationAdministrationRequest(false, tkhCast)
		diags.Append(d...)
		obj["transfer_application_administration_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestCreateGroupRequestable)
		val, d := tkhToTFObjectDSRequestCreateGroupRequest(false, tkhCast)
		diags.Append(d...)
		obj["create_group_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestRevokeAdminRequestable)
		val, d := tkhToTFObjectDSRequestRevokeAdminRequest(false, tkhCast)
		diags.Append(d...)
		obj["revoke_admin_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestPasswordResetRequestable)
		val, d := tkhToTFObjectDSRequestPasswordResetRequest(false, tkhCast)
		diags.Append(d...)
		obj["password_reset_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestEnableTechnicalAdministrationRequestable)
		val, d := tkhToTFObjectDSRequestEnableTechnicalAdministrationRequest(false, tkhCast)
		diags.Append(d...)
		obj["enable_technical_administration_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestUpdateGroupMembershipRequestable)
		val, d := tkhToTFObjectDSRequestUpdateGroupMembershipRequest(false, tkhCast)
		diags.Append(d...)
		obj["update_group_membership_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestRemoveOrganizationalUnitRequestable)
		val, d := tkhToTFObjectDSRequestRemoveOrganizationalUnitRequest(false, tkhCast)
		diags.Append(d...)
		obj["remove_organizational_unit_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestVerifyInternalAccountRequestable)
		val, d := tkhToTFObjectDSRequestVerifyInternalAccountRequest(false, tkhCast)
		diags.Append(d...)
		obj["verify_internal_account_request"] = val
	}
	{
		tkhCast, _ := tkh.(keyhubmodel.RequestDisable2FARequestable)
		val, d := tkhToTFObjectDSRequestDisable2FARequest(false, tkhCast)
		diags.Append(d...)
		obj["disable2fa_request"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequestLinkableWrapper(recurse bool, tkh keyhubmodel.RequestModificationRequestLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequestLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequestLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.RequestModificationRequestable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRequestModificationRequest(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestModificationRequest_additionalObjects(recurse bool, tkh keyhubmodel.RequestModificationRequest_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestModificationRequest_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = requestModificationRequest_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSRequestPasswordResetRequestStatus(recurse, tkh.GetResetStatus())
		diags.Append(d...)
		obj["reset_status"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestPasswordResetRequest(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestAttrTypesDSRecurse
	} else {
		attrs = requestPasswordResetRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestPasswordResetRequestStatus(recurse bool, tkh keyhubmodel.RequestPasswordResetRequestStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestPasswordResetRequestStatusAttrTypesDSRecurse
	} else {
		attrs = requestPasswordResetRequestStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["cooldown_end"] = timePointerToTF(tkh.GetCooldownEnd())
	{
		elemType := attrs["managers"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetManagers(), func(tkh string, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh)
		})
		diags.Append(d...)
		obj["managers"] = val
	}
	obj["nr_accepted"] = types.Int64PointerValue(tkh.GetNrAccepted())
	obj["reset_via_mail"] = stringerToTF(tkh.GetResetViaMail())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveGroupRequest(recurse bool, tkh keyhubmodel.RequestRemoveGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["group_name"] = types.StringPointerValue(tkh.GetGroupName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveOrganizationalUnitRequest(recurse bool, tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveOrganizationalUnitRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["organizational_unit_name"] = types.StringPointerValue(tkh.GetOrganizationalUnitName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRemoveProvisionedSystemRequest(recurse bool, tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesDSRecurse
	} else {
		attrs = requestRemoveProvisionedSystemRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["system_name"] = types.StringPointerValue(tkh.GetSystemName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestReviewAuditRequest(recurse bool, tkh keyhubmodel.RequestReviewAuditRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestReviewAuditRequestAttrTypesDSRecurse
	} else {
		attrs = requestReviewAuditRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestRevokeAdminRequest(recurse bool, tkh keyhubmodel.RequestRevokeAdminRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestRevokeAdminRequestAttrTypesDSRecurse
	} else {
		attrs = requestRevokeAdminRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAdmin())
		diags.Append(d...)
		obj["admin"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestSetupAuthorizingGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestSetupAuthorizingGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["authorizing_group_type"] = stringerToTF(tkh.GetAuthorizingGroupType())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetRequestingGroup())
		diags.Append(d...)
		obj["requesting_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestSetupNestedGroupRequest(recurse bool, tkh keyhubmodel.RequestSetupNestedGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestSetupNestedGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestSetupNestedGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_action"] = stringerToTF(tkh.GetAccountAction())
	obj["connect"] = types.BoolPointerValue(tkh.GetConnect())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetRequestingGroup())
		diags.Append(d...)
		obj["requesting_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferApplicationAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferApplicationAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferApplicationOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferApplicationOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferAuditorGroupRequest(recurse bool, tkh keyhubmodel.RequestTransferAuditorGroupRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferAuditorGroupRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferAuditorGroupRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferGroupOnSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferGroupOnSystemOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSProvisioningGroupOnSystem(recurse, tkh.GetGroupOnSystem())
		diags.Append(d...)
		obj["group_on_system"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferOrganizationalUnitOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferOrganizationalUnitOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemContentAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemContentAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferProvisionedSystemOwnershipRequest(recurse bool, tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferProvisionedSystemOwnershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestTransferServiceAccountAdministrationRequest(recurse bool, tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesDSRecurse
	} else {
		attrs = requestTransferServiceAccountAdministrationRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestUpdateGroupMembershipRequest(recurse bool, tkh keyhubmodel.RequestUpdateGroupMembershipRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestUpdateGroupMembershipRequestAttrTypesDSRecurse
	} else {
		attrs = requestUpdateGroupMembershipRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAccountToUpdate())
		diags.Append(d...)
		obj["account_to_update"] = val
	}
	obj["current_end_date"] = stringerToTF(tkh.GetCurrentEndDate())
	obj["current_rights"] = stringerToTF(tkh.GetCurrentRights())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["rights"] = stringerToTF(tkh.GetRights())
	obj["update_group_membership_type"] = stringerToTF(tkh.GetUpdateGroupMembershipType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSRequestVerifyInternalAccountRequest(recurse bool, tkh keyhubmodel.RequestVerifyInternalAccountRequestable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = requestVerifyInternalAccountRequestAttrTypesDSRecurse
	} else {
		attrs = requestVerifyInternalAccountRequestAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["internal_account_name"] = types.StringPointerValue(tkh.GetInternalAccountName())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccount(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSServiceaccountServiceAccount_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["description"] = types.StringPointerValue(tkh.GetDescription())
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(false, tkh.GetPassword())
		diags.Append(d...)
		obj["password"] = val
	}
	obj["password_rotation"] = stringerToTF(tkh.GetPasswordRotation())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetTechnicalAdministrator())
		diags.Append(d...)
		obj["technical_administrator"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroup(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["display_name"] = types.StringPointerValue(tkh.GetDisplayName())
	obj["name_in_system"] = types.StringPointerValue(tkh.GetNameInSystem())
	obj["provisioning_group_on_system_primer_type"] = stringerToTF(tkh.GetProvisioningGroupOnSystemPrimerType())
	obj["short_name_in_system"] = types.StringPointerValue(tkh.GetShortNameInSystem())
	obj["additional"] = types.ListNull(types.StringType)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroupLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroupLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountGroupable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccountGroup(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountGroup_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountGroup_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccount(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.ServiceaccountServiceAccountPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSServiceaccountServiceAccountPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountStatus(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountStatusable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountStatusAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountStatusAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["account_enabled"] = types.BoolPointerValue(tkh.GetAccountEnabled())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccount_additionalObjects(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccount_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountGroupLinkableWrapper(recurse, tkh.GetGroups())
		diags.Append(d...)
		obj["groups"] = val
	}
	{
		val, d := tkhToTFObjectDSGeneratedSecret(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["disabled_count"] = types.Int64PointerValue(tkh.GetDisabledCount())
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse, tkh.GetPasswordSchemeEnabledStats())
		diags.Append(d...)
		obj["password_scheme_enabled_stats"] = val
	}
	{
		val, d := tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_systemStats(recurse, tkh.GetSystemStats())
		diags.Append(d...)
		obj["system_stats"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSServiceaccountServiceAccountsAuditStats_systemStats(recurse bool, tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDSRecurse
	} else {
		attrs = serviceaccountServiceAccountsAuditStats_systemStatsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSimpleStringValue(recurse bool, tkh keyhubmodel.SimpleStringValueable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleStringValueAttrTypesDSRecurse
	} else {
		attrs = simpleStringValueAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["value"] = types.StringPointerValue(tkh.GetValue())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSSimpleVersionInfo(recurse bool, tkh keyhubmodel.SimpleVersionInfoable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = simpleVersionInfoAttrTypesDSRecurse
	} else {
		attrs = simpleVersionInfoAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["contract_versions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetContractVersions(), func(tkh int32, diags *diag.Diagnostics) attr.Value {
			return types.Int64Value(int64(tkh))
		})
		diags.Append(d...)
		obj["contract_versions"] = val
	}
	obj["key_hub_version"] = types.StringPointerValue(tkh.GetKeyHubVersion())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolder(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultDeletedVaultHolder_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["record_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetRecordCount()))
	obj["vault_deleted_vault_holder_type"] = stringerToTF(tkh.GetVaultDeletedVaultHolderType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolderLinkableWrapper(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolderLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultDeletedVaultHolderable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultDeletedVaultHolder(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultHolder_additionalObjects(recurse bool, tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultHolder_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVault(recurse, tkh.GetVault())
		diags.Append(d...)
		obj["vault"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultDeletedVaultRecovery(recurse bool, tkh keyhubmodel.VaultDeletedVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultDeletedVaultRecoveryAttrTypesDSRecurse
	} else {
		attrs = vaultDeletedVaultRecoveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["prefix"] = types.StringPointerValue(tkh.GetPrefix())
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetTargetGroup())
		diags.Append(d...)
		obj["target_group"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultMoveVaultRecord(recurse bool, tkh keyhubmodel.VaultMoveVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecordAttrTypesDSRecurse
	} else {
		attrs = vaultMoveVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["action"] = stringerToTF(tkh.GetAction())
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultMoveVaultRecord_shareDuration(recurse, tkh.GetShareDuration())
		diags.Append(d...)
		obj["share_duration"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultMoveVaultRecord_shareDuration(recurse bool, tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesDSRecurse
	} else {
		attrs = vaultMoveVaultRecord_shareDurationAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["nanos"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNanos()))
	obj["seconds"] = types.Int64PointerValue(tkh.GetSeconds())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultPasswordMetadata(recurse bool, tkh keyhubmodel.VaultPasswordMetadataable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultPasswordMetadataAttrTypesDSRecurse
	} else {
		attrs = vaultPasswordMetadataAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["dictionary"] = types.BoolPointerValue(tkh.GetDictionary())
	obj["duplicate"] = types.BoolPointerValue(tkh.GetDuplicate())
	obj["hash"] = types.StringPointerValue(tkh.GetHash())
	obj["length"] = types.Int64PointerValue(int32PToInt64P(tkh.GetLength()))
	obj["lower_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetLowerCount()))
	obj["number_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetNumberCount()))
	obj["special_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetSpecialCount()))
	obj["strength"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStrength()))
	obj["upper_count"] = types.Int64PointerValue(int32PToInt64P(tkh.GetUpperCount()))

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVault(recurse bool, tkh keyhubmodel.VaultVaultable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultAttrTypesDSRecurse
	} else {
		attrs = vaultVaultAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["access_available"] = types.BoolPointerValue(tkh.GetAccessAvailable())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		elemType := attrs["records"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetRecords(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["records"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultHolder(recurse bool, tkh keyhubmodel.VaultVaultHolderable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultHolderAttrTypesDSRecurse
	} else {
		attrs = vaultVaultHolderAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecord(recurse bool, tkh keyhubmodel.VaultVaultRecordable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSVaultVaultRecord_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["additional"] = types.ListNull(types.StringType)
	obj["derived"] = types.BoolPointerValue(tkh.GetDerived())
	obj["end_date"] = stringerToTF(tkh.GetEndDate())
	obj["filename"] = types.StringPointerValue(tkh.GetFilename())
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.VaultVaultSecretType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["username"] = types.StringPointerValue(tkh.GetUsername())
	obj["warning_period"] = stringerToTF(tkh.GetWarningPeriod())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecord(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordPrimer(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordPrimerAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["color"] = stringerToTF(tkh.GetColor())
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["share_end_time"] = timePointerToTF(tkh.GetShareEndTime())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordPrimerLinkableWrapper(recurse bool, tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordPrimerLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.VaultVaultRecordPrimerable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordSecrets(recurse bool, tkh keyhubmodel.VaultVaultRecordSecretsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordSecretsAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordSecretsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["comment"] = types.StringPointerValue(tkh.GetComment())
	obj["file"] = types.StringPointerValue(tkh.GetFile())
	obj["password"] = types.StringPointerValue(tkh.GetPassword())
	obj["totp"] = types.StringPointerValue(tkh.GetTotp())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordShare(recurse bool, tkh keyhubmodel.VaultVaultRecordShareable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordShareAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	obj["vault_vault_record_share_type"] = stringerToTF(tkh.GetVaultVaultRecordShareType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecordShareSummary(recurse bool, tkh keyhubmodel.VaultVaultRecordShareSummaryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecordShareSummaryAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecordShareSummaryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["children"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetChildren(), func(tkh keyhubmodel.VaultVaultRecordShareable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSVaultVaultRecordShare(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["children"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordShare(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecord_additionalObjects(recurse bool, tkh keyhubmodel.VaultVaultRecord_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecord_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimer(recurse, tkh.GetParent())
		diags.Append(d...)
		obj["parent"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultPasswordMetadata(recurse, tkh.GetPasswordMetadata())
		diags.Append(d...)
		obj["password_metadata"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordSecrets(recurse, tkh.GetSecret())
		diags.Append(d...)
		obj["secret"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordShareSummary(recurse, tkh.GetShareSummary())
		diags.Append(d...)
		obj["share_summary"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultRecordPrimerLinkableWrapper(recurse, tkh.GetShares())
		diags.Append(d...)
		obj["shares"] = val
	}
	{
		val, d := tkhToTFObjectDSLaunchpadVaultRecordLaunchpadTile(recurse, tkh.GetTile())
		diags.Append(d...)
		obj["tile"] = val
	}
	{
		val, d := tkhToTFObjectDSVaultVaultHolder(recurse, tkh.GetVaultholder())
		diags.Append(d...)
		obj["vaultholder"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultRecovery(recurse bool, tkh keyhubmodel.VaultVaultRecoveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultRecoveryAttrTypesDSRecurse
	} else {
		attrs = vaultVaultRecoveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["private_key"] = types.StringPointerValue(tkh.GetPrivateKey())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultUnlock(recurse bool, tkh keyhubmodel.VaultVaultUnlockable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockAttrTypesDSRecurse
	} else {
		attrs = vaultVaultUnlockAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["password"] = types.StringPointerValue(tkh.GetPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSVaultVaultUnlockResponse(recurse bool, tkh keyhubmodel.VaultVaultUnlockResponseable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = vaultVaultUnlockResponseAttrTypesDSRecurse
	} else {
		attrs = vaultVaultUnlockResponseAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["expires_at"] = timePointerToTF(tkh.GetExpiresAt())
	obj["session_password"] = types.StringPointerValue(tkh.GetSessionPassword())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhook(recurse bool, tkh keyhubmodel.WebhookWebhookable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSWebhookWebhook_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSAuthAccountPrimer(false, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	obj["active"] = types.BoolPointerValue(tkh.GetActive())
	obj["all_types"] = types.BoolPointerValue(tkh.GetAllTypes())
	obj["authentication_scheme"] = stringerToTF(tkh.GetAuthenticationScheme())
	obj["basic_auth_password"] = types.StringPointerValue(tkh.GetBasicAuthPassword())
	obj["basic_auth_username"] = types.StringPointerValue(tkh.GetBasicAuthUsername())
	obj["bearer_token"] = types.StringPointerValue(tkh.GetBearerToken())
	{
		val, d := tkhToTFObjectDSClientClientApplicationPrimer(false, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetClientCertificate())
		diags.Append(d...)
		obj["client_certificate"] = val
	}
	obj["custom_header_name"] = types.StringPointerValue(tkh.GetCustomHeaderName())
	obj["custom_header_value"] = types.StringPointerValue(tkh.GetCustomHeaderValue())
	{
		val, d := tkhToTFObjectDSDirectoryAccountDirectoryPrimer(false, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectDSGroupGroupPrimer(false, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSProvisioningProvisionedSystemPrimer(false, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["tls"] = stringerToTF(tkh.GetTls())
	{
		val, d := tkhToTFObjectDSCertificateCertificatePrimer(false, tkh.GetTrustedCertificate())
		diags.Append(d...)
		obj["trusted_certificate"] = val
	}
	{
		elemType := attrs["types"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetTypes(), func(tkh keyhubmodel.AuditAuditRecordType, diags *diag.Diagnostics) attr.Value {
			return types.StringValue(tkh.String())
		})
		diags.Append(d...)
		obj["types"] = val
	}
	obj["url"] = types.StringPointerValue(tkh.GetUrl())
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())
	obj["verbose_payloads"] = types.BoolPointerValue(tkh.GetVerbosePayloads())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDelivery(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDeliveryAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	if recurse {
		{
			val, d := tkhToTFObjectDSWebhookWebhookDelivery_additionalObjects(false, tkh.GetAdditionalObjects())
			diags.Append(d...)
			obj["additional_objects"] = val
		}
	}
	{
		elemType := attrs["links"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetLinks(), func(tkh keyhubmodel.RestLinkable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSRestLink(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["links"] = val
	}
	{
		elemType := attrs["permissions"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetPermissions(), func(tkh keyhubmodel.AuthPermissionable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSAuthPermission(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["permissions"] = val
	}
	obj["additional"] = types.ListNull(types.StringType)
	{
		val, d := tkhToTFObjectDSWebhookWebhookPush(false, tkh.GetPayload())
		diags.Append(d...)
		obj["payload"] = val
	}
	obj["reponse_headers"] = types.StringPointerValue(tkh.GetReponseHeaders())
	obj["request_headers"] = types.StringPointerValue(tkh.GetRequestHeaders())
	obj["response"] = types.StringPointerValue(tkh.GetResponse())
	obj["status"] = types.Int64PointerValue(int32PToInt64P(tkh.GetStatus()))
	obj["time"] = types.Int64PointerValue(int32PToInt64P(tkh.GetTime()))
	obj["trigger_time"] = timePointerToTF(tkh.GetTriggerTime())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDeliveryLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDeliveryLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookDeliveryable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSWebhookWebhookDelivery(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookDelivery_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookDelivery_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookLinkableWrapper(recurse bool, tkh keyhubmodel.WebhookWebhookLinkableWrapperable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookLinkableWrapperAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookLinkableWrapperAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		elemType := attrs["items"].(types.ListType).ElemType
		val, d := sliceToTF(elemType, tkh.GetItems(), func(tkh keyhubmodel.WebhookWebhookable, diags *diag.Diagnostics) attr.Value {
			val, d := tkhToTFObjectDSWebhookWebhook(recurse, tkh)
			diags.Append(d...)
			return val
		})
		diags.Append(d...)
		obj["items"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookNameUuid(recurse bool, tkh keyhubmodel.WebhookWebhookNameUuidable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookNameUuidAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookNameUuidAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	obj["name"] = types.StringPointerValue(tkh.GetName())
	{
		val, d := tkhToTFObjectDSLinkable(recurse, tkh.GetObject())
		diags.Append(d...)
		obj["object"] = val
	}
	obj["uuid"] = types.StringPointerValue(tkh.GetUuid())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhookPush(recurse bool, tkh keyhubmodel.WebhookWebhookPushable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhookPushAttrTypesDSRecurse
	} else {
		attrs = webhookWebhookPushAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetAccount())
		diags.Append(d...)
		obj["account"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetByParty())
		diags.Append(d...)
		obj["by_party"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetCertificate())
		diags.Append(d...)
		obj["certificate"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetClient())
		diags.Append(d...)
		obj["client"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetDirectory())
		diags.Append(d...)
		obj["directory"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroup())
		diags.Append(d...)
		obj["group"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroup2())
		diags.Append(d...)
		obj["group2"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetGroupClassification())
		diags.Append(d...)
		obj["group_classification"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetModificationRequest())
		diags.Append(d...)
		obj["modification_request"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetOrganizationalUnit())
		diags.Append(d...)
		obj["organizational_unit"] = val
	}
	obj["parameter1"] = types.StringPointerValue(tkh.GetParameter1())
	obj["parameter2"] = types.StringPointerValue(tkh.GetParameter2())
	obj["parameter3"] = types.StringPointerValue(tkh.GetParameter3())
	obj["security_level"] = stringerToTF(tkh.GetSecurityLevel())
	obj["seq"] = types.Int64PointerValue(tkh.GetSeq())
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetServiceAccount())
		diags.Append(d...)
		obj["service_account"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetSystem())
		diags.Append(d...)
		obj["system"] = val
	}
	obj["timestamp"] = timePointerToTF(tkh.GetTimestamp())
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetVaultRecord())
		diags.Append(d...)
		obj["vault_record"] = val
	}
	{
		val, d := tkhToTFObjectDSWebhookWebhookNameUuid(recurse, tkh.GetWebhook())
		diags.Append(d...)
		obj["webhook"] = val
	}
	obj["webhook_webhook_push_type"] = stringerToTF(tkh.GetWebhookWebhookPushType())

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}

func tkhToTFObjectDSWebhookWebhook_additionalObjects(recurse bool, tkh keyhubmodel.WebhookWebhook_additionalObjectsable) (types.Object, diag.Diagnostics) {
	var diags diag.Diagnostics
	var attrs map[string]attr.Type
	if recurse {
		attrs = webhookWebhook_additionalObjectsAttrTypesDSRecurse
	} else {
		attrs = webhookWebhook_additionalObjectsAttrTypesDS
	}
	if tkh == nil {
		return types.ObjectNull(attrs), diags
	}

	obj := make(map[string]attr.Value)
	{
		val, d := tkhToTFObjectDSAuditInfo(recurse, tkh.GetAudit())
		diags.Append(d...)
		obj["audit"] = val
	}

	objVal, d := types.ObjectValue(attrs, obj)
	diags.Append(d...)
	return objVal, diags
}
