// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.
// Copyright (c) Topicus Security B.V.
// SPDX-License-Identifier: APSL-2.0

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"context"
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/microsoft/kiota-abstractions-go/serialization"
	"github.com/sanity-io/litter"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tfObjectToTKHRSROAuditInfoRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditInfoable
	tkh = keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(planAttrValues["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreatedAt")
		tkh.SetCreatedAt(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["created_by"]))+" using SetCreatedBy")
	tkh.SetCreatedBy(tfToStringPointer(planAttrValues["created_by"]))
	{
		val, d := tfToTimePointer(planAttrValues["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastModifiedAt")
		tkh.SetLastModifiedAt(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["last_modified_by"]))+" using SetLastModifiedBy")
	tkh.SetLastModifiedBy(tfToStringPointer(planAttrValues["last_modified_by"]))
	return tkh, diags
}

func tfObjectToTKHRSGeneratedSecret(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GeneratedSecretable
	tkh = keyhubmodel.NewGeneratedSecret()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["generated_secret"]))+" using SetGeneratedSecret")
	tkh.SetGeneratedSecret(tfToStringPointer(planAttrValues["generated_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["old_secret"]))+" using SetOldSecret")
	tkh.SetOldSecret(tfToStringPointer(planAttrValues["old_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["regenerate"]))+" using SetRegenerate")
	tkh.SetRegenerate(tfToBooleanPointer(planAttrValues["regenerate"]))
	return tkh, diags
}

func tfObjectToTKHRSROGeneratedSecretRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GeneratedSecretable
	tkh = keyhubmodel.NewGeneratedSecret()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["generated_secret"]))+" using SetGeneratedSecret")
	tkh.SetGeneratedSecret(tfToStringPointer(planAttrValues["generated_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["old_secret"]))+" using SetOldSecret")
	tkh.SetOldSecret(tfToStringPointer(planAttrValues["old_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["regenerate"]))+" using SetRegenerate")
	tkh.SetRegenerate(tfToBooleanPointer(planAttrValues["regenerate"]))
	return tkh, diags
}

func tfObjectToTKHRSLinkable(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.Linkableable
	tkh = keyhubmodel.NewLinkable()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROLinkableRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.Linkableable
	tkh = keyhubmodel.NewLinkable()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNonLinkable(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.NonLinkableable
	tkh = keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHRSRONonLinkableRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.NonLinkableable
	tkh = keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHRSRestLink(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.RestLinkable
	tkh = keyhubmodel.NewRestLink()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["href"]))+" using SetHref")
	tkh.SetHref(tfToStringPointer(planAttrValues["href"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["id"]))+" using SetId")
	tkh.SetId(tfToInt64Pointer(planAttrValues["id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["rel"]))+" using SetRel")
	tkh.SetRel(tfToStringPointer(planAttrValues["rel"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["type_escaped"]))+" using SetTypeEscaped")
	tkh.SetTypeEscaped(tfToStringPointer(planAttrValues["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSRORestLinkRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.RestLinkable
	tkh = keyhubmodel.NewRestLink()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["href"]))+" using SetHref")
	tkh.SetHref(tfToStringPointer(planAttrValues["href"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["id"]))+" using SetId")
	tkh.SetId(tfToInt64Pointer(planAttrValues["id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["rel"]))+" using SetRel")
	tkh.SetRel(tfToStringPointer(planAttrValues["rel"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["type_escaped"]))+" using SetTypeEscaped")
	tkh.SetTypeEscaped(tfToStringPointer(planAttrValues["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSROAuditGroupAuditRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditGroupAuditable
	tkh = keyhubmodel.NewAuditGroupAudit()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["accounts"]), toListValue(configAttrValues["accounts"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditAccountable {
			tkh, d := tfObjectToTKHRSROAuditGroupAuditAccountRO(ctx, false, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccounts")
		tkh.SetAccounts(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["comment"]))+" using SetComment")
	tkh.SetComment(tfToStringPointer(planAttrValues["comment"]))
	{
		val, d := tfToTimePointer(planAttrValues["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreatedAt")
		tkh.SetCreatedAt(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["created_by"]))+" using SetCreatedBy")
	tkh.SetCreatedBy(tfToStringPointer(planAttrValues["created_by"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["group_name"]))+" using SetGroupName")
	tkh.SetGroupName(tfToStringPointer(planAttrValues["group_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_on_audit"]))+" using SetNameOnAudit")
	tkh.SetNameOnAudit(tfToStringPointer(planAttrValues["name_on_audit"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["nested_groups"]), toListValue(configAttrValues["nested_groups"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditNestedGroupAuditable {
			tkh, d := tfObjectToTKHRSROAuditNestedGroupAuditRO(ctx, false, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNestedGroups")
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetReviewedAt")
		tkh.SetReviewedAt(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["reviewed_by"]))+" using SetReviewedBy")
	tkh.SetReviewedBy(tfToStringPointer(planAttrValues["reviewed_by"]))
	{
		val, d := parseCastPointer(planAttrValues["status"].(basetypes.StringValue), keyhubmodel.ParseAuditGroupAuditStatus, func(val any) keyhubmodel.AuditGroupAuditStatus { return *val.(*keyhubmodel.AuditGroupAuditStatus) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatus")
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSubmittedAt")
		tkh.SetSubmittedAt(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["submitted_by"]))+" using SetSubmittedBy")
	tkh.SetSubmittedBy(tfToStringPointer(planAttrValues["submitted_by"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROAuditGroupAudit_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROAuditGroupAuditAccountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditGroupAuditAccountable
	tkh = keyhubmodel.NewAuditGroupAuditAccount()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["account_uuid"]))+" using SetAccountUuid")
	tkh.SetAccountUuid(tfToStringPointer(planAttrValues["account_uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["account_valid"]))+" using SetAccountValid")
	tkh.SetAccountValid(tfToBooleanPointer(planAttrValues["account_valid"]))
	{
		val, d := parseCastPointer(planAttrValues["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAction")
		tkh.SetAction(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["comment"]))+" using SetComment")
	tkh.SetComment(tfToStringPointer(planAttrValues["comment"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["disconnected_nested"]))+" using SetDisconnectedNested")
	tkh.SetDisconnectedNested(tfToBooleanPointer(planAttrValues["disconnected_nested"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastActive")
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(planAttrValues["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastUsed")
		tkh.SetLastUsed(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["nested"]))+" using SetNested")
	tkh.SetNested(tfToBooleanPointer(planAttrValues["nested"]))
	{
		val, d := parseCastPointer(planAttrValues["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRights")
		tkh.SetRights(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	return tkh, diags
}

func tfObjectToTKHRSROAuditGroupAuditLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditGroupAuditLinkableWrapperable
	tkh = keyhubmodel.NewAuditGroupAuditLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditable {
			tkh, d := tfObjectToTKHRSROAuditGroupAuditRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROAuditGroupAudit_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditGroupAudit_additionalObjectsable
	tkh = keyhubmodel.NewAuditGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROAuditNestedGroupAuditRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuditNestedGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuditNestedGroupAuditable
	tkh = keyhubmodel.NewAuditNestedGroupAudit()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditNestedGroupAction, func(val any) keyhubmodel.AuditAuditNestedGroupAction {
			return *val.(*keyhubmodel.AuditAuditNestedGroupAction)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAction")
		tkh.SetAction(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["comment"]))+" using SetComment")
	tkh.SetComment(tfToStringPointer(planAttrValues["comment"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["group_uuid"]))+" using SetGroupUuid")
	tkh.SetGroupUuid(tfToStringPointer(planAttrValues["group_uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuthAccountPrimerable
	tkh = keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	{
		val, d := tfToTimePointer(planAttrValues["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastActive")
		tkh.SetLastActive(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := parseCastPointer(planAttrValues["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValidity")
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROAuthAccountPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuthAccountPrimerable
	tkh = keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	{
		val, d := tfToTimePointer(planAttrValues["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastActive")
		tkh.SetLastActive(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := parseCastPointer(planAttrValues["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValidity")
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthPermission(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuthPermissionable
	tkh = keyhubmodel.NewAuthPermission()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["full"]))+" using SetFull")
	tkh.SetFull(tfToStringPointer(planAttrValues["full"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["instances"]), toListValue(configAttrValues["instances"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetInstances")
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["operations"]), toSetValue(configAttrValues["operations"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOperations")
		tkh.SetOperations(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["type_escaped"]))+" using SetTypeEscaped")
	tkh.SetTypeEscaped(tfToStringPointer(planAttrValues["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSROAuthPermissionRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.AuthPermissionable
	tkh = keyhubmodel.NewAuthPermission()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["full"]))+" using SetFull")
	tkh.SetFull(tfToStringPointer(planAttrValues["full"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["instances"]), toListValue(configAttrValues["instances"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetInstances")
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["operations"]), toSetValue(configAttrValues["operations"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOperations")
		tkh.SetOperations(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["type_escaped"]))+" using SetTypeEscaped")
	tkh.SetTypeEscaped(tfToStringPointer(planAttrValues["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificatePrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.CertificateCertificatePrimerable
	tkh = keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["alias"]))+" using SetAlias")
	tkh.SetAlias(tfToStringPointer(planAttrValues["alias"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCertificateCertificatePrimerType")
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfBase64ToByteArray(planAttrValues["certificate_data"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCertificateData")
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetExpiration")
		tkh.SetExpiration(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fingerprint_sha1"]))+" using SetFingerprintSha1")
	tkh.SetFingerprintSha1(tfToStringPointer(planAttrValues["fingerprint_sha1"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fingerprint_sha256"]))+" using SetFingerprintSha256")
	tkh.SetFingerprintSha256(tfToStringPointer(planAttrValues["fingerprint_sha256"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["global"]))+" using SetGlobal")
	tkh.SetGlobal(tfToBooleanPointer(planAttrValues["global"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["subject_dn"]))+" using SetSubjectDN")
	tkh.SetSubjectDN(tfToStringPointer(planAttrValues["subject_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.CertificateCertificatePrimerable
	tkh = keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["alias"]))+" using SetAlias")
	tkh.SetAlias(tfToStringPointer(planAttrValues["alias"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCertificateCertificatePrimerType")
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfBase64ToByteArray(planAttrValues["certificate_data"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCertificateData")
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetExpiration")
		tkh.SetExpiration(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fingerprint_sha1"]))+" using SetFingerprintSha1")
	tkh.SetFingerprintSha1(tfToStringPointer(planAttrValues["fingerprint_sha1"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fingerprint_sha256"]))+" using SetFingerprintSha256")
	tkh.SetFingerprintSha256(tfToStringPointer(planAttrValues["fingerprint_sha256"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["global"]))+" using SetGlobal")
	tkh.SetGlobal(tfToBooleanPointer(planAttrValues["global"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["subject_dn"]))+" using SetSubjectDN")
	tkh.SetSubjectDN(tfToStringPointer(planAttrValues["subject_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSClientApplicationVaultVaultRecord(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetColor")
		tkh.SetColor(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToTimePointer(planAttrValues["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareEndTime")
		tkh.SetShareEndTime(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["additional_urls"]))+" using SetAdditionalURLs")
	tkh.SetAdditionalURLs(tfToStringPointer(planAttrValues["additional_urls"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["derived"]))+" using SetDerived")
	tkh.SetDerived(tfToBooleanPointer(planAttrValues["derived"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["filename"]))+" using SetFilename")
	tkh.SetFilename(tfToStringPointer(planAttrValues["filename"]))
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["types"]), toSetValue(configAttrValues["types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTypes")
		tkh.SetTypes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["url"]))+" using SetUrl")
	tkh.SetUrl(tfToStringPointer(planAttrValues["url"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	{
		val, d := parseCastPointer(planAttrValues["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetWarningPeriod")
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplicationable
	tkh = keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientClientApplicationPrimerType")
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["scopes"]), toListValue(configAttrValues["scopes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetScopes")
		tkh.SetScopes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["sso_application"]))+" using SetSsoApplication")
	tkh.SetSsoApplication(tfToBooleanPointer(planAttrValues["sso_application"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := tfToTimePointer(planAttrValues["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastModifiedAt")
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if !planAttrValues["ldap_client"].IsNull() {
		val, d := tfObjectToTKHRSClientLdapClient(ctx, false, planAttrValues["ldap_client"].(basetypes.ObjectValue), configAttrValues["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientLdapClient)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["oauth2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, false, planAttrValues["oauth2_client"].(basetypes.ObjectValue), configAttrValues["oauth2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientOAuth2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["saml2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientSaml2Client(ctx, false, planAttrValues["saml2_client"].(basetypes.ObjectValue), configAttrValues["saml2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientSaml2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientClientApplicationRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplicationable
	tkh = keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientClientApplicationPrimerType")
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["scopes"]), toListValue(configAttrValues["scopes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetScopes")
		tkh.SetScopes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["sso_application"]))+" using SetSsoApplication")
	tkh.SetSsoApplication(tfToBooleanPointer(planAttrValues["sso_application"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := tfToTimePointer(planAttrValues["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastModifiedAt")
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["technical_administrator"]), toObjectValue(configAttrValues["technical_administrator"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if !planAttrValues["ldap_client"].IsNull() {
		val, d := tfObjectToTKHRSROClientLdapClientRO(ctx, false, planAttrValues["ldap_client"].(basetypes.ObjectValue), configAttrValues["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientLdapClient)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["oauth2_client"].IsNull() {
		val, d := tfObjectToTKHRSROClientOAuth2ClientRO(ctx, false, planAttrValues["oauth2_client"].(basetypes.ObjectValue), configAttrValues["oauth2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientOAuth2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["saml2_client"].IsNull() {
		val, d := tfObjectToTKHRSROClientSaml2ClientRO(ctx, false, planAttrValues["saml2_client"].(basetypes.ObjectValue), configAttrValues["saml2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientSaml2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROClientClientApplication_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientClientApplicationLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplicationLinkableWrapperable
	tkh = keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHRSROClientClientApplicationRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplicationPrimerable
	tkh = keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientClientApplicationPrimerType")
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["scopes"]), toListValue(configAttrValues["scopes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetScopes")
		tkh.SetScopes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["sso_application"]))+" using SetSsoApplication")
	tkh.SetSsoApplication(tfToBooleanPointer(planAttrValues["sso_application"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplicationPrimerable
	tkh = keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientClientApplicationPrimerType")
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["scopes"]), toListValue(configAttrValues["scopes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) string {
			return planValue.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetScopes")
		tkh.SetScopes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["sso_application"]))+" using SetSsoApplication")
	tkh.SetSsoApplication(tfToBooleanPointer(planAttrValues["sso_application"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplication_additionalObjectsable
	tkh = keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHRSProfileAccessProfileClientLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, planAttrValues["accessprofileclients"]), toItemsList(ctx, configAttrValues["accessprofileclients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessprofileclients")
		tkh.SetAccessprofileclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(configAttrValues["delete_tile"]))+" using SetDeleteTile")
	tkh.SetDeleteTile(tfToBooleanPointer(configAttrValues["delete_tile"]))
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, planAttrValues["groupclients"]), toItemsList(ctx, configAttrValues["groupclients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupclients")
		tkh.SetGroupclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["groups"]), toItemsList(ctx, configAttrValues["groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroups")
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["organizational_units"]), toItemsList(ctx, configAttrValues["organizational_units"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnits")
		tkh.SetOrganizationalUnits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, toObjectValue(planAttrValues["tile"]), toObjectValue(configAttrValues["tile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTile")
		tkh.SetTile(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["vault_record_count"])))+" using SetVaultRecordCount")
	tkh.SetVaultRecordCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["vault_record_count"])))
	return tkh, diags
}

func tfObjectToTKHRSROClientClientApplication_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientClientApplication_additionalObjectsable
	tkh = keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileClientLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["accessprofileclients"]), toItemsList(ctx, configAttrValues["accessprofileclients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessprofileclients")
		tkh.SetAccessprofileclients(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(configAttrValues["delete_tile"]))+" using SetDeleteTile")
	tkh.SetDeleteTile(tfToBooleanPointer(configAttrValues["delete_tile"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupClientLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["groupclients"]), toItemsList(ctx, configAttrValues["groupclients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupclients")
		tkh.SetGroupclients(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["groups"]), toItemsList(ctx, configAttrValues["groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroups")
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["organizational_units"]), toItemsList(ctx, configAttrValues["organizational_units"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnits")
		tkh.SetOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSROGeneratedSecretRO(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSROLaunchpadSsoApplicationLaunchpadTileRO(ctx, recurse, toObjectValue(planAttrValues["tile"]), toObjectValue(configAttrValues["tile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTile")
		tkh.SetTile(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["vault_record_count"])))+" using SetVaultRecordCount")
	tkh.SetVaultRecordCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["vault_record_count"])))
	return tkh, diags
}

func tfObjectToTKHRSClientLdapClient(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientLdapClientable
	tkh = keyhubmodel.NewClientLdapClient()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bind_dn"]))+" using SetBindDn")
	tkh.SetBindDn(tfToStringPointer(planAttrValues["bind_dn"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, planAttrValues["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientCertificate")
		tkh.SetClientCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))+" using SetShareSecretInVault")
	tkh.SetShareSecretInVault(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["shared_secret"]), toObjectValue(configAttrValues["shared_secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSharedSecret")
		tkh.SetSharedSecret(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["used_for_provisioning"]))+" using SetUsedForProvisioning")
	tkh.SetUsedForProvisioning(tfToBooleanPointer(planAttrValues["used_for_provisioning"]))
	return tkh, diags
}

func tfObjectToTKHRSROClientLdapClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientLdapClientable
	tkh = keyhubmodel.NewClientLdapClient()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bind_dn"]))+" using SetBindDn")
	tkh.SetBindDn(tfToStringPointer(planAttrValues["bind_dn"]))
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["client_certificate"]), toObjectValue(configAttrValues["client_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientCertificate")
		tkh.SetClientCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))+" using SetShareSecretInVault")
	tkh.SetShareSecretInVault(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["shared_secret"]), toObjectValue(configAttrValues["shared_secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSharedSecret")
		tkh.SetSharedSecret(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["used_for_provisioning"]))+" using SetUsedForProvisioning")
	tkh.SetUsedForProvisioning(tfToBooleanPointer(planAttrValues["used_for_provisioning"]))
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2Clientable
	tkh = keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["account_permissions"]), toListValue(configAttrValues["account_permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccountPermissions")
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfToMap(toMapValue(planAttrValues["attributes"]), toMapValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) any {
			return planValue.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientOAuth2Client_attributes())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["callback_uri"]))+" using SetCallbackURI")
	tkh.SetCallbackURI(tfToStringPointer(planAttrValues["callback_uri"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["debug_mode"]))+" using SetDebugMode")
	tkh.SetDebugMode(tfToBooleanPointer(planAttrValues["debug_mode"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["for_identity_source"]))+" using SetForIdentitySource")
	tkh.SetForIdentitySource(tfToBooleanPointer(planAttrValues["for_identity_source"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["id_token_claims"]))+" using SetIdTokenClaims")
	tkh.SetIdTokenClaims(tfToStringPointer(planAttrValues["id_token_claims"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["initiate_login_uri"]))+" using SetInitiateLoginURI")
	tkh.SetInitiateLoginURI(tfToStringPointer(planAttrValues["initiate_login_uri"]))
	{
		val, d := parseCastPointer(planAttrValues["profile"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientProfile, func(val any) keyhubmodel.ClientOAuth2ClientProfile {
			return *val.(*keyhubmodel.ClientOAuth2ClientProfile)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProfile")
		tkh.SetProfile(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["resource_uris"]))+" using SetResourceURIs")
	tkh.SetResourceURIs(tfToStringPointer(planAttrValues["resource_uris"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))+" using SetShareSecretInVault")
	tkh.SetShareSecretInVault(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["shared_secret"]), toObjectValue(configAttrValues["shared_secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSharedSecret")
		tkh.SetSharedSecret(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["show_landing_page"]))+" using SetShowLandingPage")
	tkh.SetShowLandingPage(tfToBooleanPointer(planAttrValues["show_landing_page"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["use_client_credentials"]))+" using SetUseClientCredentials")
	tkh.SetUseClientCredentials(tfToBooleanPointer(planAttrValues["use_client_credentials"]))
	return tkh, diags
}

func tfObjectToTKHRSROClientOAuth2ClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2Clientable
	tkh = keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["account_permissions"]), toListValue(configAttrValues["account_permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccountPermissions")
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfToMap(toMapValue(planAttrValues["attributes"]), toMapValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) any {
			return planValue.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientOAuth2Client_attributes())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["callback_uri"]))+" using SetCallbackURI")
	tkh.SetCallbackURI(tfToStringPointer(planAttrValues["callback_uri"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["debug_mode"]))+" using SetDebugMode")
	tkh.SetDebugMode(tfToBooleanPointer(planAttrValues["debug_mode"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["for_identity_source"]))+" using SetForIdentitySource")
	tkh.SetForIdentitySource(tfToBooleanPointer(planAttrValues["for_identity_source"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["id_token_claims"]))+" using SetIdTokenClaims")
	tkh.SetIdTokenClaims(tfToStringPointer(planAttrValues["id_token_claims"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["initiate_login_uri"]))+" using SetInitiateLoginURI")
	tkh.SetInitiateLoginURI(tfToStringPointer(planAttrValues["initiate_login_uri"]))
	{
		val, d := parseCastPointer(planAttrValues["profile"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientProfile, func(val any) keyhubmodel.ClientOAuth2ClientProfile {
			return *val.(*keyhubmodel.ClientOAuth2ClientProfile)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProfile")
		tkh.SetProfile(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["resource_uris"]))+" using SetResourceURIs")
	tkh.SetResourceURIs(tfToStringPointer(planAttrValues["resource_uris"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))+" using SetShareSecretInVault")
	tkh.SetShareSecretInVault(tfToBooleanPointer(planAttrValues["share_secret_in_vault"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["shared_secret"]), toObjectValue(configAttrValues["shared_secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSharedSecret")
		tkh.SetSharedSecret(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["show_landing_page"]))+" using SetShowLandingPage")
	tkh.SetShowLandingPage(tfToBooleanPointer(planAttrValues["show_landing_page"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["use_client_credentials"]))+" using SetUseClientCredentials")
	tkh.SetUseClientCredentials(tfToBooleanPointer(planAttrValues["use_client_credentials"]))
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForGroup")
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, planAttrValues["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForSystem")
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValue")
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientOAuth2ClientPermissionRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["for_group"]), toObjectValue(configAttrValues["for_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForGroup")
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, false, toObjectValue(planAttrValues["for_system"]), toObjectValue(configAttrValues["for_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForSystem")
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValue")
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROClientOAuth2ClientPermission_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForGroup")
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, planAttrValues["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForSystem")
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValue")
		tkh.SetValue(val)
	}
	{
		val, d := findClientOAuth2ClientByUUID(ctx, planAttrValues["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientOAuth2ClientPermissionWithClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["for_group"]), toObjectValue(configAttrValues["for_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForGroup")
		tkh.SetForGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, false, toObjectValue(planAttrValues["for_system"]), toObjectValue(configAttrValues["for_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetForSystem")
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetValue")
		tkh.SetValue(val)
	}
	{
		val, d := tfObjectToTKHRSROClientOAuth2ClientRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROClientOAuth2ClientPermission_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHRSROClientOAuth2ClientPermissionWithClientRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientOAuth2ClientPermission_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientSaml2Clientable
	tkh = keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToMap(toMapValue(planAttrValues["attributes"]), toMapValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) any {
			return planValue.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientSaml2Client_attributes())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["metadata"]))+" using SetMetadata")
	tkh.SetMetadata(tfToStringPointer(planAttrValues["metadata"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["metadata_url"]))+" using SetMetadataUrl")
	tkh.SetMetadataUrl(tfToStringPointer(planAttrValues["metadata_url"]))
	{
		val, d := parseCastPointer(planAttrValues["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSubjectFormat")
		tkh.SetSubjectFormat(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROClientSaml2ClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ClientSaml2Clientable
	tkh = keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToMap(toMapValue(planAttrValues["attributes"]), toMapValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) any {
			return planValue.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientSaml2Client_attributes())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["metadata"]))+" using SetMetadata")
	tkh.SetMetadata(tfToStringPointer(planAttrValues["metadata"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["metadata_url"]))+" using SetMetadataUrl")
	tkh.SetMetadataUrl(tfToStringPointer(planAttrValues["metadata_url"]))
	{
		val, d := parseCastPointer(planAttrValues["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSubjectFormat")
		tkh.SetSubjectFormat(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectoryable
	tkh = keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["account_validity_supported"]))+" using SetAccountValiditySupported")
	tkh.SetAccountValiditySupported(tfToBooleanPointer(planAttrValues["account_validity_supported"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectoryAccountDirectoryPrimerType")
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, false, toObjectValue(planAttrValues["base_organizational_unit"]), toObjectValue(configAttrValues["base_organizational_unit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetBaseOrganizationalUnit")
		tkh.SetBaseOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["default_directory"]))+" using SetDefaultDirectory")
	tkh.SetDefaultDirectory(tfToBooleanPointer(planAttrValues["default_directory"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["helpdesk_group"]), toObjectValue(configAttrValues["helpdesk_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetHelpdeskGroup")
		tkh.SetHelpdeskGroup(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["restrict2fa"]))+" using SetRestrict2fa")
	tkh.SetRestrict2fa(tfToBooleanPointer(planAttrValues["restrict2fa"]))
	{
		val, d := parseCastPointer(planAttrValues["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRotatingPassword")
		tkh.SetRotatingPassword(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["username_customizable"]))+" using SetUsernameCustomizable")
	tkh.SetUsernameCustomizable(tfToBooleanPointer(planAttrValues["username_customizable"]))
	if !planAttrValues["internal_directory"].IsNull() {
		val, d := tfObjectToTKHRSRODirectoryInternalDirectoryRO(ctx, false, planAttrValues["internal_directory"].(basetypes.ObjectValue), configAttrValues["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryInternalDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSRODirectoryLDAPDirectoryRO(ctx, false, planAttrValues["ldap_directory"].(basetypes.ObjectValue), configAttrValues["ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryLDAPDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["maintenance_directory"].IsNull() {
		val, d := tfObjectToTKHRSRODirectoryMaintenanceDirectoryRO(ctx, false, planAttrValues["maintenance_directory"].(basetypes.ObjectValue), configAttrValues["maintenance_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryMaintenanceDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["oidc_directory"].IsNull() {
		val, d := tfObjectToTKHRSRODirectoryOIDCDirectoryRO(ctx, false, planAttrValues["oidc_directory"].(basetypes.ObjectValue), configAttrValues["oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryOIDCDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["pending_accounts_directory"].IsNull() {
		val, d := tfObjectToTKHRSRODirectoryPendingAccountsDirectoryRO(ctx, false, planAttrValues["pending_accounts_directory"].(basetypes.ObjectValue), configAttrValues["pending_accounts_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryPendingAccountsDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRODirectoryAccountDirectory_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectoryLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHRSRODirectoryAccountDirectoryRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectoryPrimerable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["account_validity_supported"]))+" using SetAccountValiditySupported")
	tkh.SetAccountValiditySupported(tfToBooleanPointer(planAttrValues["account_validity_supported"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectoryAccountDirectoryPrimerType")
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectoryStatusReportRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["accounts"]))+" using SetAccounts")
	tkh.SetAccounts(tfToInt64Pointer(planAttrValues["accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["reason"]))+" using SetReason")
	tkh.SetReason(tfToStringPointer(planAttrValues["reason"]))
	{
		val, d := parseCastPointer(planAttrValues["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatus")
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectorySummaryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectoryAccountDirectorySummaryType")
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["domain_restriction"]))+" using SetDomainRestriction")
	tkh.SetDomainRestriction(tfToStringPointer(planAttrValues["domain_restriction"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fully_resolved_issuer"]))+" using SetFullyResolvedIssuer")
	tkh.SetFullyResolvedIssuer(tfToStringPointer(planAttrValues["fully_resolved_issuer"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryStatusReportRO(ctx, recurse, toObjectValue(planAttrValues["status"]), toObjectValue(configAttrValues["status"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatus")
		tkh.SetStatus(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["username_customizable"]))+" using SetUsernameCustomizable")
	tkh.SetUsernameCustomizable(tfToBooleanPointer(planAttrValues["username_customizable"]))
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHRSRODirectoryAccountDirectorySummaryRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryAccountDirectory_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable
	tkh = keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROMarkItemMarkersRO(ctx, recurse, toObjectValue(planAttrValues["markers"]), toObjectValue(configAttrValues["markers"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkers")
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryStatusReportRO(ctx, recurse, toObjectValue(planAttrValues["status"]), toObjectValue(configAttrValues["status"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatus")
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryInternalDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryInternalDirectoryable
	tkh = keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryLDAPDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryLDAPDirectoryable
	tkh = keyhubmodel.NewDirectoryLDAPDirectory()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["attributes_to_store"]))+" using SetAttributesToStore")
	tkh.SetAttributesToStore(tfToStringPointer(planAttrValues["attributes_to_store"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["base_dn"]))+" using SetBaseDN")
	tkh.SetBaseDN(tfToStringPointer(planAttrValues["base_dn"]))
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["client_certificate"]), toObjectValue(configAttrValues["client_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientCertificate")
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDialect")
		tkh.SetDialect(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["failover_host"]))+" using SetFailoverHost")
	tkh.SetFailoverHost(tfToStringPointer(planAttrValues["failover_host"]))
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["failover_trusted_certificate"]), toObjectValue(configAttrValues["failover_trusted_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetFailoverTrustedCertificate")
		tkh.SetFailoverTrustedCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["host"]))+" using SetHost")
	tkh.SetHost(tfToStringPointer(planAttrValues["host"]))
	{
		val, d := parseCastPointer(planAttrValues["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPasswordRecovery")
		tkh.SetPasswordRecovery(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["port"])))+" using SetPort")
	tkh.SetPort(int64PToInt32P(tfToInt64Pointer(planAttrValues["port"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["search_bind_dn"]))+" using SetSearchBindDN")
	tkh.SetSearchBindDN(tfToStringPointer(planAttrValues["search_bind_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["search_bind_password"]))+" using SetSearchBindPassword")
	tkh.SetSearchBindPassword(tfToStringPointer(planAttrValues["search_bind_password"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["search_filter"]))+" using SetSearchFilter")
	tkh.SetSearchFilter(tfToStringPointer(planAttrValues["search_filter"]))
	{
		val, d := parseCastPointer(planAttrValues["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTls")
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["trusted_certificate"]), toObjectValue(configAttrValues["trusted_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTrustedCertificate")
		tkh.SetTrustedCertificate(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryMaintenanceDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryMaintenanceDirectoryable
	tkh = keyhubmodel.NewDirectoryMaintenanceDirectory()
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryOIDCDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.DirectoryOIDCDirectoryable
	tkh = keyhubmodel.NewDirectoryOIDCDirectory()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["acr_values"]))+" using SetAcrValues")
	tkh.SetAcrValues(tfToStringPointer(planAttrValues["acr_values"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["attributes_to_store"]))+" using SetAttributesToStore")
	tkh.SetAttributesToStore(tfToStringPointer(planAttrValues["attributes_to_store"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_secret"]))+" using SetClientSecret")
	tkh.SetClientSecret(tfToStringPointer(planAttrValues["client_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["domain_restriction"]))+" using SetDomainRestriction")
	tkh.SetDomainRestriction(tfToStringPointer(planAttrValues["domain_restriction"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["enforces2fa"]))+" using SetEnforces2fa")
	tkh.SetEnforces2fa(tfToBooleanPointer(planAttrValues["enforces2fa"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["fully_resolved_issuer"]))+" using SetFullyResolvedIssuer")
	tkh.SetFullyResolvedIssuer(tfToStringPointer(planAttrValues["fully_resolved_issuer"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["issuer"]))+" using SetIssuer")
	tkh.SetIssuer(tfToStringPointer(planAttrValues["issuer"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["logout_url"]))+" using SetLogoutUrl")
	tkh.SetLogoutUrl(tfToStringPointer(planAttrValues["logout_url"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["send_login_hint"]))+" using SetSendLoginHint")
	tkh.SetSendLoginHint(tfToBooleanPointer(planAttrValues["send_login_hint"]))
	{
		val, d := parseCastPointer(planAttrValues["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVendorEscaped")
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRODirectoryPendingAccountsDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.DirectoryPendingAccountsDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryPendingAccountsDirectoryable
	tkh = keyhubmodel.NewDirectoryPendingAccountsDirectory()
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupable
	tkh = keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin"]))+" using SetAdmin")
	tkh.SetAdmin(tfToBooleanPointer(planAttrValues["admin"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, planAttrValues["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["application_administration"]))+" using SetApplicationAdministration")
	tkh.SetApplicationAdministration(tfToBooleanPointer(planAttrValues["application_administration"]))
	{
		val, d := tfObjectToTKHRSGroupGroupAuditConfig(ctx, false, toObjectValue(planAttrValues["audit_config"]), toObjectValue(configAttrValues["audit_config"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuditConfig")
		tkh.SetAuditConfig(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["audit_requested"]))+" using SetAuditRequested")
	tkh.SetAuditRequested(tfToBooleanPointer(planAttrValues["audit_requested"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["authorizing_group_auditing_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupAuditing")
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["authorizing_group_delegation_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupDelegation")
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["authorizing_group_membership_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupMembership")
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["authorizing_group_provisioning_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupProvisioning")
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["authorizing_group_types"]), toSetValue(configAttrValues["authorizing_group_types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupTypes")
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, planAttrValues["classification_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClassification")
		tkh.SetClassification(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := parseCastPointer(planAttrValues["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetExtendedAccess")
		tkh.SetExtendedAccess(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["hide_audit_trail"]))+" using SetHideAuditTrail")
	tkh.SetHideAuditTrail(tfToBooleanPointer(planAttrValues["hide_audit_trail"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["nested_under_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNestedUnder")
		tkh.SetNestedUnder(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["private_group"]))+" using SetPrivateGroup")
	tkh.SetPrivateGroup(tfToBooleanPointer(planAttrValues["private_group"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["profile_administration"]))+" using SetProfileAdministration")
	tkh.SetProfileAdministration(tfToBooleanPointer(planAttrValues["profile_administration"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["record_trail"]))+" using SetRecordTrail")
	tkh.SetRecordTrail(tfToBooleanPointer(planAttrValues["record_trail"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["rotating_password_required"]))+" using SetRotatingPasswordRequired")
	tkh.SetRotatingPasswordRequired(tfToBooleanPointer(planAttrValues["rotating_password_required"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["single_managed"]))+" using SetSingleManaged")
	tkh.SetSingleManaged(tfToBooleanPointer(planAttrValues["single_managed"]))
	{
		val, d := parseCastPointer(planAttrValues["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVaultRecovery")
		tkh.SetVaultRecovery(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["vault_requires_activation"]))+" using SetVaultRequiresActivation")
	tkh.SetVaultRequiresActivation(tfToBooleanPointer(planAttrValues["vault_requires_activation"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroup_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupable
	tkh = keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin"]))+" using SetAdmin")
	tkh.SetAdmin(tfToBooleanPointer(planAttrValues["admin"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planAttrValues["organizational_unit"]), toObjectValue(configAttrValues["organizational_unit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["application_administration"]))+" using SetApplicationAdministration")
	tkh.SetApplicationAdministration(tfToBooleanPointer(planAttrValues["application_administration"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupAuditConfigRO(ctx, false, toObjectValue(planAttrValues["audit_config"]), toObjectValue(configAttrValues["audit_config"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuditConfig")
		tkh.SetAuditConfig(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["audit_requested"]))+" using SetAuditRequested")
	tkh.SetAuditRequested(tfToBooleanPointer(planAttrValues["audit_requested"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["authorizing_group_auditing"]), toObjectValue(configAttrValues["authorizing_group_auditing"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupAuditing")
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["authorizing_group_delegation"]), toObjectValue(configAttrValues["authorizing_group_delegation"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupDelegation")
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["authorizing_group_membership"]), toObjectValue(configAttrValues["authorizing_group_membership"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupMembership")
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["authorizing_group_provisioning"]), toObjectValue(configAttrValues["authorizing_group_provisioning"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupProvisioning")
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["authorizing_group_types"]), toSetValue(configAttrValues["authorizing_group_types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizingGroupTypes")
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupClassificationPrimerRO(ctx, false, toObjectValue(planAttrValues["classification"]), toObjectValue(configAttrValues["classification"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClassification")
		tkh.SetClassification(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := parseCastPointer(planAttrValues["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetExtendedAccess")
		tkh.SetExtendedAccess(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["hide_audit_trail"]))+" using SetHideAuditTrail")
	tkh.SetHideAuditTrail(tfToBooleanPointer(planAttrValues["hide_audit_trail"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["nested_under"]), toObjectValue(configAttrValues["nested_under"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNestedUnder")
		tkh.SetNestedUnder(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["private_group"]))+" using SetPrivateGroup")
	tkh.SetPrivateGroup(tfToBooleanPointer(planAttrValues["private_group"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["profile_administration"]))+" using SetProfileAdministration")
	tkh.SetProfileAdministration(tfToBooleanPointer(planAttrValues["profile_administration"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["record_trail"]))+" using SetRecordTrail")
	tkh.SetRecordTrail(tfToBooleanPointer(planAttrValues["record_trail"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["rotating_password_required"]))+" using SetRotatingPasswordRequired")
	tkh.SetRotatingPasswordRequired(tfToBooleanPointer(planAttrValues["rotating_password_required"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["single_managed"]))+" using SetSingleManaged")
	tkh.SetSingleManaged(tfToBooleanPointer(planAttrValues["single_managed"]))
	{
		val, d := parseCastPointer(planAttrValues["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVaultRecovery")
		tkh.SetVaultRecovery(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["vault_requires_activation"]))+" using SetVaultRequiresActivation")
	tkh.SetVaultRequiresActivation(tfToBooleanPointer(planAttrValues["vault_requires_activation"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROGroupGroup_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAccessInfoRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccessInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccessInfoable
	tkh = keyhubmodel.NewGroupGroupAccessInfo()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["business_accounts"]))+" using SetBusinessAccounts")
	tkh.SetBusinessAccounts(tfToBooleanPointer(planAttrValues["business_accounts"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupGroupAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, false, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["disconnected_nested"]))+" using SetDisconnectedNested")
	tkh.SetDisconnectedNested(tfToBooleanPointer(planAttrValues["disconnected_nested"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(planAttrValues["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastUsed")
		tkh.SetLastUsed(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["nested"]))+" using SetNested")
	tkh.SetNested(tfToBooleanPointer(planAttrValues["nested"]))
	{
		val, d := tfToTimePointer(planAttrValues["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningEndTime")
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningPermissionEndTime")
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRights")
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTwoFactorStatus")
		tkh.SetTwoFactorStatus(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["visible_for_provisioning"]))+" using SetVisibleForProvisioning")
	tkh.SetVisibleForProvisioning(tfToBooleanPointer(planAttrValues["visible_for_provisioning"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAccountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerROByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupGroupAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, false, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["disconnected_nested"]))+" using SetDisconnectedNested")
	tkh.SetDisconnectedNested(tfToBooleanPointer(planAttrValues["disconnected_nested"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(planAttrValues["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastUsed")
		tkh.SetLastUsed(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["nested"]))+" using SetNested")
	tkh.SetNested(tfToBooleanPointer(planAttrValues["nested"]))
	{
		val, d := tfToTimePointer(planAttrValues["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningEndTime")
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(planAttrValues["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningPermissionEndTime")
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRights")
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTwoFactorStatus")
		tkh.SetTwoFactorStatus(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["visible_for_provisioning"]))+" using SetVisibleForProvisioning")
	tkh.SetVisibleForProvisioning(tfToBooleanPointer(planAttrValues["visible_for_provisioning"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROGroupGroupAccount_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccountLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAccountLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccountLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHRSROGroupGroupAccountRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccount_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAccount_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAccount_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditConfig(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAuditConfigable
	tkh = keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["months"]), toSetValue(configAttrValues["months"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMonths")
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAuditConfigRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAuditConfigable
	tkh = keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["months"]), toSetValue(configAttrValues["months"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMonths")
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupAuditingInfoRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupAuditingInfoable
	tkh = keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(planAttrValues["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuditDueDate")
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(planAttrValues["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLastAuditDate")
		tkh.SetLastAuditDate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_accounts"]))+" using SetNrAccounts")
	tkh.SetNrAccounts(tfToInt64Pointer(planAttrValues["nr_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_disabled_accounts"]))+" using SetNrDisabledAccounts")
	tkh.SetNrDisabledAccounts(tfToInt64Pointer(planAttrValues["nr_disabled_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_disabled_managers"]))+" using SetNrDisabledManagers")
	tkh.SetNrDisabledManagers(tfToInt64Pointer(planAttrValues["nr_disabled_managers"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_expired_vault_records"]))+" using SetNrExpiredVaultRecords")
	tkh.SetNrExpiredVaultRecords(tfToInt64Pointer(planAttrValues["nr_expired_vault_records"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_managers"]))+" using SetNrManagers")
	tkh.SetNrManagers(tfToInt64Pointer(planAttrValues["nr_managers"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["nr_vault_records_with_end_date"]))+" using SetNrVaultRecordsWithEndDate")
	tkh.SetNrVaultRecordsWithEndDate(tfToInt64Pointer(planAttrValues["nr_vault_records_with_end_date"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClassificationPrimerable
	tkh = keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupClassificationPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClassificationPrimerable
	tkh = keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClientable
	tkh = keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activation_required"]))+" using SetActivationRequired")
	tkh.SetActivationRequired(tfToBooleanPointer(planAttrValues["activation_required"]))
	{
		val, d := tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClientable
	tkh = keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activation_required"]))+" using SetActivationRequired")
	tkh.SetActivationRequired(tfToBooleanPointer(planAttrValues["activation_required"]))
	{
		val, d := tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["group"]), toObjectValue(configAttrValues["group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["technical_administrator"]), toObjectValue(configAttrValues["technical_administrator"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROGroupGroupClient_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupClientLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSROGroupGroupClientRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClientLinkableWrapperWithCount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSGroupGroupClient(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupClientLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSROGroupGroupClientRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClient_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupClient_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupClient_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupGlobalRoleInfoRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupGlobalRoleInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupGlobalRoleInfoable
	tkh = keyhubmodel.NewGroupGroupGlobalRoleInfo()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["auditor_group_for"]), toListValue(configAttrValues["auditor_group_for"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuditorGroupFor")
		tkh.SetAuditorGroupFor(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["create_group_approve_group_for"]), toListValue(configAttrValues["create_group_approve_group_for"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreateGroupApproveGroupFor")
		tkh.SetCreateGroupApproveGroupFor(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["enable_tech_admin_approve_group_for"]), toListValue(configAttrValues["enable_tech_admin_approve_group_for"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEnableTechAdminApproveGroupFor")
		tkh.SetEnableTechAdminApproveGroupFor(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["recovery_fallback_group_for"]), toListValue(configAttrValues["recovery_fallback_group_for"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecoveryFallbackGroupFor")
		tkh.SetRecoveryFallbackGroupFor(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["remove_group_approve_group_for"]), toListValue(configAttrValues["remove_group_approve_group_for"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRemoveGroupApproveGroupFor")
		tkh.SetRemoveGroupApproveGroupFor(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupInfoRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupInfoable
	tkh = keyhubmodel.NewGroupGroupInfo()
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_accounts"])))+" using SetNrAccounts")
	tkh.SetNrAccounts(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_accounts"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_accounts_with_vault"])))+" using SetNrAccountsWithVault")
	tkh.SetNrAccountsWithVault(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_accounts_with_vault"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_audits"])))+" using SetNrAudits")
	tkh.SetNrAudits(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_audits"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_clients"])))+" using SetNrClients")
	tkh.SetNrClients(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_clients"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_provisioned_systems"])))+" using SetNrProvisionedSystems")
	tkh.SetNrProvisionedSystems(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_provisioned_systems"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_vault_records"])))+" using SetNrVaultRecords")
	tkh.SetNrVaultRecords(int64PToInt32P(tfToInt64Pointer(planAttrValues["nr_vault_records"])))
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSROGroupGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupGroupLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSROGroupGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupPrimerable
	tkh = keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin"]))+" using SetAdmin")
	tkh.SetAdmin(tfToBooleanPointer(planAttrValues["admin"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, planAttrValues["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupPrimerable
	tkh = keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin"]))+" using SetAdmin")
	tkh.SetAdmin(tfToBooleanPointer(planAttrValues["admin"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planAttrValues["organizational_unit"]), toObjectValue(configAttrValues["organizational_unit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroupPrimerLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, planAttrValues["accounts"]), toItemsList(ctx, configAttrValues["accounts"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccounts")
		tkh.SetAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["administered_clients"]), toItemsList(ctx, configAttrValues["administered_clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdministeredClients")
		tkh.SetAdministeredClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["administered_systems"]), toItemsList(ctx, configAttrValues["administered_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdministeredSystems")
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, planAttrValues["admins"]), toItemsList(ctx, configAttrValues["admins"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdmins")
		tkh.SetAdmins(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["authorized_groups"]), toItemsList(ctx, configAttrValues["authorized_groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizedGroups")
		tkh.SetAuthorizedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, planAttrValues["client_permissions"]), toItemsList(ctx, configAttrValues["client_permissions"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientPermissions")
		tkh.SetClientPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupClientLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["clients"]), toItemsList(ctx, configAttrValues["clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClients")
		tkh.SetClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["content_administered_systems"]), toItemsList(ctx, configAttrValues["content_administered_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetContentAdministeredSystems")
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupGlobalRoleInfoRO(ctx, recurse, toObjectValue(planAttrValues["global_roles"]), toObjectValue(configAttrValues["global_roles"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGlobalRoles")
		tkh.SetGlobalRoles(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccessInfoRO(ctx, recurse, toObjectValue(planAttrValues["group_access_info"]), toObjectValue(configAttrValues["group_access_info"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupAccessInfo")
		tkh.SetGroupAccessInfo(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAuditingInfoRO(ctx, recurse, toObjectValue(planAttrValues["groupauditinginfo"]), toObjectValue(configAttrValues["groupauditinginfo"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupauditinginfo")
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupInfoRO(ctx, recurse, toObjectValue(planAttrValues["groupinfo"]), toObjectValue(configAttrValues["groupinfo"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupinfo")
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["helpdesk"]), toItemsList(ctx, configAttrValues["helpdesk"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetHelpdesk")
		tkh.SetHelpdesk(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROMarkItemMarkersRO(ctx, recurse, toObjectValue(planAttrValues["markers"]), toObjectValue(configAttrValues["markers"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkers")
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountRO(ctx, recurse, toObjectValue(planAttrValues["myaccount"]), toObjectValue(configAttrValues["myaccount"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMyaccount")
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountRO(ctx, recurse, toObjectValue(planAttrValues["mydelegatedaccount"]), toObjectValue(configAttrValues["mydelegatedaccount"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMydelegatedaccount")
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["nested_groups"]), toItemsList(ctx, configAttrValues["nested_groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNestedGroups")
		tkh.SetNestedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_access_profiles"]), toItemsList(ctx, configAttrValues["owned_access_profiles"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedAccessProfiles")
		tkh.SetOwnedAccessProfiles(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_clients"]), toItemsList(ctx, configAttrValues["owned_clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedClients")
		tkh.SetOwnedClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_directories"]), toItemsList(ctx, configAttrValues["owned_directories"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedDirectories")
		tkh.SetOwnedDirectories(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROProvisioningOwnedGroupOnSystemsWrapperRO(ctx, recurse, toObjectValue(planAttrValues["owned_groups_on_system"]), toObjectValue(configAttrValues["owned_groups_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedGroupsOnSystem")
		tkh.SetOwnedGroupsOnSystem(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "provisioning.OwnedGroupOnSystemsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_organizational_units"]), toItemsList(ctx, configAttrValues["owned_organizational_units"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedOrganizationalUnits")
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_systems"]), toItemsList(ctx, configAttrValues["owned_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedSystems")
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditGroupAuditLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["recent_audits"]), toItemsList(ctx, configAttrValues["recent_audits"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecentAudits")
		tkh.SetRecentAudits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := parseCastPointer(planAttrValues["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRequeststatus")
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["service_accounts"]), toItemsList(ctx, configAttrValues["service_accounts"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetServiceAccounts")
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupProvisioningGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["systems"]), toItemsList(ctx, configAttrValues["systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystems")
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRO(ctx, recurse, toObjectValue(planAttrValues["vault"]), toObjectValue(configAttrValues["vault"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVault")
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHRSROWebhookWebhookLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["webhooks"]), toItemsList(ctx, configAttrValues["webhooks"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetWebhooks")
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupGroup_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["accounts"]), toItemsList(ctx, configAttrValues["accounts"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccounts")
		tkh.SetAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["administered_clients"]), toItemsList(ctx, configAttrValues["administered_clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdministeredClients")
		tkh.SetAdministeredClients(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["administered_systems"]), toItemsList(ctx, configAttrValues["administered_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdministeredSystems")
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["admins"]), toItemsList(ctx, configAttrValues["admins"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdmins")
		tkh.SetAdmins(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["authorized_groups"]), toItemsList(ctx, configAttrValues["authorized_groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthorizedGroups")
		tkh.SetAuthorizedGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["client_permissions"]), toItemsList(ctx, configAttrValues["client_permissions"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientPermissions")
		tkh.SetClientPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupClientLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["clients"]), toItemsList(ctx, configAttrValues["clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClients")
		tkh.SetClients(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["content_administered_systems"]), toItemsList(ctx, configAttrValues["content_administered_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetContentAdministeredSystems")
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupGlobalRoleInfoRO(ctx, recurse, toObjectValue(planAttrValues["global_roles"]), toObjectValue(configAttrValues["global_roles"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGlobalRoles")
		tkh.SetGlobalRoles(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccessInfoRO(ctx, recurse, toObjectValue(planAttrValues["group_access_info"]), toObjectValue(configAttrValues["group_access_info"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupAccessInfo")
		tkh.SetGroupAccessInfo(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAuditingInfoRO(ctx, recurse, toObjectValue(planAttrValues["groupauditinginfo"]), toObjectValue(configAttrValues["groupauditinginfo"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupauditinginfo")
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupInfoRO(ctx, recurse, toObjectValue(planAttrValues["groupinfo"]), toObjectValue(configAttrValues["groupinfo"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupinfo")
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectorySummaryLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["helpdesk"]), toItemsList(ctx, configAttrValues["helpdesk"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetHelpdesk")
		tkh.SetHelpdesk(val)
	}
	{
		val, d := tfObjectToTKHRSROMarkItemMarkersRO(ctx, recurse, toObjectValue(planAttrValues["markers"]), toObjectValue(configAttrValues["markers"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkers")
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountRO(ctx, recurse, toObjectValue(planAttrValues["myaccount"]), toObjectValue(configAttrValues["myaccount"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMyaccount")
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupAccountRO(ctx, recurse, toObjectValue(planAttrValues["mydelegatedaccount"]), toObjectValue(configAttrValues["mydelegatedaccount"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMydelegatedaccount")
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["nested_groups"]), toItemsList(ctx, configAttrValues["nested_groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNestedGroups")
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_access_profiles"]), toItemsList(ctx, configAttrValues["owned_access_profiles"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedAccessProfiles")
		tkh.SetOwnedAccessProfiles(val)
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_clients"]), toItemsList(ctx, configAttrValues["owned_clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedClients")
		tkh.SetOwnedClients(val)
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_directories"]), toItemsList(ctx, configAttrValues["owned_directories"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedDirectories")
		tkh.SetOwnedDirectories(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningOwnedGroupOnSystemsWrapperRO(ctx, recurse, toObjectValue(planAttrValues["owned_groups_on_system"]), toObjectValue(configAttrValues["owned_groups_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedGroupsOnSystem")
		tkh.SetOwnedGroupsOnSystem(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_organizational_units"]), toItemsList(ctx, configAttrValues["owned_organizational_units"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedOrganizationalUnits")
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["owned_systems"]), toItemsList(ctx, configAttrValues["owned_systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwnedSystems")
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditGroupAuditLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["recent_audits"]), toItemsList(ctx, configAttrValues["recent_audits"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecentAudits")
		tkh.SetRecentAudits(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRequeststatus")
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["service_accounts"]), toItemsList(ctx, configAttrValues["service_accounts"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetServiceAccounts")
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupProvisioningGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["systems"]), toItemsList(ctx, configAttrValues["systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystems")
		tkh.SetSystems(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRO(ctx, recurse, toObjectValue(planAttrValues["vault"]), toObjectValue(configAttrValues["vault"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVault")
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHRSROWebhookWebhookLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["webhooks"]), toItemsList(ctx, configAttrValues["webhooks"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetWebhooks")
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroupable
	tkh = keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activation_required"]))+" using SetActivationRequired")
	tkh.SetActivationRequired(tfToBooleanPointer(planAttrValues["activation_required"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, false, toObjectValue(planAttrValues["group_on_system"]), toObjectValue(configAttrValues["group_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupOnSystem")
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupProvisioningGroupRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroupable
	tkh = keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activation_required"]))+" using SetActivationRequired")
	tkh.SetActivationRequired(tfToBooleanPointer(planAttrValues["activation_required"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["group"]), toObjectValue(configAttrValues["group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, false, toObjectValue(planAttrValues["group_on_system"]), toObjectValue(configAttrValues["group_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupOnSystem")
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROGroupProvisioningGroup_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupProvisioningGroupLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSROGroupProvisioningGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroupLinkableWrapperWithCount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupProvisioningGroupLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSROGroupProvisioningGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROGroupProvisioningGroup_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupVaultVaultRecord(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetColor")
		tkh.SetColor(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToTimePointer(planAttrValues["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareEndTime")
		tkh.SetShareEndTime(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["additional_urls"]))+" using SetAdditionalURLs")
	tkh.SetAdditionalURLs(tfToStringPointer(planAttrValues["additional_urls"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["derived"]))+" using SetDerived")
	tkh.SetDerived(tfToBooleanPointer(planAttrValues["derived"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["filename"]))+" using SetFilename")
	tkh.SetFilename(tfToStringPointer(planAttrValues["filename"]))
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["types"]), toSetValue(configAttrValues["types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTypes")
		tkh.SetTypes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["url"]))+" using SetUrl")
	tkh.SetUrl(tfToStringPointer(planAttrValues["url"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	{
		val, d := parseCastPointer(planAttrValues["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetWarningPeriod")
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeDefinitionRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeDefinitionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeDefinitionable
	tkh = keyhubmodel.NewIdentityAccountAttributeDefinition()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["format"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeFormat, func(val any) keyhubmodel.IdentityAccountAttributeFormat {
			return *val.(*keyhubmodel.IdentityAccountAttributeFormat)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetFormat")
		tkh.SetFormat(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["freely_useable"]))+" using SetFreelyUseable")
	tkh.SetFreelyUseable(tfToBooleanPointer(planAttrValues["freely_useable"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["list"]))+" using SetList")
	tkh.SetList(tfToBooleanPointer(planAttrValues["list"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["required"]))+" using SetRequired")
	tkh.SetRequired(tfToBooleanPointer(planAttrValues["required"]))
	{
		val, d := parseCastPointer(planAttrValues["system_definition"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeSystemDefinition, func(val any) keyhubmodel.IdentityAccountAttributeSystemDefinition {
			return *val.(*keyhubmodel.IdentityAccountAttributeSystemDefinition)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystemDefinition")
		tkh.SetSystemDefinition(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["unique"]))+" using SetUnique")
	tkh.SetUnique(tfToBooleanPointer(planAttrValues["unique"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROIdentityAccountAttributeDefinition_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeDefinition_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeDefinition_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeDefinition_additionalObjectsable
	tkh = keyhubmodel.NewIdentityAccountAttributeDefinition_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeRuleRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeRuleable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeRuleable
	tkh = keyhubmodel.NewIdentityAccountAttributeRule()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["allow_override"]))+" using SetAllowOverride")
	tkh.SetAllowOverride(tfToBooleanPointer(planAttrValues["allow_override"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["allow_self_service"]))+" using SetAllowSelfService")
	tkh.SetAllowSelfService(tfToBooleanPointer(planAttrValues["allow_self_service"]))
	{
		val, d := tfObjectToTKHRSROIdentityAccountAttributeDefinitionRO(ctx, false, toObjectValue(planAttrValues["attribute"]), toObjectValue(configAttrValues["attribute"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttribute")
		tkh.SetAttribute(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["default_value"]))+" using SetDefaultValue")
	tkh.SetDefaultValue(tfToStringPointer(planAttrValues["default_value"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["exclusive"]))+" using SetExclusive")
	tkh.SetExclusive(tfToBooleanPointer(planAttrValues["exclusive"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_directory"])))+" using SetPriorityDirectory")
	tkh.SetPriorityDirectory(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_directory"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_external_source"])))+" using SetPriorityExternalSource")
	tkh.SetPriorityExternalSource(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_external_source"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_formula"])))+" using SetPriorityFormula")
	tkh.SetPriorityFormula(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_formula"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_scim"])))+" using SetPrioritySCIM")
	tkh.SetPrioritySCIM(int64PToInt32P(tfToInt64Pointer(planAttrValues["priority_scim"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["script"]))+" using SetScript")
	tkh.SetScript(tfToStringPointer(planAttrValues["script"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["update_automatically"]))+" using SetUpdateAutomatically")
	tkh.SetUpdateAutomatically(tfToBooleanPointer(planAttrValues["update_automatically"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROIdentityAccountAttributeRule_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeRuleLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeRuleLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeRuleLinkableWrapperable
	tkh = keyhubmodel.NewIdentityAccountAttributeRuleLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.IdentityAccountAttributeRuleable {
			tkh, d := tfObjectToTKHRSROIdentityAccountAttributeRuleRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeRule_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeRule_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeRule_additionalObjectsable
	tkh = keyhubmodel.NewIdentityAccountAttributeRule_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROIdentityAccountAttributeValueSummaryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.IdentityAccountAttributeValueSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.IdentityAccountAttributeValueSummaryable
	tkh = keyhubmodel.NewIdentityAccountAttributeValueSummary()
	{
		val, d := tfObjectToTKHRSROIdentityAccountAttributeDefinitionRO(ctx, recurse, toObjectValue(planAttrValues["attribute"]), toObjectValue(configAttrValues["attribute"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttribute")
		tkh.SetAttribute(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["context"]))+" using SetContext")
	tkh.SetContext(tfToStringPointer(planAttrValues["context"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["current_value"]))+" using SetCurrentValue")
	tkh.SetCurrentValue(tfToStringPointer(planAttrValues["current_value"]))
	{
		val, d := tfToTimePointer(planAttrValues["date"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDate")
		tkh.SetDate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["expected_value"]))+" using SetExpectedValue")
	tkh.SetExpectedValue(tfToStringPointer(planAttrValues["expected_value"]))
	{
		val, d := parseCastPointer(planAttrValues["source"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeSource, func(val any) keyhubmodel.IdentityAccountAttributeSource {
			return *val.(*keyhubmodel.IdentityAccountAttributeSource)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSource")
		tkh.SetSource(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["status"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeValueSelectionStatus, func(val any) keyhubmodel.IdentityAccountAttributeValueSelectionStatus {
			return *val.(*keyhubmodel.IdentityAccountAttributeValueSelectionStatus)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatus")
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uri"]))+" using SetUri")
	tkh.SetUri(tfToStringPointer(planAttrValues["uri"]))
	return tkh, diags
}

func tfObjectToTKHRSROLaunchpadSsoApplicationLaunchpadTileRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uri"]))+" using SetUri")
	tkh.SetUri(tfToStringPointer(planAttrValues["uri"]))
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	return tkh, diags
}

func tfObjectToTKHRSROLaunchpadVaultRecordLaunchpadTileRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	var tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	return tkh, diags
}

func tfObjectToTKHRSROMarkItemMarkerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.MarkItemMarkerable
	tkh = keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(planAttrValues["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLevel")
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkItemMarkerType")
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfToMap(toMapValue(planAttrValues["parameters"]), toMapValue(configAttrValues["parameters"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) any {
			return planValue.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewMarkItemMarker_parameters())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetParameters")
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROMarkItemMarkersRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.MarkItemMarkersable
	tkh = keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["markers"]), toListValue(configAttrValues["markers"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHRSROMarkItemMarkerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkers")
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROMiscAttributeCustomizationRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.MiscAttributeCustomizationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.MiscAttributeCustomizationable
	tkh = keyhubmodel.NewMiscAttributeCustomization()
	{
		val, d := tfObjectToTKHRSROIdentityAccountAttributeDefinitionRO(ctx, recurse, toObjectValue(planAttrValues["attribute_definition"]), toObjectValue(configAttrValues["attribute_definition"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributeDefinition")
		tkh.SetAttributeDefinition(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["script"]))+" using SetScript")
	tkh.SetScript(tfToStringPointer(planAttrValues["script"]))
	return tkh, diags
}

func tfObjectToTKHRSNestedProvisioningGroupOnSystem(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_in_system"]))+" using SetNameInSystem")
	tkh.SetNameInSystem(tfToStringPointer(planAttrValues["name_in_system"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningGroupOnSystemPrimerType")
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["short_name_in_system"]))+" using SetShortNameInSystem")
	tkh.SetShortNameInSystem(tfToStringPointer(planAttrValues["short_name_in_system"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["provisioning_enabled"]))+" using SetProvisioningEnabled")
	tkh.SetProvisioningEnabled(tfToBooleanPointer(planAttrValues["provisioning_enabled"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationClientApplicationOrganizationalUnitRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationClientApplicationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationClientApplicationOrganizationalUnit()
	{
		val, d := findOrganizationOrganizationalUnitPrimerROByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationClientApplicationOrganizationalUnit)).OrganizationOrganizationalUnitPrimer = *(val.(*keyhubmodel.OrganizationOrganizationalUnitPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationClientApplicationOrganizationalUnitLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationClientApplicationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationClientApplicationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationClientApplicationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSROOrganizationClientApplicationOrganizationalUnitRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnitRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["auditor_group"]), toObjectValue(configAttrValues["auditor_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuditorGroup")
		tkh.SetAuditorGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["create_group_approve_group"]), toObjectValue(configAttrValues["create_group_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreateGroupApproveGroup")
		tkh.SetCreateGroupApproveGroup(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["create_group_placeholder"]))+" using SetCreateGroupPlaceholder")
	tkh.SetCreateGroupPlaceholder(tfToStringPointer(planAttrValues["create_group_placeholder"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["depth"])))+" using SetDepth")
	tkh.SetDepth(int64PToInt32P(tfToInt64Pointer(planAttrValues["depth"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["enable_tech_admin_approve_group"]), toObjectValue(configAttrValues["enable_tech_admin_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEnableTechAdminApproveGroup")
		tkh.SetEnableTechAdminApproveGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, false, toObjectValue(planAttrValues["parent"]), toObjectValue(configAttrValues["parent"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetParent")
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["recovery_fallback_group"]), toObjectValue(configAttrValues["recovery_fallback_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecoveryFallbackGroup")
		tkh.SetRecoveryFallbackGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["remove_group_approve_group"]), toObjectValue(configAttrValues["remove_group_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRemoveGroupApproveGroup")
		tkh.SetRemoveGroupApproveGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROOrganizationOrganizationalUnit_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnitLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimerLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnitSettingsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnitSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnitSettingsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitSettings()
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planAttrValues["create_group_approve_group"]), toObjectValue(configAttrValues["create_group_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreateGroupApproveGroup")
		tkh.SetCreateGroupApproveGroup(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["create_group_placeholder"]))+" using SetCreateGroupPlaceholder")
	tkh.SetCreateGroupPlaceholder(tfToStringPointer(planAttrValues["create_group_placeholder"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planAttrValues["enable_tech_admin_approve_group"]), toObjectValue(configAttrValues["enable_tech_admin_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEnableTechAdminApproveGroup")
		tkh.SetEnableTechAdminApproveGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planAttrValues["recovery_fallback_group"]), toObjectValue(configAttrValues["recovery_fallback_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecoveryFallbackGroup")
		tkh.SetRecoveryFallbackGroup(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, recurse, toObjectValue(planAttrValues["remove_group_approve_group"]), toObjectValue(configAttrValues["remove_group_approve_group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRemoveGroupApproveGroup")
		tkh.SetRemoveGroupApproveGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROOrganizationOrganizationalUnit_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["create_as_parent_of"]), toItemsList(ctx, configAttrValues["create_as_parent_of"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCreateAsParentOf")
		tkh.SetCreateAsParentOf(val)
	}
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitSettingsRO(ctx, recurse, toObjectValue(planAttrValues["settings"]), toObjectValue(configAttrValues["settings"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSettings")
		tkh.SetSettings(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileable
	tkh = keyhubmodel.NewProfileAccessProfile()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["activate_rule_script"]))+" using SetActivateRuleScript")
	tkh.SetActivateRuleScript(tfToStringPointer(planAttrValues["activate_rule_script"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, false, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["match_rule_script"]))+" using SetMatchRuleScript")
	tkh.SetMatchRuleScript(tfToStringPointer(planAttrValues["match_rule_script"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfile_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileAccountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileAccountable
	tkh = keyhubmodel.NewProfileAccessProfileAccount()
	{
		val, d := findAuthAccountPrimerROByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProfileAccessProfileAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parseCastPointer(planAttrValues["activation"].(basetypes.StringValue), keyhubmodel.ParseProfileAccessProfileAccountActivation, func(val any) keyhubmodel.ProfileAccessProfileAccountActivation {
			return *val.(*keyhubmodel.ProfileAccessProfileAccountActivation)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetActivation")
		tkh.SetActivation(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["manual"]))+" using SetManual")
	tkh.SetManual(tfToBooleanPointer(planAttrValues["manual"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfileAccount_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileAccountWithAttributesRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileAccountWithAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesable
	tkh = keyhubmodel.NewProfileAccessProfileAccountWithAttributes()
	{
		val, d := findAuthAccountPrimerROByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProfileAccessProfileAccountWithAttributes)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parseCastPointer(planAttrValues["activation"].(basetypes.StringValue), keyhubmodel.ParseProfileAccessProfileAccountActivation, func(val any) keyhubmodel.ProfileAccessProfileAccountActivation {
			return *val.(*keyhubmodel.ProfileAccessProfileAccountActivation)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetActivation")
		tkh.SetActivation(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["manual"]))+" using SetManual")
	tkh.SetManual(tfToBooleanPointer(planAttrValues["manual"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["attributes"]), toListValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.IdentityAccountAttributeValueSummaryable {
			tkh, d := tfObjectToTKHRSROIdentityAccountAttributeValueSummaryRO(ctx, false, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfileAccount_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileAccountWithAttributesLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileAccountWithAttributesLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileAccountWithAttributesLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileAccountWithAttributesable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileAccountWithAttributesRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileAccount_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileAccount_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClient(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClientable
	tkh = keyhubmodel.NewProfileAccessProfileClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := findProfileAccessProfilePrimerByUUID(ctx, planAttrValues["access_profile_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfile")
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileClient_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileClientRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClientable
	tkh = keyhubmodel.NewProfileAccessProfileClient()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfilePrimerRO(ctx, false, toObjectValue(planAttrValues["access_profile"]), toObjectValue(configAttrValues["access_profile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfile")
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfileClient_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileClientLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileClientLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileClientable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileClientRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClientLinkableWrapperWithCount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable
	tkh = keyhubmodel.NewProfileAccessProfileClientLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileClientable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileClient(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileClientLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperWithCountable
	tkh = keyhubmodel.NewProfileAccessProfileClientLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileClientable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileClientRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClient_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClient_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileClient_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileClient_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileGroupRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileGroupable
	tkh = keyhubmodel.NewProfileAccessProfileGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfilePrimerRO(ctx, false, toObjectValue(planAttrValues["access_profile"]), toObjectValue(configAttrValues["access_profile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfile")
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["group"]), toObjectValue(configAttrValues["group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfileGroup_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileGroupLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileGroupLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileGroupLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileGroupable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileGroup_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileGroup_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfilePrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfilePrimerable
	tkh = keyhubmodel.NewProfileAccessProfilePrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfilePrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfilePrimerable
	tkh = keyhubmodel.NewProfileAccessProfilePrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioning(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioningable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioningable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfilePrimerRO(ctx, false, toObjectValue(planAttrValues["access_profile"]), toObjectValue(configAttrValues["access_profile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfile")
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, false, toObjectValue(planAttrValues["group_on_system"]), toObjectValue(configAttrValues["group_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupOnSystem")
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileProvisioning_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileProvisioningRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioningable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioningable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfilePrimerRO(ctx, false, toObjectValue(planAttrValues["access_profile"]), toObjectValue(configAttrValues["access_profile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfile")
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, false, toObjectValue(planAttrValues["group_on_system"]), toObjectValue(configAttrValues["group_on_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupOnSystem")
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProfileAccessProfileProvisioning_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileProvisioningLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioningLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileProvisioningable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileProvisioningRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapperWithCount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioningLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileProvisioningable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileProvisioning(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileProvisioningLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioningLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileProvisioningable {
			tkh, d := tfObjectToTKHRSROProfileAccessProfileProvisioningRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioning_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfileProvisioning_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProfileAccessProfile_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProfileAccessProfile_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProfileAccessProfile_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfile_additionalObjects()
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileAccountWithAttributesLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["accounts_with_attributes"]), toItemsList(ctx, configAttrValues["accounts_with_attributes"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccountsWithAttributes")
		tkh.SetAccountsWithAttributes(val)
	}
	{
		val, d := tfObjectToTKHRSROIdentityAccountAttributeRuleLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["attribute_rules"]), toItemsList(ctx, configAttrValues["attribute_rules"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributeRules")
		tkh.SetAttributeRules(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileClientLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["clients"]), toItemsList(ctx, configAttrValues["clients"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClients")
		tkh.SetClients(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["groups"]), toItemsList(ctx, configAttrValues["groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroups")
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileProvisioningLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["provisioning"]), toItemsList(ctx, configAttrValues["provisioning"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioning")
		tkh.SetProvisioning(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningAbstractProvisionedLDAPRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["attributes"]), toListValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.MiscAttributeCustomizationable {
			tkh, d := tfObjectToTKHRSROMiscAttributeCustomizationRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["base_dn"]))+" using SetBaseDN")
	tkh.SetBaseDN(tfToStringPointer(planAttrValues["base_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bind_dn"]))+" using SetBindDN")
	tkh.SetBindDN(tfToStringPointer(planAttrValues["bind_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bind_password"]))+" using SetBindPassword")
	tkh.SetBindPassword(tfToStringPointer(planAttrValues["bind_password"]))
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["client_certificate"]), toObjectValue(configAttrValues["client_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientCertificate")
		tkh.SetClientCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["failover_host"]))+" using SetFailoverHost")
	tkh.SetFailoverHost(tfToStringPointer(planAttrValues["failover_host"]))
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["failover_trusted_certificate"]), toObjectValue(configAttrValues["failover_trusted_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetFailoverTrustedCertificate")
		tkh.SetFailoverTrustedCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["group_dn"]))+" using SetGroupDN")
	tkh.SetGroupDN(tfToStringPointer(planAttrValues["group_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["host"]))+" using SetHost")
	tkh.SetHost(tfToStringPointer(planAttrValues["host"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["object_classes"]))+" using SetObjectClasses")
	tkh.SetObjectClasses(tfToStringPointer(planAttrValues["object_classes"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["port"])))+" using SetPort")
	tkh.SetPort(int64PToInt32P(tfToInt64Pointer(planAttrValues["port"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["service_account_dn"]))+" using SetServiceAccountDN")
	tkh.SetServiceAccountDN(tfToStringPointer(planAttrValues["service_account_dn"]))
	{
		val, d := parseCastPointer(planAttrValues["ssh_public_key_support"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPSshPublicKeySupport, func(val any) keyhubmodel.ProvisioningLDAPSshPublicKeySupport {
			return *val.(*keyhubmodel.ProvisioningLDAPSshPublicKeySupport)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSshPublicKeySupport")
		tkh.SetSshPublicKeySupport(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTls")
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, recurse, toObjectValue(planAttrValues["trusted_certificate"]), toObjectValue(configAttrValues["trusted_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTrustedCertificate")
		tkh.SetTrustedCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["user_dn"]))+" using SetUserDN")
	tkh.SetUserDN(tfToStringPointer(planAttrValues["user_dn"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningCircuitBreakerStatisticsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable
	tkh = keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["number_of_failed_calls"]))+" using SetNumberOfFailedCalls")
	tkh.SetNumberOfFailedCalls(tfToInt64Pointer(planAttrValues["number_of_failed_calls"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["number_of_not_permitted_calls"]))+" using SetNumberOfNotPermittedCalls")
	tkh.SetNumberOfNotPermittedCalls(tfToInt64Pointer(planAttrValues["number_of_not_permitted_calls"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["number_of_successful_calls"]))+" using SetNumberOfSuccessfulCalls")
	tkh.SetNumberOfSuccessfulCalls(tfToInt64Pointer(planAttrValues["number_of_successful_calls"]))
	{
		val, d := parseCastPointer(planAttrValues["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetState")
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_in_system"]))+" using SetNameInSystem")
	tkh.SetNameInSystem(tfToStringPointer(planAttrValues["name_in_system"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningGroupOnSystemPrimerType")
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["short_name_in_system"]))+" using SetShortNameInSystem")
	tkh.SetShortNameInSystem(tfToStringPointer(planAttrValues["short_name_in_system"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["provisioning_enabled"]))+" using SetProvisioningEnabled")
	tkh.SetProvisioningEnabled(tfToBooleanPointer(planAttrValues["provisioning_enabled"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROProvisioningGroupOnSystem_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningGroupOnSystemLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_in_system"]))+" using SetNameInSystem")
	tkh.SetNameInSystem(tfToStringPointer(planAttrValues["name_in_system"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningGroupOnSystemPrimerType")
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["short_name_in_system"]))+" using SetShortNameInSystem")
	tkh.SetShortNameInSystem(tfToStringPointer(planAttrValues["short_name_in_system"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningGroupOnSystemPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_in_system"]))+" using SetNameInSystem")
	tkh.SetNameInSystem(tfToStringPointer(planAttrValues["name_in_system"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningGroupOnSystemPrimerType")
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["short_name_in_system"]))+" using SetShortNameInSystem")
	tkh.SetShortNameInSystem(tfToStringPointer(planAttrValues["short_name_in_system"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningGroupOnSystemTypesRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystemTypesable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["types"]), toListValue(configAttrValues["types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTypes")
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, planAttrValues["access_profile_provisioning"]), toItemsList(ctx, configAttrValues["access_profile_provisioning"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfileProvisioning")
		tkh.SetAccessProfileProvisioning(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, planAttrValues["provgroups"]), toItemsList(ctx, configAttrValues["provgroups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvgroups")
		tkh.SetProvgroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, planAttrValues["service_accounts_uuid"]), toItemsList(ctx, configAttrValues["service_accounts_uuid"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetServiceAccounts")
		tkh.SetServiceAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningGroupOnSystem_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSROProfileAccessProfileProvisioningLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["access_profile_provisioning"]), toItemsList(ctx, configAttrValues["access_profile_provisioning"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccessProfileProvisioning")
		tkh.SetAccessProfileProvisioning(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupProvisioningGroupLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["provgroups"]), toItemsList(ctx, configAttrValues["provgroups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvgroups")
		tkh.SetProvgroups(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountPrimerLinkableWrapperWithCountRO(ctx, recurse, toItemsList(ctx, planAttrValues["service_accounts"]), toItemsList(ctx, configAttrValues["service_accounts"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetServiceAccounts")
		tkh.SetServiceAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningOwnedGroupOnSystemsWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable
	tkh = keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSROProvisioningGroupOnSystemRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["unlinked_count"]))+" using SetUnlinkedCount")
	tkh.SetUnlinkedCount(tfToInt64Pointer(planAttrValues["unlinked_count"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionNumberSequenceRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionNumberSequenceable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["next_id"]))+" using SetNextID")
	tkh.SetNextID(tfToInt64Pointer(planAttrValues["next_id"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROProvisioningProvisionNumberSequence_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionNumberSequence_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["systems"]), toItemsList(ctx, configAttrValues["systems"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystems")
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedADRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedADable
	tkh = keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := parseCastPointer(planAttrValues["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSamAccountNameScheme")
		tkh.SetSamAccountNameScheme(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedAccountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedAccountable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := findAuthAccountPrimerROByUUID(ctx, planAttrValues["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProvisioningProvisionedAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["uid"]))+" using SetUid")
	tkh.SetUid(tfToInt64Pointer(planAttrValues["uid"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROProvisioningProvisionedAccount_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedAccount_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedAzureOIDCDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["accounts_writable"]))+" using SetAccountsWritable")
	tkh.SetAccountsWritable(tfToBooleanPointer(planAttrValues["accounts_writable"]))
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, recurse, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["tenant"]))+" using SetTenant")
	tkh.SetTenant(tfToStringPointer(planAttrValues["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedAzureSyncLDAPDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_secret"]))+" using SetClientSecret")
	tkh.SetClientSecret(tfToStringPointer(planAttrValues["client_secret"]))
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, recurse, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["tenant"]))+" using SetTenant")
	tkh.SetTenant(tfToStringPointer(planAttrValues["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedAzureTenantRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedAzureTenantable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureTenant()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_id"]))+" using SetClientId")
	tkh.SetClientId(tfToStringPointer(planAttrValues["client_id"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["client_secret"]))+" using SetClientSecret")
	tkh.SetClientSecret(tfToStringPointer(planAttrValues["client_secret"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["idp_domain"]))+" using SetIdpDomain")
	tkh.SetIdpDomain(tfToStringPointer(planAttrValues["idp_domain"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["tenant"]))+" using SetTenant")
	tkh.SetTenant(tfToStringPointer(planAttrValues["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedInternalLDAPRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := tfObjectToTKHRSROClientLdapClientRO(ctx, recurse, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedLDAPRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAP()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["gid"]))+" using SetGid")
	tkh.SetGid(tfToInt64Pointer(planAttrValues["gid"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionNumberSequenceRO(ctx, recurse, toObjectValue(planAttrValues["gid_numbering"]), toObjectValue(configAttrValues["gid_numbering"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGidNumbering")
		tkh.SetGidNumbering(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetHashingScheme")
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionNumberSequenceRO(ctx, recurse, toObjectValue(planAttrValues["numbering"]), toObjectValue(configAttrValues["numbering"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNumbering")
		tkh.SetNumbering(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedLDAPDirectoryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["accounts_writable"]))+" using SetAccountsWritable")
	tkh.SetAccountsWritable(tfToBooleanPointer(planAttrValues["accounts_writable"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["attributes"]), toListValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.MiscAttributeCustomizationable {
			tkh, d := tfObjectToTKHRSROMiscAttributeCustomizationRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, recurse, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["gid"]))+" using SetGid")
	tkh.SetGid(tfToInt64Pointer(planAttrValues["gid"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionNumberSequenceRO(ctx, recurse, toObjectValue(planAttrValues["gid_numbering"]), toObjectValue(configAttrValues["gid_numbering"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGidNumbering")
		tkh.SetGidNumbering(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["group_dn"]))+" using SetGroupDN")
	tkh.SetGroupDN(tfToStringPointer(planAttrValues["group_dn"]))
	{
		val, d := parseCastPointer(planAttrValues["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetHashingScheme")
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionNumberSequenceRO(ctx, recurse, toObjectValue(planAttrValues["numbering"]), toObjectValue(configAttrValues["numbering"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetNumbering")
		tkh.SetNumbering(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["object_classes"]))+" using SetObjectClasses")
	tkh.SetObjectClasses(tfToStringPointer(planAttrValues["object_classes"]))
	{
		val, d := parseCastPointer(planAttrValues["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSamAccountNameScheme")
		tkh.SetSamAccountNameScheme(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["ssh_public_key_support"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPSshPublicKeySupport, func(val any) keyhubmodel.ProvisioningLDAPSshPublicKeySupport {
			return *val.(*keyhubmodel.ProvisioningLDAPSshPublicKeySupport)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSshPublicKeySupport")
		tkh.SetSshPublicKeySupport(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedNamespaceRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedNamespaceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedNamespaceable
	tkh = keyhubmodel.NewProvisioningProvisionedNamespace()
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, recurse, toObjectValue(planAttrValues["base_system"]), toObjectValue(configAttrValues["base_system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetBaseSystem")
		tkh.SetBaseSystem(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["group_dn"]))+" using SetGroupDN")
	tkh.SetGroupDN(tfToStringPointer(planAttrValues["group_dn"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["service_account_dn"]))+" using SetServiceAccountDN")
	tkh.SetServiceAccountDN(tfToStringPointer(planAttrValues["service_account_dn"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSCIMRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSCIMable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSCIMable
	tkh = keyhubmodel.NewProvisioningProvisionedSCIM()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["attributes"]), toListValue(configAttrValues["attributes"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.MiscAttributeCustomizationable {
			tkh, d := tfObjectToTKHRSROMiscAttributeCustomizationRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAttributes")
		tkh.SetAttributes(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthenticationScheme")
		tkh.SetAuthenticationScheme(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["basic_auth_password"]))+" using SetBasicAuthPassword")
	tkh.SetBasicAuthPassword(tfToStringPointer(planAttrValues["basic_auth_password"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["basic_auth_username"]))+" using SetBasicAuthUsername")
	tkh.SetBasicAuthUsername(tfToStringPointer(planAttrValues["basic_auth_username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bearer_token"]))+" using SetBearerToken")
	tkh.SetBearerToken(tfToStringPointer(planAttrValues["bearer_token"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["custom_header_name"]))+" using SetCustomHeaderName")
	tkh.SetCustomHeaderName(tfToStringPointer(planAttrValues["custom_header_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["custom_header_value"]))+" using SetCustomHeaderValue")
	tkh.SetCustomHeaderValue(tfToStringPointer(planAttrValues["custom_header_value"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["url"]))+" using SetUrl")
	tkh.SetUrl(tfToStringPointer(planAttrValues["url"]))
	{
		val, d := parseCastPointer(planAttrValues["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSCIMVendor, func(val any) keyhubmodel.ProvisioningProvisionedSCIMVendor {
			return *val.(*keyhubmodel.ProvisioningProvisionedSCIMVendor)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVendorEscaped")
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystemRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystemable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin_permissions"]))+" using SetAdminPermissions")
	tkh.SetAdminPermissions(tfToBooleanPointer(planAttrValues["admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["can_write_accounts"]))+" using SetCanWriteAccounts")
	tkh.SetCanWriteAccounts(tfToBooleanPointer(planAttrValues["can_write_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))+" using SetContentAdminPermissions")
	tkh.SetContentAdminPermissions(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planAttrValues["organizational_unit"]), toObjectValue(configAttrValues["organizational_unit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["owner_permissions"]))+" using SetOwnerPermissions")
	tkh.SetOwnerPermissions(tfToBooleanPointer(planAttrValues["owner_permissions"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningProvisionedSystemPrimerType")
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["account_count"])))+" using SetAccountCount")
	tkh.SetAccountCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["account_count"])))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystem_cleanupPeriodRO(ctx, false, toObjectValue(planAttrValues["cleanup_period"]), toObjectValue(configAttrValues["cleanup_period"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetCleanupPeriod")
		tkh.SetCleanupPeriod(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["content_administrator"]), toObjectValue(configAttrValues["content_administrator"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetContentAdministrator")
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(planAttrValues["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetExternalUuid")
		tkh.SetExternalUuid(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["group_on_system_provisioning"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemProvisioning, func(val any) keyhubmodel.ProvisioningGroupOnSystemProvisioning {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemProvisioning)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroupOnSystemProvisioning")
		tkh.SetGroupOnSystemProvisioning(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["owner"]), toObjectValue(configAttrValues["owner"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOwner")
		tkh.SetOwner(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["self_service_existing_groups"]))+" using SetSelfServiceExistingGroups")
	tkh.SetSelfServiceExistingGroups(tfToBooleanPointer(planAttrValues["self_service_existing_groups"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["self_service_new_groups"]))+" using SetSelfServiceNewGroups")
	tkh.SetSelfServiceNewGroups(tfToBooleanPointer(planAttrValues["self_service_new_groups"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["self_service_new_namespaces"]))+" using SetSelfServiceNewNamespaces")
	tkh.SetSelfServiceNewNamespaces(tfToBooleanPointer(planAttrValues["self_service_new_namespaces"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["self_service_service_accounts"]))+" using SetSelfServiceServiceAccounts")
	tkh.SetSelfServiceServiceAccounts(tfToBooleanPointer(planAttrValues["self_service_service_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["should_destroy_unknown_accounts"]))+" using SetShouldDestroyUnknownAccounts")
	tkh.SetShouldDestroyUnknownAccounts(tfToBooleanPointer(planAttrValues["should_destroy_unknown_accounts"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["technical_administrator"]), toObjectValue(configAttrValues["technical_administrator"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username_prefix"]))+" using SetUsernamePrefix")
	tkh.SetUsernamePrefix(tfToStringPointer(planAttrValues["username_prefix"]))
	if !planAttrValues["abstract_provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningAbstractProvisionedLDAPRO(ctx, false, planAttrValues["abstract_provisioned_ldap"].(basetypes.ObjectValue), configAttrValues["abstract_provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningAbstractProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_a_d"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedADRO(ctx, false, planAttrValues["provisioned_a_d"].(basetypes.ObjectValue), configAttrValues["provisioned_a_d"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAD)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_azure_oidc_directory"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedAzureOIDCDirectoryRO(ctx, false, planAttrValues["provisioned_azure_oidc_directory"].(basetypes.ObjectValue), configAttrValues["provisioned_azure_oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureOIDCDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_azure_sync_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedAzureSyncLDAPDirectoryRO(ctx, false, planAttrValues["provisioned_azure_sync_ldap_directory"].(basetypes.ObjectValue), configAttrValues["provisioned_azure_sync_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_azure_tenant"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedAzureTenantRO(ctx, false, planAttrValues["provisioned_azure_tenant"].(basetypes.ObjectValue), configAttrValues["provisioned_azure_tenant"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureTenant)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_internal_ldap"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedInternalLDAPRO(ctx, false, planAttrValues["provisioned_internal_ldap"].(basetypes.ObjectValue), configAttrValues["provisioned_internal_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedInternalLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedLDAPRO(ctx, false, planAttrValues["provisioned_ldap"].(basetypes.ObjectValue), configAttrValues["provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedLDAPDirectoryRO(ctx, false, planAttrValues["provisioned_ldap_directory"].(basetypes.ObjectValue), configAttrValues["provisioned_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_namespace"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedNamespaceRO(ctx, false, planAttrValues["provisioned_namespace"].(basetypes.ObjectValue), configAttrValues["provisioned_namespace"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedNamespace)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !planAttrValues["provisioned_scim"].IsNull() {
		val, d := tfObjectToTKHRSROProvisioningProvisionedSCIMRO(ctx, false, planAttrValues["provisioned_scim"].(basetypes.ObjectValue), configAttrValues["provisioned_scim"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedSCIM)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROProvisioningProvisionedSystem_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystemLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHRSROProvisioningProvisionedSystemRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin_permissions"]))+" using SetAdminPermissions")
	tkh.SetAdminPermissions(tfToBooleanPointer(planAttrValues["admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["can_write_accounts"]))+" using SetCanWriteAccounts")
	tkh.SetCanWriteAccounts(tfToBooleanPointer(planAttrValues["can_write_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))+" using SetContentAdminPermissions")
	tkh.SetContentAdminPermissions(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, planAttrValues["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["owner_permissions"]))+" using SetOwnerPermissions")
	tkh.SetOwnerPermissions(tfToBooleanPointer(planAttrValues["owner_permissions"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningProvisionedSystemPrimerType")
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["admin_permissions"]))+" using SetAdminPermissions")
	tkh.SetAdminPermissions(tfToBooleanPointer(planAttrValues["admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["can_write_accounts"]))+" using SetCanWriteAccounts")
	tkh.SetCanWriteAccounts(tfToBooleanPointer(planAttrValues["can_write_accounts"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))+" using SetContentAdminPermissions")
	tkh.SetContentAdminPermissions(tfToBooleanPointer(planAttrValues["content_admin_permissions"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROOrganizationOrganizationalUnitPrimerRO(ctx, recurse, toObjectValue(planAttrValues["organizational_unit"]), toObjectValue(configAttrValues["organizational_unit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetOrganizationalUnit")
		tkh.SetOrganizationalUnit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["owner_permissions"]))+" using SetOwnerPermissions")
	tkh.SetOwnerPermissions(tfToBooleanPointer(planAttrValues["owner_permissions"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningProvisionedSystemPrimerType")
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystemPrimerLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystem_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedAccountRO(ctx, recurse, toObjectValue(planAttrValues["account"]), toObjectValue(configAttrValues["account"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccount")
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROClientOAuth2ClientPermissionWithClientLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["issued_permissions"]), toItemsList(ctx, configAttrValues["issued_permissions"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetIssuedPermissions")
		tkh.SetIssuedPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["login_name"]))+" using SetLoginName")
	tkh.SetLoginName(tfToStringPointer(planAttrValues["login_name"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisioningManagementPermissionsRO(ctx, recurse, toObjectValue(planAttrValues["management_permissions"]), toObjectValue(configAttrValues["management_permissions"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetManagementPermissions")
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROMarkItemMarkersRO(ctx, recurse, toObjectValue(planAttrValues["markers"]), toObjectValue(configAttrValues["markers"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetMarkers")
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningCircuitBreakerStatisticsRO(ctx, recurse, toObjectValue(planAttrValues["statistics"]), toObjectValue(configAttrValues["statistics"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetStatistics")
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHRSROProvisioningGroupOnSystemTypesRO(ctx, recurse, toObjectValue(planAttrValues["supported_group_types"]), toObjectValue(configAttrValues["supported_group_types"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSupportedGroupTypes")
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisionedSystem_cleanupPeriodRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisionedSystem_cleanupPeriodable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisionedSystem_cleanupPeriodable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_cleanupPeriod()
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["days"])))+" using SetDays")
	tkh.SetDays(int64PToInt32P(tfToInt64Pointer(planAttrValues["days"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["months"])))+" using SetMonths")
	tkh.SetMonths(int64PToInt32P(tfToInt64Pointer(planAttrValues["months"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["years"])))+" using SetYears")
	tkh.SetYears(int64PToInt32P(tfToInt64Pointer(planAttrValues["years"])))
	return tkh, diags
}

func tfObjectToTKHRSROProvisioningProvisioningManagementPermissionsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable
	tkh = keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["create_new_groups_allowed"]))+" using SetCreateNewGroupsAllowed")
	tkh.SetCreateNewGroupsAllowed(tfToBooleanPointer(planAttrValues["create_new_groups_allowed"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["create_service_accounts_allowed"]))+" using SetCreateServiceAccountsAllowed")
	tkh.SetCreateServiceAccountsAllowed(tfToBooleanPointer(planAttrValues["create_service_accounts_allowed"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["reuse_existing_groups_allowed"]))+" using SetReuseExistingGroupsAllowed")
	tkh.SetReuseExistingGroupsAllowed(tfToBooleanPointer(planAttrValues["reuse_existing_groups_allowed"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountable
	tkh = keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, planAttrValues["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystem")
		tkh.SetSystem(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, false, toObjectValue(planAttrValues["password"]), toObjectValue(configAttrValues["password"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPassword")
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPasswordRotation")
		tkh.SetPasswordRotation(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["ssh_public_key"]))+" using SetSshPublicKey")
	tkh.SetSshPublicKey(tfToStringPointer(planAttrValues["ssh_public_key"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, planAttrValues["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountable
	tkh = keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, recurse, toObjectValue(planAttrValues["system"]), toObjectValue(configAttrValues["system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystem")
		tkh.SetSystem(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["description"]))+" using SetDescription")
	tkh.SetDescription(tfToStringPointer(planAttrValues["description"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, false, toObjectValue(planAttrValues["password"]), toObjectValue(configAttrValues["password"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPassword")
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPasswordRotation")
		tkh.SetPasswordRotation(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["ssh_public_key"]))+" using SetSshPublicKey")
	tkh.SetSshPublicKey(tfToStringPointer(planAttrValues["ssh_public_key"]))
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["technical_administrator"]), toObjectValue(configAttrValues["technical_administrator"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTechnicalAdministrator")
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROServiceaccountServiceAccount_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountGroupRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["display_name"]))+" using SetDisplayName")
	tkh.SetDisplayName(tfToStringPointer(planAttrValues["display_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name_in_system"]))+" using SetNameInSystem")
	tkh.SetNameInSystem(tfToStringPointer(planAttrValues["name_in_system"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetProvisioningGroupOnSystemPrimerType")
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["short_name_in_system"]))+" using SetShortNameInSystem")
	tkh.SetShortNameInSystem(tfToStringPointer(planAttrValues["short_name_in_system"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROServiceaccountServiceAccountGroup_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountGroupLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHRSROServiceaccountServiceAccountGroupRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountGroup_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHRSROServiceaccountServiceAccountRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, planAttrValues["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystem")
		tkh.SetSystem(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, recurse, toObjectValue(planAttrValues["system"]), toObjectValue(configAttrValues["system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystem")
		tkh.SetSystem(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["items"]), toSetValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := findServiceaccountServiceAccountPrimerByUUID(ctx, planValue.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountPrimerLinkableWrapperWithCountRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapperWithCount()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToInt64Pointer(planAttrValues["count"]))+" using SetCount")
	tkh.SetCount(tfToInt64Pointer(planAttrValues["count"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := tfObjectToTKHRSROServiceaccountServiceAccountPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccountSupportedFeaturesRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccountSupportedFeaturesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccountSupportedFeaturesable
	tkh = keyhubmodel.NewServiceaccountServiceAccountSupportedFeatures()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["ssh_public_key"]))+" using SetSshPublicKey")
	tkh.SetSshPublicKey(tfToBooleanPointer(planAttrValues["ssh_public_key"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["groups"]), toItemsList(ctx, configAttrValues["groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroups")
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountSupportedFeaturesRO(ctx, recurse, toObjectValue(planAttrValues["supported_features"]), toObjectValue(configAttrValues["supported_features"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSupportedFeatures")
		tkh.SetSupportedFeatures(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROServiceaccountServiceAccount_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountGroupLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["groups"]), toItemsList(ctx, configAttrValues["groups"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroups")
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSROGeneratedSecretRO(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSROServiceaccountServiceAccountSupportedFeaturesRO(ctx, recurse, toObjectValue(planAttrValues["supported_features"]), toObjectValue(configAttrValues["supported_features"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSupportedFeatures")
		tkh.SetSupportedFeatures(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROVaultPasswordMetadataRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultPasswordMetadataable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultPasswordMetadataable
	tkh = keyhubmodel.NewVaultPasswordMetadata()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["dictionary"]))+" using SetDictionary")
	tkh.SetDictionary(tfToBooleanPointer(planAttrValues["dictionary"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["duplicate"]))+" using SetDuplicate")
	tkh.SetDuplicate(tfToBooleanPointer(planAttrValues["duplicate"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["hash"]))+" using SetHash")
	tkh.SetHash(tfToStringPointer(planAttrValues["hash"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["length"])))+" using SetLength")
	tkh.SetLength(int64PToInt32P(tfToInt64Pointer(planAttrValues["length"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["lower_count"])))+" using SetLowerCount")
	tkh.SetLowerCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["lower_count"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["number_count"])))+" using SetNumberCount")
	tkh.SetNumberCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["number_count"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["special_count"])))+" using SetSpecialCount")
	tkh.SetSpecialCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["special_count"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["strength"])))+" using SetStrength")
	tkh.SetStrength(int64PToInt32P(tfToInt64Pointer(planAttrValues["strength"])))
	tflog.Debug(ctx, "Setting "+litter.Sdump(int64PToInt32P(tfToInt64Pointer(planAttrValues["upper_count"])))+" using SetUpperCount")
	tkh.SetUpperCount(int64PToInt32P(tfToInt64Pointer(planAttrValues["upper_count"])))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultable
	tkh = keyhubmodel.NewVaultVault()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["access_available"]))+" using SetAccessAvailable")
	tkh.SetAccessAvailable(tfToBooleanPointer(planAttrValues["access_available"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["records"]), toListValue(configAttrValues["records"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHRSROVaultVaultRecordRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetRecords")
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultActivationStatusRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultActivationStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultActivationStatusable
	tkh = keyhubmodel.NewVaultVaultActivationStatus()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activated"]))+" using SetActivated")
	tkh.SetActivated(tfToBooleanPointer(planAttrValues["activated"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["activation_required"]))+" using SetActivationRequired")
	tkh.SetActivationRequired(tfToBooleanPointer(planAttrValues["activation_required"]))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetColor")
		tkh.SetColor(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToTimePointer(planAttrValues["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareEndTime")
		tkh.SetShareEndTime(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["additional_urls"]))+" using SetAdditionalURLs")
	tkh.SetAdditionalURLs(tfToStringPointer(planAttrValues["additional_urls"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["derived"]))+" using SetDerived")
	tkh.SetDerived(tfToBooleanPointer(planAttrValues["derived"]))
	{
		val, d := parsePointer2(planAttrValues["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetEndDate")
		tkh.SetEndDate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["filename"]))+" using SetFilename")
	tkh.SetFilename(tfToStringPointer(planAttrValues["filename"]))
	{
		val, d := tfToSliceSet(toSetValue(planAttrValues["types"]), toSetValue(configAttrValues["types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTypes")
		tkh.SetTypes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["url"]))+" using SetUrl")
	tkh.SetUrl(tfToStringPointer(planAttrValues["url"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["username"]))+" using SetUsername")
	tkh.SetUsername(tfToStringPointer(planAttrValues["username"]))
	{
		val, d := parseCastPointer(planAttrValues["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetWarningPeriod")
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSROVaultVaultRecord_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimer(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordPrimerable
	tkh = keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetColor")
		tkh.SetColor(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToTimePointer(planAttrValues["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareEndTime")
		tkh.SetShareEndTime(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordPrimerable
	tkh = keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetColor")
		tkh.SetColor(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfToTimePointer(planAttrValues["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareEndTime")
		tkh.SetShareEndTime(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordPrimerLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable
	tkh = keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordSecrets(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordSecretsable
	tkh = keyhubmodel.NewVaultVaultRecordSecrets()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["comment"]))+" using SetComment")
	tkh.SetComment(tfToStringPointer(planAttrValues["comment"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["file"]))+" using SetFile")
	tkh.SetFile(tfToStringPointer(planAttrValues["file"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["password"]))+" using SetPassword")
	tkh.SetPassword(tfToStringPointer(planAttrValues["password"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["totp"]))+" using SetTotp")
	tkh.SetTotp(tfToStringPointer(planAttrValues["totp"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(configAttrValues["totp_key"]))+" using SetTotpKey")
	tkh.SetTotpKey(tfToStringPointer(configAttrValues["totp_key"]))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordSecretsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordSecretsable
	tkh = keyhubmodel.NewVaultVaultRecordSecrets()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["comment"]))+" using SetComment")
	tkh.SetComment(tfToStringPointer(planAttrValues["comment"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["file"]))+" using SetFile")
	tkh.SetFile(tfToStringPointer(planAttrValues["file"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["password"]))+" using SetPassword")
	tkh.SetPassword(tfToStringPointer(planAttrValues["password"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["totp"]))+" using SetTotp")
	tkh.SetTotp(tfToStringPointer(planAttrValues["totp"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(configAttrValues["totp_key"]))+" using SetTotpKey")
	tkh.SetTotpKey(tfToStringPointer(configAttrValues["totp_key"]))
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordShareRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordShareable
	tkh = keyhubmodel.NewVaultVaultRecordShare()
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := parseCastPointer(planAttrValues["type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVaultVaultRecordShareType")
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecordShareSummaryRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecordShareSummaryable
	tkh = keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["children"]), toListValue(configAttrValues["children"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHRSROVaultVaultRecordShareRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetChildren")
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordShareRO(ctx, recurse, toObjectValue(planAttrValues["parent"]), toObjectValue(configAttrValues["parent"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetParent")
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecord_additionalObjectsable
	tkh = keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSROVaultVaultActivationStatusRO(ctx, recurse, toObjectValue(planAttrValues["activation_status"]), toObjectValue(configAttrValues["activation_status"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetActivationStatus")
		tkh.SetActivationStatus(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(configAttrValues["delete_tile"]))+" using SetDeleteTile")
	tkh.SetDeleteTile(tfToBooleanPointer(configAttrValues["delete_tile"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["parent"]), toObjectValue(configAttrValues["parent"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetParent")
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultPasswordMetadataRO(ctx, recurse, toObjectValue(planAttrValues["password_metadata"]), toObjectValue(configAttrValues["password_metadata"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPasswordMetadata")
		tkh.SetPasswordMetadata(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordSecrets(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordShareSummaryRO(ctx, recurse, toObjectValue(planAttrValues["share_summary"]), toObjectValue(configAttrValues["share_summary"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareSummary")
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["shares"]), toItemsList(ctx, configAttrValues["shares"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShares")
		tkh.SetShares(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, toObjectValue(planAttrValues["tile"]), toObjectValue(configAttrValues["tile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTile")
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHRSROLinkableRO(ctx, recurse, toObjectValue(planAttrValues["vaultholder"]), toObjectValue(configAttrValues["vaultholder"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVaultholder")
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROVaultVaultRecord_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.VaultVaultRecord_additionalObjectsable
	tkh = keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSROVaultVaultActivationStatusRO(ctx, recurse, toObjectValue(planAttrValues["activation_status"]), toObjectValue(configAttrValues["activation_status"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetActivationStatus")
		tkh.SetActivationStatus(val)
	}
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(configAttrValues["delete_tile"]))+" using SetDeleteTile")
	tkh.SetDeleteTile(tfToBooleanPointer(configAttrValues["delete_tile"]))
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerRO(ctx, recurse, toObjectValue(planAttrValues["parent"]), toObjectValue(configAttrValues["parent"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetParent")
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultPasswordMetadataRO(ctx, recurse, toObjectValue(planAttrValues["password_metadata"]), toObjectValue(configAttrValues["password_metadata"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPasswordMetadata")
		tkh.SetPasswordMetadata(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordSecretsRO(ctx, recurse, toObjectValue(planAttrValues["secret"]), toObjectValue(configAttrValues["secret"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSecret")
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordShareSummaryRO(ctx, recurse, toObjectValue(planAttrValues["share_summary"]), toObjectValue(configAttrValues["share_summary"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShareSummary")
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHRSROVaultVaultRecordPrimerLinkableWrapperRO(ctx, recurse, toItemsList(ctx, planAttrValues["shares"]), toItemsList(ctx, configAttrValues["shares"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetShares")
		tkh.SetShares(val)
	}
	{
		val, d := tfObjectToTKHRSROLaunchpadVaultRecordLaunchpadTileRO(ctx, recurse, toObjectValue(planAttrValues["tile"]), toObjectValue(configAttrValues["tile"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTile")
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHRSROLinkableRO(ctx, recurse, toObjectValue(planAttrValues["vaultholder"]), toObjectValue(configAttrValues["vaultholder"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetVaultholder")
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROWebhookWebhookRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.WebhookWebhookable
	tkh = keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["links"]), toListValue(configAttrValues["links"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRORestLinkRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetLinks")
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["permissions"]), toListValue(configAttrValues["permissions"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSROAuthPermissionRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetPermissions")
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSROAuthAccountPrimerRO(ctx, false, toObjectValue(planAttrValues["account"]), toObjectValue(configAttrValues["account"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAccount")
		tkh.SetAccount(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["active"]))+" using SetActive")
	tkh.SetActive(tfToBooleanPointer(planAttrValues["active"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["all_types"]))+" using SetAllTypes")
	tkh.SetAllTypes(tfToBooleanPointer(planAttrValues["all_types"]))
	{
		val, d := parseCastPointer(planAttrValues["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAuthenticationScheme")
		tkh.SetAuthenticationScheme(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["basic_auth_password"]))+" using SetBasicAuthPassword")
	tkh.SetBasicAuthPassword(tfToStringPointer(planAttrValues["basic_auth_password"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["basic_auth_username"]))+" using SetBasicAuthUsername")
	tkh.SetBasicAuthUsername(tfToStringPointer(planAttrValues["basic_auth_username"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["bearer_token"]))+" using SetBearerToken")
	tkh.SetBearerToken(tfToStringPointer(planAttrValues["bearer_token"]))
	{
		val, d := tfObjectToTKHRSROClientClientApplicationPrimerRO(ctx, false, toObjectValue(planAttrValues["client"]), toObjectValue(configAttrValues["client"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClient")
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, false, toObjectValue(planAttrValues["client_certificate"]), toObjectValue(configAttrValues["client_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetClientCertificate")
		tkh.SetClientCertificate(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["custom_header_name"]))+" using SetCustomHeaderName")
	tkh.SetCustomHeaderName(tfToStringPointer(planAttrValues["custom_header_name"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["custom_header_value"]))+" using SetCustomHeaderValue")
	tkh.SetCustomHeaderValue(tfToStringPointer(planAttrValues["custom_header_value"]))
	{
		val, d := tfObjectToTKHRSRODirectoryAccountDirectoryPrimerRO(ctx, false, toObjectValue(planAttrValues["directory"]), toObjectValue(configAttrValues["directory"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetDirectory")
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHRSROGroupGroupPrimerRO(ctx, false, toObjectValue(planAttrValues["group"]), toObjectValue(configAttrValues["group"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetGroup")
		tkh.SetGroup(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["name"]))+" using SetName")
	tkh.SetName(tfToStringPointer(planAttrValues["name"]))
	{
		val, d := tfObjectToTKHRSROProvisioningProvisionedSystemPrimerRO(ctx, false, toObjectValue(planAttrValues["system"]), toObjectValue(configAttrValues["system"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetSystem")
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(planAttrValues["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTls")
		tkh.SetTls(val)
	}
	{
		val, d := tfObjectToTKHRSROCertificateCertificatePrimerRO(ctx, false, toObjectValue(planAttrValues["trusted_certificate"]), toObjectValue(configAttrValues["trusted_certificate"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTrustedCertificate")
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["types"]), toListValue(configAttrValues["types"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(planValue.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetTypes")
		tkh.SetTypes(val)
	}
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["url"]))+" using SetUrl")
	tkh.SetUrl(tfToStringPointer(planAttrValues["url"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToStringPointer(planAttrValues["uuid"]))+" using SetUuid")
	tkh.SetUuid(tfToStringPointer(planAttrValues["uuid"]))
	tflog.Debug(ctx, "Setting "+litter.Sdump(tfToBooleanPointer(planAttrValues["verbose_payloads"]))+" using SetVerbosePayloads")
	tkh.SetVerbosePayloads(tfToBooleanPointer(planAttrValues["verbose_payloads"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSROWebhookWebhook_additionalObjectsRO(ctx, false, planValues, configValues)
			diags.Append(d...)
			tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAdditionalObjects")
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSROWebhookWebhookLinkableWrapperRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.WebhookWebhookLinkableWrapperable
	tkh = keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSliceListBinary(toListValue(planAttrValues["items"]), toListValue(configAttrValues["items"]), func(planValue attr.Value, configValue attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHRSROWebhookWebhookRO(ctx, recurse, toObjectValue(planValue), toObjectValue(configValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetItems")
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSROWebhookWebhook_additionalObjectsRO(ctx context.Context, recurse bool, planValues types.Object, configValues types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	var missingPlanValues = planValues.IsNull() || planValues.IsUnknown()
	var missingConfigValues = configValues.IsNull() || configValues.IsUnknown()
	if missingPlanValues && missingConfigValues {
		return nil, diags
	}
	planAttrValues := make(map[string]attr.Value)
	if !missingPlanValues {
		planAttrValues = planValues.Attributes()
	}
	configAttrValues := make(map[string]attr.Value)
	if !missingConfigValues {
		configAttrValues = configValues.Attributes()
	}

	// avoids the "declared but not used" compiler errors since we don't know beforehand which one we need
	_, _ = planAttrValues, configAttrValues
	litter.Config.HidePrivateFields = false
	tflog.Trace(ctx, "planAttrValues: "+litter.Sdump(planAttrValues))
	tflog.Trace(ctx, "configAttrValues: "+litter.Sdump(configAttrValues))
	var tkh keyhubmodel.WebhookWebhook_additionalObjectsable
	tkh = keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHRSROAuditInfoRO(ctx, recurse, toObjectValue(planAttrValues["audit"]), toObjectValue(configAttrValues["audit"]))
		diags.Append(d...)
		tflog.Debug(ctx, "Setting "+litter.Sdump(val)+" using SetAudit")
		tkh.SetAudit(val)
	}
	return tkh, diags
}
