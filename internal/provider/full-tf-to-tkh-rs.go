// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"context"
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/microsoft/kiota-abstractions-go/serialization"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tfObjectToTKHRSAuditInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditInfoable
	tkh = keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	tkh.SetLastModifiedBy(objAttrs["last_modified_by"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSErrorReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ErrorReportable
	tkh = keyhubmodel.NewErrorReport()
	tkh.SetApplicationError(objAttrs["application_error"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSErrorReport_applicationErrorParameters(ctx, recurse, objAttrs["application_error_parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetApplicationErrorParameters(val)
	}
	tkh.SetCode(int64PToInt32P(objAttrs["code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["error_details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetErrorDetails(val)
	}
	tkh.SetException(objAttrs["exception"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMessage(objAttrs["message"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["stacktrace"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetStacktrace(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSErrorReport_applicationErrorParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ErrorReport_applicationErrorParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ErrorReport_applicationErrorParametersable
	tkh = keyhubmodel.NewErrorReport_applicationErrorParameters()
	return tkh, diags
}

func tfObjectToTKHRSGeneratedSecret(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GeneratedSecretable
	tkh = keyhubmodel.NewGeneratedSecret()
	tkh.SetGeneratedSecret(objAttrs["generated_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOldSecret(objAttrs["old_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRegenerate(objAttrs["regenerate"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.Linkableable
	tkh = keyhubmodel.NewLinkable()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNonLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NonLinkableable
	tkh = keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHRSRestLink(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RestLinkable
	tkh = keyhubmodel.NewRestLink()
	tkh.SetHref(objAttrs["href"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetId(objAttrs["id"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetRel(objAttrs["rel"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSSegmentCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SegmentCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.SegmentCountable
	tkh = keyhubmodel.NewSegmentCount()
	tkh.SetCount(objAttrs["count"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAccountVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditAuditRecordable
	tkh = keyhubmodel.NewAuditAuditRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetAuditAuditRecordType(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["date_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDateTime(val)
	}
	tkh.SetOnAccount(objAttrs["on_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnCertificate(objAttrs["on_certificate"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnClient(objAttrs["on_client"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnDirectory(objAttrs["on_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup(objAttrs["on_group"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroup2(objAttrs["on_group2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnGroupClassification(objAttrs["on_group_classification"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnOrganizationalUnit(objAttrs["on_organizational_unit"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnServiceAccount(objAttrs["on_service_account"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnSystem(objAttrs["on_system"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnVaultRecord(objAttrs["on_vault_record"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetOnWebhook(objAttrs["on_webhook"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPerformedBy(objAttrs["performed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSAuditAuditRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditAuditRecordLinkableWrapperable
	tkh = keyhubmodel.NewAuditAuditRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordable {
			tkh, d := tfObjectToTKHRSAuditAuditRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditAuditRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditAuditRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditAuditRecord_additionalObjectsable
	tkh = keyhubmodel.NewAuditAuditRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountable
	tkh = keyhubmodel.NewAuthAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDirectoryPasswordChangeRequired(objAttrs["directory_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetDirectoryRotatingPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetEmail(objAttrs["email"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdInDirectory(objAttrs["id_in_directory"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetKeyHubPasswordChangeRequired(objAttrs["key_hub_password_change_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTokenPasswordEnabled(objAttrs["token_password_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetValidInDirectory(objAttrs["valid_in_directory"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSAuthAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountBulkUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountBulkUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountBulkUpdateable
	tkh = keyhubmodel.NewAuthAccountBulkUpdate()
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountBulkUpdateAction, func(val any) keyhubmodel.AuthAccountBulkUpdateAction {
			return *val.(*keyhubmodel.AuthAccountBulkUpdateAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetExclusiveSelection(objAttrs["exclusive_selection"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["selected_accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int64 {
			return val.(basetypes.Int64Value).ValueInt64()
		})
		diags.Append(d...)
		tkh.SetSelectedAccounts(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountChangeLocale(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountChangeLocaleable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountChangeLocaleable
	tkh = keyhubmodel.NewAuthAccountChangeLocale()
	tkh.SetLocale(objAttrs["locale"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountLinkableWrapperable
	tkh = keyhubmodel.NewAuthAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthAccountable {
			tkh, d := tfObjectToTKHRSAuthAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountPrimerable
	tkh = keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountRecoveryStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountRecoveryStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountRecoveryStatusable
	tkh = keyhubmodel.NewAuthAccountRecoveryStatus()
	tkh.SetPending2FARecoveryRequest(objAttrs["pending2fa_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetPendingPasswordRecoveryRequest(objAttrs["pending_password_recovery_request"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountSettings(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountSettingsable
	tkh = keyhubmodel.NewAuthAccountSettings()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["default_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDefaultOrganizationalUnit(val)
	}
	tkh.SetDirectoryName(objAttrs["directory_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["directory_type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryType(val)
	}
	tkh.SetInGroups(objAttrs["in_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetInMultipleOrganizationalUnits(objAttrs["in_multiple_organizational_units"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetKeyHubAdmin(objAttrs["key_hub_admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetMultipleOrganizationalUnitsExist(objAttrs["multiple_organizational_units_exist"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["password_mode"].(basetypes.StringValue), keyhubmodel.ParseAuthPasswordMode, func(val any) keyhubmodel.AuthPasswordMode { return *val.(*keyhubmodel.AuthPasswordMode) })
		diags.Append(d...)
		tkh.SetPasswordMode(val)
	}
	tkh.SetSshPublicKey(objAttrs["ssh_public_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["two_factor_authentication"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorAuthentication(val)
	}
	tkh.SetUseTokenPassword(objAttrs["use_token_password"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_status"].(basetypes.StringValue), keyhubmodel.ParseVaultAccountVaultStatus, func(val any) keyhubmodel.VaultAccountVaultStatus { return *val.(*keyhubmodel.VaultAccountVaultStatus) })
		diags.Append(d...)
		tkh.SetVaultStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountStatusable
	tkh = keyhubmodel.NewAuthAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCanRequestGroups(objAttrs["can_request_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDeclineRecoveryRequests(objAttrs["decline_recovery_requests"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["license_role"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountLicenseRole, func(val any) keyhubmodel.AuthAccountLicenseRole { return *val.(*keyhubmodel.AuthAccountLicenseRole) })
		diags.Append(d...)
		tkh.SetLicenseRole(val)
	}
	tkh.SetReregistrationRequired(objAttrs["reregistration_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetTwoFactorAuthenticationEnabled(objAttrs["two_factor_authentication_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccount_additionalObjectsable
	tkh = keyhubmodel.NewAuthAccount_additionalObjects()
	tkh.SetActiveLogin(objAttrs["active_login"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupAccountGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuthAccountRecoveryStatus(ctx, recurse, objAttrs["pending_recovery_requests"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPendingRecoveryRequests(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountSettings(ctx, recurse, objAttrs["settings"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSettings(val)
	}
	{
		val, d := tfObjectToTKHRSAuthStoredAccountAttributes(ctx, recurse, objAttrs["stored_attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStoredAttributes(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountsAuditStatsable
	tkh = keyhubmodel.NewAuthAccountsAuditStats()
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_directoryStats(ctx, recurse, objAttrs["directory_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectoryStats(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_twoFAStats(ctx, recurse, objAttrs["two_fa_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTwoFAStats(val)
	}
	{
		val, d := tfObjectToTKHRSAuthAccountsAuditStats_validityStats(ctx, recurse, objAttrs["validity_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetValidityStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_directoryStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_directoryStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.AuthAccountsAuditStats_directoryStatsable
	tkh = keyhubmodel.NewAuthAccountsAuditStats_directoryStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_twoFAStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_twoFAStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.AuthAccountsAuditStats_twoFAStatsable
	tkh = keyhubmodel.NewAuthAccountsAuditStats_twoFAStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountsAuditStats_validityStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountsAuditStats_validityStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.AuthAccountsAuditStats_validityStatsable
	tkh = keyhubmodel.NewAuthAccountsAuditStats_validityStats()
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthInternalAccountable
	tkh = keyhubmodel.NewAuthInternalAccount()
	{
		val, d := findAuthAccountByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.AuthInternalAccount)).AuthAccount = *(val.(*keyhubmodel.AuthAccount))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetActivationCode(objAttrs["activation_code"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["activation_deadline"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetActivationDeadline(val)
	}
	tkh.SetCompany(objAttrs["company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFirstName(objAttrs["first_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLastName(objAttrs["last_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetTelephone(objAttrs["telephone"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthInternalAccountLinkableWrapperable
	tkh = keyhubmodel.NewAuthInternalAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthInternalAccountable {
			tkh, d := tfObjectToTKHRSAuthInternalAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthInternalAccountStatusObject(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountStatusObjectable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthInternalAccountStatusObjectable
	tkh = keyhubmodel.NewAuthInternalAccountStatusObject()
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthMoveInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthMoveInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthMoveInternalAccountable
	tkh = keyhubmodel.NewAuthMoveInternalAccount()
	{
		val, d := tfObjectToTKHRSDirectoryInternalDirectory(ctx, recurse, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInternalDirectory(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthPermissionable
	tkh = keyhubmodel.NewAuthPermission()
	tkh.SetFull(objAttrs["full"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["instances"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSlice(objAttrs["operations"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetOperations(val)
	}
	tkh.SetTypeEscaped(objAttrs["type_escaped"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthStoredAccountAttribute(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributeable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthStoredAccountAttributeable
	tkh = keyhubmodel.NewAuthStoredAccountAttribute()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSAuthStoredAccountAttributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthStoredAccountAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthStoredAccountAttributesable
	tkh = keyhubmodel.NewAuthStoredAccountAttributes()
	{
		val, d := tfToSlice(objAttrs["attributes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthStoredAccountAttributeable {
			tkh, d := tfObjectToTKHRSAuthStoredAccountAttribute(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificateable
	tkh = keyhubmodel.NewCertificateCertificate()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["key_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetKeyData(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSCertificateCertificate_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificateLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificateLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificateLinkableWrapperable
	tkh = keyhubmodel.NewCertificateCertificateLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.CertificateCertificateable {
			tkh, d := tfObjectToTKHRSCertificateCertificate(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificatePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificatePrimerable
	tkh = keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(objAttrs["alias"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfToSlice(objAttrs["certificate_data"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(objAttrs["fingerprint_sha1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFingerprintSha256(objAttrs["fingerprint_sha256"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGlobal(objAttrs["global"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSubjectDN(objAttrs["subject_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificate_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificate_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificate_additionalObjectsable
	tkh = keyhubmodel.NewCertificateCertificate_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientApplicationVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationable
	tkh = keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if !objAttrs["o_auth2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, false, objAttrs["o_auth2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientOAuth2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["saml2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientSaml2Client(ctx, false, objAttrs["saml2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientSaml2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["ldap_client"].IsNull() {
		val, d := tfObjectToTKHRSClientLdapClient(ctx, false, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientLdapClient)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationLinkableWrapperable
	tkh = keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHRSClientClientApplication(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationPrimerable
	tkh = keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(objAttrs["sso_application"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplication_additionalObjectsable
	tkh = keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(objAttrs["delete_tile"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groupclients"]))
		diags.Append(d...)
		tkh.SetGroupclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "launchpad.SsoApplicationLaunchpadTile"})
		}
	}
	tkh.SetVaultRecordCount(int64PToInt32P(objAttrs["vault_record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSClientLdapClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientLdapClientable
	tkh = keyhubmodel.NewClientLdapClient()
	tkh.SetBindDn(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetUsedForProvisioning(objAttrs["used_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2Clientable
	tkh = keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSlice(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2Client_attributes(ctx, recurse, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetCallbackURI(objAttrs["callback_uri"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetConfidential(objAttrs["confidential"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDebugMode(objAttrs["debug_mode"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetIdTokenClaims(objAttrs["id_token_claims"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetInitiateLoginURI(objAttrs["initiate_login_uri"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResourceURIs(objAttrs["resource_uris"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetShareSecretInVault(objAttrs["share_secret_in_vault"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetShowLandingPage(objAttrs["show_landing_page"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetUseClientCredentials(objAttrs["use_client_credentials"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, false, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ClientOAuth2Client_attributesable
	tkh = keyhubmodel.NewClientOAuth2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientSaml2Clientable
	tkh = keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfObjectToTKHRSClientSaml2Client_attributes(ctx, recurse, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetMetadata(objAttrs["metadata"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMetadataUrl(objAttrs["metadata_url"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tkh.SetSubjectFormat(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Client_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ClientSaml2Client_attributesable
	tkh = keyhubmodel.NewClientSaml2Client_attributes()
	return tkh, diags
}

func tfObjectToTKHRSDeletedVaultHolderVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryable
	tkh = keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(objAttrs["default_directory"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(objAttrs["restrict2fa"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	if !objAttrs["maintenance_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryMaintenanceDirectory(ctx, false, objAttrs["maintenance_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryMaintenanceDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["o_id_c_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryOIDCDirectory(ctx, false, objAttrs["o_id_c_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryOIDCDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["internal_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryInternalDirectory(ctx, false, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryInternalDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["l_d_a_p_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryLDAPDirectory(ctx, false, objAttrs["l_d_a_p_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryLDAPDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectory(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryPrimerable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(objAttrs["account_validity_supported"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tkh.SetAccounts(objAttrs["accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetReason(objAttrs["reason"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetUsernameCustomizable(objAttrs["username_customizable"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable
	tkh = keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryInternalDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryInternalDirectoryable
	tkh = keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryLDAPDirectoryable
	tkh = keyhubmodel.NewDirectoryLDAPDirectory()
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBaseDN(objAttrs["base_dn"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tkh.SetDialect(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tkh.SetPasswordRecovery(val)
	}
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSearchBindDN(objAttrs["search_bind_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchBindPassword(objAttrs["search_bind_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSearchFilter(objAttrs["search_filter"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryMaintenanceDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryMaintenanceDirectoryable
	tkh = keyhubmodel.NewDirectoryMaintenanceDirectory()
	return tkh, diags
}

func tfObjectToTKHRSDirectoryOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryOIDCDirectoryable
	tkh = keyhubmodel.NewDirectoryOIDCDirectory()
	tkh.SetAcrValues(objAttrs["acr_values"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAttributesToStore(objAttrs["attributes_to_store"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDomainRestriction(objAttrs["domain_restriction"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetEnforces2fa(objAttrs["enforces2fa"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetFullyResolvedIssuer(objAttrs["fully_resolved_issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIssuer(objAttrs["issuer"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLogoutUrl(objAttrs["logout_url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSendLoginHint(objAttrs["send_login_hint"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroupable
	tkh = keyhubmodel.NewGroupAccountGroup()
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupAccountGroup)).GroupGroupPrimer = *(val.(*keyhubmodel.GroupGroupPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, false, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupAccountGroupable {
			tkh, d := tfObjectToTKHRSGroupAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAuthorizedGroupsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAuthorizedGroupsWrapperable
	tkh = keyhubmodel.NewGroupAuthorizedGroupsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetGroupCount(objAttrs["group_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupable
	tkh = keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetApplicationAdministration(objAttrs["application_administration"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSGroupGroupAuditConfig(ctx, false, objAttrs["audit_config"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuditConfig(val)
	}
	tkh.SetAuditRequested(objAttrs["audit_requested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuditor(objAttrs["auditor"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_auditing_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_delegation_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_membership_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_provisioning_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSlice(objAttrs["authorizing_group_types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, objAttrs["classification_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClassification(val)
	}
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tkh.SetExtendedAccess(val)
	}
	tkh.SetHideAuditTrail(objAttrs["hide_audit_trail"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["nested_under_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetNestedUnder(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetPrivateGroup(objAttrs["private_group"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRecordTrail(objAttrs["record_trail"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSingleManaged(objAttrs["single_managed"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tkh.SetVaultRecovery(val)
	}
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupGroupAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountNesting(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountNestingable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountNestingable
	tkh = keyhubmodel.NewGroupGroupAccountNesting()
	tkh.SetConnected(objAttrs["connected"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountStatusable
	tkh = keyhubmodel.NewGroupGroupAccountStatus()
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccount_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAdminMail(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAdminMailable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAdminMailable
	tkh = keyhubmodel.NewGroupGroupAdminMail()
	tkh.SetBody(objAttrs["body"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditable
	tkh = keyhubmodel.NewGroupGroupAudit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameOnAudit(objAttrs["name_on_audit"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(objAttrs["reviewed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupAuditStatus, func(val any) keyhubmodel.GroupGroupAuditStatus { return *val.(*keyhubmodel.GroupGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(objAttrs["submitted_by"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAudit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditAccountable
	tkh = keyhubmodel.NewGroupGroupAuditAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountUuid(objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountValid(objAttrs["account_valid"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditConfig(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditConfigable
	tkh = keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAuditLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditable {
			tkh, d := tfObjectToTKHRSGroupGroupAudit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAudit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAudit_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditingInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditingInfoable
	tkh = keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(objAttrs["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastAuditDate(val)
	}
	tkh.SetNrAccounts(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledAccounts(objAttrs["nr_disabled_accounts"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrDisabledManagers(objAttrs["nr_disabled_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrExpiredVaultRecords(objAttrs["nr_expired_vault_records"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrManagers(objAttrs["nr_managers"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNrVaultRecordsWithEndDate(objAttrs["nr_vault_records_with_end_date"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationable
	tkh = keyhubmodel.NewGroupGroupClassification()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAuthorizingGroupAuditingRequired(objAttrs["authorizing_group_auditing_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupDelegationRequired(objAttrs["authorizing_group_delegation_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupMembershipRequired(objAttrs["authorizing_group_membership_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAuthorizingGroupProvisioningRequired(objAttrs["authorizing_group_provisioning_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDefaultClassification(objAttrs["default_classification"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetMaximumAuditInterval(int64PToInt32P(objAttrs["maximum_audit_interval"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetMinimumNrManagers(int64PToInt32P(objAttrs["minimum_nr_managers"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetRecordTrailRequired(objAttrs["record_trail_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToSlice(objAttrs["required_months"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRequiredMonths(val)
	}
	tkh.SetRotatingPasswordRequired(objAttrs["rotating_password_required"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetVaultRequiresActivation(objAttrs["vault_requires_activation"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClassification_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationInfoable
	tkh = keyhubmodel.NewGroupGroupClassificationInfo()
	tkh.SetNrGroups(int64PToInt32P(objAttrs["nr_groups"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupClassificationLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHRSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationPrimerable
	tkh = keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationUpdate(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationUpdateable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationUpdateable
	tkh = keyhubmodel.NewGroupGroupClassificationUpdate()
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, objAttrs["classificaton_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClassificaton(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassification_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassification_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassification_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClassification_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupClassificationInfo(ctx, recurse, objAttrs["info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientable
	tkh = keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSGroupGroupClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClient_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupFolderable
	tkh = keyhubmodel.NewGroupGroupFolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupFolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupFolderLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupFolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupFolderable {
			tkh, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupFolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupFolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupFolder_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupFolder_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupInfoable
	tkh = keyhubmodel.NewGroupGroupInfo()
	tkh.SetNrAccounts(int64PToInt32P(objAttrs["nr_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAccountsWithVault(int64PToInt32P(objAttrs["nr_accounts_with_vault"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrAudits(int64PToInt32P(objAttrs["nr_audits"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrClients(int64PToInt32P(objAttrs["nr_clients"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrProvisionedSystems(int64PToInt32P(objAttrs["nr_provisioned_systems"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNrVaultRecords(int64PToInt32P(objAttrs["nr_vault_records"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerable
	tkh = keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(objAttrs["admin"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := findGroupGroupPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupSegmentedLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupSegmentedLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupSegmentedLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupSegmentedLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	{
		val, d := tfToSlice(objAttrs["segments"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.SegmentCountable {
			tkh, d := tfObjectToTKHRSSegmentCount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSegments(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["accounts"]))
		diags.Append(d...)
		tkh.SetAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_clients"]))
		diags.Append(d...)
		tkh.SetAdministeredClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_systems"]))
		diags.Append(d...)
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["admins"]))
		diags.Append(d...)
		tkh.SetAdmins(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx, recurse, objAttrs["authorized_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "group.AuthorizedGroupsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["client_permissions"]))
		diags.Append(d...)
		tkh.SetClientPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["clients"]))
		diags.Append(d...)
		tkh.SetClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["content_administered_systems"]))
		diags.Append(d...)
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAuditingInfo(ctx, recurse, objAttrs["groupauditinginfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupInfo(ctx, recurse, objAttrs["groupinfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["helpdesk"]))
		diags.Append(d...)
		tkh.SetHelpdesk(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["myaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["mydelegatedaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["nested_groups"]))
		diags.Append(d...)
		tkh.SetNestedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_clients"]))
		diags.Append(d...)
		tkh.SetOwnedClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_directories"]))
		diags.Append(d...)
		tkh.SetOwnedDirectories(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx, recurse, objAttrs["owned_groups_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedGroupsOnSystem(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "provisioning.OwnedGroupOnSystemsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_organizational_units"]))
		diags.Append(d...)
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_systems"]))
		diags.Append(d...)
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAuditLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["recent_audits"]))
		diags.Append(d...)
		tkh.SetRecentAudits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := parseCastPointer(objAttrs["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["webhooks"]))
		diags.Append(d...)
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupsAuditStatsable
	tkh = keyhubmodel.NewGroupGroupsAuditStats()
	tkh.SetAuditedGroups(objAttrs["audited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfToSlice(objAttrs["classifications"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClassificationable {
			tkh, d := tfObjectToTKHRSGroupGroupClassification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetClassifications(val)
	}
	tkh.SetOverdueAuditGroups(objAttrs["overdue_audit_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetOverdueVaultPolicies(objAttrs["overdue_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetUnauditedGroups(objAttrs["unaudited_groups"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetValidVaultPolicies(objAttrs["valid_vault_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetVaultsWithoutPolicies(objAttrs["vaults_without_policies"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupable
	tkh = keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadDisplayedLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadDisplayedLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadDisplayedLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadLaunchpadTilePrimer(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadDisplayedLaunchpadTiles(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadDisplayedLaunchpadTilesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadDisplayedLaunchpadTilesable
	tkh = keyhubmodel.NewLaunchpadDisplayedLaunchpadTiles()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadDisplayedLaunchpadTileable {
			tkh, d := tfObjectToTKHRSLaunchpadDisplayedLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadLaunchpadTile()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetIdenticonCode(int64PToInt32P(objAttrs["identicon_code"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["launchpad_launchpad_tile_type"].(basetypes.StringValue), keyhubmodel.ParseLaunchpadLaunchpadTileType, func(val any) keyhubmodel.LaunchpadLaunchpadTileType {
			return *val.(*keyhubmodel.LaunchpadLaunchpadTileType)
		})
		diags.Append(d...)
		tkh.SetLaunchpadLaunchpadTileType(val)
	}
	{
		val, d := tfToSlice(objAttrs["logo"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetLogo(val)
	}
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["vault_record_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	if !objAttrs["vault_record_launchpad_tile"].IsNull() {
		val, d := tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx, false, objAttrs["vault_record_launchpad_tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.LaunchpadVaultRecordLaunchpadTile)).LaunchpadLaunchpadTile = *tkh.(*keyhubmodel.LaunchpadLaunchpadTile)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["sso_application_launchpad_tile"].IsNull() {
		val, d := tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx, false, objAttrs["sso_application_launchpad_tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.LaunchpadSsoApplicationLaunchpadTile)).LaunchpadLaunchpadTile = *tkh.(*keyhubmodel.LaunchpadLaunchpadTile)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["manual_launchpad_tile"].IsNull() {
		val, d := tfObjectToTKHRSLaunchpadManualLaunchpadTile(ctx, false, objAttrs["manual_launchpad_tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.LaunchpadManualLaunchpadTile)).LaunchpadLaunchpadTile = *tkh.(*keyhubmodel.LaunchpadLaunchpadTile)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTileLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadLaunchpadTileLinkableWrapperable
	tkh = keyhubmodel.NewLaunchpadLaunchpadTileLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LaunchpadLaunchpadTileable {
			tkh, d := tfObjectToTKHRSLaunchpadLaunchpadTile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTilePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadLaunchpadTilePrimerable
	tkh = keyhubmodel.NewLaunchpadLaunchpadTilePrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadLaunchpadTile_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadLaunchpadTile_additionalObjectsable
	tkh = keyhubmodel.NewLaunchpadLaunchpadTile_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadManualLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadManualLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadManualLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadManualLaunchpadTile()
	tkh.SetTitle(objAttrs["title"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	tkh.SetUri(objAttrs["uri"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	return tkh, diags
}

func tfObjectToTKHRSLicenseKeyHubLicenseInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LicenseKeyHubLicenseInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LicenseKeyHubLicenseInfoable
	tkh = keyhubmodel.NewLicenseKeyHubLicenseInfo()
	{
		val, d := parseCastPointer(objAttrs["current_license_status"].(basetypes.StringValue), keyhubmodel.ParseLicenseKeyHubLicenseInfoLicenseStatus, func(val any) keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus {
			return *val.(*keyhubmodel.LicenseKeyHubLicenseInfoLicenseStatus)
		})
		diags.Append(d...)
		tkh.SetCurrentLicenseStatus(val)
	}
	tkh.SetCustomerCompany(objAttrs["customer_company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomerContact(objAttrs["customer_contact"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["customer_domains"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetCustomerDomains(val)
	}
	{
		val, d := tfToSlice(objAttrs["details"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetDetails(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpirationTime(val)
	}
	{
		val, d := tfToSlice(objAttrs["features"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.LicenseLicenseFeature {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseLicenseLicenseFeature, func(val any) keyhubmodel.LicenseLicenseFeature { return *val.(*keyhubmodel.LicenseLicenseFeature) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetFeatures(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["issue_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetIssueTime(val)
	}
	tkh.SetKeyHubDomain(objAttrs["key_hub_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLicenseKey(objAttrs["license_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["not_before_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetNotBeforeTime(val)
	}
	tkh.SetUsersHardLimit(int64PToInt32P(objAttrs["users_hard_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersProLimit(int64PToInt32P(objAttrs["users_pro_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUsersSoftLimit(int64PToInt32P(objAttrs["users_soft_limit"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVersion(int64PToInt32P(objAttrs["version"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarker(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkerable
	tkh = keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(objAttrs["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarker_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarker_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarker_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.MarkItemMarker_parametersable
	tkh = keyhubmodel.NewMarkItemMarker_parameters()
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarkers(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkersable
	tkh = keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSlice(objAttrs["markers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHRSMarkItemMarker(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedAuthInternalAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthInternalAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthInternalAccountable
	tkh = keyhubmodel.NewAuthInternalAccount()
	{
		val, d := findAuthAccountByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.AuthInternalAccount)).AuthAccount = *(val.(*keyhubmodel.AuthAccount))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetActivationCode(objAttrs["activation_code"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["activation_deadline"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetActivationDeadline(val)
	}
	tkh.SetCompany(objAttrs["company"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFirstName(objAttrs["first_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLastName(objAttrs["last_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuthInternalAccountStatus, func(val any) keyhubmodel.AuthInternalAccountStatus {
			return *val.(*keyhubmodel.AuthInternalAccountStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetTelephone(objAttrs["telephone"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSNestedClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedGroupAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAccountGroupable
	tkh = keyhubmodel.NewGroupAccountGroup()
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupAccountGroup)).GroupGroupPrimer = *(val.(*keyhubmodel.GroupGroupPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, false, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupGroupAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(objAttrs["disconnected_nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(objAttrs["nested"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(objAttrs["visible_for_provisioning"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedGroupGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditable
	tkh = keyhubmodel.NewGroupGroupAudit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSlice(objAttrs["accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAuditAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(objAttrs["created_by"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameOnAudit(objAttrs["name_on_audit"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(objAttrs["reviewed_by"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupAuditStatus, func(val any) keyhubmodel.GroupGroupAuditStatus { return *val.(*keyhubmodel.GroupGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(objAttrs["submitted_by"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAudit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedOrganizationAccountOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationAccountOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationAccountOrganizationalUnit()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationAccountOrganizationalUnit)).OrganizationOrganizationalUnitPrimer = *(val.(*keyhubmodel.OrganizationOrganizationalUnitPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationAccountOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedOrganizationOrganizationalUnitAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitAccountable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationOrganizationalUnitAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnitAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccountable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProvisioningProvisionedAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetUid(objAttrs["uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedProvisioningProvisionedSystemSyncLog(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemSyncLog()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetErrors(int64PToInt32P(objAttrs["errors"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLog(objAttrs["log"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetModifications(int64PToInt32P(objAttrs["modifications"].(basetypes.Int64Value).ValueInt64Pointer()))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedWebhookWebhookDelivery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookDeliveryable
	tkh = keyhubmodel.NewWebhookWebhookDelivery()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookPush(ctx, false, objAttrs["payload"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPayload(val)
	}
	tkh.SetReponseHeaders(objAttrs["reponse_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRequestHeaders(objAttrs["request_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResponse(objAttrs["response"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetStatus(int64PToInt32P(objAttrs["status"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetTime(int64PToInt32P(objAttrs["time"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToTimePointer(objAttrs["trigger_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTriggerTime(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhookDelivery_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationCertificateExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationCertificateExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationCertificateExpiredNotificationable
	tkh = keyhubmodel.NewNotificationCertificateExpiredNotification()
	{
		val, d := tfObjectToTKHRSCertificateCertificate(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryLDAPDirectory(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	{
		val, d := tfObjectToTKHRSClientLdapClient(ctx, recurse, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLdapClient(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystem(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["usage"].(basetypes.StringValue), keyhubmodel.ParseNotificationCertificateUsage, func(val any) keyhubmodel.NotificationCertificateUsage {
			return *val.(*keyhubmodel.NotificationCertificateUsage)
		})
		diags.Append(d...)
		tkh.SetUsage(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhook(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupAuditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupAuditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationGroupAuditRequiredNotificationable
	tkh = keyhubmodel.NewNotificationGroupAuditRequiredNotification()
	{
		val, d := tfToTimePointer(objAttrs["due_date"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDueDate(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := parseCastPointer(objAttrs["notification_group_audit_required_notification_type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRequiredSourceType, func(val any) keyhubmodel.AuditAuditRequiredSourceType {
			return *val.(*keyhubmodel.AuditAuditRequiredSourceType)
		})
		diags.Append(d...)
		tkh.SetNotificationGroupAuditRequiredNotificationType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupEditRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationGroupEditRequiredNotificationable
	tkh = keyhubmodel.NewNotificationGroupEditRequiredNotification()
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSNotificationGroupEditRequiredNotification_parameters(ctx, recurse, objAttrs["parameters"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	{
		val, d := parseCastPointer(objAttrs["reason"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupEditRequiredReason, func(val any) keyhubmodel.GroupGroupEditRequiredReason {
			return *val.(*keyhubmodel.GroupGroupEditRequiredReason)
		})
		diags.Append(d...)
		tkh.SetReason(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationGroupEditRequiredNotification_parameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationGroupEditRequiredNotification_parametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NotificationGroupEditRequiredNotification_parametersable
	tkh = keyhubmodel.NewNotificationGroupEditRequiredNotification_parameters()
	return tkh, diags
}

func tfObjectToTKHRSNotificationInvalidSignaturesDetectedNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NotificationInvalidSignaturesDetectedNotificationable
	tkh = keyhubmodel.NewNotificationInvalidSignaturesDetectedNotification()
	return tkh, diags
}

func tfObjectToTKHRSNotificationLicenseStatusNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationLicenseStatusNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationLicenseStatusNotificationable
	tkh = keyhubmodel.NewNotificationLicenseStatusNotification()
	tkh.SetActiveAccounts(int64PToInt32P(objAttrs["active_accounts"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHRSLicenseKeyHubLicenseInfo(ctx, recurse, objAttrs["license_info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetLicenseInfo(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationModificationRequestNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationModificationRequestNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationModificationRequestNotificationable
	tkh = keyhubmodel.NewNotificationModificationRequestNotification()
	{
		val, d := tfToSlice(objAttrs["admins"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetAdmins(val)
	}
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSRequestModificationRequest(ctx, recurse, objAttrs["request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRequest(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NotificationNotificationable
	tkh = keyhubmodel.NewNotificationNotification()
	return tkh, diags
}

func tfObjectToTKHRSNotificationNotifications(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationNotificationsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationNotificationsable
	tkh = keyhubmodel.NewNotificationNotifications()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.NotificationNotificationable {
			tkh, d := tfObjectToTKHRSNotificationNotification(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationOldApiVersionUsageNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationOldApiVersionUsageNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationOldApiVersionUsageNotificationable
	tkh = keyhubmodel.NewNotificationOldApiVersionUsageNotification()
	tkh.SetApiVersion(int64PToInt32P(objAttrs["api_version"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationProvisionConfigRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationProvisionConfigRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationProvisionConfigRequiredNotificationable
	tkh = keyhubmodel.NewNotificationProvisionConfigRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["systems"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetSystems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationRotatingPasswordRequiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationRotatingPasswordRequiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationRotatingPasswordRequiredNotificationable
	tkh = keyhubmodel.NewNotificationRotatingPasswordRequiredNotification()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := findGroupGroupPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationUpdateAvailableNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationUpdateAvailableNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationUpdateAvailableNotificationable
	tkh = keyhubmodel.NewNotificationUpdateAvailableNotification()
	{
		val, d := parsePointer2(objAttrs["released_at"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetReleasedAt(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNotificationVaultRecordExpiredNotification(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NotificationVaultRecordExpiredNotificationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.NotificationVaultRecordExpiredNotificationable
	tkh = keyhubmodel.NewNotificationVaultRecordExpiredNotification()
	{
		val, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, objAttrs["record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecord(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationAccountOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationAccountOrganizationalUnit()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationAccountOrganizationalUnit)).OrganizationOrganizationalUnitPrimer = *(val.(*keyhubmodel.OrganizationOrganizationalUnitPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationAccountOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationAccountOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationAccountOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationAccountOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationAccountOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationAccountOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationAccountOrganizationalUnit_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationAccountOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDepth(int64PToInt32P(objAttrs["depth"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitAccountable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationOrganizationalUnitAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnitAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitAccountLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitAccountable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitAccount_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["create_as_parent_of"]))
		diags.Append(d...)
		tkh.SetCreateAsParentOf(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAbstractProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx, recurse, objAttrs["attributes"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(objAttrs["base_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindDN(objAttrs["bind_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBindPassword(objAttrs["bind_password"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(objAttrs["failover_host"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(objAttrs["group_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetHost(objAttrs["host"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetObjectClasses(objAttrs["object_classes"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPort(int64PToInt32P(objAttrs["port"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetServiceAccountDN(objAttrs["service_account_dn"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetSshPublicKeySupported(objAttrs["ssh_public_key_supported"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(objAttrs["user_dn"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAbstractProvisionedLDAP_attributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ProvisioningAbstractProvisionedLDAP_attributesable
	tkh = keyhubmodel.NewProvisioningAbstractProvisionedLDAP_attributes()
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAccountProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningAccountProvisioningStatusable
	tkh = keyhubmodel.NewProvisioningAccountProvisioningStatus()
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["result"].(basetypes.StringValue), keyhubmodel.ParseProvisioningAccountProvisioningResult, func(val any) keyhubmodel.ProvisioningAccountProvisioningResult {
			return *val.(*keyhubmodel.ProvisioningAccountProvisioningResult)
		})
		diags.Append(d...)
		tkh.SetResult(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAccountProvisioningStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAccountProvisioningStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningAccountProvisioningStatusReportable
	tkh = keyhubmodel.NewProvisioningAccountProvisioningStatusReport()
	{
		val, d := tfToSlice(objAttrs["status"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningAccountProvisioningStatusable {
			tkh, d := tfObjectToTKHRSProvisioningAccountProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable
	tkh = keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tkh.SetNumberOfFailedCalls(objAttrs["number_of_failed_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfNotPermittedCalls(objAttrs["number_of_not_permitted_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	tkh.SetNumberOfSuccessfulCalls(objAttrs["number_of_successful_calls"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemTypesable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["provgroups"]))
		diags.Append(d...)
		tkh.SetProvgroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupProvisioningStatusable
	tkh = keyhubmodel.NewProvisioningGroupProvisioningStatus()
	{
		val, d := tfObjectToTKHRSGroupGroupFolder(ctx, recurse, objAttrs["folder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetFolder(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroup(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupProvisioningStatus_provisioningDuration(ctx, recurse, objAttrs["provisioning_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetProvisioningDuration(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningAccountProvisioningStatusReport(ctx, recurse, objAttrs["status_report"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatusReport(val)
	}
	tkh.SetVisibleOnDashboard(objAttrs["visible_on_dashboard"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupProvisioningStatus_provisioningDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupProvisioningStatus_provisioningDurationable
	tkh = keyhubmodel.NewProvisioningGroupProvisioningStatus_provisioningDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable
	tkh = keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetUnlinkedCount(objAttrs["unlinked_count"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequenceable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNextUID(objAttrs["next_uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequenceLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequenceLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequenceLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionNumberSequenceable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAD(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedADable
	tkh = keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccountable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProvisioningProvisionedAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetUid(objAttrs["uid"].(basetypes.Int64Value).ValueInt64Pointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccountLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedAccountable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureSyncLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureTenant(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureTenantable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureTenant()
	tkh.SetClientId(objAttrs["client_id"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetClientSecret(objAttrs["client_secret"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetIdpDomain(objAttrs["idp_domain"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTenant(objAttrs["tenant"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedInternalLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := tfObjectToTKHRSClientLdapClient(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAP()
	tkh.SetGid(objAttrs["gid"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetGroupDN(objAttrs["group_dn"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetAccountCount(int64PToInt32P(objAttrs["account_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(objAttrs["self_service_existing_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceNewGroups(objAttrs["self_service_new_groups"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetSelfServiceServiceAccounts(objAttrs["self_service_service_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetShouldDestroyUnknownAccounts(objAttrs["should_destroy_unknown_accounts"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(objAttrs["username_prefix"].(basetypes.StringValue).ValueStringPointer())
	if !objAttrs["abstract_provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP(ctx, false, objAttrs["abstract_provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningAbstractProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedLDAP(ctx, false, objAttrs["provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_tenant"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureTenant(ctx, false, objAttrs["provisioned_azure_tenant"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureTenant)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_sync_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureSyncLDAPDirectory(ctx, false, objAttrs["provisioned_azure_sync_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_oidc_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureOIDCDirectory(ctx, false, objAttrs["provisioned_azure_oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureOIDCDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_a_d"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAD(ctx, false, objAttrs["provisioned_a_d"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAD)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedLDAPDirectory(ctx, false, objAttrs["provisioned_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_internal_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedInternalLDAP(ctx, false, objAttrs["provisioned_internal_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedInternalLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLog(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemSyncLog()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetErrors(int64PToInt32P(objAttrs["errors"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLog(objAttrs["log"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetModifications(int64PToInt32P(objAttrs["modifications"].(basetypes.Int64Value).ValueInt64Pointer()))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLogLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemSyncLogLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemSyncLogLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemSyncLogable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystemSyncLog(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemSyncLog_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemSyncLog_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemSyncLog_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedAccount(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["issued_permissions"]))
		diags.Append(d...)
		tkh.SetIssuedPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	tkh.SetLoginName(objAttrs["login_name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx, recurse, objAttrs["management_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx, recurse, objAttrs["statistics"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx, recurse, objAttrs["supported_group_types"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable
	tkh = keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tkh.SetCreateNewGroupsAllowed(objAttrs["create_new_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetCreateServiceAccountsAllowed(objAttrs["create_service_accounts_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetReuseExistingGroupsAllowed(objAttrs["reuse_existing_groups_allowed"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisioningStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisioningStatusable
	tkh = keyhubmodel.NewProvisioningProvisioningStatus()
	{
		val, d := tfToSlice(objAttrs["groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupProvisioningStatusable {
			tkh, d := tfObjectToTKHRSProvisioningGroupProvisioningStatus(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	tkh.SetIgnoreErrors(objAttrs["ignore_errors"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetRestrictedByLicense(objAttrs["restricted_by_license"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSProvisioningTokenPassword(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningTokenPasswordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningTokenPasswordable
	tkh = keyhubmodel.NewProvisioningTokenPassword()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractApplicationModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractApplicationModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAbstractApplicationModificationRequestable
	tkh = keyhubmodel.NewRequestAbstractApplicationModificationRequest()
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["application_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetApplication(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractOrganizationalUnitModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAbstractOrganizationalUnitModificationRequestable
	tkh = keyhubmodel.NewRequestAbstractOrganizationalUnitModificationRequest()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAbstractProvisionedSystemModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAbstractProvisionedSystemModificationRequestable
	tkh = keyhubmodel.NewRequestAbstractProvisionedSystemModificationRequest()
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAcceptGrantAccessRequestParametersable
	tkh = keyhubmodel.NewRequestAcceptGrantAccessRequestParameters()
	{
		val, d := tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx, recurse, objAttrs["access_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccessDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptGrantAccessRequestParameters_accessDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAcceptGrantAccessRequestParameters_accessDurationable
	tkh = keyhubmodel.NewRequestAcceptGrantAccessRequestParameters_accessDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptJoinGroupRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptJoinGroupRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAcceptJoinGroupRequestParametersable
	tkh = keyhubmodel.NewRequestAcceptJoinGroupRequestParameters()
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetMakeManager(objAttrs["make_manager"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestAcceptModificationRequestParameters(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAcceptModificationRequestParametersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestAcceptModificationRequestParametersable
	tkh = keyhubmodel.NewRequestAcceptModificationRequestParameters()
	return tkh, diags
}

func tfObjectToTKHRSRequestAddGroupAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestAddGroupAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestAddGroupAdminRequestable
	tkh = keyhubmodel.NewRequestAddGroupAdminRequest()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["new_admin_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetNewAdmin(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestCreateGroupOnSystemRequestable
	tkh = keyhubmodel.NewRequestCreateGroupOnSystemRequest()
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["group_on_system_type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetGroupOnSystemType(val)
	}
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestCreateGroupRequestable
	tkh = keyhubmodel.NewRequestCreateGroupRequest()
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestCreateServiceAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestCreateServiceAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestCreateServiceAccountRequestable
	tkh = keyhubmodel.NewRequestCreateServiceAccountRequest()
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestDisable2FARequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestDisable2FARequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestDisable2FARequestable
	tkh = keyhubmodel.NewRequestDisable2FARequest()
	tkh.SetSubject(objAttrs["subject"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestEnableTechnicalAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestEnableTechnicalAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestEnableTechnicalAdministrationRequestable
	tkh = keyhubmodel.NewRequestEnableTechnicalAdministrationRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestExtendAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestExtendAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestExtendAccessRequestable
	tkh = keyhubmodel.NewRequestExtendAccessRequest()
	{
		val, d := tfToTimePointer(objAttrs["extend_until"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExtendUntil(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantAccessRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantAccessRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestGrantAccessRequestable
	tkh = keyhubmodel.NewRequestGrantAccessRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantApplicationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantApplicationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestGrantApplicationRequestable
	tkh = keyhubmodel.NewRequestGrantApplicationRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantClientPermissionRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantClientPermissionRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestGrantClientPermissionRequestable
	tkh = keyhubmodel.NewRequestGrantClientPermissionRequest()
	{
		val, d := parseCastPointer(objAttrs["permission_type"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetPermissionType(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantGroupOnSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestGrantGroupOnSystemRequestable
	tkh = keyhubmodel.NewRequestGrantGroupOnSystemRequest()
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantGroupOnSystemRequestRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantGroupOnSystemRequestRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestGrantGroupOnSystemRequestRequestable
	tkh = keyhubmodel.NewRequestGrantGroupOnSystemRequestRequest()
	tkh.SetActivationRequired(objAttrs["activation_required"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestGrantServiceAccountGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestGrantServiceAccountGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestGrantServiceAccountGroupRequestable
	tkh = keyhubmodel.NewRequestGrantServiceAccountGroupRequest()
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	{
		val, d := findServiceaccountServiceAccountPrimerByUUID(ctx, objAttrs["service_account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestJoinGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestJoinGroupRequestable
	tkh = keyhubmodel.NewRequestJoinGroupRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestJoinVaultRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestJoinVaultRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestJoinVaultRequestable
	tkh = keyhubmodel.NewRequestJoinVaultRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestModificationRequestable
	tkh = keyhubmodel.NewRequestModificationRequest()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFeedback(objAttrs["feedback"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetMailKey(objAttrs["mail_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["request_modification_request_type"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestType, func(val any) keyhubmodel.RequestModificationRequestType {
			return *val.(*keyhubmodel.RequestModificationRequestType)
		})
		diags.Append(d...)
		tkh.SetRequestModificationRequestType(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseRequestModificationRequestStatus, func(val any) keyhubmodel.RequestModificationRequestStatus {
			return *val.(*keyhubmodel.RequestModificationRequestStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	if !objAttrs["abstract_application_modification_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestAbstractApplicationModificationRequest(ctx, false, objAttrs["abstract_application_modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestAbstractApplicationModificationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["abstract_provisioned_system_modification_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestAbstractProvisionedSystemModificationRequest(ctx, false, objAttrs["abstract_provisioned_system_modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestAbstractProvisionedSystemModificationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["remove_provisioned_system_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestRemoveProvisionedSystemRequest(ctx, false, objAttrs["remove_provisioned_system_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestRemoveProvisionedSystemRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_application_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantApplicationRequest(ctx, false, objAttrs["grant_application_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantApplicationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["review_audit_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestReviewAuditRequest(ctx, false, objAttrs["review_audit_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestReviewAuditRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["revoke_admin_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestRevokeAdminRequest(ctx, false, objAttrs["revoke_admin_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestRevokeAdminRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_access_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantAccessRequest(ctx, false, objAttrs["grant_access_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantAccessRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_provisioned_system_content_administration_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferProvisionedSystemContentAdministrationRequest(ctx, false, objAttrs["transfer_provisioned_system_content_administration_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["abstract_organizational_unit_modification_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestAbstractOrganizationalUnitModificationRequest(ctx, false, objAttrs["abstract_organizational_unit_modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestAbstractOrganizationalUnitModificationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["remove_organizational_unit_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestRemoveOrganizationalUnitRequest(ctx, false, objAttrs["remove_organizational_unit_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestRemoveOrganizationalUnitRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["create_group_on_system_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestCreateGroupOnSystemRequest(ctx, false, objAttrs["create_group_on_system_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestCreateGroupOnSystemRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_application_administration_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferApplicationAdministrationRequest(ctx, false, objAttrs["transfer_application_administration_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferApplicationAdministrationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["update_group_membership_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestUpdateGroupMembershipRequest(ctx, false, objAttrs["update_group_membership_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestUpdateGroupMembershipRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["add_group_admin_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestAddGroupAdminRequest(ctx, false, objAttrs["add_group_admin_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestAddGroupAdminRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_organizational_unit_ownership_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferOrganizationalUnitOwnershipRequest(ctx, false, objAttrs["transfer_organizational_unit_ownership_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["join_vault_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestJoinVaultRequest(ctx, false, objAttrs["join_vault_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestJoinVaultRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["verify_internal_account_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestVerifyInternalAccountRequest(ctx, false, objAttrs["verify_internal_account_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestVerifyInternalAccountRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["join_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestJoinGroupRequest(ctx, false, objAttrs["join_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestJoinGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_group_on_system_ownership_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferGroupOnSystemOwnershipRequest(ctx, false, objAttrs["transfer_group_on_system_ownership_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferGroupOnSystemOwnershipRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["remove_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestRemoveGroupRequest(ctx, false, objAttrs["remove_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestRemoveGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["setup_authorizing_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestSetupAuthorizingGroupRequest(ctx, false, objAttrs["setup_authorizing_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestSetupAuthorizingGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["setup_nested_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestSetupNestedGroupRequest(ctx, false, objAttrs["setup_nested_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestSetupNestedGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_group_on_system_request_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantGroupOnSystemRequestRequest(ctx, false, objAttrs["grant_group_on_system_request_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantGroupOnSystemRequestRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["disable2fa_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestDisable2FARequest(ctx, false, objAttrs["disable2fa_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestDisable2FARequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_group_on_system_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantGroupOnSystemRequest(ctx, false, objAttrs["grant_group_on_system_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantGroupOnSystemRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["enable_technical_administration_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestEnableTechnicalAdministrationRequest(ctx, false, objAttrs["enable_technical_administration_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestEnableTechnicalAdministrationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["create_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestCreateGroupRequest(ctx, false, objAttrs["create_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestCreateGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_auditor_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferAuditorGroupRequest(ctx, false, objAttrs["transfer_auditor_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferAuditorGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_client_permission_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantClientPermissionRequest(ctx, false, objAttrs["grant_client_permission_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantClientPermissionRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_application_ownership_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferApplicationOwnershipRequest(ctx, false, objAttrs["transfer_application_ownership_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferApplicationOwnershipRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["create_service_account_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestCreateServiceAccountRequest(ctx, false, objAttrs["create_service_account_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestCreateServiceAccountRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_service_account_administration_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferServiceAccountAdministrationRequest(ctx, false, objAttrs["transfer_service_account_administration_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferServiceAccountAdministrationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["password_reset_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestPasswordResetRequest(ctx, false, objAttrs["password_reset_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestPasswordResetRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["grant_service_account_group_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestGrantServiceAccountGroupRequest(ctx, false, objAttrs["grant_service_account_group_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestGrantServiceAccountGroupRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_provisioned_system_ownership_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferProvisionedSystemOwnershipRequest(ctx, false, objAttrs["transfer_provisioned_system_ownership_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferProvisionedSystemOwnershipRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["extend_access_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestExtendAccessRequest(ctx, false, objAttrs["extend_access_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestExtendAccessRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["transfer_provisioned_system_administration_request"].IsNull() {
		val, d := tfObjectToTKHRSRequestTransferProvisionedSystemAdministrationRequest(ctx, false, objAttrs["transfer_provisioned_system_administration_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.RequestTransferProvisionedSystemAdministrationRequest)).RequestModificationRequest = *tkh.(*keyhubmodel.RequestModificationRequest)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequestLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequestLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestModificationRequestLinkableWrapperable
	tkh = keyhubmodel.NewRequestModificationRequestLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestModificationRequestable {
			tkh, d := tfObjectToTKHRSRequestModificationRequest(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestModificationRequest_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestModificationRequest_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestModificationRequest_additionalObjectsable
	tkh = keyhubmodel.NewRequestModificationRequest_additionalObjects()
	{
		val, d := tfObjectToTKHRSRequestAcceptModificationRequestParameters(ctx, recurse, objAttrs["accept_params"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAcceptParams(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSRequestPasswordResetRequestStatus(ctx, recurse, objAttrs["reset_status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetResetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestPasswordResetRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestPasswordResetRequestable
	tkh = keyhubmodel.NewRequestPasswordResetRequest()
	tkh.SetNewVaultAndDirectoryPassword(objAttrs["new_vault_and_directory_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNewVaultPassword(objAttrs["new_vault_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUnsyncedPassword(objAttrs["unsynced_password"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestPasswordResetRequestStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestPasswordResetRequestStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestPasswordResetRequestStatusable
	tkh = keyhubmodel.NewRequestPasswordResetRequestStatus()
	{
		val, d := tfToTimePointer(objAttrs["cooldown_end"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCooldownEnd(val)
	}
	{
		val, d := tfToSlice(objAttrs["managers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetManagers(val)
	}
	tkh.SetNrAccepted(objAttrs["nr_accepted"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := parseCastPointer(objAttrs["reset_via_mail"].(basetypes.StringValue), keyhubmodel.ParseRequestPasswordResetEmailType, func(val any) keyhubmodel.RequestPasswordResetEmailType {
			return *val.(*keyhubmodel.RequestPasswordResetEmailType)
		})
		diags.Append(d...)
		tkh.SetResetViaMail(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestRemoveGroupRequestable
	tkh = keyhubmodel.NewRequestRemoveGroupRequest()
	tkh.SetGroupName(objAttrs["group_name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveOrganizationalUnitRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveOrganizationalUnitRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestRemoveOrganizationalUnitRequestable
	tkh = keyhubmodel.NewRequestRemoveOrganizationalUnitRequest()
	tkh.SetOrganizationalUnitName(objAttrs["organizational_unit_name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestRemoveProvisionedSystemRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRemoveProvisionedSystemRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestRemoveProvisionedSystemRequestable
	tkh = keyhubmodel.NewRequestRemoveProvisionedSystemRequest()
	tkh.SetSystemName(objAttrs["system_name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSRequestReviewAuditRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestReviewAuditRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestReviewAuditRequestable
	tkh = keyhubmodel.NewRequestReviewAuditRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestRevokeAdminRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestRevokeAdminRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestRevokeAdminRequestable
	tkh = keyhubmodel.NewRequestRevokeAdminRequest()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["admin_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAdmin(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestSetupAuthorizingGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupAuthorizingGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestSetupAuthorizingGroupRequestable
	tkh = keyhubmodel.NewRequestSetupAuthorizingGroupRequest()
	{
		val, d := parseCastPointer(objAttrs["authorizing_group_type"].(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
			return *val.(*keyhubmodel.RequestAuthorizingGroupType)
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupType(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["requesting_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestSetupNestedGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestSetupNestedGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestSetupNestedGroupRequestable
	tkh = keyhubmodel.NewRequestSetupNestedGroupRequest()
	{
		val, d := parseCastPointer(objAttrs["account_action"].(basetypes.StringValue), keyhubmodel.ParseRequestGroupNestAccountAction, func(val any) keyhubmodel.RequestGroupNestAccountAction {
			return *val.(*keyhubmodel.RequestGroupNestAccountAction)
		})
		diags.Append(d...)
		tkh.SetAccountAction(val)
	}
	tkh.SetConnect(objAttrs["connect"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["requesting_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRequestingGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferApplicationAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferApplicationAdministrationRequestable
	tkh = keyhubmodel.NewRequestTransferApplicationAdministrationRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferApplicationOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferApplicationOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferApplicationOwnershipRequestable
	tkh = keyhubmodel.NewRequestTransferApplicationOwnershipRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferAuditorGroupRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferAuditorGroupRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferAuditorGroupRequestable
	tkh = keyhubmodel.NewRequestTransferAuditorGroupRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferGroupOnSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestTransferGroupOnSystemOwnershipRequestable
	tkh = keyhubmodel.NewRequestTransferGroupOnSystemOwnershipRequest()
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferOrganizationalUnitOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferOrganizationalUnitOwnershipRequestable
	tkh = keyhubmodel.NewRequestTransferOrganizationalUnitOwnershipRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferProvisionedSystemAdministrationRequestable
	tkh = keyhubmodel.NewRequestTransferProvisionedSystemAdministrationRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemContentAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferProvisionedSystemContentAdministrationRequestable
	tkh = keyhubmodel.NewRequestTransferProvisionedSystemContentAdministrationRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferProvisionedSystemOwnershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.RequestTransferProvisionedSystemOwnershipRequestable
	tkh = keyhubmodel.NewRequestTransferProvisionedSystemOwnershipRequest()
	return tkh, diags
}

func tfObjectToTKHRSRequestTransferServiceAccountAdministrationRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestTransferServiceAccountAdministrationRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestTransferServiceAccountAdministrationRequestable
	tkh = keyhubmodel.NewRequestTransferServiceAccountAdministrationRequest()
	{
		val, d := findServiceaccountServiceAccountPrimerByUUID(ctx, objAttrs["service_account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestUpdateGroupMembershipRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestUpdateGroupMembershipRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestUpdateGroupMembershipRequestable
	tkh = keyhubmodel.NewRequestUpdateGroupMembershipRequest()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_to_update_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccountToUpdate(val)
	}
	{
		val, d := parsePointer2(objAttrs["current_end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetCurrentEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["current_rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetCurrentRights(val)
	}
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["update_group_membership_type"].(basetypes.StringValue), keyhubmodel.ParseRequestUpdateGroupMembershipType, func(val any) keyhubmodel.RequestUpdateGroupMembershipType {
			return *val.(*keyhubmodel.RequestUpdateGroupMembershipType)
		})
		diags.Append(d...)
		tkh.SetUpdateGroupMembershipType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSRequestVerifyInternalAccountRequest(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RequestVerifyInternalAccountRequestable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RequestVerifyInternalAccountRequestable
	tkh = keyhubmodel.NewRequestVerifyInternalAccountRequest()
	tkh.SetInternalAccountName(objAttrs["internal_account_name"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountable
	tkh = keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDescription(objAttrs["description"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["password_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tkh.SetPasswordRotation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(objAttrs["display_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetNameInSystem(objAttrs["name_in_system"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(objAttrs["short_name_in_system"].(basetypes.StringValue).ValueStringPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := findServiceaccountServiceAccountPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountStatusable
	tkh = keyhubmodel.NewServiceaccountServiceAccountStatus()
	tkh.SetAccountEnabled(objAttrs["account_enabled"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountsAuditStatsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountsAuditStats()
	tkh.SetDisabledCount(objAttrs["disabled_count"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx, recurse, objAttrs["password_scheme_enabled_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordSchemeEnabledStats(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_systemStats(ctx, recurse, objAttrs["system_stats"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystemStats(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStatsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountsAuditStats_passwordSchemeEnabledStats()
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountsAuditStats_systemStats(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.ServiceaccountServiceAccountsAuditStats_systemStatsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountsAuditStats_systemStats()
	return tkh, diags
}

func tfObjectToTKHRSSimpleStringValue(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleStringValueable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.SimpleStringValueable
	tkh = keyhubmodel.NewSimpleStringValue()
	tkh.SetValue(objAttrs["value"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSSimpleVersionInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.SimpleVersionInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.SimpleVersionInfoable
	tkh = keyhubmodel.NewSimpleVersionInfo()
	{
		val, d := tfToSlice(objAttrs["contract_versions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) int32 {
			return int32(val.(basetypes.Int64Value).ValueInt64())
		})
		diags.Append(d...)
		tkh.SetContractVersions(val)
	}
	tkh.SetKeyHubVersion(objAttrs["key_hub_version"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultDeletedVaultHolderable
	tkh = keyhubmodel.NewVaultDeletedVaultHolder()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRecordCount(int64PToInt32P(objAttrs["record_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := parseCastPointer(objAttrs["vault_deleted_vault_holder_type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultDeletedVaultHolderType(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultDeletedVaultHolder_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolderLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultDeletedVaultHolderLinkableWrapperable
	tkh = keyhubmodel.NewVaultDeletedVaultHolderLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultDeletedVaultHolderable {
			tkh, d := tfObjectToTKHRSVaultDeletedVaultHolder(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultHolder_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultDeletedVaultHolder_additionalObjectsable
	tkh = keyhubmodel.NewVaultDeletedVaultHolder_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultDeletedVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultDeletedVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultDeletedVaultRecoveryable
	tkh = keyhubmodel.NewVaultDeletedVaultRecovery()
	tkh.SetPrefix(objAttrs["prefix"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["target_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTargetGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultMoveVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultMoveVaultRecordable
	tkh = keyhubmodel.NewVaultMoveVaultRecord()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseVaultMoveVaultRecordAction, func(val any) keyhubmodel.VaultMoveVaultRecordAction {
			return *val.(*keyhubmodel.VaultMoveVaultRecordAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSVaultMoveVaultRecord_shareDuration(ctx, recurse, objAttrs["share_duration"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareDuration(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultMoveVaultRecord_shareDuration(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultMoveVaultRecord_shareDurationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultMoveVaultRecord_shareDurationable
	tkh = keyhubmodel.NewVaultMoveVaultRecord_shareDuration()
	tkh.SetNanos(int64PToInt32P(objAttrs["nanos"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSeconds(objAttrs["seconds"].(basetypes.Int64Value).ValueInt64Pointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultPasswordMetadata(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultPasswordMetadataable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultPasswordMetadataable
	tkh = keyhubmodel.NewVaultPasswordMetadata()
	tkh.SetDictionary(objAttrs["dictionary"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetDuplicate(objAttrs["duplicate"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetHash(objAttrs["hash"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetLength(int64PToInt32P(objAttrs["length"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetLowerCount(int64PToInt32P(objAttrs["lower_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetNumberCount(int64PToInt32P(objAttrs["number_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetSpecialCount(int64PToInt32P(objAttrs["special_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetStrength(int64PToInt32P(objAttrs["strength"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetUpperCount(int64PToInt32P(objAttrs["upper_count"].(basetypes.Int64Value).ValueInt64Pointer()))
	return tkh, diags
}

func tfObjectToTKHRSVaultVault(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultable
	tkh = keyhubmodel.NewVaultVault()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccessAvailable(objAttrs["access_available"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["records"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultHolder(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultHolderable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.VaultVaultHolderable
	tkh = keyhubmodel.NewVaultVaultHolder()
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetDerived(objAttrs["derived"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(objAttrs["filename"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUsername(objAttrs["username"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordLinkableWrapperable
	tkh = keyhubmodel.NewVaultVaultRecordLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := tfObjectToTKHRSVaultVaultRecord(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerable
	tkh = keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable
	tkh = keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := findVaultVaultRecordPrimerByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordSecrets(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordSecretsable
	tkh = keyhubmodel.NewVaultVaultRecordSecrets()
	tkh.SetComment(objAttrs["comment"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetFile(objAttrs["file"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetTotp(objAttrs["totp"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetWriteTotp(objAttrs["write_totp"].(basetypes.BoolValue).ValueBoolPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShare(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareable
	tkh = keyhubmodel.NewVaultVaultRecordShare()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShareSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareSummaryable
	tkh = keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSlice(objAttrs["children"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecord_additionalObjectsable
	tkh = keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(objAttrs["delete_tile"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSVaultPasswordMetadata(ctx, recurse, objAttrs["password_metadata"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordMetadata(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordSecrets(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShareSummary(ctx, recurse, objAttrs["share_summary"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["shares"]))
		diags.Append(d...)
		tkh.SetShares(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "launchpad.VaultRecordLaunchpadTile"})
		}
	}
	{
		val, d := tfObjectToTKHRSVaultVaultHolder(ctx, recurse, objAttrs["vaultholder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecovery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecoveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecoveryable
	tkh = keyhubmodel.NewVaultVaultRecovery()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetPrivateKey(objAttrs["private_key"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultUnlock(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultUnlockable
	tkh = keyhubmodel.NewVaultVaultUnlock()
	tkh.SetPassword(objAttrs["password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultUnlockResponse(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultUnlockResponseable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultUnlockResponseable
	tkh = keyhubmodel.NewVaultVaultUnlockResponse()
	{
		val, d := tfToTimePointer(objAttrs["expires_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiresAt(val)
	}
	tkh.SetSessionPassword(objAttrs["session_password"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookable
	tkh = keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetActive(objAttrs["active"].(basetypes.BoolValue).ValueBoolPointer())
	tkh.SetAllTypes(objAttrs["all_types"].(basetypes.BoolValue).ValueBoolPointer())
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseWebhookWebhookAuthenticationScheme, func(val any) keyhubmodel.WebhookWebhookAuthenticationScheme {
			return *val.(*keyhubmodel.WebhookWebhookAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(objAttrs["basic_auth_password"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBasicAuthUsername(objAttrs["basic_auth_username"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetBearerToken(objAttrs["bearer_token"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetCustomHeaderName(objAttrs["custom_header_name"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetCustomHeaderValue(objAttrs["custom_header_value"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSlice(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(objAttrs["url"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetVerbosePayloads(objAttrs["verbose_payloads"].(basetypes.BoolValue).ValueBoolPointer())
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDelivery(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookDeliveryable
	tkh = keyhubmodel.NewWebhookWebhookDelivery()
	{
		val, d := tfToSlice(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSlice(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookPush(ctx, false, objAttrs["payload"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPayload(val)
	}
	tkh.SetReponseHeaders(objAttrs["reponse_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetRequestHeaders(objAttrs["request_headers"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetResponse(objAttrs["response"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetStatus(int64PToInt32P(objAttrs["status"].(basetypes.Int64Value).ValueInt64Pointer()))
	tkh.SetTime(int64PToInt32P(objAttrs["time"].(basetypes.Int64Value).ValueInt64Pointer()))
	{
		val, d := tfToTimePointer(objAttrs["trigger_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTriggerTime(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhookDelivery_additionalObjects(ctx, false, objAttrs["additional_objects"].(basetypes.ObjectValue))
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDeliveryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookDeliveryLinkableWrapperable
	tkh = keyhubmodel.NewWebhookWebhookDeliveryLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookDeliveryable {
			tkh, d := tfObjectToTKHRSWebhookWebhookDelivery(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookDelivery_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookDelivery_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookDelivery_additionalObjectsable
	tkh = keyhubmodel.NewWebhookWebhookDelivery_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookLinkableWrapperable
	tkh = keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSlice(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHRSWebhookWebhook(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookNameUuid(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookNameUuidable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookNameUuidable
	tkh = keyhubmodel.NewWebhookWebhookNameUuid()
	tkh.SetName(objAttrs["name"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := tfObjectToTKHRSLinkable(ctx, recurse, objAttrs["object"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetObject(val)
	}
	tkh.SetUuid(objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookPush(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookPushable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookPushable
	tkh = keyhubmodel.NewWebhookWebhookPush()
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["by_party"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetByParty(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["certificate"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCertificate(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["client"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group2"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroup2(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["group_classification"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupClassification(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["modification_request"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetModificationRequest(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["organizational_unit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetParameter1(objAttrs["parameter1"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter2(objAttrs["parameter2"].(basetypes.StringValue).ValueStringPointer())
	tkh.SetParameter3(objAttrs["parameter3"].(basetypes.StringValue).ValueStringPointer())
	{
		val, d := parseCastPointer(objAttrs["security_level"].(basetypes.StringValue), keyhubmodel.ParseAuthSecurityLevel, func(val any) keyhubmodel.AuthSecurityLevel { return *val.(*keyhubmodel.AuthSecurityLevel) })
		diags.Append(d...)
		tkh.SetSecurityLevel(val)
	}
	tkh.SetSeq(objAttrs["seq"].(basetypes.Int64Value).ValueInt64Pointer())
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["service_account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetServiceAccount(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["timestamp"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetTimestamp(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["vault_record"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultRecord(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookNameUuid(ctx, recurse, objAttrs["webhook"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetWebhook(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
		diags.Append(d...)
		tkh.SetWebhookWebhookPushType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhook_additionalObjectsable
	tkh = keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}
