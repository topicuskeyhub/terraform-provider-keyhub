// Code generated by "terraform-provider-keyhub-generator"; DO NOT EDIT.
// Copyright (c) Topicus Security B.V.
// SPDX-License-Identifier: APSL-2.0

//lint:ignore U1000 Ignore unused functions in generated code
package provider

import (
	"context"
	"github.com/google/uuid"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/microsoft/kiota-abstractions-go/serialization"
	keyhubmodel "github.com/topicuskeyhub/sdk-go/models"
)

func tfObjectToTKHRSAuditInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditInfoable
	tkh = keyhubmodel.NewAuditInfo()
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(tfToStringPointer(objAttrs["created_by"]))
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	tkh.SetLastModifiedBy(tfToStringPointer(objAttrs["last_modified_by"]))
	return tkh, diags
}

func tfObjectToTKHRSGeneratedSecret(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GeneratedSecretable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GeneratedSecretable
	tkh = keyhubmodel.NewGeneratedSecret()
	tkh.SetGeneratedSecret(tfToStringPointer(objAttrs["generated_secret"]))
	tkh.SetOldSecret(tfToStringPointer(objAttrs["old_secret"]))
	tkh.SetRegenerate(tfToBooleanPointer(objAttrs["regenerate"]))
	return tkh, diags
}

func tfObjectToTKHRSLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.Linkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.Linkableable
	tkh = keyhubmodel.NewLinkable()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNonLinkable(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.NonLinkableable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.NonLinkableable
	tkh = keyhubmodel.NewNonLinkable()
	return tkh, diags
}

func tfObjectToTKHRSRestLink(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.RestLinkable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.RestLinkable
	tkh = keyhubmodel.NewRestLink()
	tkh.SetHref(tfToStringPointer(objAttrs["href"]))
	tkh.SetId(tfToInt64Pointer(objAttrs["id"]))
	tkh.SetRel(tfToStringPointer(objAttrs["rel"]))
	tkh.SetTypeEscaped(tfToStringPointer(objAttrs["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSAuditGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditable
	tkh = keyhubmodel.NewAuditGroupAudit()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceList(objAttrs["accounts"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditAccountable {
			tkh, d := tfObjectToTKHRSAuditGroupAuditAccount(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccounts(val)
	}
	tkh.SetComment(tfToStringPointer(objAttrs["comment"]))
	{
		val, d := tfToTimePointer(objAttrs["created_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCreatedAt(val)
	}
	tkh.SetCreatedBy(tfToStringPointer(objAttrs["created_by"]))
	tkh.SetGroupName(tfToStringPointer(objAttrs["group_name"]))
	tkh.SetNameOnAudit(tfToStringPointer(objAttrs["name_on_audit"]))
	{
		val, d := tfToSliceList(objAttrs["nested_groups"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditNestedGroupAuditable {
			tkh, d := tfObjectToTKHRSAuditNestedGroupAudit(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetNestedGroups(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["reviewed_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetReviewedAt(val)
	}
	tkh.SetReviewedBy(tfToStringPointer(objAttrs["reviewed_by"]))
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseAuditGroupAuditStatus, func(val any) keyhubmodel.AuditGroupAuditStatus { return *val.(*keyhubmodel.AuditGroupAuditStatus) })
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["submitted_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetSubmittedAt(val)
	}
	tkh.SetSubmittedBy(tfToStringPointer(objAttrs["submitted_by"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSAuditGroupAudit_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditGroupAuditAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditAccountable
	tkh = keyhubmodel.NewAuditGroupAuditAccount()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountUuid(tfToStringPointer(objAttrs["account_uuid"]))
	tkh.SetAccountValid(tfToBooleanPointer(objAttrs["account_valid"]))
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditAccountAction, func(val any) keyhubmodel.AuditAuditAccountAction { return *val.(*keyhubmodel.AuditAuditAccountAction) })
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(tfToStringPointer(objAttrs["comment"]))
	tkh.SetDisconnectedNested(tfToBooleanPointer(objAttrs["disconnected_nested"]))
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(tfToBooleanPointer(objAttrs["nested"]))
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	return tkh, diags
}

func tfObjectToTKHRSAuditGroupAuditLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAuditLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAuditLinkableWrapperable
	tkh = keyhubmodel.NewAuditGroupAuditLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditGroupAuditable {
			tkh, d := tfObjectToTKHRSAuditGroupAudit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditGroupAudit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditGroupAudit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditGroupAudit_additionalObjectsable
	tkh = keyhubmodel.NewAuditGroupAudit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuditNestedGroupAudit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuditNestedGroupAuditable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuditNestedGroupAuditable
	tkh = keyhubmodel.NewAuditNestedGroupAudit()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["action"].(basetypes.StringValue), keyhubmodel.ParseAuditAuditNestedGroupAction, func(val any) keyhubmodel.AuditAuditNestedGroupAction {
			return *val.(*keyhubmodel.AuditAuditNestedGroupAction)
		})
		diags.Append(d...)
		tkh.SetAction(val)
	}
	tkh.SetComment(tfToStringPointer(objAttrs["comment"]))
	tkh.SetGroupUuid(tfToStringPointer(objAttrs["group_uuid"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	return tkh, diags
}

func tfObjectToTKHRSAuthAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthAccountPrimerable
	tkh = keyhubmodel.NewAuthAccountPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	{
		val, d := tfToTimePointer(objAttrs["last_active"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastActive(val)
	}
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	{
		val, d := parseCastPointer(objAttrs["validity"].(basetypes.StringValue), keyhubmodel.ParseAuthAccountValidity, func(val any) keyhubmodel.AuthAccountValidity { return *val.(*keyhubmodel.AuthAccountValidity) })
		diags.Append(d...)
		tkh.SetValidity(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSAuthPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.AuthPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.AuthPermissionable
	tkh = keyhubmodel.NewAuthPermission()
	tkh.SetFull(tfToStringPointer(objAttrs["full"]))
	{
		val, d := tfToSliceList(objAttrs["instances"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetInstances(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["operations"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermittedOperation {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuthPermittedOperation, func(val any) keyhubmodel.AuthPermittedOperation { return *val.(*keyhubmodel.AuthPermittedOperation) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetOperations(val)
	}
	tkh.SetTypeEscaped(tfToStringPointer(objAttrs["type_escaped"]))
	return tkh, diags
}

func tfObjectToTKHRSCertificateCertificatePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.CertificateCertificatePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.CertificateCertificatePrimerable
	tkh = keyhubmodel.NewCertificateCertificatePrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAlias(tfToStringPointer(objAttrs["alias"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseCertificateCertificateType, func(val any) keyhubmodel.CertificateCertificateType {
			return *val.(*keyhubmodel.CertificateCertificateType)
		})
		diags.Append(d...)
		tkh.SetCertificateCertificatePrimerType(val)
	}
	{
		val, d := tfBase64ToByteArray(objAttrs["certificate_data"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetCertificateData(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["expiration"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetExpiration(val)
	}
	tkh.SetFingerprintSha1(tfToStringPointer(objAttrs["fingerprint_sha1"]))
	tkh.SetFingerprintSha256(tfToStringPointer(objAttrs["fingerprint_sha256"]))
	tkh.SetGlobal(tfToBooleanPointer(objAttrs["global"]))
	tkh.SetSubjectDN(tfToStringPointer(objAttrs["subject_dn"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSClientApplicationVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetDerived(tfToBooleanPointer(objAttrs["derived"]))
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(tfToStringPointer(objAttrs["filename"]))
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(tfToStringPointer(objAttrs["url"]))
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationable
	tkh = keyhubmodel.NewClientClientApplication()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(tfToStringPointer(objAttrs["client_id"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToSliceList(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(tfToBooleanPointer(objAttrs["sso_application"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	{
		val, d := tfToTimePointer(objAttrs["last_modified_at"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetLastModifiedAt(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if !objAttrs["ldap_client"].IsNull() {
		val, d := tfObjectToTKHRSClientLdapClient(ctx, false, objAttrs["ldap_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientLdapClient)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["oauth2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientOAuth2Client(ctx, false, objAttrs["oauth2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientOAuth2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["saml2_client"].IsNull() {
		val, d := tfObjectToTKHRSClientSaml2Client(ctx, false, objAttrs["saml2_client"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ClientSaml2Client)).ClientClientApplication = *tkh.(*keyhubmodel.ClientClientApplication)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientClientApplication_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationLinkableWrapperable
	tkh = keyhubmodel.NewClientClientApplicationLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientClientApplicationable {
			tkh, d := tfObjectToTKHRSClientClientApplication(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplicationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplicationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplicationPrimerable
	tkh = keyhubmodel.NewClientClientApplicationPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseClientClientApplicationType, func(val any) keyhubmodel.ClientClientApplicationType {
			return *val.(*keyhubmodel.ClientClientApplicationType)
		})
		diags.Append(d...)
		tkh.SetClientClientApplicationPrimerType(val)
	}
	tkh.SetClientId(tfToStringPointer(objAttrs["client_id"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToSliceList(objAttrs["scopes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) string {
			return val.(basetypes.StringValue).ValueString()
		})
		diags.Append(d...)
		tkh.SetScopes(val)
	}
	tkh.SetSsoApplication(tfToBooleanPointer(objAttrs["sso_application"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSClientClientApplication_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientClientApplication_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientClientApplication_additionalObjectsable
	tkh = keyhubmodel.NewClientClientApplication_additionalObjects()
	{
		val, d := tfObjectToTKHRSProfileAccessProfileClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["accessprofileclients"]))
		diags.Append(d...)
		tkh.SetAccessprofileclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(tfToBooleanPointer(objAttrs["delete_tile"]))
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groupclients"]))
		diags.Append(d...)
		tkh.SetGroupclients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
	}
	{
		val, d := tfObjectToTKHRSOrganizationClientApplicationOrganizationalUnitLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["organizational_units"]))
		diags.Append(d...)
		tkh.SetOrganizationalUnits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	tkh.SetVaultRecordCount(int64PToInt32P(tfToInt64Pointer(objAttrs["vault_record_count"])))
	return tkh, diags
}

func tfObjectToTKHRSClientLdapClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientLdapClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientLdapClientable
	tkh = keyhubmodel.NewClientLdapClient()
	tkh.SetBindDn(tfToStringPointer(objAttrs["bind_dn"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetShareSecretInVault(tfToBooleanPointer(objAttrs["share_secret_in_vault"]))
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetUsedForProvisioning(tfToBooleanPointer(objAttrs["used_for_provisioning"]))
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2Clientable
	tkh = keyhubmodel.NewClientOAuth2Client()
	{
		val, d := tfToSliceList(objAttrs["account_permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAccountPermissions(val)
	}
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientOAuth2Client_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetCallbackURI(tfToStringPointer(objAttrs["callback_uri"]))
	tkh.SetDebugMode(tfToBooleanPointer(objAttrs["debug_mode"]))
	tkh.SetForIdentitySource(tfToBooleanPointer(objAttrs["for_identity_source"]))
	tkh.SetIdTokenClaims(tfToStringPointer(objAttrs["id_token_claims"]))
	tkh.SetInitiateLoginURI(tfToStringPointer(objAttrs["initiate_login_uri"]))
	{
		val, d := parseCastPointer(objAttrs["profile"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientProfile, func(val any) keyhubmodel.ClientOAuth2ClientProfile {
			return *val.(*keyhubmodel.ClientOAuth2ClientProfile)
		})
		diags.Append(d...)
		tkh.SetProfile(val)
	}
	tkh.SetResourceURIs(tfToStringPointer(objAttrs["resource_uris"]))
	tkh.SetShareSecretInVault(tfToBooleanPointer(objAttrs["share_secret_in_vault"]))
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["shared_secret_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSharedSecret(val)
	}
	tkh.SetShowLandingPage(tfToBooleanPointer(objAttrs["show_landing_page"]))
	tkh.SetUseClientCredentials(tfToBooleanPointer(objAttrs["use_client_credentials"]))
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClient()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["for_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForGroup(val)
	}
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["for_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetForSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["value"].(basetypes.StringValue), keyhubmodel.ParseClientOAuth2ClientPermissionType, func(val any) keyhubmodel.ClientOAuth2ClientPermissionType {
			return *val.(*keyhubmodel.ClientOAuth2ClientPermissionType)
		})
		diags.Append(d...)
		tkh.SetValue(val)
	}
	{
		val, d := findClientOAuth2ClientByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermissionWithClientLinkableWrapperable
	tkh = keyhubmodel.NewClientOAuth2ClientPermissionWithClientLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ClientOAuth2ClientPermissionWithClientable {
			tkh, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientOAuth2ClientPermission_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientOAuth2ClientPermission_additionalObjectsable
	tkh = keyhubmodel.NewClientOAuth2ClientPermission_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSClientSaml2Client(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ClientSaml2Clientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ClientSaml2Clientable
	tkh = keyhubmodel.NewClientSaml2Client()
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewClientSaml2Client_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetMetadata(tfToStringPointer(objAttrs["metadata"]))
	tkh.SetMetadataUrl(tfToStringPointer(objAttrs["metadata_url"]))
	{
		val, d := parseCastPointer(objAttrs["subject_format"].(basetypes.StringValue), keyhubmodel.ParseClientSubjectFormat, func(val any) keyhubmodel.ClientSubjectFormat { return *val.(*keyhubmodel.ClientSubjectFormat) })
		diags.Append(d...)
		tkh.SetSubjectFormat(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryable
	tkh = keyhubmodel.NewDirectoryAccountDirectory()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(tfToBooleanPointer(objAttrs["account_validity_supported"]))
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["base_organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseOrganizationalUnit(val)
	}
	tkh.SetDefaultDirectory(tfToBooleanPointer(objAttrs["default_directory"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["helpdesk_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetHelpdeskGroup(val)
	}
	tkh.SetRestrict2fa(tfToBooleanPointer(objAttrs["restrict2fa"]))
	{
		val, d := parseCastPointer(objAttrs["rotating_password"].(basetypes.StringValue), keyhubmodel.ParseDirectoryDirectoryRotatingPassword, func(val any) keyhubmodel.DirectoryDirectoryRotatingPassword {
			return *val.(*keyhubmodel.DirectoryDirectoryRotatingPassword)
		})
		diags.Append(d...)
		tkh.SetRotatingPassword(val)
	}
	tkh.SetUsernameCustomizable(tfToBooleanPointer(objAttrs["username_customizable"]))
	if !objAttrs["internal_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryInternalDirectory(ctx, false, objAttrs["internal_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryInternalDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryLDAPDirectory(ctx, false, objAttrs["ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryLDAPDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["maintenance_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryMaintenanceDirectory(ctx, false, objAttrs["maintenance_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryMaintenanceDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["oidc_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryOIDCDirectory(ctx, false, objAttrs["oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryOIDCDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["pending_accounts_directory"].IsNull() {
		val, d := tfObjectToTKHRSDirectoryPendingAccountsDirectory(ctx, false, objAttrs["pending_accounts_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.DirectoryPendingAccountsDirectory)).DirectoryAccountDirectory = *tkh.(*keyhubmodel.DirectoryAccountDirectory)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectoryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectory(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryPrimerable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccountValiditySupported(tfToBooleanPointer(objAttrs["account_validity_supported"]))
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectoryPrimerType(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectoryStatusReportable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectoryStatusReportable
	tkh = keyhubmodel.NewDirectoryAccountDirectoryStatusReport()
	tkh.SetAccounts(tfToInt64Pointer(objAttrs["accounts"]))
	tkh.SetReason(tfToStringPointer(objAttrs["reason"]))
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryStatus, func(val any) keyhubmodel.DirectoryAccountDirectoryStatus {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummary()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseDirectoryAccountDirectoryType, func(val any) keyhubmodel.DirectoryAccountDirectoryType {
			return *val.(*keyhubmodel.DirectoryAccountDirectoryType)
		})
		diags.Append(d...)
		tkh.SetDirectoryAccountDirectorySummaryType(val)
	}
	tkh.SetDomainRestriction(tfToStringPointer(objAttrs["domain_restriction"]))
	tkh.SetFullyResolvedIssuer(tfToStringPointer(objAttrs["fully_resolved_issuer"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	tkh.SetUsernameCustomizable(tfToBooleanPointer(objAttrs["username_customizable"]))
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectorySummaryLinkableWrapperable
	tkh = keyhubmodel.NewDirectoryAccountDirectorySummaryLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.DirectoryAccountDirectorySummaryable {
			tkh, d := tfObjectToTKHRSDirectoryAccountDirectorySummary(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryAccountDirectory_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryAccountDirectory_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryAccountDirectory_additionalObjectsable
	tkh = keyhubmodel.NewDirectoryAccountDirectory_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryStatusReport(ctx, recurse, objAttrs["status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryInternalDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryInternalDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryInternalDirectoryable
	tkh = keyhubmodel.NewDirectoryInternalDirectory()
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryLDAPDirectoryable
	tkh = keyhubmodel.NewDirectoryLDAPDirectory()
	tkh.SetAttributesToStore(tfToStringPointer(objAttrs["attributes_to_store"]))
	tkh.SetBaseDN(tfToStringPointer(objAttrs["base_dn"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	{
		val, d := parseCastPointer(objAttrs["dialect"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDialect, func(val any) keyhubmodel.DirectoryLDAPDialect { return *val.(*keyhubmodel.DirectoryLDAPDialect) })
		diags.Append(d...)
		tkh.SetDialect(val)
	}
	tkh.SetFailoverHost(tfToStringPointer(objAttrs["failover_host"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetHost(tfToStringPointer(objAttrs["host"]))
	{
		val, d := parseCastPointer(objAttrs["password_recovery"].(basetypes.StringValue), keyhubmodel.ParseDirectoryLDAPDirectoryPasswordRecovery, func(val any) keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery {
			return *val.(*keyhubmodel.DirectoryLDAPDirectoryPasswordRecovery)
		})
		diags.Append(d...)
		tkh.SetPasswordRecovery(val)
	}
	tkh.SetPort(int64PToInt32P(tfToInt64Pointer(objAttrs["port"])))
	tkh.SetSearchBindDN(tfToStringPointer(objAttrs["search_bind_dn"]))
	tkh.SetSearchBindPassword(tfToStringPointer(objAttrs["search_bind_password"]))
	tkh.SetSearchFilter(tfToStringPointer(objAttrs["search_filter"]))
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryMaintenanceDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryMaintenanceDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryMaintenanceDirectoryable
	tkh = keyhubmodel.NewDirectoryMaintenanceDirectory()
	return tkh, diags
}

func tfObjectToTKHRSDirectoryOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.DirectoryOIDCDirectoryable
	tkh = keyhubmodel.NewDirectoryOIDCDirectory()
	tkh.SetAcrValues(tfToStringPointer(objAttrs["acr_values"]))
	tkh.SetAttributesToStore(tfToStringPointer(objAttrs["attributes_to_store"]))
	tkh.SetClientId(tfToStringPointer(objAttrs["client_id"]))
	tkh.SetClientSecret(tfToStringPointer(objAttrs["client_secret"]))
	tkh.SetDomainRestriction(tfToStringPointer(objAttrs["domain_restriction"]))
	tkh.SetEnforces2fa(tfToBooleanPointer(objAttrs["enforces2fa"]))
	tkh.SetFullyResolvedIssuer(tfToStringPointer(objAttrs["fully_resolved_issuer"]))
	tkh.SetIssuer(tfToStringPointer(objAttrs["issuer"]))
	tkh.SetLogoutUrl(tfToStringPointer(objAttrs["logout_url"]))
	tkh.SetSendLoginHint(tfToBooleanPointer(objAttrs["send_login_hint"]))
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseDirectoryOIDCVendor, func(val any) keyhubmodel.DirectoryOIDCVendor { return *val.(*keyhubmodel.DirectoryOIDCVendor) })
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSDirectoryPendingAccountsDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.DirectoryPendingAccountsDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.DirectoryPendingAccountsDirectoryable
	tkh = keyhubmodel.NewDirectoryPendingAccountsDirectory()
	return tkh, diags
}

func tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupAuthorizedGroupsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupAuthorizedGroupsWrapperable
	tkh = keyhubmodel.NewGroupAuthorizedGroupsWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetGroupCount(tfToInt64Pointer(objAttrs["group_count"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupable
	tkh = keyhubmodel.NewGroupGroup()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(tfToBooleanPointer(objAttrs["admin"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetApplicationAdministration(tfToBooleanPointer(objAttrs["application_administration"]))
	{
		val, d := tfObjectToTKHRSGroupGroupAuditConfig(ctx, false, objAttrs["audit_config"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuditConfig(val)
	}
	tkh.SetAuditRequested(tfToBooleanPointer(objAttrs["audit_requested"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_auditing_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupAuditing(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_delegation_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupDelegation(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_membership_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupMembership(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["authorizing_group_provisioning_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuthorizingGroupProvisioning(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["authorizing_group_types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RequestAuthorizingGroupType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseRequestAuthorizingGroupType, func(val any) keyhubmodel.RequestAuthorizingGroupType {
				return *val.(*keyhubmodel.RequestAuthorizingGroupType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuthorizingGroupTypes(val)
	}
	{
		val, d := findGroupGroupClassificationPrimerByUUID(ctx, objAttrs["classification_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClassification(val)
	}
	tkh.SetDescription(tfToStringPointer(objAttrs["description"]))
	{
		val, d := parseCastPointer(objAttrs["extended_access"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupExtendedAccess, func(val any) keyhubmodel.GroupGroupExtendedAccess {
			return *val.(*keyhubmodel.GroupGroupExtendedAccess)
		})
		diags.Append(d...)
		tkh.SetExtendedAccess(val)
	}
	tkh.SetHideAuditTrail(tfToBooleanPointer(objAttrs["hide_audit_trail"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["nested_under_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetNestedUnder(val)
	}
	tkh.SetPrivateGroup(tfToBooleanPointer(objAttrs["private_group"]))
	tkh.SetProfileAdministration(tfToBooleanPointer(objAttrs["profile_administration"]))
	tkh.SetRecordTrail(tfToBooleanPointer(objAttrs["record_trail"]))
	tkh.SetRotatingPasswordRequired(tfToBooleanPointer(objAttrs["rotating_password_required"]))
	tkh.SetSingleManaged(tfToBooleanPointer(objAttrs["single_managed"]))
	{
		val, d := parseCastPointer(objAttrs["vault_recovery"].(basetypes.StringValue), keyhubmodel.ParseGroupVaultRecoveryAvailability, func(val any) keyhubmodel.GroupVaultRecoveryAvailability {
			return *val.(*keyhubmodel.GroupVaultRecoveryAvailability)
		})
		diags.Append(d...)
		tkh.SetVaultRecovery(val)
	}
	tkh.SetVaultRequiresActivation(tfToBooleanPointer(objAttrs["vault_requires_activation"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccessInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccessInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccessInfoable
	tkh = keyhubmodel.NewGroupGroupAccessInfo()
	tkh.SetBusinessAccounts(tfToBooleanPointer(objAttrs["business_accounts"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountable
	tkh = keyhubmodel.NewGroupGroupAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.GroupGroupAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetDisconnectedNested(tfToBooleanPointer(objAttrs["disconnected_nested"]))
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_used"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastUsed(val)
	}
	tkh.SetNested(tfToBooleanPointer(objAttrs["nested"]))
	{
		val, d := tfToTimePointer(objAttrs["provisioning_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningEndTime(val)
	}
	{
		val, d := tfToTimePointer(objAttrs["provisioning_permission_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetProvisioningPermissionEndTime(val)
	}
	{
		val, d := parseCastPointer(objAttrs["rights"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRights, func(val any) keyhubmodel.GroupGroupRights { return *val.(*keyhubmodel.GroupGroupRights) })
		diags.Append(d...)
		tkh.SetRights(val)
	}
	{
		val, d := parseCastPointer(objAttrs["two_factor_status"].(basetypes.StringValue), keyhubmodel.ParseAuthTwoFactorAuthenticationStatus, func(val any) keyhubmodel.AuthTwoFactorAuthenticationStatus {
			return *val.(*keyhubmodel.AuthTwoFactorAuthenticationStatus)
		})
		diags.Append(d...)
		tkh.SetTwoFactorStatus(val)
	}
	tkh.SetVisibleForProvisioning(tfToBooleanPointer(objAttrs["visible_for_provisioning"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccountLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupAccountLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupAccountable {
			tkh, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAccount_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditConfig(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditConfigable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditConfigable
	tkh = keyhubmodel.NewGroupGroupAuditConfig()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := tfToSliceSet(objAttrs["months"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.Month {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseMonth, func(val any) keyhubmodel.Month { return *val.(*keyhubmodel.Month) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMonths(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupAuditingInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupAuditingInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupAuditingInfoable
	tkh = keyhubmodel.NewGroupGroupAuditingInfo()
	{
		val, d := parsePointer2(objAttrs["audit_due_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetAuditDueDate(val)
	}
	{
		val, d := parsePointer2(objAttrs["last_audit_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetLastAuditDate(val)
	}
	tkh.SetNrAccounts(tfToInt64Pointer(objAttrs["nr_accounts"]))
	tkh.SetNrDisabledAccounts(tfToInt64Pointer(objAttrs["nr_disabled_accounts"]))
	tkh.SetNrDisabledManagers(tfToInt64Pointer(objAttrs["nr_disabled_managers"]))
	tkh.SetNrExpiredVaultRecords(tfToInt64Pointer(objAttrs["nr_expired_vault_records"]))
	tkh.SetNrManagers(tfToInt64Pointer(objAttrs["nr_managers"]))
	tkh.SetNrVaultRecordsWithEndDate(tfToInt64Pointer(objAttrs["nr_vault_records_with_end_date"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClassificationPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClassificationPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClassificationPrimerable
	tkh = keyhubmodel.NewGroupGroupClassificationPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientable
	tkh = keyhubmodel.NewGroupGroupClient()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(tfToBooleanPointer(objAttrs["activation_required"]))
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClientLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupClientLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupClientable {
			tkh, d := tfObjectToTKHRSGroupGroupClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupClient_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroupClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupGlobalRoleInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupGlobalRoleInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupGlobalRoleInfoable
	tkh = keyhubmodel.NewGroupGroupGlobalRoleInfo()
	{
		val, d := tfToSliceList(objAttrs["auditor_group_for"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAuditorGroupFor(val)
	}
	{
		val, d := tfToSliceList(objAttrs["create_group_approve_group_for"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetCreateGroupApproveGroupFor(val)
	}
	{
		val, d := tfToSliceList(objAttrs["enable_tech_admin_approve_group_for"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetEnableTechAdminApproveGroupFor(val)
	}
	{
		val, d := tfToSliceList(objAttrs["recovery_fallback_group_for"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecoveryFallbackGroupFor(val)
	}
	{
		val, d := tfToSliceList(objAttrs["remove_group_approve_group_for"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRemoveGroupApproveGroupFor(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupInfo(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupInfoable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupInfoable
	tkh = keyhubmodel.NewGroupGroupInfo()
	tkh.SetNrAccounts(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_accounts"])))
	tkh.SetNrAccountsWithVault(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_accounts_with_vault"])))
	tkh.SetNrAudits(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_audits"])))
	tkh.SetNrClients(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_clients"])))
	tkh.SetNrProvisionedSystems(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_provisioned_systems"])))
	tkh.SetNrVaultRecords(int64PToInt32P(tfToInt64Pointer(objAttrs["nr_vault_records"])))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupable {
			tkh, d := tfObjectToTKHRSGroupGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerable
	tkh = keyhubmodel.NewGroupGroupPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAdmin(tfToBooleanPointer(objAttrs["admin"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroupPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroupPrimerLinkableWrapperable
	tkh = keyhubmodel.NewGroupGroupPrimerLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupGroupPrimerable {
			tkh, d := tfObjectToTKHRSGroupGroupPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["accounts"]))
		diags.Append(d...)
		tkh.SetAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_clients"]))
		diags.Append(d...)
		tkh.SetAdministeredClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["administered_systems"]))
		diags.Append(d...)
		tkh.SetAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["admins"]))
		diags.Append(d...)
		tkh.SetAdmins(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupAuthorizedGroupsWrapper(ctx, recurse, objAttrs["authorized_groups"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAuthorizedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "group.AuthorizedGroupsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["client_permissions"]))
		diags.Append(d...)
		tkh.SetClientPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGroupGroupClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["clients"]))
		diags.Append(d...)
		tkh.SetClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["content_administered_systems"]))
		diags.Append(d...)
		tkh.SetContentAdministeredSystems(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupGlobalRoleInfo(ctx, recurse, objAttrs["global_roles"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGlobalRoles(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccessInfo(ctx, recurse, objAttrs["group_access_info"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupAccessInfo(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAuditingInfo(ctx, recurse, objAttrs["groupauditinginfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupauditinginfo(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupInfo(ctx, recurse, objAttrs["groupinfo"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupinfo(val)
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectorySummaryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["helpdesk"]))
		diags.Append(d...)
		tkh.SetHelpdesk(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["myaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMyaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupAccount(ctx, recurse, objAttrs["mydelegatedaccount"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMydelegatedaccount(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["nested_groups"]))
		diags.Append(d...)
		tkh.SetNestedGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProfileAccessProfileLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_access_profiles"]))
		diags.Append(d...)
		tkh.SetOwnedAccessProfiles(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSClientClientApplicationLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_clients"]))
		diags.Append(d...)
		tkh.SetOwnedClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSDirectoryAccountDirectoryLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_directories"]))
		diags.Append(d...)
		tkh.SetOwnedDirectories(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx, recurse, objAttrs["owned_groups_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetOwnedGroupsOnSystem(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "provisioning.OwnedGroupOnSystemsWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_organizational_units"]))
		diags.Append(d...)
		tkh.SetOwnedOrganizationalUnits(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["owned_systems"]))
		diags.Append(d...)
		tkh.SetOwnedSystems(val)
	}
	{
		val, d := tfObjectToTKHRSAuditGroupAuditLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["recent_audits"]))
		diags.Append(d...)
		tkh.SetRecentAudits(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := parseCastPointer(objAttrs["requeststatus"].(basetypes.StringValue), keyhubmodel.ParseGroupGroupRequestStatus, func(val any) keyhubmodel.GroupGroupRequestStatus { return *val.(*keyhubmodel.GroupGroupRequestStatus) })
		diags.Append(d...)
		tkh.SetRequeststatus(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSVaultVault(ctx, recurse, objAttrs["vault"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVault(val)
	}
	{
		val, d := tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["webhooks"]))
		diags.Append(d...)
		tkh.SetWebhooks(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupable
	tkh = keyhubmodel.NewGroupProvisioningGroup()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActivationRequired(tfToBooleanPointer(objAttrs["activation_required"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroupLinkableWrapperWithCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroupLinkableWrapperWithCountable
	tkh = keyhubmodel.NewGroupProvisioningGroupLinkableWrapperWithCount()
	tkh.SetCount(tfToInt64Pointer(objAttrs["count"]))
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.GroupProvisioningGroupable {
			tkh, d := tfObjectToTKHRSGroupProvisioningGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupProvisioningGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.GroupProvisioningGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.GroupProvisioningGroup_additionalObjectsable
	tkh = keyhubmodel.NewGroupProvisioningGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSGroupVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetDerived(tfToBooleanPointer(objAttrs["derived"]))
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(tfToStringPointer(objAttrs["filename"]))
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(tfToStringPointer(objAttrs["url"]))
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeDefinition(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeDefinitionable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeDefinitionable
	tkh = keyhubmodel.NewIdentityAccountAttributeDefinition()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["format"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeFormat, func(val any) keyhubmodel.IdentityAccountAttributeFormat {
			return *val.(*keyhubmodel.IdentityAccountAttributeFormat)
		})
		diags.Append(d...)
		tkh.SetFormat(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := parseCastPointer(objAttrs["system_definition"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeSystemDefinition, func(val any) keyhubmodel.IdentityAccountAttributeSystemDefinition {
			return *val.(*keyhubmodel.IdentityAccountAttributeSystemDefinition)
		})
		diags.Append(d...)
		tkh.SetSystemDefinition(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSIdentityAccountAttributeDefinition_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeDefinition_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeDefinition_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeDefinition_additionalObjectsable
	tkh = keyhubmodel.NewIdentityAccountAttributeDefinition_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeRule(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeRuleable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeRuleable
	tkh = keyhubmodel.NewIdentityAccountAttributeRule()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAllowOverride(tfToBooleanPointer(objAttrs["allow_override"]))
	tkh.SetAllowSelfService(tfToBooleanPointer(objAttrs["allow_self_service"]))
	{
		val, d := tfObjectToTKHRSIdentityAccountAttributeDefinition(ctx, false, objAttrs["attribute"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttribute(val)
	}
	tkh.SetDefaultValue(tfToStringPointer(objAttrs["default_value"]))
	tkh.SetPriorityDirectory(int64PToInt32P(tfToInt64Pointer(objAttrs["priority_directory"])))
	tkh.SetPriorityExternalSource(int64PToInt32P(tfToInt64Pointer(objAttrs["priority_external_source"])))
	tkh.SetPriorityFormula(int64PToInt32P(tfToInt64Pointer(objAttrs["priority_formula"])))
	tkh.SetPrioritySCIM(int64PToInt32P(tfToInt64Pointer(objAttrs["priority_scim"])))
	tkh.SetScript(tfToStringPointer(objAttrs["script"]))
	tkh.SetUpdateAutomatically(tfToBooleanPointer(objAttrs["update_automatically"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSIdentityAccountAttributeRule_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeRuleLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeRuleLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeRuleLinkableWrapperable
	tkh = keyhubmodel.NewIdentityAccountAttributeRuleLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.IdentityAccountAttributeRuleable {
			tkh, d := tfObjectToTKHRSIdentityAccountAttributeRule(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeRule_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeRule_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeRule_additionalObjectsable
	tkh = keyhubmodel.NewIdentityAccountAttributeRule_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSIdentityAccountAttributeValueSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.IdentityAccountAttributeValueSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.IdentityAccountAttributeValueSummaryable
	tkh = keyhubmodel.NewIdentityAccountAttributeValueSummary()
	{
		val, d := tfObjectToTKHRSIdentityAccountAttributeDefinition(ctx, recurse, objAttrs["attribute"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAttribute(val)
	}
	tkh.SetContext(tfToStringPointer(objAttrs["context"]))
	tkh.SetCurrentValue(tfToStringPointer(objAttrs["current_value"]))
	{
		val, d := tfToTimePointer(objAttrs["date"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetDate(val)
	}
	tkh.SetExpectedValue(tfToStringPointer(objAttrs["expected_value"]))
	{
		val, d := parseCastPointer(objAttrs["source"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeSource, func(val any) keyhubmodel.IdentityAccountAttributeSource {
			return *val.(*keyhubmodel.IdentityAccountAttributeSource)
		})
		diags.Append(d...)
		tkh.SetSource(val)
	}
	{
		val, d := parseCastPointer(objAttrs["status"].(basetypes.StringValue), keyhubmodel.ParseIdentityAccountAttributeValueSelectionStatus, func(val any) keyhubmodel.IdentityAccountAttributeValueSelectionStatus {
			return *val.(*keyhubmodel.IdentityAccountAttributeValueSelectionStatus)
		})
		diags.Append(d...)
		tkh.SetStatus(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadSsoApplicationLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.LaunchpadSsoApplicationLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadSsoApplicationLaunchpadTile()
	tkh.SetUri(tfToStringPointer(objAttrs["uri"]))
	return tkh, diags
}

func tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.LaunchpadVaultRecordLaunchpadTileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	var tkh keyhubmodel.LaunchpadVaultRecordLaunchpadTileable
	tkh = keyhubmodel.NewLaunchpadVaultRecordLaunchpadTile()
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarker(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkerable
	tkh = keyhubmodel.NewMarkItemMarker()
	{
		val, d := parseCastPointer(objAttrs["level"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerLevel, func(val any) keyhubmodel.MarkItemMarkerLevel { return *val.(*keyhubmodel.MarkItemMarkerLevel) })
		diags.Append(d...)
		tkh.SetLevel(val)
	}
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseMarkItemMarkerType, func(val any) keyhubmodel.MarkItemMarkerType { return *val.(*keyhubmodel.MarkItemMarkerType) })
		diags.Append(d...)
		tkh.SetMarkItemMarkerType(val)
	}
	{
		val, d := tfToMap(objAttrs["parameters"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewMarkItemMarker_parameters())
		diags.Append(d...)
		tkh.SetParameters(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSMarkItemMarkers(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.MarkItemMarkersable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.MarkItemMarkersable
	tkh = keyhubmodel.NewMarkItemMarkers()
	{
		val, d := tfToSliceList(objAttrs["markers"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.MarkItemMarkerable {
			tkh, d := tfObjectToTKHRSMarkItemMarker(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSNestedProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	tkh.SetNameInSystem(tfToStringPointer(objAttrs["name_in_system"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(tfToStringPointer(objAttrs["short_name_in_system"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetProvisioningEnabled(tfToBooleanPointer(objAttrs["provisioning_enabled"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationClientApplicationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationClientApplicationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationClientApplicationOrganizationalUnit()
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.OrganizationClientApplicationOrganizationalUnit)).OrganizationOrganizationalUnitPrimer = *(val.(*keyhubmodel.OrganizationOrganizationalUnitPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationClientApplicationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationClientApplicationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationClientApplicationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationClientApplicationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationClientApplicationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationClientApplicationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["auditor_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAuditorGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["create_group_approve_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetCreateGroupApproveGroup(val)
	}
	tkh.SetCreateGroupPlaceholder(tfToStringPointer(objAttrs["create_group_placeholder"]))
	tkh.SetDepth(int64PToInt32P(tfToInt64Pointer(objAttrs["depth"])))
	tkh.SetDescription(tfToStringPointer(objAttrs["description"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["enable_tech_admin_approve_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetEnableTechAdminApproveGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["recovery_fallback_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRecoveryFallbackGroup(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["remove_group_approve_group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetRemoveGroupApproveGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnit(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitPrimerLinkableWrapperable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitPrimerLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.OrganizationOrganizationalUnitPrimerable {
			tkh, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnitSettings(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnitSettingsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnitSettingsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnitSettings()
	{
		val, d := tfObjectToTKHRSGroupGroupPrimer(ctx, recurse, objAttrs["create_group_approve_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCreateGroupApproveGroup(val)
	}
	tkh.SetCreateGroupPlaceholder(tfToStringPointer(objAttrs["create_group_placeholder"]))
	{
		val, d := tfObjectToTKHRSGroupGroupPrimer(ctx, recurse, objAttrs["enable_tech_admin_approve_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetEnableTechAdminApproveGroup(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupPrimer(ctx, recurse, objAttrs["recovery_fallback_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRecoveryFallbackGroup(val)
	}
	{
		val, d := tfObjectToTKHRSGroupGroupPrimer(ctx, recurse, objAttrs["remove_group_approve_group"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetRemoveGroupApproveGroup(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSOrganizationOrganizationalUnit_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.OrganizationOrganizationalUnit_additionalObjectsable
	tkh = keyhubmodel.NewOrganizationOrganizationalUnit_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["create_as_parent_of"]))
		diags.Append(d...)
		tkh.SetCreateAsParentOf(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSOrganizationOrganizationalUnitSettings(ctx, recurse, objAttrs["settings"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSettings(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfile(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileable
	tkh = keyhubmodel.NewProfileAccessProfile()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetActivateRuleScript(tfToStringPointer(objAttrs["activate_rule_script"]))
	tkh.SetDescription(tfToStringPointer(objAttrs["description"]))
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetMatchRuleScript(tfToStringPointer(objAttrs["match_rule_script"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfile_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileAccountable
	tkh = keyhubmodel.NewProfileAccessProfileAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProfileAccessProfileAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parseCastPointer(objAttrs["activation"].(basetypes.StringValue), keyhubmodel.ParseProfileAccessProfileAccountActivation, func(val any) keyhubmodel.ProfileAccessProfileAccountActivation {
			return *val.(*keyhubmodel.ProfileAccessProfileAccountActivation)
		})
		diags.Append(d...)
		tkh.SetActivation(val)
	}
	tkh.SetManual(tfToBooleanPointer(objAttrs["manual"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileAccountWithAttributes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileAccountWithAttributesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesable
	tkh = keyhubmodel.NewProfileAccessProfileAccountWithAttributes()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProfileAccessProfileAccountWithAttributes)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	{
		val, d := parseCastPointer(objAttrs["activation"].(basetypes.StringValue), keyhubmodel.ParseProfileAccessProfileAccountActivation, func(val any) keyhubmodel.ProfileAccessProfileAccountActivation {
			return *val.(*keyhubmodel.ProfileAccessProfileAccountActivation)
		})
		diags.Append(d...)
		tkh.SetActivation(val)
	}
	tkh.SetManual(tfToBooleanPointer(objAttrs["manual"]))
	{
		val, d := tfToSliceList(objAttrs["attributes"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.IdentityAccountAttributeValueSummaryable {
			tkh, d := tfObjectToTKHRSIdentityAccountAttributeValueSummary(ctx, false, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileAccountWithAttributesLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileAccountWithAttributesLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileAccountWithAttributesLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileAccountWithAttributesLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileAccountWithAttributesable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileAccountWithAttributes(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileAccount_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClient(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileClientable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileClientable
	tkh = keyhubmodel.NewProfileAccessProfileClient()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findProfileAccessProfilePrimerByUUID(ctx, objAttrs["access_profile_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccessProfile(val)
	}
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileClient_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClientLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileClientLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileClientLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileClientLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileClientable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileClient(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileClient_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileClient_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileClient_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileClient_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileGroupable
	tkh = keyhubmodel.NewProfileAccessProfileGroup()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findProfileAccessProfilePrimerByUUID(ctx, objAttrs["access_profile_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccessProfile(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileGroupLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileGroupLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileGroupable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileGroup_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileable {
			tkh, d := tfObjectToTKHRSProfileAccessProfile(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfilePrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfilePrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfilePrimerable
	tkh = keyhubmodel.NewProfileAccessProfilePrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioning(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileProvisioningable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileProvisioningable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findProfileAccessProfilePrimerByUUID(ctx, objAttrs["access_profile_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccessProfile(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, false, objAttrs["group_on_system"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGroupOnSystem(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProfileAccessProfileProvisioning_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioningLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileProvisioningable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileProvisioning(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapperWithCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileProvisioningLinkableWrapperWithCountable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioningLinkableWrapperWithCount()
	tkh.SetCount(tfToInt64Pointer(objAttrs["count"]))
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProfileAccessProfileProvisioningable {
			tkh, d := tfObjectToTKHRSProfileAccessProfileProvisioning(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfileProvisioning_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfileProvisioning_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfileProvisioning_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProfileAccessProfile_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProfileAccessProfile_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProfileAccessProfile_additionalObjectsable
	tkh = keyhubmodel.NewProfileAccessProfile_additionalObjects()
	{
		val, d := tfObjectToTKHRSProfileAccessProfileAccountWithAttributesLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["accounts_with_attributes"]))
		diags.Append(d...)
		tkh.SetAccountsWithAttributes(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSIdentityAccountAttributeRuleLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["attribute_rules"]))
		diags.Append(d...)
		tkh.SetAttributeRules(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSProfileAccessProfileClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["clients"]))
		diags.Append(d...)
		tkh.SetClients(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProfileAccessProfileGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["provisioning"]))
		diags.Append(d...)
		tkh.SetProvisioning(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningAbstractProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningAbstractProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningAbstractProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningAbstractProvisionedLDAP()
	{
		val, d := tfToMap(objAttrs["attributes"].(basetypes.MapValue), func(val attr.Value, diags *diag.Diagnostics) any {
			return val.(basetypes.StringValue).ValueString()
		}, keyhubmodel.NewProvisioningAbstractProvisionedLDAP_attributes())
		diags.Append(d...)
		tkh.SetAttributes(val)
	}
	tkh.SetBaseDN(tfToStringPointer(objAttrs["base_dn"]))
	tkh.SetBindDN(tfToStringPointer(objAttrs["bind_dn"]))
	tkh.SetBindPassword(tfToStringPointer(objAttrs["bind_password"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetFailoverHost(tfToStringPointer(objAttrs["failover_host"]))
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["failover_trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetFailoverTrustedCertificate(val)
	}
	tkh.SetGroupDN(tfToStringPointer(objAttrs["group_dn"]))
	tkh.SetHost(tfToStringPointer(objAttrs["host"]))
	tkh.SetObjectClasses(tfToStringPointer(objAttrs["object_classes"]))
	tkh.SetPort(int64PToInt32P(tfToInt64Pointer(objAttrs["port"])))
	tkh.SetServiceAccountDN(tfToStringPointer(objAttrs["service_account_dn"]))
	{
		val, d := parseCastPointer(objAttrs["ssh_public_key_support"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPSshPublicKeySupport, func(val any) keyhubmodel.ProvisioningLDAPSshPublicKeySupport {
			return *val.(*keyhubmodel.ProvisioningLDAPSshPublicKeySupport)
		})
		diags.Append(d...)
		tkh.SetSshPublicKeySupport(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	tkh.SetUserDN(tfToStringPointer(objAttrs["user_dn"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningCircuitBreakerStatisticsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningCircuitBreakerStatisticsable
	tkh = keyhubmodel.NewProvisioningCircuitBreakerStatistics()
	tkh.SetNumberOfFailedCalls(tfToInt64Pointer(objAttrs["number_of_failed_calls"]))
	tkh.SetNumberOfNotPermittedCalls(tfToInt64Pointer(objAttrs["number_of_not_permitted_calls"]))
	tkh.SetNumberOfSuccessfulCalls(tfToInt64Pointer(objAttrs["number_of_successful_calls"]))
	{
		val, d := parseCastPointer(objAttrs["state"].(basetypes.StringValue), keyhubmodel.ParseProvisioningCircuitBreakerState, func(val any) keyhubmodel.ProvisioningCircuitBreakerState {
			return *val.(*keyhubmodel.ProvisioningCircuitBreakerState)
		})
		diags.Append(d...)
		tkh.SetState(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	tkh.SetNameInSystem(tfToStringPointer(objAttrs["name_in_system"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(tfToStringPointer(objAttrs["short_name_in_system"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetProvisioningEnabled(tfToBooleanPointer(objAttrs["provisioning_enabled"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemPrimerable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	tkh.SetNameInSystem(tfToStringPointer(objAttrs["name_in_system"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(tfToStringPointer(objAttrs["short_name_in_system"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystemTypesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystemTypesable
	tkh = keyhubmodel.NewProvisioningGroupOnSystemTypes()
	{
		val, d := tfToSliceList(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
				return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
			})
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningGroupOnSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningGroupOnSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningGroupOnSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSProfileAccessProfileProvisioningLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, objAttrs["access_profile_provisioning"]))
		diags.Append(d...)
		tkh.SetAccessProfileProvisioning(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSGroupProvisioningGroupLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, objAttrs["provgroups"]))
		diags.Append(d...)
		tkh.SetProvgroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(ctx, recurse, toItemsList(ctx, objAttrs["service_accounts"]))
		diags.Append(d...)
		tkh.SetServiceAccounts(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapperWithCount"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningOwnedGroupOnSystemsWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningOwnedGroupOnSystemsWrapperable
	tkh = keyhubmodel.NewProvisioningOwnedGroupOnSystemsWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningGroupOnSystemable {
			tkh, d := tfObjectToTKHRSProvisioningGroupOnSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	tkh.SetUnlinkedCount(tfToInt64Pointer(objAttrs["unlinked_count"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequenceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequenceable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	tkh.SetNextID(tfToInt64Pointer(objAttrs["next_id"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionNumberSequence_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionNumberSequence_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionNumberSequence_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["systems"]))
		diags.Append(d...)
		tkh.SetSystems(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAD(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedADable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedADable
	tkh = keyhubmodel.NewProvisioningProvisionedAD()
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccountable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount()
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		if val != nil {
			dtype := tkh.GetTypeEscaped()
			(*tkh.(*keyhubmodel.ProvisioningProvisionedAccount)).AuthAccountPrimer = *(val.(*keyhubmodel.AuthAccountPrimer))
			tkh.SetTypeEscaped(dtype)
		}
	}
	tkh.SetUid(tfToInt64Pointer(objAttrs["uid"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAccount_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureOIDCDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureOIDCDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureOIDCDirectory()
	tkh.SetAccountsWritable(tfToBooleanPointer(objAttrs["accounts_writable"]))
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(tfToStringPointer(objAttrs["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureSyncLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureSyncLDAPDirectory()
	tkh.SetClientId(tfToStringPointer(objAttrs["client_id"]))
	tkh.SetClientSecret(tfToStringPointer(objAttrs["client_secret"]))
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetTenant(tfToStringPointer(objAttrs["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedAzureTenant(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedAzureTenantable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedAzureTenantable
	tkh = keyhubmodel.NewProvisioningProvisionedAzureTenant()
	tkh.SetClientId(tfToStringPointer(objAttrs["client_id"]))
	tkh.SetClientSecret(tfToStringPointer(objAttrs["client_secret"]))
	tkh.SetIdpDomain(tfToStringPointer(objAttrs["idp_domain"]))
	tkh.SetTenant(tfToStringPointer(objAttrs["tenant"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedInternalLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedInternalLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedInternalLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedInternalLDAP()
	{
		val, d := findClientLdapClientByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAP(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAP()
	tkh.SetGid(tfToInt64Pointer(objAttrs["gid"]))
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["gid_numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGidNumbering(val)
	}
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedLDAPDirectory(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedLDAPDirectoryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedLDAPDirectoryable
	tkh = keyhubmodel.NewProvisioningProvisionedLDAPDirectory()
	tkh.SetAccountsWritable(tfToBooleanPointer(objAttrs["accounts_writable"]))
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	tkh.SetGid(tfToInt64Pointer(objAttrs["gid"]))
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["gid_numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetGidNumbering(val)
	}
	tkh.SetGroupDN(tfToStringPointer(objAttrs["group_dn"]))
	{
		val, d := parseCastPointer(objAttrs["hashing_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPPasswordHashingScheme, func(val any) keyhubmodel.ProvisioningLDAPPasswordHashingScheme {
			return *val.(*keyhubmodel.ProvisioningLDAPPasswordHashingScheme)
		})
		diags.Append(d...)
		tkh.SetHashingScheme(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningProvisionNumberSequence(ctx, recurse, objAttrs["numbering"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetNumbering(val)
	}
	{
		val, d := parseCastPointer(objAttrs["sam_account_name_scheme"].(basetypes.StringValue), keyhubmodel.ParseProvisioningADSamAccountNameScheme, func(val any) keyhubmodel.ProvisioningADSamAccountNameScheme {
			return *val.(*keyhubmodel.ProvisioningADSamAccountNameScheme)
		})
		diags.Append(d...)
		tkh.SetSamAccountNameScheme(val)
	}
	{
		val, d := parseCastPointer(objAttrs["ssh_public_key_support"].(basetypes.StringValue), keyhubmodel.ParseProvisioningLDAPSshPublicKeySupport, func(val any) keyhubmodel.ProvisioningLDAPSshPublicKeySupport {
			return *val.(*keyhubmodel.ProvisioningLDAPSshPublicKeySupport)
		})
		diags.Append(d...)
		tkh.SetSshPublicKeySupport(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedNamespace(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedNamespaceable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedNamespaceable
	tkh = keyhubmodel.NewProvisioningProvisionedNamespace()
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["base_system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetBaseSystem(val)
	}
	tkh.SetGroupDN(tfToStringPointer(objAttrs["group_dn"]))
	tkh.SetServiceAccountDN(tfToStringPointer(objAttrs["service_account_dn"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSCIM(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSCIMable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSCIMable
	tkh = keyhubmodel.NewProvisioningProvisionedSCIM()
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(tfToStringPointer(objAttrs["basic_auth_password"]))
	tkh.SetBasicAuthUsername(tfToStringPointer(objAttrs["basic_auth_username"]))
	tkh.SetBearerToken(tfToStringPointer(objAttrs["bearer_token"]))
	tkh.SetCustomHeaderName(tfToStringPointer(objAttrs["custom_header_name"]))
	tkh.SetCustomHeaderValue(tfToStringPointer(objAttrs["custom_header_value"]))
	tkh.SetUrl(tfToStringPointer(objAttrs["url"]))
	{
		val, d := parseCastPointer(objAttrs["vendor_escaped"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSCIMVendor, func(val any) keyhubmodel.ProvisioningProvisionedSCIMVendor {
			return *val.(*keyhubmodel.ProvisioningProvisionedSCIMVendor)
		})
		diags.Append(d...)
		tkh.SetVendorEscaped(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	tkh.SetAdminPermissions(tfToBooleanPointer(objAttrs["admin_permissions"]))
	tkh.SetContentAdminPermissions(tfToBooleanPointer(objAttrs["content_admin_permissions"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetOwnerPermissions(tfToBooleanPointer(objAttrs["owner_permissions"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetAccountCount(int64PToInt32P(tfToInt64Pointer(objAttrs["account_count"])))
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedSystem_cleanupPeriod(ctx, false, objAttrs["cleanup_period"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetCleanupPeriod(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["content_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetContentAdministrator(val)
	}
	{
		val, d := parsePointer(objAttrs["external_uuid"].(basetypes.StringValue), uuid.Parse)
		diags.Append(d...)
		tkh.SetExternalUuid(val)
	}
	{
		val, d := parseCastPointer(objAttrs["group_on_system_provisioning"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemProvisioning, func(val any) keyhubmodel.ProvisioningGroupOnSystemProvisioning {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemProvisioning)
		})
		diags.Append(d...)
		tkh.SetGroupOnSystemProvisioning(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["owner_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOwner(val)
	}
	tkh.SetSelfServiceExistingGroups(tfToBooleanPointer(objAttrs["self_service_existing_groups"]))
	tkh.SetSelfServiceNewGroups(tfToBooleanPointer(objAttrs["self_service_new_groups"]))
	tkh.SetSelfServiceNewNamespaces(tfToBooleanPointer(objAttrs["self_service_new_namespaces"]))
	tkh.SetSelfServiceServiceAccounts(tfToBooleanPointer(objAttrs["self_service_service_accounts"]))
	tkh.SetShouldDestroyUnknownAccounts(tfToBooleanPointer(objAttrs["should_destroy_unknown_accounts"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	tkh.SetUsernamePrefix(tfToStringPointer(objAttrs["username_prefix"]))
	if !objAttrs["abstract_provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningAbstractProvisionedLDAP(ctx, false, objAttrs["abstract_provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningAbstractProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_a_d"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAD(ctx, false, objAttrs["provisioned_a_d"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAD)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_oidc_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureOIDCDirectory(ctx, false, objAttrs["provisioned_azure_oidc_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureOIDCDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_sync_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureSyncLDAPDirectory(ctx, false, objAttrs["provisioned_azure_sync_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureSyncLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_azure_tenant"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedAzureTenant(ctx, false, objAttrs["provisioned_azure_tenant"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedAzureTenant)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_internal_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedInternalLDAP(ctx, false, objAttrs["provisioned_internal_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedInternalLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedLDAP(ctx, false, objAttrs["provisioned_ldap"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAP)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_ldap_directory"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedLDAPDirectory(ctx, false, objAttrs["provisioned_ldap_directory"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedLDAPDirectory)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_namespace"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedNamespace(ctx, false, objAttrs["provisioned_namespace"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedNamespace)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if !objAttrs["provisioned_scim"].IsNull() {
		val, d := tfObjectToTKHRSProvisioningProvisionedSCIM(ctx, false, objAttrs["provisioned_scim"].(basetypes.ObjectValue))
		diags.Append(d...)
		dtype := val.GetTypeEscaped()
		(*val.(*keyhubmodel.ProvisioningProvisionedSCIM)).ProvisioningProvisionedSystem = *tkh.(*keyhubmodel.ProvisioningProvisionedSystem)
		val.SetTypeEscaped(dtype)
		tkh = val
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystem(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	tkh.SetAdminPermissions(tfToBooleanPointer(objAttrs["admin_permissions"]))
	tkh.SetContentAdminPermissions(tfToBooleanPointer(objAttrs["content_admin_permissions"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findOrganizationOrganizationalUnitPrimerByUUID(ctx, objAttrs["organizational_unit_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetOrganizationalUnit(val)
	}
	tkh.SetOwnerPermissions(tfToBooleanPointer(objAttrs["owner_permissions"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningProvisionedSystemType, func(val any) keyhubmodel.ProvisioningProvisionedSystemType {
			return *val.(*keyhubmodel.ProvisioningProvisionedSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningProvisionedSystemPrimerType(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystemPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystemPrimerLinkableWrapperable
	tkh = keyhubmodel.NewProvisioningProvisionedSystemPrimerLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ProvisioningProvisionedSystemPrimerable {
			tkh, d := tfObjectToTKHRSProvisioningProvisionedSystemPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystem_additionalObjectsable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_additionalObjects()
	{
		val, d := tfObjectToTKHRSProvisioningProvisionedAccount(ctx, recurse, objAttrs["account"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSClientOAuth2ClientPermissionWithClientLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["issued_permissions"]))
		diags.Append(d...)
		tkh.SetIssuedPermissions(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	tkh.SetLoginName(tfToStringPointer(objAttrs["login_name"]))
	{
		val, d := tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx, recurse, objAttrs["management_permissions"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetManagementPermissions(val)
	}
	{
		val, d := tfObjectToTKHRSMarkItemMarkers(ctx, recurse, objAttrs["markers"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetMarkers(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningCircuitBreakerStatistics(ctx, recurse, objAttrs["statistics"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetStatistics(val)
	}
	{
		val, d := tfObjectToTKHRSProvisioningGroupOnSystemTypes(ctx, recurse, objAttrs["supported_group_types"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedGroupTypes(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisionedSystem_cleanupPeriod(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisionedSystem_cleanupPeriodable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisionedSystem_cleanupPeriodable
	tkh = keyhubmodel.NewProvisioningProvisionedSystem_cleanupPeriod()
	tkh.SetDays(int64PToInt32P(tfToInt64Pointer(objAttrs["days"])))
	tkh.SetMonths(int64PToInt32P(tfToInt64Pointer(objAttrs["months"])))
	tkh.SetYears(int64PToInt32P(tfToInt64Pointer(objAttrs["years"])))
	return tkh, diags
}

func tfObjectToTKHRSProvisioningProvisioningManagementPermissions(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ProvisioningProvisioningManagementPermissionsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ProvisioningProvisioningManagementPermissionsable
	tkh = keyhubmodel.NewProvisioningProvisioningManagementPermissions()
	tkh.SetCreateNewGroupsAllowed(tfToBooleanPointer(objAttrs["create_new_groups_allowed"]))
	tkh.SetCreateServiceAccountsAllowed(tfToBooleanPointer(objAttrs["create_service_accounts_allowed"]))
	tkh.SetReuseExistingGroupsAllowed(tfToBooleanPointer(objAttrs["reuse_existing_groups_allowed"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountable
	tkh = keyhubmodel.NewServiceaccountServiceAccount()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetDescription(tfToStringPointer(objAttrs["description"]))
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["password_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetPassword(val)
	}
	{
		val, d := parseCastPointer(objAttrs["password_rotation"].(basetypes.StringValue), keyhubmodel.ParseServiceaccountPasswordRotationScheme, func(val any) keyhubmodel.ServiceaccountPasswordRotationScheme {
			return *val.(*keyhubmodel.ServiceaccountPasswordRotationScheme)
		})
		diags.Append(d...)
		tkh.SetPasswordRotation(val)
	}
	tkh.SetSshPublicKey(tfToStringPointer(objAttrs["ssh_public_key"]))
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["technical_administrator_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTechnicalAdministrator(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetDisplayName(tfToStringPointer(objAttrs["display_name"]))
	tkh.SetNameInSystem(tfToStringPointer(objAttrs["name_in_system"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseProvisioningGroupOnSystemType, func(val any) keyhubmodel.ProvisioningGroupOnSystemType {
			return *val.(*keyhubmodel.ProvisioningGroupOnSystemType)
		})
		diags.Append(d...)
		tkh.SetProvisioningGroupOnSystemPrimerType(val)
	}
	tkh.SetShortNameInSystem(tfToStringPointer(objAttrs["short_name_in_system"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroupLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroupLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountGroupable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccountGroup(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountGroup_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountGroup_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccountGroup_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountLinkableWrapperable
	tkh = keyhubmodel.NewServiceaccountServiceAccountLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccount(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountPrimerLinkableWrapperWithCount(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountPrimerLinkableWrapperWithCountable
	tkh = keyhubmodel.NewServiceaccountServiceAccountPrimerLinkableWrapperWithCount()
	tkh.SetCount(tfToInt64Pointer(objAttrs["count"]))
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.ServiceaccountServiceAccountPrimerable {
			tkh, d := tfObjectToTKHRSServiceaccountServiceAccountPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccountSupportedFeatures(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccountSupportedFeaturesable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccountSupportedFeaturesable
	tkh = keyhubmodel.NewServiceaccountServiceAccountSupportedFeatures()
	tkh.SetSshPublicKey(tfToBooleanPointer(objAttrs["ssh_public_key"]))
	return tkh, diags
}

func tfObjectToTKHRSServiceaccountServiceAccount_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.ServiceaccountServiceAccount_additionalObjectsable
	tkh = keyhubmodel.NewServiceaccountServiceAccount_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountGroupLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["groups"]))
		diags.Append(d...)
		tkh.SetGroups(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSGeneratedSecret(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSServiceaccountServiceAccountSupportedFeatures(ctx, recurse, objAttrs["supported_features"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSupportedFeatures(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultPasswordMetadata(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultPasswordMetadataable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultPasswordMetadataable
	tkh = keyhubmodel.NewVaultPasswordMetadata()
	tkh.SetDictionary(tfToBooleanPointer(objAttrs["dictionary"]))
	tkh.SetDuplicate(tfToBooleanPointer(objAttrs["duplicate"]))
	tkh.SetHash(tfToStringPointer(objAttrs["hash"]))
	tkh.SetLength(int64PToInt32P(tfToInt64Pointer(objAttrs["length"])))
	tkh.SetLowerCount(int64PToInt32P(tfToInt64Pointer(objAttrs["lower_count"])))
	tkh.SetNumberCount(int64PToInt32P(tfToInt64Pointer(objAttrs["number_count"])))
	tkh.SetSpecialCount(int64PToInt32P(tfToInt64Pointer(objAttrs["special_count"])))
	tkh.SetStrength(int64PToInt32P(tfToInt64Pointer(objAttrs["strength"])))
	tkh.SetUpperCount(int64PToInt32P(tfToInt64Pointer(objAttrs["upper_count"])))
	return tkh, diags
}

func tfObjectToTKHRSVaultVault(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultable
	tkh = keyhubmodel.NewVaultVault()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	tkh.SetAccessAvailable(tfToBooleanPointer(objAttrs["access_available"]))
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToSliceList(objAttrs["records"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordable {
			tkh, d := findVaultVaultRecordByUUID(ctx, val.(basetypes.StringValue).ValueStringPointer())
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetRecords(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultActivationStatus(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultActivationStatusable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultActivationStatusable
	tkh = keyhubmodel.NewVaultVaultActivationStatus()
	tkh.SetActivated(tfToBooleanPointer(objAttrs["activated"]))
	tkh.SetActivationRequired(tfToBooleanPointer(objAttrs["activation_required"]))
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordable
	tkh = keyhubmodel.NewVaultVaultRecord()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetDerived(tfToBooleanPointer(objAttrs["derived"]))
	{
		val, d := parsePointer2(objAttrs["end_date"].(basetypes.StringValue), serialization.ParseDateOnly)
		diags.Append(d...)
		tkh.SetEndDate(val)
	}
	tkh.SetFilename(tfToStringPointer(objAttrs["filename"]))
	{
		val, d := tfToSliceSet(objAttrs["types"].(basetypes.SetValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultSecretType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseVaultVaultSecretType, func(val any) keyhubmodel.VaultVaultSecretType { return *val.(*keyhubmodel.VaultVaultSecretType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(tfToStringPointer(objAttrs["url"]))
	tkh.SetUsername(tfToStringPointer(objAttrs["username"]))
	{
		val, d := parseCastPointer(objAttrs["warning_period"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordWarningPeriod, func(val any) keyhubmodel.VaultVaultRecordWarningPeriod {
			return *val.(*keyhubmodel.VaultVaultRecordWarningPeriod)
		})
		diags.Append(d...)
		tkh.SetWarningPeriod(val)
	}
	if recurse {
		{
			val, d := tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimer(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerable
	tkh = keyhubmodel.NewVaultVaultRecordPrimer()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := parseCastPointer(objAttrs["color"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultRecordColor, func(val any) keyhubmodel.VaultVaultRecordColor { return *val.(*keyhubmodel.VaultVaultRecordColor) })
		diags.Append(d...)
		tkh.SetColor(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := tfToTimePointer(objAttrs["share_end_time"].(basetypes.StringValue))
		diags.Append(d...)
		tkh.SetShareEndTime(val)
	}
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordPrimerLinkableWrapperable
	tkh = keyhubmodel.NewVaultVaultRecordPrimerLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordPrimerable {
			tkh, d := tfObjectToTKHRSVaultVaultRecordPrimer(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordSecrets(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordSecretsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordSecretsable
	tkh = keyhubmodel.NewVaultVaultRecordSecrets()
	tkh.SetComment(tfToStringPointer(objAttrs["comment"]))
	tkh.SetFile(tfToStringPointer(objAttrs["file"]))
	tkh.SetPassword(tfToStringPointer(objAttrs["password"]))
	tkh.SetTotp(tfToStringPointer(objAttrs["totp"]))
	tkh.SetTotpKey(tfToStringPointer(objAttrs["totp_key"]))
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShare(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareable
	tkh = keyhubmodel.NewVaultVaultRecordShare()
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := parseCastPointer(objAttrs["type"].(basetypes.StringValue), keyhubmodel.ParseVaultVaultHolderType, func(val any) keyhubmodel.VaultVaultHolderType { return *val.(*keyhubmodel.VaultVaultHolderType) })
		diags.Append(d...)
		tkh.SetVaultVaultRecordShareType(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecordShareSummary(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecordShareSummaryable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecordShareSummaryable
	tkh = keyhubmodel.NewVaultVaultRecordShareSummary()
	{
		val, d := tfToSliceList(objAttrs["children"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.VaultVaultRecordShareable {
			tkh, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetChildren(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShare(ctx, recurse, objAttrs["parent"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetParent(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSVaultVaultRecord_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.VaultVaultRecord_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.VaultVaultRecord_additionalObjectsable
	tkh = keyhubmodel.NewVaultVaultRecord_additionalObjects()
	{
		val, d := tfObjectToTKHRSVaultVaultActivationStatus(ctx, recurse, objAttrs["activation_status"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetActivationStatus(val)
	}
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	tkh.SetDeleteTile(tfToBooleanPointer(objAttrs["delete_tile"]))
	{
		val, d := findVaultVaultRecordPrimerByUUID(ctx, objAttrs["parent_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetParent(val)
	}
	{
		val, d := tfObjectToTKHRSVaultPasswordMetadata(ctx, recurse, objAttrs["password_metadata"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetPasswordMetadata(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordSecrets(ctx, recurse, objAttrs["secret"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetSecret(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordShareSummary(ctx, recurse, objAttrs["share_summary"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetShareSummary(val)
	}
	{
		val, d := tfObjectToTKHRSVaultVaultRecordPrimerLinkableWrapper(ctx, recurse, toItemsList(ctx, objAttrs["shares"]))
		diags.Append(d...)
		tkh.SetShares(val)
		if val != nil {
			val.SetAdditionalData(map[string]any{"$type": "LinkableWrapper"})
		}
	}
	{
		val, d := tfObjectToTKHRSLaunchpadVaultRecordLaunchpadTile(ctx, recurse, objAttrs["tile"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetTile(val)
	}
	{
		val, d := tfObjectToTKHRSLinkable(ctx, recurse, objAttrs["vaultholder"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetVaultholder(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookable
	tkh = keyhubmodel.NewWebhookWebhook()
	{
		val, d := tfToSliceList(objAttrs["links"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.RestLinkable {
			tkh, d := tfObjectToTKHRSRestLink(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetLinks(val)
	}
	{
		val, d := tfToSliceList(objAttrs["permissions"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuthPermissionable {
			tkh, d := tfObjectToTKHRSAuthPermission(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetPermissions(val)
	}
	{
		val, d := findAuthAccountPrimerByUUID(ctx, objAttrs["account_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetAccount(val)
	}
	tkh.SetActive(tfToBooleanPointer(objAttrs["active"]))
	tkh.SetAllTypes(tfToBooleanPointer(objAttrs["all_types"]))
	{
		val, d := parseCastPointer(objAttrs["authentication_scheme"].(basetypes.StringValue), keyhubmodel.ParseHttpAuthenticationScheme, func(val any) keyhubmodel.HttpAuthenticationScheme {
			return *val.(*keyhubmodel.HttpAuthenticationScheme)
		})
		diags.Append(d...)
		tkh.SetAuthenticationScheme(val)
	}
	tkh.SetBasicAuthPassword(tfToStringPointer(objAttrs["basic_auth_password"]))
	tkh.SetBasicAuthUsername(tfToStringPointer(objAttrs["basic_auth_username"]))
	tkh.SetBearerToken(tfToStringPointer(objAttrs["bearer_token"]))
	{
		val, d := findClientClientApplicationPrimerByUUID(ctx, objAttrs["client_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClient(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["client_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetClientCertificate(val)
	}
	tkh.SetCustomHeaderName(tfToStringPointer(objAttrs["custom_header_name"]))
	tkh.SetCustomHeaderValue(tfToStringPointer(objAttrs["custom_header_value"]))
	{
		val, d := findDirectoryAccountDirectoryPrimerByUUID(ctx, objAttrs["directory_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetDirectory(val)
	}
	{
		val, d := findGroupGroupPrimerByUUID(ctx, objAttrs["group_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetGroup(val)
	}
	tkh.SetName(tfToStringPointer(objAttrs["name"]))
	{
		val, d := findProvisioningProvisionedSystemPrimerByUUID(ctx, objAttrs["system_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetSystem(val)
	}
	{
		val, d := parseCastPointer(objAttrs["tls"].(basetypes.StringValue), keyhubmodel.ParseTLSLevel, func(val any) keyhubmodel.TLSLevel { return *val.(*keyhubmodel.TLSLevel) })
		diags.Append(d...)
		tkh.SetTls(val)
	}
	{
		val, d := findCertificateCertificatePrimerByUUID(ctx, objAttrs["trusted_certificate_uuid"].(basetypes.StringValue).ValueStringPointer())
		diags.Append(d...)
		tkh.SetTrustedCertificate(val)
	}
	{
		val, d := tfToSliceList(objAttrs["types"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.AuditAuditRecordType {
			tkh, d := parseCast(val.(basetypes.StringValue), keyhubmodel.ParseAuditAuditRecordType, func(val any) keyhubmodel.AuditAuditRecordType { return *val.(*keyhubmodel.AuditAuditRecordType) })
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetTypes(val)
	}
	tkh.SetUrl(tfToStringPointer(objAttrs["url"]))
	tkh.SetUuid(tfToStringPointer(objAttrs["uuid"]))
	tkh.SetVerbosePayloads(tfToBooleanPointer(objAttrs["verbose_payloads"]))
	if recurse {
		{
			val, d := tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx, false, objVal)
			diags.Append(d...)
			tkh.SetAdditionalObjects(val)
		}
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhookLinkableWrapper(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhookLinkableWrapperable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhookLinkableWrapperable
	tkh = keyhubmodel.NewWebhookWebhookLinkableWrapper()
	{
		val, d := tfToSliceList(objAttrs["items"].(basetypes.ListValue), func(val attr.Value, diags *diag.Diagnostics) keyhubmodel.WebhookWebhookable {
			tkh, d := tfObjectToTKHRSWebhookWebhook(ctx, recurse, val.(basetypes.ObjectValue))
			diags.Append(d...)
			return tkh
		})
		diags.Append(d...)
		tkh.SetItems(val)
	}
	return tkh, diags
}

func tfObjectToTKHRSWebhookWebhook_additionalObjects(ctx context.Context, recurse bool, objVal types.Object) (keyhubmodel.WebhookWebhook_additionalObjectsable, diag.Diagnostics) {
	var diags diag.Diagnostics
	if objVal.IsNull() || objVal.IsUnknown() {
		return nil, diags
	}
	objAttrs := objVal.Attributes()
	var tkh keyhubmodel.WebhookWebhook_additionalObjectsable
	tkh = keyhubmodel.NewWebhookWebhook_additionalObjects()
	{
		val, d := tfObjectToTKHRSAuditInfo(ctx, recurse, objAttrs["audit"].(basetypes.ObjectValue))
		diags.Append(d...)
		tkh.SetAudit(val)
	}
	return tkh, diags
}
